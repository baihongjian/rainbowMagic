var Ntry = {
    block: {}
};
Blockly.Blocks.maze_step_start = {
    init: function() {
        this.setColour("#3BBD70");
        this.appendDummyInput().appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/block_icon/start_icon_play.png","*","start")).appendField("\uc2dc\uc791\ud558\uae30\ub97c \ud074\ub9ad\ud588\uc744 \ub54c");
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_start = function(a, b) {
    return b.callReturn();
}
;
Blockly.Blocks.maze_step_jump = {
    init: function() {
        this.setColour("#FF6E4B");
        this.appendDummyInput().appendField(Lang.Menus.jump_over).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/jump.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_jump = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
    b.isStart = !0;
    b.isAction = !0;
    d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    if (Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.WALL
    }).length) {
        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALL_CRASH),
        b;
    }
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, function() {
        b.isAction = !1;
    });
    return b;
}
;
Blockly.Blocks.maze_step_move_step = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField(Lang.Menus.maze_move_forward).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/moveStep.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_move_step = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
        b.isAction = !1;
    });
    return b;
}
;
Blockly.Blocks.maze_step_rotate = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField(Lang.Menus.turn_en);
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Menus.turn_left, "LEFT"], [Lang.Menus.turn_right, "RIGHT"]]), "VALUE");
        this.appendDummyInput().appendField(Lang.Menus.turn_ko).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/turnL.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_rotate = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    var c = function() {
        b.isAction = !1;
    };
    "LEFT" == b.getField("VALUE") ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, c) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, c);
    return b;
}
;
Blockly.Blocks.maze_step_for = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Blocks.FLOW_repeat_basic_1);
        this.appendDummyInput().appendField(new Blockly.FieldTextInput(""), "VALUE");
        this.appendDummyInput().appendField(Lang.Blocks.FLOW_repeat_basic_2).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("DO");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_for = function(a, b) {
    var c;
    if (!b.isLooped) {
        b.isLooped = !0;
        c = b.getField("VALUE", b);
        if (0 > c) {
            throw Error(Lang.Blocks.FLOW_repeat_basic_errorMsg);
        }
        b.iterCount = Math.floor(c);
    }
    if (0 == b.iterCount || 0 > b.iterCount) {
        return delete b.isLooped,
        delete b.iterCount,
        returnBlock = b.callReturn();
    }
    b.iterCount--;
    return b.getStatement("DO", b);
}
;
Blockly.Blocks.maze_step_for_true_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.repeat_until_en);
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/block_inner/repeat_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField(Lang.Menus.repeat_until_ko).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_for_true_1 = function(a, b) {
    if (b.isRooped) {
        return delete b.isRooped,
        b;
    }
    b.isRooped = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_step_if_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_1);
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/block_inner/if_target_1.png",22,22,"conical"));
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_2).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_if_1 = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    if (0 == Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }).length) {
        return b.getStatement("STACK", b);
    }
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.WALL
    });
    if (!b.getStatement("STACK", b)) {
        return null;
    }
    if (0 == c.length) {
        return b.callReturn();
    }
    b.isLooped = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_step_if_2 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/bitmap/maze2/obstacle_01.png",22,22,"conical"));
        this.appendDummyInput().appendField("\uc788\ub2e4\uba74").appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_if_2 = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.OBSTACLE_BEE
    });
    if (!b.getStatement("STACK", b)) {
        return null;
    }
    if (0 == c.length) {
        return b.callReturn();
    }
    b.isLooped = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_step_if_3 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_1);
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/block_inner/if_target_3.png",22,22,"conical"));
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_2).appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_if_3 = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.OBSTACLE_BANANA
    });
    if (!b.getStatement("STACK", b)) {
        return null;
    }
    if (0 == c.length) {
        return b.callReturn();
    }
    b.isLooped = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_repeat_until_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ubaa8\ub4e0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/block_inner/repeat_until_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField("\ub97c \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5").appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_repeat_until_1 = function(a, b) {
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_repeat_until_2 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ubaa8\ub4e0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("https://playentry.org/img/assets/ntry/block_inner/repeat_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField("\ub97c \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5").appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_repeat_until_2 = function(a, b) {
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_define_function = {
    init: function() {
        this.setColour("#B57242");
        this.appendDummyInput().appendField("\uc57d\uc18d\ud558\uae30").appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/function.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_define_function = function(a, b) {
    if (b.isStart) {
        return delete b.isStart,
        b.callReturn();
    }
    b.isStart = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.maze_call_function = {
    init: function() {
        this.setColour("#B57242");
        this.appendDummyInput().appendField("\uc57d\uc18d \ubd88\ub7ec\uc624\uae30").appendField(new Blockly.FieldIcon("https://playentry.org/img/assets/week/blocks/function.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_call_function = function(a, b) {
    if (b.thread) {
        var c = Ntry.computeThread(a, b.thread);
        if (c) {
            return b.thread = c,
            b;
        }
        delete b.thread;
        return b.callReturn();
    }
    c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SCRIPT_CONTAINER);
    b.thread = new Ntry.Script(a);
    b.thread.register = b.values;
    for (var c = Blockly.Xml.textToDom(c.script), d = 0; d < c.childNodes.length; d++) {
        "maze_define_unfunction" == c.childNodes[d].getAttribute("type") && b.thread.init(c.childNodes[d]);
    }
    return b;
}
;
Blockly.Blocks.number = {
    init: function() {
        this.setColour("#FFD974");
        this.appendDummyInput().appendField(new Blockly.FieldTextInput(""), "NUM");
        this.setOutput(!0, "Number");
        this.setInputsInline(!0);
        this.setTooltip(Blockly.Msg.MATH_NUMBER_TOOLTIP);
    }
};
Ntry.block.number = function(a, b) {
    return b.fields.NUM;
}
;
Blockly.Blocks.True = {
    init: function() {
        this.setColour("#2FC9F0");
        this.appendDummyInput().appendField(Lang.Blocks.JUDGEMENT_true, "#3D3D3D").appendField(" ");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.True = function(a, b) {
    return !0;
}
;
Blockly.Blocks.True_un = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Blocks.JUDGEMENT_true, "#3D3D3D").appendField(" ");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.True_un = Ntry.block.True;
Blockly.Blocks.maze_step_unstart = {
    init: function() {
        this.setColour("#37bd79");
        this.appendDummyInput().appendField(new Blockly.FieldIcon("/img/assets/week/blocks/start_un.png","*","start")).appendField(Lang.Menus.maze_when_run);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unstart = Ntry.block.maze_step_start;
Blockly.Blocks.maze_step_move_unstep = {
    init: function() {
        this.setColour("#cc9df9");
        this.appendDummyInput().appendField(Lang.Menus.maze_move_forward).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/move_right_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_move_unstep = Ntry.block.maze_step_move_step;
Blockly.Blocks.maze_step_unjump = {
    init: function() {
        this.setColour("#fcab9d");
        this.appendDummyInput().appendField(Lang.Menus.jump_over).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/jump_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unjump = Ntry.block.maze_step_jump;
Blockly.Blocks.maze_step_unrotate = {
    init: function() {
        this.setColour("#cc9df9");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([["\uc67c\ucabd", "LEFT"], ["\uc624\ub978\ucabd", "RIGHT"]]), "VALUE");
        this.appendDummyInput().appendField("\uc73c\ub85c \ud68c\uc804").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/left_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unrotate = Ntry.block.maze_step_rotate;
Blockly.Blocks.maze_step_unfor = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Blocks.FLOW_repeat_basic_1);
        this.appendDummyInput().appendField(new Blockly.FieldTextInput(""), "VALUE");
        this.appendDummyInput().appendField(Lang.Blocks.FLOW_repeat_basic_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/repeat_un.png","*","endOrigin"));
        this.appendStatementInput("DO");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unfor = Ntry.block.maze_step_for;
Blockly.Blocks.maze_step_unfor_true_2 = {
    init: function() {
        this.setColour("#E5E5E5");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/repeat_goal_2.png",22,22,"conical"));
        this.appendDummyInput().appendField("\ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5", "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/un_for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unfor_true_2 = function(a, b) {}
;
Blockly.Blocks.maze_step_unif_1 = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_1);
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/if_target_1.png",22,22,"conical"));
        this.appendDummyInput().appendField(Lang.Menus.if_there_is_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if_un.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unif_1 = Ntry.block.maze_step_if_1;
Blockly.Blocks.maze_step_unif_2 = {
    init: function() {
        this.setColour("#E5E5E5");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0", "#000000");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/if_target_2.png",22,22,"conical"));
        this.appendDummyInput().appendField("\uc788\ub2e4\uba74", "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/un_if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unif_2 = Ntry.block.maze_step_if_2;
Blockly.Blocks.maze_step_if_4 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0", "#FFFFFF");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/if_target_2.png",22,22,"conical"));
        this.appendDummyInput().appendField("\uc788\ub2e4\uba74", "#FFFFFF").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_if_4 = Ntry.block.maze_step_if_1;
Blockly.Blocks.maze_step_unif_3 = {
    init: function() {
        this.setColour("#E5E5E5");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0", "#000000");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/if_target_3.png",22,22,"conical"));
        this.appendDummyInput().appendField("\uc788\ub2e4\uba74", "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/un_if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unif_3 = Ntry.block.maze_step_if_3;
Blockly.Blocks.maze_repeat_ununtil_1 = {
    init: function() {
        this.setColour("#E5E5E5");
        this.appendDummyInput().appendField("\ubaa8\ub4e0", "#000000");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/repeat_until_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField("\ub97c \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5", "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/un_for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_repeat_ununtil_1 = Ntry.block.maze_repeat_until_1;
Blockly.Blocks.maze_repeat_ununtil_2 = {
    init: function() {
        this.setColour("#E5E5E5");
        this.appendDummyInput().appendField("\ubaa8\ub4e0", "#000000");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/repeat_until_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField("\ub97c \ub9cc\ub0a0 \ub54c \uae4c\uc9c0 \ubc18\ubcf5(2)", "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/un_for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_repeat_ununtil_2 = Ntry.block.maze_repeat_until_2;
Blockly.Blocks.maze_define_unfunction = {
    init: function() {
        this.setColour("#efc2a3");
        this.appendDummyInput().appendField("\uc57d\uc18d\ud558\uae30").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/function_un.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_define_unfunction = Ntry.block.maze_define_function;
Blockly.Blocks.maze_call_unfunction = {
    init: function() {
        this.setColour("#efc2a3");
        this.appendDummyInput().appendField("\uc57d\uc18d \ubd88\ub7ec\uc624\uae30").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/function_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_call_unfunction = Ntry.block.maze_call_function;
Blockly.Blocks.maze_step_unfor_true_1 = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/repeat_goal_1.png",22,22,"conical"));
        this.appendDummyInput().appendField(Lang.Menus.repeat_until, "#000000").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/repeat_un.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.maze_step_unfor_true_1 = Ntry.block.maze_step_for_true_1;
Blockly.Blocks.number_un = {
    init: function() {
        this.setColour("#ffedc5");
        this.appendDummyInput().appendField(new Blockly.FieldTextInput(""), "NUM");
        this.setOutput(!0, "Number");
        this.setInputsInline(!0);
        this.setTooltip(Blockly.Msg.MATH_NUMBER_TOOLTIP);
    }
};
Ntry.block.number_un = Ntry.block.number;
Ntry.aiBlock = {};
Blockly.Blocks.ai_start = {
    init: function() {
        this.setColour("#3BBD70");
        this.appendDummyInput().appendField(new Blockly.FieldIcon("/img/assets/block_icon/start_icon_play.png","*","start")).appendField(Lang.Menus.maze_when_run);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_start = function(a, b) {
    return b.callReturn();
}
;
Blockly.Blocks.ai_move_right = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_forward).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/moveStep.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_right = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("gridChange", function() {
        b.isAction = !1;
    });
    Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.EAST;
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
    Ntry.entityManager.addComponent(a.id, {
        type: Ntry.STATIC.ANIMATE,
        animateType: Ntry.STATIC.ROTATE_TO,
        animateValue: 0
    });
    c.x++;
    return b;
}
;
Blockly.Blocks.ai_move_up = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_above).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/ai_move_up.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_up = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("gridChange", function() {
        b.isAction = !1;
    });
    Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.NORTH;
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
    Ntry.entityManager.addComponent(a.id, {
        type: Ntry.STATIC.ANIMATE,
        animateType: Ntry.STATIC.ROTATE_TO,
        animateValue: -45
    });
    c.x++;
    c.y--;
    return b;
}
;
Blockly.Blocks.ai_move_down = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_under).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/ai_move_down.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_down = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("gridChange", function() {
        b.isAction = !1;
    });
    Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.SOUTH;
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
    Ntry.entityManager.addComponent(a.id, {
        type: Ntry.STATIC.ANIMATE,
        animateType: Ntry.STATIC.ROTATE_TO,
        animateValue: 45
    });
    c.x++;
    c.y++;
    return b;
}
;
Blockly.Blocks.ai_repeat_until_reach = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.ai_repeat_until_dest).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_repeat_until_reach = function(a, b) {
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.ai_if_else_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_front_1);
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/bitmap/ai/obstacle_1.png",22,22,"meteo"));
        this.appendDummyInput().appendField(Lang.Menus.ai_if_front_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField(Lang.Menus.ai_else);
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_if_else_1 = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.RADAR);
    b.isLooped = !0;
    return c.center.type == Ntry.STATIC.AI_METEO && 1 == c.center.distance ? b.getStatement("STACK_IF", b) : b.getStatement("STACK_ELSE", b);
}
;
Blockly.Blocks.ai_if_else_2 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_1);
        this.appendValueInput("BOOL").setCheck("Boolean");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField(Lang.Menus.ai_else);
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_if_else_2 = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = b.getBooleanValue("BOOL", b);
    b.isLooped = !0;
    return c ? b.getStatement("STACK_IF", b) : b.getStatement("STACK_ELSE", b);
}
;
Blockly.Blocks.ai_boolean_distance = {
    init: function() {
        this.setColour("#2fc9f0");
        this.appendDummyInput().appendField(" ", "#3D3D3D").appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_radar, "#ffffff");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[">", "BIGGER"], [">=", "BIGGER_EQUAL"], ["=", "EQUAL"], ["<", "SMALLER"], ["<=", "SMALLER_EQUAL"]]), "OPERATOR");
        this.appendValueInput("DATA").setCheck(["Number", "String"]);
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_distance = function(a, b) {
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.RADAR), d = b.getField("DIRECTION"), e = b.getField("OPERATOR"), f = b.getValue("DATA"), g;
    switch (d) {
    case "UP":
        g = c.left;
        break;
    case "RIGHT":
        g = c.center;
        break;
    case "DOWN":
        g = c.right;
    }
    g = g.type == Ntry.STATIC.AI_GOAL ? Number.MAX_VALUE : g.distance;
    switch (e) {
    case "BIGGER":
        return g > f;
    case "BIGGER_EQUAL":
        return g >= f;
    case "EQUAL":
        return g == f;
    case "SMALLER":
        return g < f;
    case "SMALLER_EQUAL":
        return g <= f;
    }
}
;
Blockly.Blocks.ai_distance_value = {
    init: function() {
        this.setColour("#ffd974");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_radar, "#000000");
        this.setOutput(!0, "Number");
        this.setInputsInline(!0);
    }
};
Ntry.block.ai_distance_value = function(a, b) {
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.RADAR)
      , d = b.getField("DIRECTION");
    b.getField("OPERATOR");
    b.getField("VALUE");
    var e;
    switch (d) {
    case "UP":
        e = c.left;
        break;
    case "RIGHT":
        e = c.center;
        break;
    case "DOWN":
        e = c.right;
    }
    return e = e.type == Ntry.STATIC.AI_GOAL ? Number.MAX_VALUE : e.distance;
}
;
Blockly.Blocks.ai_boolean_object = {
    init: function() {
        this.setColour("#2FC9F0");
        this.appendDummyInput().appendField(" ", "#3D3D3D").appendField(Lang.Menus.ai_object_is_1, "#ffffff").appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_object_is_2, "#ffffff");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Menus.asteroids, "OBSTACLE"], [Lang.Menus.wall, "WALL"], [Lang.Menus.item, "ITEM"]]), "OBJECT");
        this.appendDummyInput().appendField(Lang.Menus.ai_object_is_3, "#ffffff");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_object = function(a, b) {
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.RADAR)
      , d = b.getField("DIRECTION")
      , e = b.getField("OBJECT");
    b.getField("VALUE");
    var f;
    switch (d) {
    case "UP":
        f = c.left;
        break;
    case "RIGHT":
        f = c.center;
        break;
    case "DOWN":
        f = c.right;
    }
    f = f.type;
    switch (e) {
    case "OBSTACLE":
        return f == Ntry.STATIC.AI_METEO;
    case "WALL":
        return f == Ntry.STATIC.AI_WALL;
    case "ITEM":
        return f == Ntry.STATIC.AI_ITEM;
    }
}
;
Blockly.Blocks.ai_use_item = {
    init: function() {
        this.setColour("#EACF11");
        this.appendDummyInput().appendField(Lang.Menus.ai_use_item).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/item.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setPreviousStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_use_item = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    Ntry.dispatchEvent("triggerWeapon");
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("gridChange", function() {
        b.isAction = !1;
    });
    Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.EAST;
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
    Ntry.entityManager.addComponent(a.id, {
        type: Ntry.STATIC.ANIMATE,
        animateType: Ntry.STATIC.ROTATE_TO,
        animateValue: 0
    });
    c.x++;
    return b;
}
;
Blockly.Blocks.ai_boolean_and = {
    init: function() {
        this.setColour("#2fc9f0");
        this.appendValueInput("LEFTHAND").setCheck("Boolean");
        this.appendDummyInput().appendField(Lang.Blocks.JUDGEMENT_boolean_and, "#ffffff");
        this.appendValueInput("RIGHTHAND").setCheck("Boolean");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_and = function(a, b) {
    var c = b.getBooleanValue("LEFTHAND", b)
      , d = b.getBooleanValue("RIGHTHAND", b);
    return c && d;
}
;
var unColor = "#E5E5E5";
Blockly.Blocks.ai_start_un = {
    init: function() {
        this.setColour("#78dda6");
        this.appendDummyInput().appendField(new Blockly.FieldIcon("/img/assets/week/blocks/start_un.png","*","start")).appendField(Lang.Menus.maze_when_run);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_start_un = Ntry.block.ai_start;
Blockly.Blocks.ai_move_right_un = {
    init: function() {
        this.setColour("#cc9df9");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_forward).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/move_right_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_right_un = Ntry.block.ai_move_right;
Blockly.Blocks.ai_move_up_un = {
    init: function() {
        this.setColour("#cc9df9");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_above).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/ai_move_up_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_up_un = Ntry.block.ai_move_up;
Blockly.Blocks.ai_move_down_un = {
    init: function() {
        this.setColour("#cc9df9");
        this.appendDummyInput().appendField(Lang.Menus.ai_move_under).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/ai_move_down_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_move_down_un = Ntry.block.ai_move_down;
Blockly.Blocks.ai_repeat_until_reach_un = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Menus.ai_repeat_until_dest).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/repeat_un.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_repeat_until_reach_un = Ntry.block.ai_repeat_until_reach;
Blockly.Blocks.ai_if_else_1_un = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_front_1);
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/bitmap/ai/obstacle_1.png",22,22,"meteo"));
        this.appendDummyInput().appendField(Lang.Menus.ai_if_front_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if_un.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField(Lang.Menus.ai_else);
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_if_else_1_un = Ntry.block.ai_if_else_1;
Blockly.Blocks.ai_if_else_2_un = {
    init: function() {
        this.setColour("#abcdf4");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_1);
        this.appendValueInput("BOOL").setCheck("Boolean");
        this.appendDummyInput().appendField(Lang.Menus.ai_if_2).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if_un.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField(Lang.Menus.ai_else);
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_if_else_2_un = Ntry.block.ai_if_else_2;
Blockly.Blocks.ai_boolean_distance_un = {
    init: function() {
        this.setColour("#78edf9");
        this.appendDummyInput().appendField(" ", "#3D3D3D").appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_radar, "#000000");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[">", "BIGGER"], [">=", "BIGGER_EQUAL"], ["=", "EQUAL"], ["<", "SMALLER"], ["<=", "SMALLER_EQUAL"]]), "OPERATOR");
        this.appendValueInput("DATA").setCheck(["Number", "String"]);
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_distance_un = Ntry.block.ai_boolean_distance;
Blockly.Blocks.ai_distance_value_un = {
    init: function() {
        this.setColour("#ffedc5");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_radar, "#000000");
        this.setOutput(!0, "Number");
        this.setInputsInline(!0);
    }
};
Ntry.block.ai_distance_value_un = Ntry.block.ai_distance_value;
Blockly.Blocks.ai_boolean_object_un = {
    init: function() {
        this.setColour("#78edf9");
        this.appendDummyInput().appendField(" ", "#3D3D3D").appendField(Lang.Menus.ai_object_is_1, "#ffffff").appendField(new Blockly.FieldDropdown([[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]]), "DIRECTION");
        this.appendDummyInput().appendField(Lang.Menus.ai_object_is_2, "#ffffff");
        this.appendDummyInput().appendField(new Blockly.FieldDropdown([[Lang.Menus.asteroids, "OBSTACLE"], [Lang.Menus.wall, "WALL"], [Lang.Menus.item, "ITEM"]]), "OBJECT");
        this.appendDummyInput().appendField(Lang.Menus.ai_object_is_3, "#ffffff");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_object_un = Ntry.block.ai_boolean_object;
Blockly.Blocks.ai_use_item_un = {
    init: function() {
        this.setColour("#f4e690");
        this.appendDummyInput().appendField(Lang.Menus.ai_use_item).appendField(new Blockly.FieldIcon("/img/assets/week/blocks/item_un.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setPreviousStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_use_item_un = Ntry.block.ai_use_item;
Blockly.Blocks.ai_boolean_and_un = {
    init: function() {
        this.setColour("#78edf9");
        this.appendValueInput("LEFTHAND").setCheck("Boolean");
        this.appendDummyInput().appendField(Lang.Blocks.JUDGEMENT_boolean_and, "#ffffff");
        this.appendValueInput("RIGHTHAND").setCheck("Boolean");
        this.setOutput(!0, "Boolean");
        this.setInputsInline(!0);
        this.setTooltip("");
    }
};
Ntry.block.ai_boolean_and_un = Ntry.block.ai_boolean_and;
Blockly.Blocks.ebs2015_maze_move_step = {
    init: function() {
        this.setColour("#A751E3");
        this.appendDummyInput().appendField("\uc55e\uc73c\ub85c \ud55c \uce78 \uac00\uae30").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/moveStep.png","*","endOrigin"));
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_move_step = function(a, b) {
    if (b.isStart) {
        if (b.isAction) {
            return b;
        }
        delete b.isAction;
        delete b.isStart;
        return b.callReturn();
    }
    b.isStart = !0;
    b.isAction = !0;
    Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function() {
        b.isAction = !1;
    });
    return b;
}
;
Blockly.Blocks.ebs2015_maze_while_true_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/flag.png",22,22));
        this.appendDummyInput().appendField("\uc5d0 \ub3c4\ucc29\ud560 \ub54c \uae4c\uc9c0 \ubc18\ubcf5").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setPreviousStatement(!0);
        this.setInputsInline(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_while_true_1 = function(a, b) {
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.ebs2015_maze_repeat_until_1 = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ubaa8\ub4e0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/treasure.png",22,22));
        this.appendDummyInput().appendField("\ucc3e\uc744 \ub54c\uae4c\uc9c0 \ubc18\ubcf5").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/for.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_repeat_until_1 = function(a, b) {
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.ebs2015_maze_if_wall = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/wall.png",22,22,"conical"));
        this.appendDummyInput().appendField("\uc788\ub2e4\uba74").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_if_wall = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    if (0 == Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }).length) {
        return b.getStatement("STACK", b);
    }
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.WALL
    });
    if (!b.getStatement("STACK", b)) {
        return null;
    }
    if (0 == c.length) {
        return b.callReturn();
    }
    b.isLooped = !0;
    return b.getStatement("STACK", b);
}
;
Blockly.Blocks.ebs2015_maze_if_else_wall = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/wall.png",22,22,"meteo"));
        this.appendDummyInput().appendField("\uac00 \uc788\ub2e4\uba74").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField("\uc544\ub2c8\uba74");
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_if_else_wall = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    if (0 == Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }).length) {
        return b.getStatement("STACK_IF", b);
    }
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.WALL
    });
    b.isLooped = !0;
    return 0 != c.length ? b.getStatement("STACK_IF", b) : b.getStatement("STACK_ELSE", b);
}
;
Blockly.Blocks.ebs2015_maze_if_else_notice = {
    init: function() {
        this.setColour("#498DEB");
        this.appendDummyInput().appendField("\ub9cc\uc57d \uc55e\uc5d0");
        this.appendDummyInput().appendField(new Blockly.FieldImage("/img/assets/ntry/block_inner/notice.png",22,22,"meteo"));
        this.appendDummyInput().appendField("\uac00 \uc788\ub2e4\uba74").appendField(new Blockly.FieldIcon("/img/assets/week/blocks/if.png","*","endOrigin"));
        this.appendStatementInput("STACK_IF");
        this.appendDummyInput().appendField("\uc544\ub2c8\uba74");
        this.appendStatementInput("STACK_ELSE");
        this.setInputsInline(!0);
        this.setPreviousStatement(!0);
        this.setNextStatement(!0);
        this.setTooltip("");
    }
};
Ntry.block.ebs2015_maze_if_else_notice = function(a, b) {
    if (b.isLooped) {
        return delete b.isLooped,
        b.callReturn();
    }
    var c = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.UNIT)
      , d = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
      , d = {
        x: d.x,
        y: d.y
    };
    Ntry.addVectorByDirection(d, c.direction, 1);
    if (0 == Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }).length) {
        return b.getStatement("STACK_IF", b);
    }
    c = Ntry.entityManager.find({
        type: Ntry.STATIC.GRID,
        x: d.x,
        y: d.y
    }, {
        type: Ntry.STATIC.TILE,
        tileType: Ntry.STATIC.OBSTACLE_NOTICE
    });
    b.isLooped = !0;
    return 0 != c.length ? b.getStatement("STACK_IF", b) : b.getStatement("STACK_ELSE", b);
}
;
Ntry.ConfigManager = function() {
    this.configurations = {};
}
;
(function(a) {
    a.loadConfig = function(b) {
        this.configurations = b;
    }
    ;
    a.setConfig = function(b, c) {
        this.configurations[b] = c;
    }
    ;
    a.getConfig = function(b) {
        return this.configurations[b];
    }
    ;
    a.deleteConfig = function(b) {
        delete this.configurations[b];
    }
    ;
}
)(Ntry.ConfigManager.prototype);
Ntry.EventHandler = {};
Ntry._events = {};
Ntry.addEventListener = function(a, b, c) {
    b = {
        name: a,
        caller: b,
        func: c
    };
    null == this._events[a] && (this._events[a] = []);
    this._events[a].push(b);
    return b;
}
;
Ntry.removeEvent = function(a) {
    var b = this._events[name];
    a = b.indexOf(a);
    -1 < a && b.splice(a, 1);
}
;
Ntry.dispatchEvent = function(a) {
    var b = this._events[a]
      , c = Array.prototype.slice.call(arguments);
    c.shift();
    for (var d in b) {
        var e = b[d];
        e.func.apply(e.caller, c);
    }
}
;
Ntry.InterfaceManager = function() {
    this._view = document.getElementById("ntry");
    this.createDom();
}
;
(function(a) {
    a.updateConfig = function() {
        $(this.getDom("ntryWeek")).addClass(this.getTheme());
    }
    ;
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "ntryLeftCol")
          , c = Ntry.createElement("div", b, "ntryCanvasContainer", "ntryCanvasContainer");
        Ntry.createElement("canvas", c, "canvas");
        Ntry.createElement("div", b, "ntryEngine", "ntryEngine");
        Ntry.createElement("div", b, "ntryHintArea", "ntryHintArea");
        Ntry.createElement("div", this._view, "ntryPlayground", "ntryRightCol");
        Ntry.createElement("div", this._view, "ntryIntroArea", "ntryIntroArea");
        Ntry.createElement("div", this._view, "ntryResultArea", "ntryResultArea");
    }
    ;
    a.removeDom = function() {
        $(this._view).empty();
    }
    ;
    a.getDom = function(b) {
        return document.getElementById(b);
    }
    ;
    a.getTheme = function() {
        var b = Ntry.configManager
          , c = b.getConfig("theme");
        if (c) {
            return c;
        }
        b = b.getConfig("stageId");
        return 20 < b ? "mazeVer4" : 14 < b && 20 >= b ? "mazeVer3" : 6 < b && 15 > b ? "mazeVer2" : "mazeVer1";
    }
    ;
}
)(Ntry.InterfaceManager.prototype);
Ntry.STATIC = {};
(function(a) {
    a.POSITION = 0;
    a.MOTION = 1;
    a.ANIMATION = 2;
    a.BITMAP = 3;
    a.TILE = 4;
    a.GRID = 5;
    a.MESSAGE_HANDLER = 6;
    a.SCRIPT_CONTAINER = 7;
    a.RUNNING_SCRIPT = 8;
    a.RESTORE = 9;
    a.SPRITE = 10;
    a.UNIT = 11;
    a.ITEM = 12;
    a.SPACE_SHIP = 13;
    a.RADAR = 14;
    a.ANIMATE = 15;
    a.SCROLL = 16;
    a.CODE = 17;
    a.ROAD = 0;
    a.WALL = 1;
    a.OBSTACLE_ELECTRIC = 2;
    a.OBSTACLE_BEE = 3;
    a.OBSTACLE_BANANA = 4;
    a.OBSTACLE_METEO = 5;
    a.GOAL = 6;
    a.OBSTACLE_SIGN = 7;
    a.OBSTACLE_NOTICE = 8;
    a.FLOWER = 9;
    a.OBSTACLE_SLOW = 10;
    a.OBSTACLE_REPAIR = 11;
    a.GOAL_ITEM = 0;
    a.AI_GOAL = 1;
    a.AI_METEO = 2;
    a.AI_ITEM = 3;
    a.JR_ITEM = 4;
    a.AI_WALL = 5;
    a.CONSUMABLE_ITEMS = [a.GOAL_ITEM, a.AI_ITEM, a.JR_ITEM];
    a.RESTORE_COMPONENT_TYPES = [a.POSITION];
    a.RESTORE_BLACK_LIST = [a.RUNNING_SCRIPT, a.SCRIPT_CONTAINER, a.RESTORE, a.CODE];
    a.RESTORE_TRUE = !0;
    a.RESTORE_FALSE = !1;
    a.NORTH = 1;
    a.EAST = 2;
    a.SOUTH = 3;
    a.WEST = 4;
    a.RIGHT = 5;
    a.LEFT = 6;
    a.DIRECTION_MAP = [a.WEST, a.NORTH, a.EAST, a.SOUTH, a.WEST, a.NORTH, a.EAST];
    a.STAND = 1;
    a.WALK = 2;
    a.JUMP = 3;
    a.TURN_RIGHT = 4;
    a.TURN_LEFT = 5;
    a.SIMOOROOK = 6;
    a.WALL_CRASH = 7;
    a.BEE_ATTACK = 8;
    a.ELECTRIC_SHOCK = 9;
    a.SLIP = 10;
    a.COMPLETE = 11;
    a.STOP = 12;
    a.SEQUENCE_SIMOOROOK = 13;
    a.GET_ITEM = 14;
    a.WITHOUT_ITEM_SUCCESS = 15;
    a.HALF_ROTATION = 16;
    a.GO_SLOW = 17;
    a.GO_SLOW_CRASH = 18;
    a.ATTACK_LUPIN = 19;
    a.COLLISION = 13;
    a.LOST = 14;
    a.ESSENTIAL_REQUIRED = 19;
    a.OVER_LIMITED_BLOCK = 20;
    a.ROTATE = 1;
    a.ROTATE_TO = 2;
    a.ROTATE_INFINITE = 3;
    a.FADE_OUT = 4;
    a.POP_OUT = 5;
    a.VIBRATE = 6;
    a.getAllBlocks = function() {
        return "maze_step_start maze_step_jump maze_step_move_step maze_step_rotate maze_step_for maze_step_for_true_1 maze_step_for_true_2 maze_step_if_1 maze_step_if_2 maze_step_if_3 maze_repeat_until_1 maze_repeat_until_2 maze_define_function maze_call_function".split(" ");
    }
    ;
    a.blockInfo = {
        maze_step_start: {
            xml: "<block type='maze_step_start'></block>"
        },
        maze_step_jump: {
            xml: "<block type='maze_step_jump'></block>"
        },
        maze_step_move_step: {
            xml: "<block type='maze_step_move_step'></block>"
        },
        maze_step_rotate: {
            xml: "<block type='maze_step_rotate'></block>",
            xmls: ["<block type='maze_step_rotate'><field name='VALUE'>LEFT</field></block>", "<block type='maze_step_rotate'><field name='VALUE'>RIGHT</field></block>"]
        },
        maze_step_for: {
            xml: "<block type='maze_step_for'><field name='VALUE'>2</field></block>"
        },
        maze_step_ebs_for: {
            xml: "<block type='maze_step_for'><field name='VALUE'>1</field></block>"
        },
        maze_step_if_1: {
            xml: "<block type='maze_step_if_1'></block>"
        },
        maze_step_if_2: {
            xml: "<block type='maze_step_if_2'></block>"
        },
        maze_step_if_3: {
            xml: "<block type='maze_step_if_3'></block>"
        },
        maze_step_for_true_1: {
            xml: "<block type='maze_step_for_true_1'></block>"
        },
        maze_step_for_true_2: {
            xml: "<block type='maze_step_for_true_2'></block>"
        },
        maze_repeat_until_1: {
            xml: "<block type='maze_repeat_until_1'></block>"
        },
        maze_repeat_until_2: {
            xml: "<block type='maze_repeat_until_2'></block>"
        },
        maze_define_function: {
            xml: "<block type='maze_define_function'></block>"
        },
        maze_call_function: {
            xml: "<block type='maze_call_function'></block>"
        },
        maze_step_unstart: {
            xml: "<block type='maze_step_unstart'></block>"
        },
        maze_step_unjump: {
            xml: "<block type='maze_step_unjump'></block>"
        },
        maze_step_move_unstep: {
            xml: "<block type='maze_step_move_unstep'></block>"
        },
        maze_step_unrotate: {
            xml: "<block type='maze_step_unrotate'></block>"
        },
        maze_step_unfor: {
            xml: "<block type='maze_step_unfor'><field name='VALUE'>2</field></block>"
        },
        maze_step_unfor_true_1: {
            xml: "<block type='maze_step_unfor_true_1'></block>"
        },
        maze_step_unfor_true_2: {
            xml: "<block type='maze_step_unfor_true_2'></block>"
        },
        maze_step_unif: {
            xml: "<block type='maze_step_unif'><value name='BOOL'><block type='True'></block></value> </block>"
        },
        maze_step_unif_1: {
            xml: "<block type='maze_step_unif_1'></block>"
        },
        maze_step_unif_2: {
            xml: "<block type='maze_step_unif_2'></block>"
        },
        maze_step_unif_3: {
            xml: "<block type='maze_step_unif_3'></block>"
        },
        maze_repeat_ununtil_1: {
            xml: "<block type='maze_repeat_ununtil_1'></block>"
        },
        maze_repeat_ununtil_2: {
            xml: "<block type='maze_repeat_ununtil_2'></block>"
        },
        maze_define_unfunction: {
            xml: "<block type='maze_define_unfunction'></block>"
        },
        maze_call_unfunction: {
            xml: "<block type='maze_call_unfunction'></block>"
        },
        ai_start: {
            xml: "<block type='ai_start'></block>"
        },
        ai_move_right: {
            xml: "<block type='ai_move_right'></block>"
        },
        ai_move_up: {
            xml: "<block type='ai_move_up'></block>"
        },
        ai_move_down: {
            xml: "<block type='ai_move_down'></block>"
        },
        ai_if_else_1: {
            xml: "<block type='ai_if_else_1'></block>"
        },
        ai_if_else_2: {
            xml: "<block type='ai_if_else_2'><value name='BOOL'><block type='True'></block></value></block>"
        },
        ai_boolean_distance: {
            xml: "<block type='ai_boolean_distance' class='output ai_boolean_distance' inline='true'><field name='DIRECTION'>RIGHT</field><field name='OPERATOR'>BIGGER</field><value name='DATA'><block type='number' class='output number'><field name='NUM'>1</field></block></value></block>"
        },
        ai_distance_value: {
            xml: "<block type='ai_distance_value'><field name='DIRECTION'>RIGHT</field></block>"
        },
        ai_boolean_object: {
            xml: "<block type='ai_boolean_object'><field name='DIRECTION'>RIGHT</field></block>"
        },
        ai_use_item: {
            xml: "<block type='ai_use_item'></block>"
        },
        ai_repeat_until_reach: {
            xml: "<block type='ai_repeat_until_reach'></block>"
        },
        ai_boolean_and: {
            xml: "<block type='ai_boolean_and'><value name='LEFTHAND'><block type='True'></block></value><value name='RIGHTHAND'><block type='True'></block></value></block>"
        },
        number: {
            xml: "<block type='number'></block>"
        },
        maze_step_if_4: {
            xml: "<block type='maze_step_if_4'></block>"
        },
        ebs2015_maze_move_step: {
            xml: "<block type='ebs2015_maze_move_step'></block>"
        },
        ebs2015_maze_while_true_1: {
            xml: "<block type='ebs2015_maze_while_true_1'></block>"
        },
        ebs2015_maze_repeat_until_1: {
            xml: "<block type='ebs2015_maze_repeat_until_1'></block>"
        },
        ebs2015_maze_if_wall: {
            xml: "<block type='ebs2015_maze_if_wall'></block>"
        },
        ebs2015_maze_if_else_wall: {
            xml: "<block type='ebs2015_maze_if_else_wall'></block>"
        },
        ebs2015_maze_if_else_notice: {
            xml: "<block type='ebs2015_maze_if_else_notice'></block>"
        }
    };
    a.ENGINE_STOP = 0;
    a.ENGINE_RUN = 1;
    a.ENGINE_END = 2;
    a.COMMAND_MOVE = {
        command: "move();",
        description: Lang.Menus.maze_command_move_desc,
        images: ["move01", "move02"]
    };
    a.COMMAND_JUMP = {
        command: "jump();",
        description: Lang.Menus.maze_command_jump_desc,
        images: ["jump01", "jump02"]
    };
    a.COMMAND_JUMP_ELEC = {
        command: "jump();",
        description: Lang.Menus.maze_command_jump_desc_elec,
        images: ["jump01", "jump02"]
    };
    a.COMMAND_RIGHT = {
        command: "right();",
        description: Lang.Menus.maze_command_right_desc,
        images: ["right01", "right02"]
    };
    a.COMMAND_LEFT = {
        command: "left();",
        description: Lang.Menus.maze_command_left_desc,
        images: ["left01", "left02"]
    };
    a.COMMAND_FOR = {
        command: 'for (var i = 0; i < <span class="textShadow">1</span>; i++){</br>}',
        description: Lang.Menus.maze_command_for_desc,
        images: ["for01", "for02"]
    };
    a.COMMAND_WHILE = {
        command: "while (true) {</br>}",
        description: Lang.Menus.maze_command_while_desc,
        images: ["while01", "while02"]
    };
    a.COMMAND_IF = {
        command: 'if (front == "wall") {</br>}',
        description: Lang.Menus.maze_command_if1_desc,
        images: ["if01", "if02"]
    };
    a.COMMAND_SLOW = {
        command: "move_slowly();",
        description: Lang.Menus.maze_command_slow_desc,
        images: ["slow01", "slow02"]
    };
    a.COMMAND_AI_MOVE = {
        command: "move();",
        description: "\uc5d4\ud2b8\ub9ac\ubd07\uc744 \ud55c \uce78 \uc55e\uc73c\ub85c \uc774\ub3d9\uc2dc\ud0b5\ub2c8\ub2e4.",
        images: ["ai_move01", "ai_move02"]
    };
    a.COMMAND_AI_UP = {
        command: "up();",
        description: "\uc5d4\ud2b8\ub9ac\ubd07\uc744 \ud55c \uce78 \uc704\ub85c \uc774\ub3d9\uc2dc\ud0b5\ub2c8\ub2e4.",
        images: ["ai_up01", "ai_up02"]
    };
    a.COMMAND_AI_DOWN = {
        command: "down();",
        description: "\uc5d4\ud2b8\ub9ac\ubd07\uc744 \ud55c \uce78 \uc544\ub798\ub85c \uc774\ub3d9\uc2dc\ud0b5\ub2c8\ub2e4.",
        images: ["ai_down01", "ai_down02"]
    };
    a.COMMAND_AI_WHILE = {
        command: "while (true) {}",
        description: "\ubbf8\uc158\uc774 \ub05d\ub0a0 \ub54c\uae4c\uc9c0 \uad04\ud638({ })\uc548\uc5d0 \uc788\ub294 \uba85\ub839\uc744 \uacc4\uc18d \ubc18\ubcf5\ud574\uc11c \uc2e4\ud589\ud569\ub2c8\ub2e4.",
        images: ["ai_while01", "ai_while02"]
    };
    a.COMMAND_AI_IF_ELSE = {
        command: "if (radar_right > 1) {} else {}",
        description: "\uc870\uac74(\uc55e \ub808\uc774\ub354 \uac12\uc774 1\ubcf4\ub2e4 \ud074\ub54c)\uc774 \ubc1c\uc0dd\ud588\uc744 \ub54c, if \uc544\ub798\uc758 \uad04\ud638({})\uc548\uc5d0 \uc788\ub294 \uba85\ub839\uc744 \uc2e4\ud589\ud558\uace0, \uadf8\ub807\uc9c0 \uc54a\uc740 \uacbd\uc6b0 else \uc544\ub798\uc758 \uad04\ud638 \uc548\uc5d0 \uc788\ub294 \uba85\ub839\uc744 \uc2e4\ud589\ud569\ub2c8\ub2e4.",
        images: ["ai_if_else01", "ai_if_else02"]
    };
    a.COMMAND_AI_ITEM = {
        command: "use_item();",
        description: "\uc55e\uc5d0 \uc788\ub294 \ubaa8\ub4e0 \ub3cc\ub4e4\uc744 \uc5c6\uc571\ub2c8\ub2e4. \ub2e8, \uc544\uc774\ud15c\uc744 \ud68d\ub4dd\ud588\uc744 \uacbd\uc6b0\uc5d0\ub9cc \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.",
        images: ["ai_item01", "ai_item02"]
    };
    a.COMMAND_AI_TYPE_1 = {
        title: Lang.Menus.maze_command_title,
        content: [Ntry.STATIC.COMMAND_AI_MOVE, Ntry.STATIC.COMMAND_AI_UP, Ntry.STATIC.COMMAND_AI_DOWN]
    };
    a.COMMAND_AI_TYPE_2 = {
        title: Lang.Menus.maze_command_title,
        content: [Ntry.STATIC.COMMAND_AI_MOVE, Ntry.STATIC.COMMAND_AI_UP, Ntry.STATIC.COMMAND_AI_DOWN, Ntry.STATIC.COMMAND_AI_WHILE]
    };
    a.COMMAND_AI_TYPE_3 = {
        title: Lang.Menus.maze_command_title,
        content: [Ntry.STATIC.COMMAND_AI_MOVE, Ntry.STATIC.COMMAND_AI_UP, Ntry.STATIC.COMMAND_AI_DOWN, Ntry.STATIC.COMMAND_AI_WHILE, Ntry.STATIC.COMMAND_AI_IF_ELSE]
    };
    a.COMMAND_AI_TYPE_4 = {
        title: Lang.Menus.maze_command_title,
        content: [Ntry.STATIC.COMMAND_AI_MOVE, Ntry.STATIC.COMMAND_AI_UP, Ntry.STATIC.COMMAND_AI_DOWN, Ntry.STATIC.COMMAND_AI_WHILE, Ntry.STATIC.COMMAND_AI_IF_ELSE, Ntry.STATIC.COMMAND_AI_ITEM]
    };
}
)(Ntry.STATIC);
Ntry.Animate = function(a) {
    this.animateType = a.animateType;
    this.currentFrame = 0;
    this.animateValue = a.animateValue;
    this.duration = a.duration ? a.duration : 1;
}
;
Ntry.Animate.prototype.type = Ntry.STATIC.ANIMATE;
Ntry.Bitmap = function(a) {
    this.image = a.image || "wall_12";
    this.regX = a.regX;
    this.regY = a.regY;
    this.rotation = a.rotation ? a.rotation : 0;
    this.opacity = a.opacity ? a.opacity : 1;
    this.scaleX = a.scaleX ? a.scaleX : 1;
    this.scaleY = a.scaleY ? a.scaleY : 1;
}
;
Ntry.Bitmap.prototype.type = Ntry.STATIC.BITMAP;
Ntry.Code = function(a) {
    if (a = a.code) {
        this.code = a instanceof Entry.Code ? a : "string" == typeof a ? new Entry.Code(JSON.parse(a)) : new Entry.Code(a);
    }
}
;
Ntry.Code.prototype.type = Ntry.STATIC.CODE;
Ntry.Grid = function(a) {
    this.x = a.x;
    this.y = a.y;
}
;
Ntry.Grid.prototype.type = Ntry.STATIC.GRID;
Ntry.Item = function(a) {
    this.tolerance = a.tolerance ? a.tolerance : 10;
    this.itemType = a.itemType;
    this.sequence = a.sequence;
    this.isEaten = !1;
}
;
Ntry.Item.prototype.type = Ntry.STATIC.ITEM;
Ntry.Position = function(a) {
    this.x = a.x;
    this.y = a.y;
}
;
Ntry.Position.prototype.type = Ntry.STATIC.POSITION;
Ntry.Radar = function(a) {
    this.left = {
        distance: 0,
        type: Ntry.STATIC.AI_METEO
    };
    this.center = {
        distance: 0,
        type: Ntry.STATIC.AI_METEO
    };
    this.right = {
        distance: 0,
        type: Ntry.STATIC.AI_METEO
    };
}
;
Ntry.Radar.prototype.type = Ntry.STATIC.RADAR;
Ntry.Restore = function(a) {
    a = a || {};
    this.shouldRestore = a.shouldRestore;
    this.data = a.data;
    this.origins = a.origins;
}
;
Ntry.Restore.prototype.type = Ntry.STATIC.RESTORE;
Ntry.ScriptContainer = function(a) {
    this.script = a.script || "";
    this.timeStamp = (new Date).getTime();
}
;
Ntry.ScriptContainer.prototype.type = Ntry.STATIC.SCRIPT_CONTAINER;
Ntry.Scroll = function(a) {
    this.scrollX = a.scrollX ? a.scrollX : 0;
}
;
Ntry.Scroll.prototype.type = Ntry.STATIC.SCROLL;
Ntry.SpaceShip = function(a) {
    this.direction = Ntry.STATIC.EAST;
}
;
Ntry.SpaceShip.prototype.type = Ntry.STATIC.SPACE_SHIP;
Ntry.Sprite = function(a) {
    this.image = a.image;
    this.currentFrame = this.currentFrameKey = 0;
    this.width = a.width;
    this.height = a.height;
    this.regX = a.regX ? a.regX : 0;
    this.regY = a.regY ? a.regY : 0;
    this.scaleX = 1;
    this.rotation = a.rotation ? a.rotation : 0;
    this.opacity = a.opacity ? a.opacity : 1;
}
;
Ntry.Sprite.prototype.type = Ntry.STATIC.SPRITE;
Ntry.Tile = function(a) {
    this.tileType = a.tileType;
}
;
Ntry.Tile.prototype.type = Ntry.STATIC.TILE;
Ntry.Unit = function(a) {
    a || (a = {});
    this.direction = Number(a.direction);
    this.action = Ntry.STATIC.STAND;
    this.step = 0;
}
;
Ntry.Unit.prototype.type = Ntry.STATIC.UNIT;
Ntry.Script = function(a) {
    this.entity = a;
}
;
(function(a) {
    a.init = function(b, c, d) {
        this.type = b.getAttribute("type");
        this.id = Number(b.getAttribute("id"));
        b.getElementsByTagName("mutation").length && b.getElementsByTagName("mutation")[0].hasAttribute("hashid") && (this.hashId = b.childNodes[0].getAttribute("hashid"));
        "REPEAT" == this.type.substr(0, 6).toUpperCase() && (this.isRepeat = !0);
        c instanceof Ntry.Script && (this.previousScript = c,
        c.parentScript && (this.parentScript = c.parentScript));
        d instanceof Ntry.Script && (this.parentScript = d);
        b = b.childNodes;
        for (c = 0; c < b.length; c++) {
            if (d = b[c],
            "NEXT" == d.tagName.toUpperCase()) {
                this.nextScript = new Ntry.Script(this.entity),
                this.register && (this.nextScript.register = this.register),
                this.nextScript.init(b[c].childNodes[0], this);
            } else {
                if ("VALUE" == d.tagName.toUpperCase()) {
                    this.values || (this.values = {});
                    var a = new Ntry.Script(this.entity);
                    this.register && (a.register = this.register);
                    a.init(d.childNodes[0]);
                    this.values[d.getAttribute("name")] = a;
                } else {
                    "FIELD" == d.tagName.toUpperCase() ? (this.fields || (this.fields = {}),
                    this.fields[d.getAttribute("name")] = d.textContent) : "STATEMENT" == d.tagName.toUpperCase() && (this.statements || (this.statements = {}),
                    a = new Ntry.Script(this.entity),
                    this.register && (a.register = this.register),
                    a.init(d.childNodes[0], null, this),
                    a.key = d.getAttribute("name"),
                    this.statements[d.getAttribute("name")] = a);
                }
            }
        }
    }
    ;
    a.getStatement = function(b) {
        return this.statements ? this.statements[b] : null;
    }
    ;
    a.compute = function() {}
    ;
    a.getValue = function(b) {
        return this.values[b].run();
    }
    ;
    a.getNumberValue = function(b) {
        return Number(this.values[b].run());
    }
    ;
    a.getStringValue = function(b) {
        return String(this.values[b].run());
    }
    ;
    a.getBooleanValue = function(b) {
        return this.values[b].run() ? !0 : !1;
    }
    ;
    a.getField = function(b) {
        return this.fields[b];
    }
    ;
    a.getStringField = function(b) {
        return String(this.fields[b]);
    }
    ;
    a.getNumberField = function(b) {
        return Number(this.fields[b]);
    }
    ;
    a.callReturn = function() {
        return this.nextScript ? this.nextScript : this.parentScript ? this.parentScript : null;
    }
    ;
    a.run = function(b) {
        return Ntry.block[this.type](this.entity, this);
    }
    ;
}
)(Ntry.Script.prototype);
Ntry.RunningScript = function(a) {
    a && a.xml && (this.script = new Ntry.Script(a.entity),
    this.script.init(a.xml));
}
;
Ntry.RunningScript.prototype.type = Ntry.STATIC.RUNNING_SCRIPT;
Ntry.SystemManager = function() {
    this._systems = [];
    this.frameCount = 0;
}
;
(function(a) {
    a.removeAllSystem = function() {
        this._systems.forEach(function(b) {
            "remove"in b && b.remove();
        });
        this._systems = [];
    }
    ;
    a.addSystem = function(b) {
        b = new b;
        this._systems.push(b);
    }
    ;
    a.update = function() {
        this.frameCount++;
        for (var b in this._systems) {
            var c = this._systems[b];
            c.update && c.update(this.frameCount);
        }
    }
    ;
    a.updateConfig = function() {
        for (var b in this._systems) {
            var c = this._systems[b];
            c.loadConfig && c.loadConfig();
        }
    }
    ;
}
)(Ntry.SystemManager.prototype);
Ntry.Utils = {};
Ntry.Utils.generateHash = function() {
    return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4);
}
;
Ntry.createElement = function(a, b, c) {
    var d = document.createElement(a);
    c && (d.id = c);
    var e = Array.prototype.splice.call(arguments, 3);
    d.hasClass = function(b) {
        return this.className.match(RegExp("(\\s|^)" + b + "(\\s|$)"));
    }
    ;
    d.addClass = function(b) {
        for (var c = 0; c < arguments.length; c++) {
            b = arguments[c],
            this.hasClass(b) || (this.className += " " + b);
        }
    }
    ;
    d.removeClass = function(b) {
        for (var c = 0; c < arguments.length; c++) {
            b = arguments[c],
            this.hasClass(b) && (this.className = this.className.replace(RegExp("(\\s|^)" + b + "(\\s|$)"), " "));
        }
    }
    ;
    d.removeClasses = function() {
        var b = this;
        this.className.split(" ").map(function(c) {
            c = c.trim();
            0 != c.length && b.removeClass(c);
        });
    }
    ;
    d.ntryShow = function(b) {
        this.removeClass("ntryRemove");
        b ? this.addClass(b) : this.addClass("ntryShow");
    }
    ;
    d.ntryRemove = function() {
        this.removeClass("ntryShow");
        this.removeClass("ntryShowInline");
        this.removeClass("ntryShowInlineBlock");
        this.addClass("ntryRemove");
    }
    ;
    d.bindOnClick = function(b) {
        $(this).on("click touchstart", b);
    }
    ;
    d.rebindOnClick = function(b) {
        $(this).unbind("click touchstart").bind("click touchstart", b);
    }
    ;
    e.map(function(b) {
        d.addClass(b);
    });
    b && b.appendChild(d);
    return d;
}
;
Ntry.createTileEntities = function(a) {
    if (!a) {
        return [];
    }
    var b = [], c;
    for (c in a) {
        for (var d in a[c]) {
            var e = a[c][d], f = {}, g;
            g = "road" == e.substr(0, 4) ? Ntry.STATIC.ROAD : Ntry.STATIC.WALL;
            f[Ntry.STATIC.GRID] = {
                x: Number(d),
                y: Number(c)
            };
            f[Ntry.STATIC.BITMAP] = {
                image: e
            };
            f[Ntry.STATIC.TILE] = {
                tileType: g
            };
            b.push({
                components: f
            });
        }
    }
    return b;
}
;
Ntry.createFenceEntities = function(a) {
    if (!a) {
        return [];
    }
    var b = [], c;
    for (c in a) {
        var d = a[c]
          , e = {};
        e[Ntry.STATIC.GRID] = {
            x: d.x,
            y: d.y
        };
        e[Ntry.STATIC.BITMAP] = {
            image: d.image,
            rotation: d.rotation
        };
        b.push({
            components: e
        });
    }
    return b;
}
;
Ntry.createObstacleEntities = function(a) {
    if (!a) {
        return [];
    }
    var b = [], c;
    for (c in a) {
        var d = a[c]
          , e = {};
        e[Ntry.STATIC.GRID] = {
            x: d.x,
            y: d.y
        };
        e[Ntry.STATIC.BITMAP] = {
            image: d.image,
            rotation: d.rotation
        };
        e[Ntry.STATIC.TILE] = {
            tileType: d.type
        };
        b.push({
            components: e
        });
    }
    return b;
}
;
Ntry.createGoalEntities = function(a) {
    if (!a) {
        return [];
    }
    var b = [], c;
    for (c in a) {
        var d = a[c]
          , e = {};
        e[Ntry.STATIC.GRID] = {
            x: d.x,
            y: d.y
        };
        e[Ntry.STATIC.BITMAP] = {
            image: d.image
        };
        e[Ntry.STATIC.TILE] = {
            tileType: Ntry.STATIC.GOAL
        };
        e[Ntry.STATIC.ITEM] = {
            itemType: Ntry.STATIC.GOAL_ITEM,
            sequence: d.sequence
        };
        b.push({
            components: e
        });
    }
    return b;
}
;
Ntry.createJRItemEntities = function(a) {
    if (!a) {
        return [];
    }
    var b = [], c;
    for (c in a) {
        var d = a[c]
          , e = {};
        e[Ntry.STATIC.GRID] = {
            x: d.x,
            y: d.y
        };
        e[Ntry.STATIC.BITMAP] = {
            image: d.image
        };
        e[Ntry.STATIC.TILE] = {
            tileType: Ntry.STATIC.GOAL
        };
        e[Ntry.STATIC.ITEM] = {
            itemType: Ntry.STATIC.JR_ITEM,
            sequence: d.sequence
        };
        b.push({
            components: e
        });
    }
    return b;
}
;
Ntry.createPlayerEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/entry_bot",
        width: 68,
        height: 115,
        regY: 102,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.SCRIPT_CONTAINER] = {
        script: a.userScript || a.script
    };
    return {
        components: b
    };
}
;
Ntry.createCarPlayerEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/entry_car",
        width: 68,
        height: 115,
        regY: 80,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.createSoffyEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/soffy",
        width: 68,
        height: 115,
        regY: 90,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.SCRIPT_CONTAINER] = {
        script: a.userScript || a.script
    };
    return {
        components: b
    };
}
;
Ntry.createJuniEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/juni_v2",
        width: 68,
        height: 115,
        regY: 90,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.createJuniEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/juni_v2",
        width: 68,
        height: 115,
        regY: 90,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.createMazeJuniEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/entry_bot",
        width: 68,
        height: 115,
        regY: 90,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.createCpartyJuniEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/cparty_entry",
        width: 68,
        height: 115,
        regY: 90,
        regX: 34
    };
    b[Ntry.STATIC.UNIT] = {
        direction: a.direction ? a.direction : Ntry.STATIC.EAST
    };
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.createSpaceEntity = function(a) {
    if (!a) {
        return [];
    }
    var b = {
        components: {}
    };
    b.components[Ntry.STATIC.BITMAP] = {
        image: "stage_" + (Number(a) - 20),
        regX: 0,
        regY: 0
    };
    b.components[Ntry.STATIC.POSITION] = {
        x: 0,
        y: 0
    };
    b.components[Ntry.STATIC.GRID] = {
        x: 0,
        y: 0
    };
    var c = {
        components: {}
    };
    c.components[Ntry.STATIC.BITMAP] = {
        image: "grid_" + (Number(a) - 20),
        regX: 0,
        regY: 0
    };
    c.components[Ntry.STATIC.POSITION] = {
        x: 0,
        y: 0
    };
    c.components[Ntry.STATIC.GRID] = {
        x: 0,
        y: 0
    };
    return [b, c];
}
;
Ntry.createSpace = function(a, b) {
    if (!a) {
        return [];
    }
    var c = [], d;
    for (d in a) {
        for (var e in a[d]) {
            switch (a[d][e]) {
            case 1:
                c.push(Ntry.createMeteo(e, d));
                break;
            case 2:
                c.push(Ntry.createSpaceItem(e, d));
            }
        }
    }
    d = a[0].length;
    Ntry.configManager.setConfig("spaceWidth", d);
    Ntry.systemManager.updateConfig();
    c.push(Ntry.createPlanet(d, 0, null));
    c.push(Ntry.createPlanet(d, 1, b));
    c.push(Ntry.createPlanet(d, 2, null));
    return c;
}
;
Ntry.createMeteo = function(a, b) {
    var c = {};
    c[Ntry.STATIC.GRID] = {
        x: Number(a),
        y: Number(b)
    };
    var d = Math.floor(8 * Math.random() + 1);
    9 == d && (d = 8);
    c[Ntry.STATIC.BITMAP] = {
        image: "obstacle_" + d,
        regX: 25,
        regY: 25
    };
    c[Ntry.STATIC.ITEM] = {
        tolerance: 40,
        itemType: Ntry.STATIC.AI_METEO
    };
    c[Ntry.STATIC.ANIMATE] = {
        animateType: Ntry.STATIC.ROTATE_INFINITE,
        animateValue: 10 * Math.random() - 5
    };
    c[Ntry.STATIC.TILE] = {
        tileType: Ntry.STATIC.OBSTACLE_METEO
    };
    return {
        components: c
    };
}
;
Ntry.createPlanet = function(a, b, c) {
    var d = {};
    d[Ntry.STATIC.GRID] = {
        x: Number(a),
        y: Number(b)
    };
    c && (d[Ntry.STATIC.BITMAP] = {
        image: "goal_" + (Number(c) - 20),
        regX: 66.5,
        regY: 113
    });
    d[Ntry.STATIC.ITEM] = {
        tolerance: 5,
        itemType: Ntry.STATIC.AI_GOAL
    };
    d[Ntry.STATIC.TILE] = {
        tileType: Ntry.STATIC.GOAL
    };
    return {
        components: d
    };
}
;
Ntry.createSpaceItem = function(a, b) {
    var c = {};
    c[Ntry.STATIC.GRID] = {
        x: Number(a),
        y: Number(b)
    };
    c[Ntry.STATIC.SPRITE] = {
        image: "../../sprite/item",
        width: 60,
        height: 60,
        regY: 30,
        regX: 30
    };
    c[Ntry.STATIC.ITEM] = {
        tolerance: 40,
        itemType: Ntry.STATIC.AI_ITEM
    };
    c[Ntry.STATIC.TILE] = {
        tileType: Ntry.STATIC.OBSTACLE_METEO
    };
    return {
        components: c
    };
}
;
Ntry.createSpaceShip = function(a) {
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.BITMAP] = {
        image: "ship",
        regX: 25,
        regY: 25
    };
    b[Ntry.STATIC.SPACE_SHIP] = {};
    b[Ntry.STATIC.RADAR] = {};
    b[Ntry.STATIC.UNIT] = {};
    b[Ntry.STATIC.SCRIPT_CONTAINER] = {
        script: a.userScript || a.script
    };
    return {
        components: b
    };
}
;
Ntry.createCodeSpaceShip = function(a) {
    var b = {};
    b[Ntry.STATIC.GRID] = {
        x: a.x,
        y: a.y
    };
    b[Ntry.STATIC.BITMAP] = {
        image: "ship",
        regX: 25,
        regY: 25
    };
    b[Ntry.STATIC.SPACE_SHIP] = {};
    b[Ntry.STATIC.RADAR] = {};
    b[Ntry.STATIC.UNIT] = {};
    b[Ntry.STATIC.CODE] = {
        code: a.userCode || a.code
    };
    return {
        components: b
    };
}
;
Ntry.parseTexttoXML = function(a) {
    if (window.ActiveXObject) {
        var b = new ActiveXObject("Microsoft.XMLDOM");
        b.async = "false";
        b.loadXML(a);
    } else {
        b = (new DOMParser).parseFromString(a, "text/xml");
    }
    return b;
}
;
Ntry.changeXmlHashId = function(a) {
    if (/function_field/.test(a.getAttribute("type"))) {
        for (var b = a.getElementsByTagName("mutation"), c = 0, d = b.length; c < d; c++) {
            b[c].setAttribute("hashid", Ntry.Utils.generateHash());
        }
    }
    return a;
}
;
Ntry.compareObjects = function(a, b) {
    for (var c in a) {
        if (a.hasOwnProperty(c) && a[c] !== b[c]) {
            return !1;
        }
    }
    for (c in b) {
        if (b.hasOwnProperty(c) && a[c] !== b[c]) {
            return !1;
        }
    }
    return !0;
}
;
Ntry.addVectorByDirection = function(a, b, c) {
    switch (b) {
    case Ntry.STATIC.NORTH:
        a.y -= c;
        break;
    case Ntry.STATIC.EAST:
        a.x += c;
        break;
    case Ntry.STATIC.SOUTH:
        a.y += c;
        break;
    case Ntry.STATIC.WEST:
        a.x -= c;
    }
    return a;
}
;
Ntry.computeThread = function(a, b) {
    try {
        b = b.run(a);
    } catch (c) {
        throw c;
    }
    return b;
}
;
Ntry.countUsedBlocks = function() {
    var a = "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ")
      , b = ["number", "number_un", "True", "True_un"]
      , c = 0;
    if (!Blockly.mainWorkspace) {
        return !1;
    }
    var d = Blockly.mainWorkspace.getTopBlocks();
    _.each(d, function(d) {
        -1 < a.indexOf(d.type) && (d = d.getDescendants(),
        _.each(d, function(d) {
            0 > b.indexOf(d.type) && c++;
        }));
    });
    return c;
}
;
Ntry.getBrowserType = function() {
    if (Ntry.userAgent) {
        return Ntry.userAgent;
    }
    var a = navigator.userAgent, b, c = a.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
    if (/trident/i.test(c[1])) {
        return b = /\brv[ :]+(\d+)/g.exec(a) || [],
        "IE " + (b[1] || "");
    }
    if ("Chrome" === c[1] && (b = a.match(/\b(OPR|Edge)\/(\d+)/),
    null != b)) {
        return b.slice(1).join(" ").replace("OPR", "Opera");
    }
    c = c[2] ? [c[1], c[2]] : [navigator.appName, navigator.appVersion, "-?"];
    null != (b = a.match(/version\/(\d+)/i)) && c.splice(1, 1, b[1]);
    a = c.join(" ");
    return Ntry.userAgent = a;
}
;
Ntry.goToUrl = function(a) {
    window.location.href = a;
}
;
Ntry.Entity = function(a) {
    this.id = Ntry.Utils.generateHash();
    this.components = {};
    this.timeStamp = (new Date).getTime();
    this.index = a;
}
;
Ntry.EntityManager = function() {
    return function() {
        this._entities = {};
        this._registeredComponents = {};
        this._componentsMap = {};
        this._entityCount = 0;
    }
    ;
}();
(function(a) {
    a.registerComponent = function(b) {
        var c = (new b({})).type;
        this._registeredComponents[c] = b;
        this._componentsMap[c] = {};
    }
    ;
    a.unregisterComponents = function() {}
    ;
    a.addEntity = function() {
        var b = new Ntry.Entity(this._entityCount++);
        return this._entities[b.id] = b;
    }
    ;
    a.hasEntity = function(b) {
        return b in this._entities;
    }
    ;
    a.getEntity = function(b) {
        return this._entities[b];
    }
    ;
    a.getEntities = function() {
        return this._entities;
    }
    ;
    a.removeEntity = function(b) {
        for (var c in this._componentsMap) {
            delete this._componentsMap[c][b];
        }
        delete this._entities[b];
    }
    ;
    a.addComponent = function(b, c) {
        var d = this.getEntity(b);
        c = new this._registeredComponents[c.type](c);
        d.components[c.type] = c;
        this._componentsMap[c.type][b] = d;
        return c;
    }
    ;
    a.hasComponent = function(b, c) {
        var d = this.getEntity(b);
        return void 0 === d ? !1 : void 0 !== d.components[c];
    }
    ;
    a.getComponent = function(b, c) {
        var d = this.getEntity(b);
        return void 0 === d ? !1 : d.components[c];
    }
    ;
    a.removeComponent = function(b, c) {
        var d = this.getEntity(b);
        if (void 0 === d) {
            return null;
        }
        delete d.components[c];
        delete this._componentsMap[c][b];
        return d;
    }
    ;
    a.removeComponents = function(b) {
        var c = this.getEntity(b);
        if (void 0 === c) {
            return null;
        }
        for (var d in c.components) {
            this.removeComponent(b, d);
        }
        return c;
    }
    ;
    a.getEntitiesByComponent = function(b) {
        return this._componentsMap[b];
    }
    ;
    a.find = function(b) {
        var c = this.getEntitiesByComponent(b.type)
          , d = Array.prototype.slice.call(arguments);
        d.unshift(_.values(c));
        return this._findByOne.apply(this, d);
    }
    ;
    a._findByOne = function(b, c) {
        var d = []
          , a = Array.prototype.slice.call(arguments)
          , a = a.splice(2);
        a.unshift(d);
        for (var f in b) {
            var g = b[f]
              , h = this.getComponent(g.id, c.type);
            h && Ntry.compareObjects(h, c) && d.push(g);
        }
        return 0 == d.length ? [] : 1 < a.length ? this._findByOne.apply(this, a) : d;
    }
    ;
    a.getComponents = function(b) {
        return this.getEntity(b).components;
    }
    ;
    a.getComponentsJSON = function(b) {
        b = this.getEntity(b).components;
        var c = {
            origins: []
        }, d = {}, a;
        for (a in b) {
            c.origins.push(a),
            -1 < Ntry.STATIC.RESTORE_BLACK_LIST.indexOf(Number(a)) || (d[a] = b[a]);
        }
        c.data = JSON.parse(JSON.stringify(d));
        return c;
    }
    ;
    a.fromJSON = function(b) {
        if (b instanceof Array) {
            for (var c in b) {
                var d = b[c]
                  , a = this.addEntity();
                if ("object" === typeof d.components) {
                    for (var f in d.components) {
                        var g = d.components[f];
                        g.type = f;
                        this.addComponent(a.id, g);
                    }
                }
            }
        }
    }
    ;
    a.toJSON = function() {}
    ;
    a.clear = function() {
        this._entities = {};
        for (var b in this._componentsMap) {
            this._componentsMap[b] = {};
        }
    }
    ;
}
)(Ntry.EntityManager.prototype);
Ntry.AiEngineView = function() {
    this._view = Ntry.interfaceManager.getDom("ntryEngine");
    this._ratio = 0;
    this._sliderWidth = 88;
    this._data = {
        left: {
            type: -1
        },
        center: {
            type: -1
        },
        right: {
            type: -1
        }
    };
    this._inited = !1;
    this._mode = Entry.Workspace.MODE_BOARD;
    this._itemTypes = {
        1: "destination",
        2: "asteroids",
        3: "item",
        4: "item",
        5: "wall"
    };
    this._backupKnobPosition = 0;
    Ntry.addEventListener("run", this, this.viewModeRun);
    Ntry.addEventListener("run", this, this.backupSlider);
    Ntry.addEventListener("stop", this, this.viewModeStop);
    Ntry.addEventListener("replay", this, this.viewModeReplay);
    Ntry.addEventListener("restoreEnd", this, this.restoreSlider);
    Ntry.addEventListener("textError", this, this.textError);
    this.createDom();
    Ntry.addEventListener("moveAiSlider", this, this.moveAiSlider);
    Ntry.addEventListener("workspaceChangeMode", this, this.setMode);
}
;
(function(a) {
    a.loadConfig = function() {
        (this.isScroll = Ntry.configManager.getConfig("mapper") ? !1 : !0) || this._sliderView.addClass("entryHide");
        !this._inited && Entry.getMainWS() && (this._inited = !0,
        Entry.getMainWS().changeEvent.attach(this, this.setMode));
    }
    ;
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "aiEngineSection", "selectDisable")
          , c = Ntry.createElement("div", b, null, "aiEngineLeftSection");
        this.createSlider(c);
        this._engineButton = Ntry.createElement("button", c, "aiEngineButton", "stopped");
        this._engineButton.innerHTML = Lang.Workspace.run;
        var b = Ntry.createElement("div", b, null, "aiEngineRightSection")
          , c = Ntry.createElement("div", b, null, "aiEngineInfoContainer")
          , d = Ntry.createElement("span", c, null, "aiEngineInfoContainer_sub");
        this._distance1_sub = d;
        d.innerHTML = Lang.Menus.above_radar;
        this._distanceUp = Ntry.createElement("span", c, null, "aiEngineInfo");
        c = Ntry.createElement("div", b, null, "aiEngineInfoContainer", "aiEngineInfoContainerBig");
        d = Ntry.createElement("span", c, null, "aiEngineInfoContainer_sub");
        d.innerHTML = Lang.Menus.above_object;
        this._nameUp = Ntry.createElement("span", c, null, "aiEngineInfo", "aiEngineInfoBig");
        this._name1_sub = d;
        c = Ntry.createElement("div", b, null, "aiEngineInfoContainer");
        d = Ntry.createElement("span", c, null, "aiEngineInfoContainer_sub");
        d.innerHTML = Lang.Menus.front_radar;
        this._distanceRight = Ntry.createElement("span", c, null, "aiEngineInfo");
        this._distance3_sub = d;
        c = Ntry.createElement("div", b, null, "aiEngineInfoContainer", "aiEngineInfoContainerBig");
        d = Ntry.createElement("span", c, null, "aiEngineInfoContainer_sub");
        d.innerHTML = Lang.Menus.front_object;
        this._nameRight = Ntry.createElement("span", c, null, "aiEngineInfo", "aiEngineInfoBig");
        this._name3_sub = d;
        c = Ntry.createElement("div", b, null, "aiEngineInfoContainer");
        d = Ntry.createElement("span", c, null, "aiEngineInfoContainer_sub");
        d.innerHTML = Lang.Menus.bottom_radar;
        this._distanceDown = Ntry.createElement("span", c, null, "aiEngineInfo");
        this._distance2_sub = d;
        b = Ntry.createElement("div", b, null, "aiEngineInfoContainer", "aiEngineInfoContainerBig");
        c = Ntry.createElement("span", b, null, "aiEngineInfoContainer_sub");
        c.innerHTML = Lang.Menus.below_object;
        this._nameDown = Ntry.createElement("span", b, null, "aiEngineInfo", "aiEngineInfoBig");
        this._name2_sub = c;
        this._engineButton.bindOnClick(function(b) {
            b.preventDefault();
            this.blur();
            Ntry.dispatchEvent("engineButtonClicked");
        });
    }
    ;
    a.createSlider = function(b) {
        var c = this;
        this._sliderView = b = Ntry.createElement("div", b, null, "aiEngineHandlerContainer");
        Ntry.createElement("span", b, null, "aiEngineHandlerLeft").bindOnClick(function() {
            Ntry.dispatchEvent("moveAiSlider", c._knob, -5);
        });
        var d = Ntry.createElement("div", b, null, "aiEngineSlider");
        this._knob = Ntry.createElement("div", d, null, "aiEngineSliderKnob");
        Ntry.createElement("span", b, null, "aiEngineHandlerRight").bindOnClick(function() {
            Ntry.dispatchEvent("moveAiSlider", c._knob, 5);
        });
        var a = !1
          , f = 0;
        this._knob.onmousedown = function(b) {
            a = !0;
            f = $(d).offset().left;
        }
        ;
        this._knob.addEventListener("touchstart", function() {
            a = !0;
            f = $(d).offset().left;
        });
        document.addEventListener("mousemove", function(b) {
            a && c.setLeftPos(b.pageX - f);
        });
        document.addEventListener("touchmove", function(b) {
            a && c.setLeftPos(b.touches[0].pageX - f);
        });
        document.addEventListener("mouseup", function(b) {
            a = !1;
        });
        document.addEventListener("touchend", function(b) {
            a = !1;
        });
    }
    ;
    a.setLeftPos = function(b, c) {
        b = Math.max(b, 5);
        b = Math.min(b, 88);
        this.setRatio(b);
        this._knob.style.left = b + "px";
    }
    ;
    a.moveAiSlider = function(b, c) {
        kbob = b || this._knob;
        b = $(b);
        var d = "auto" == b.css("left") ? "5px" : b.css("left")
          , d = Number(d.substring(0, d.length - 2));
        this.setRatio(d + c);
    }
    ;
    a.getRatio = function() {
        return this._ratio;
    }
    ;
    a.setRatio = function(b) {
        var c = $(this._knob);
        b = Math.max(b, 5);
        b = Math.min(b, 88);
        this._ratio = (b - 5) / (this._sliderWidth - 5);
        c.css("left", b);
        Ntry.dispatchEvent("engineSliderMove", this.getRatio());
    }
    ;
    a.viewModeRun = function() {
        var b = this.getPureButton();
        b.addClass("running");
        b.innerHTML = Lang.Menus.engine_running;
        window.cpartyuserkey && (b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace),
        b = Blockly.Xml.domToText(b),
        b = new Entry.Activity("run",[["script", b]]),
        Entry.activityReporter.add(b),
        Ntry.dispatchEvent("saveLogs"));
    }
    ;
    a.backupSlider = function() {
        var b = $(this._knob)
          , c = this._backupKnobPosition = b.css("left");
        isNaN(c) && (this._backupKnobPosition = c.substring(0, c.length - 2));
        b.css("left", "5px");
    }
    ;
    a.restoreSlider = function() {
        this.setRatio(this._backupKnobPosition);
    }
    ;
    a.viewModeStop = function() {
        var b = this.getPureButton();
        b.addClass("stopped");
        b.innerHTML = Lang.Workspace.run;
    }
    ;
    a.viewModeReplay = function() {
        var b = this.getPureButton();
        b.addClass("end");
        b.innerHTML = Lang.Menus.engine_replay;
    }
    ;
    a.getPureButton = function() {
        this._engineButton.removeClasses();
        return this._engineButton;
    }
    ;
    a.update = function(b) {
        var c = Ntry.entityManager
          , d = c.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        _.isEmpty(d) && (d = c.getEntitiesByComponent(Ntry.STATIC.CODE));
        if (component = c.getComponent(_.first(_.keys(d)), Ntry.STATIC.RADAR)) {
            var a = component.left
              , c = component.center
              , d = component.right
              , f = this._data;
            if (_.isEmpty(f.left) || a.distance != f.left.distance) {
                f.left.distance = a.distance,
                this._distanceUp.innerHTML = a.distance;
            }
            if (_.isEmpty(f.right) || d.distance != f.right.distance) {
                f.right.distance = d.distance,
                this._distanceDown.innerHTML = d.distance;
            }
            if (_.isEmpty(f.center) || c.distance != f.center.distance) {
                f.center.distance = c.distance,
                this._distanceRight.innerHTML = c.distance;
            }
            if (b || _.isEmpty(f.left) || a.type != f.left.type) {
                a = f.left.type = a.type,
                this._nameUp.innerHTML = this._getTargetLang(a);
            }
            if (b || _.isEmpty(f.right) || d.type != f.right.type) {
                a = f.right.type = d.type,
                this._nameDown.innerHTML = this._getTargetLang(a);
            }
            if (b || _.isEmpty(f.center) || c.type != f.center.type) {
                a = f.center.type = c.type,
                this._nameRight.innerHTML = this._getTargetLang(a);
            }
        }
    }
    ;
    a.setMode = function(b) {
        this._mode = b = void 0 === b ? Entry.getMainWS().getMode() : b;
        this._updateLang();
        this.update(!0);
    }
    ;
    a._updateLang = function() {
        [["distance1", "above_radar"], ["distance2", "bottom_radar"], ["distance3", "front_radar"], ["name1", "above_object"], ["name2", "below_object"], ["name3", "front_object"]].forEach(function(b) {
            this["_$(key)_sub".replace("$(key)", b[0])].innerHTML = this._getTargetLang(b[1]);
        }
        .bind(this));
    }
    ;
    a.textError = function(b) {
        this._mode = b.boardType;
        Ntry.dispatchEvent("stop");
        Ntry.dispatchEvent("engineButtonClicked");
    }
    ;
    a._getTargetLang = function(b) {
        var c = this._mode;
        isNaN(b) || (b = this._itemTypes[b]);
        c === Entry.Workspace.MODE_VIMBOARD && (b += "_text_mode");
        return Lang.Menus[b];
    }
    ;
}
)(Ntry.AiEngineView.prototype);
Ntry.AiIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryIntroContainer")
          , d = Ntry.createElement("div", c, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        c = Ntry.createElement("div", c, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", c, null, "ntryIntroLeftImg");
        d = Ntry.createElement("div", c, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", d, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", d, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", c, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Workspace.run;
        this._view.bindOnClick(function(c) {
            c.target == this && $(b).css("display", "none");
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , c = Ntry.configManager.getConfig("stageId");
        this._leftImg.addClass("ntryIntroLeftImg");
        this._leftImg.addClass("ntryIntroLeftAiImg");
        this._rightTop.innerHTML = c - 20 + "/10";
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.rebindOnClick(function() {
            $(d._view).css("display", "none");
        });
        this._startButton.rebindOnClick(function() {
            $(d._view).css("display", "none");
        });
        $(this._view).css("display", "block");
    }
    ;
}
)(Ntry.AiIntro.prototype);
Ntry.Animator = function() {}
;
(function(a) {
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ANIMATE), c;
        for (c in b) {
            this._applyAnimation(b[c]);
        }
    }
    ;
    a._applyAnimation = function(b) {
        var c = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.ANIMATE)
          , d = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.BITMAP)
          , a = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.SPRITE);
        if (d = d || a) {
            switch (c.animateType) {
            case Ntry.STATIC.ROTATE_TO:
                d.rotation = (3 * d.rotation + c.animateValue) / 4;
                10 <= c.currentFrame && (d.rotation = c.animateValue,
                Ntry.entityManager.removeComponent(b.id, Ntry.STATIC.ANIMATE));
                break;
            case Ntry.STATIC.ROTATE_INFINITE:
                d.rotation += c.animateValue;
                break;
            case Ntry.STATIC.FADE_OUT:
                0 < d.opacity ? d.opacity -= 1 / c.duration / 16 : Ntry.entityManager.removeComponent(b.id, Ntry.STATIC.ANIMATE);
                break;
            case Ntry.STATIC.POP_OUT:
                a = 1.2 * Math.sin((c.currentFrame + 6) / 16 * Math.PI);
                d.scaleX = a;
                d.scaleY = a;
                c.currentFrame++;
                10 <= c.currentFrame && (Ntry.entityManager.removeComponent(b.id, Ntry.STATIC.ANIMATE),
                Ntry.entityManager.removeComponent(b.id, d.type));
                break;
            case Ntry.STATIC.VIBRATE:
                Ntry.entityManager.getComponent(b.id, Ntry.STATIC.POSITION).x = c.animateValue + 10 * Math.sin(c.currentFrame / 4 * Math.PI),
                c.currentFrame++,
                24 <= c.currentFrame && Ntry.entityManager.removeComponent(b.id, Ntry.STATIC.ANIMATE);
            }
        }
    }
    ;
}
)(Ntry.Animator.prototype);
Ntry.CanvasRenderer = function() {
    return function() {
        this._sprites = {};
        this._bitmaps = {};
        // 这个路径不是一开始的路径
        this._bitmapPath = "img/assets/ntry/bitmap/cpartyjr";
        this._spritePath = "img/assets/ntry/sprite/";
        this.createDom();
    }
    ;
}();
(function(a) {
    a.createDom = function() {
        var b = Ntry.interfaceManager.getDom("canvas");
        this.canvasDom = b;
        this.canvas = new createjs.Stage(b);
    }
    ;
    a.loadConfig = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , c = Ntry.configManager.getConfig("tileSize");
        this.canvasDom.width = b.width * c;
        this.canvasDom.height = b.height * c;
        this.tileSize = c;
        //this._bitmapPath = Ntry.configManager.getConfig("bitmapPath");
        //this.canvas.regX = Ntry.configManager.getConfig("canvasRegX");
        // 这个路径才是渲染的路径
        this._bitmapPath = "https://playentry.org/img/assets/ntry/bitmap/cpartyjr/";
        this.canvas.regX = "https://playentry.org/img/assets/ntry/sprite/";

    }
    ;
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.BITMAP), b = _.sortBy(_.toArray(b), function(b) {
            return b.index;
        }), c = Object.keys(this._bitmaps), d;
        for (d in b) {
            var a = b[d].id
              , f = this.getBitmap(a)
              , g = Ntry.entityManager.getComponent(a, Ntry.STATIC.POSITION);
            Ntry.entityManager.getComponent(a, Ntry.STATIC.TILE);
            var h = Ntry.entityManager.getComponent(a, Ntry.STATIC.BITMAP);
            f.x = g.x;
            f.y = g.y;
            f.rotation = h.rotation;
            f.alpha = h.opacity;
            f.scaleX = h.scaleX;
            f.scaleY = h.scaleY;
            c.splice(c.indexOf(a), 1);
        }
        for (var l in c) {
            this.removeBitmap(c[l]);
        }
        b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SPRITE);
        b = _.sortBy(_.toArray(b), function(b) {
            return b.index;
        });
        c = Object.keys(this._sprites);
        for (d in b) {
            a = b[d].id,
            f = this.getSprite(a),
            h = Ntry.entityManager.getComponent(a, Ntry.STATIC.SPRITE),
            g = Ntry.entityManager.getComponent(a, Ntry.STATIC.POSITION),
            f.x = g.x,
            f.y = g.y,
            f.scaleX = h.scaleX,
            f.regX = h.regX,
            f.rotation = h.rotation,
            f.alpha = h.opacity,
            f.sourceRect = {
                x: h.currentFrame * h.width,
                y: h.currentFrameKey * h.height,
                width: h.width,
                height: h.height
            },
            c.splice(c.indexOf(a), 1);
        }
        for (l in c) {
            this.removeSprite(c[l]);
        }
        this.canvas.update();
    }
    ;
    a.getBitmap = function(b) {
        return this._bitmaps[b] || this.createBitmap(b);
    }
    ;
    a.createBitmap = function(b) {
        var c = Ntry.entityManager.getComponent(b, Ntry.STATIC.BITMAP)
          , d = this._bitmapPath
          , d = d + c.image
          , d = new createjs.Bitmap(d + ".png");
        d.regX = null != c.regX ? c.regX : this.tileSize / 2;
        d.regY = null != c.regY ? c.regY : this.tileSize / 2;
        this._bitmaps[b] = d;
        this.canvas.addChild(d);
        return d;
    }
    ;
    a.removeBitmap = function(b) {
        var c = this.getBitmap(b);
        this.canvas.removeChild(c);
        delete this._bitmaps[b];
    }
    ;
    a.getSprite = function(b) {
        return this._sprites[b] || this.createSprite(b);
    }
    ;
    a.createSprite = function(b) {
        var c = Ntry.entityManager.getComponent(b, Ntry.STATIC.SPRITE)
          , d = this._bitmapPath
          , d = d + c.image
          , d = new createjs.Bitmap(d + ".png");
        d.regY = c.regY ? c.regY : this.tileSize / 2;
        d.regX = this.tileSize / 2;
        this._sprites[b] = d;
        this.canvas.addChild(d);
        return d;
    }
    ;
    a.removeSprite = function(b) {
        var c = this.getSprite(b);
        this.canvas.removeChild(c);
        delete this._sprites[b];
    }
    ;
}
)(Ntry.CanvasRenderer.prototype);
Ntry.CfestIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryIntroContainer")
          , d = Ntry.createElement("div", c, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        c = Ntry.createElement("div", c, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", c, null, "ntryIntroLeftImg");
        d = Ntry.createElement("div", c, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", d, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", d, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", c, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Menus.start;
        this._view.bindOnClick(function(c) {
            c.target == this && $(b).css("display", "none");
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , c = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        this._rightTop.innerHTML = c + "/6";
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        this._startButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        $(this._view).css("display", "block");
    }
    ;
}
)(Ntry.CfestIntro.prototype);
Ntry.CodingpartyHint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._currentIndex = 0;
    this._hints;
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , c = this._view
          , d = Ntry.createElement("div", c, null, "ntryHintHeader");
        this._hintNumber = Ntry.createElement("span", d, null, "ntryHintQuestionNumber");
        var d = Ntry.createElement("span", d, null, "codingpartyHintContainer")
          , a = Ntry.createElement("div", d, null, "codingpartyHintTopDiv");
        this._hintTitle = Ntry.createElement("div", a, null, "ntryHintTitle");
        this._hintsIndicator = Ntry.createElement("span", a, null, "ntryHintsIndicator");
        this._hintContent = Ntry.createElement("div", d, null, "ntryHintContent");
        this._hintThumbnail = Ntry.createElement("div", c, null, "cpatryHintThumbnail");
        this._hintDetail = Ntry.createElement("div", c, null, "ntryHintDetailView");
        this._hintModal = Ntry.createElement("div", c, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(c) {
            c.target == this && (c.stopPropagation(),
            c.preventDefault(),
            b._hintModal.ntryRemove());
        });
        c = Ntry.createElement("div", this._hintModal, null, "ntryHintModalContainer");
        d = Ntry.createElement("div", c, null, "ntryHintModalTitle");
        Ntry.createElement("span", d, null, "ntryModalTitleText").innerHTML = Lang.Menus.help;
        this._closeButton = Ntry.createElement("span", d, null, "ntryHintModalCloseButton");
        this._modalContent = Ntry.createElement("div", c, null, "ntryHintModalContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hints = Ntry.configManager.getConfig("intro");
        this.fillHintContent();
    }
    ;
    a.fillHintContent = function() {
        var b = this._hintContent
          , c = this._hintsIndicator
          , d = this._hints;
        this._hintNumber.innerHTML = Lang.Menus.goals;
        for (b.innerHTML = d.content; c.firstChild; ) {
            c.removeChild(c.firstChild);
        }
        if (d.image) {
            b = d.image;
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("cpartyHintThumbnail");
            this._hintThumbnail.addClass("cpartyHintThumbnail_" + b);
            1 != b && 6 != b && 11 != b || this._hintThumbnail.addClass(Lang.type);
            this._modalContent.removeClasses();
            this._modalContent.addClass("cpartyHintModalImage");
            this._modalContent.addClass("cpartyHintModalImage_" + b);
            1 != b && 6 != b && 11 != b || this._modalContent.addClass(Lang.type);
            var a = this;
            this._hintThumbnail.bindOnClick(function(b) {
                b.stopPropagation();
                b.preventDefault();
                a._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                a._hintModal.ntryRemove();
            });
        }
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , c = Ntry.configManager.getConfig("tileSize")
          , d = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * c * (3 < b.height ? 1 / b.width * 7 : 1) + d + 13;
        $(this._view).css("top", b + "px");
    }
    ;
}
)(Ntry.CodingpartyHint.prototype);
Ntry.CpartyIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryIntroContainer")
          , d = Ntry.createElement("div", c, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        c = Ntry.createElement("div", c, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", c, null, "ntryIntroLeftImg");
        d = Ntry.createElement("div", c, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", d, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", d, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", c, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Menus.start;
        this._view.bindOnClick(function(c) {
            c.target == this && $(b).css("display", "none");
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , c = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        10 >= c ? this._leftImg.addClass("cpartyIntroLeft1Img") : 20 >= c && this._leftImg.addClass("cpartyIntroLeft2Img");
        this._rightTop.innerHTML = c / 10 && 0 == c % 10 ? "10/10" : c % 10 + "/10";
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        this._startButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        $(this._view).css("display", "block");
    }
    ;
}
)(Ntry.CpartyIntro.prototype);
Ntry.CpartyPlayground = function() {
    var a = this;
    this._workspaceScript = {};
    this._view = Ntry.interfaceManager.getDom("ntryPlayground");
    this.createDom();
    this.injectBlockly();
    this.bindMouseEventToBlockMenu();
    this.setBlockMenu();
    this.isResizing = !1;
    this._currentCnt = -1;
    Ntry.addEventListener("workspaceRestore", this, this.syncScript);
    Blockly.mainWorkspace.svgBlockCanvas_.addEventListener("blocklyWorkspaceChange", function() {
        a.updateCurrentBlockNumber(Ntry.countUsedBlocks());
    });
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryRightColTop");
        this._goalBlockNumber = Ntry.createElement("div", c, "goalBlockNumber", "goalBlockNumber");
        this.topbackground = Ntry.createElement("div", c, null, "topbackground");
        c = Ntry.createElement("div", b, null, "ntryRightColInfo");
        Ntry.createElement("div", c, null, "ntryRightColInfoLeft").innerHTML = Lang.Menus.block_box;
        Ntry.createElement("div", c, null, "ntryRightColInfoRight").innerHTML = Lang.Menus.block_assembly;
        b = Ntry.createElement("div", b, null, "ntryPlayground");
        this._blockMenu = Ntry.createElement("div", b, null, "ntryPlaygroundBlockMenu", "blockMenuWorkspace", "selectDisable");
        this._workspace = Ntry.createElement("div", b, null, "ntryPlaygroundWorkspace");
        this.blockBg = Ntry.createElement("div", this._blockMenu, null, "blockBackground");
    }
    ;
    a.syncScript = function() {
        var b = Ntry.entityManager
          , c = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace)
          , c = Blockly.Xml.domToText(c)
          , c = c.replace(/\sxmlns=\"(.*?)\"/, "")
          , c = c.replace(/\sclass=\"(.*?)\"/g, "")
          , c = c.replace(/\sid=\"(.*?)\"/g, "")
          , c = c.replace(/\sinline=\"(.*?)\"/g, "")
          , d = b.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        _.isEmpty(d) || (d = _.first(_.keys(d)),
        b.addComponent(d, {
            script: c,
            timeStamp: (new Date).getTime(),
            type: Ntry.STATIC.SCRIPT_CONTAINER
        }));
    }
    ;
    a.update = function() {
        var b = Ntry.entityManager
          , c = b.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        !_.isEmpty(c) && (c = _.first(_.keys(c)),
        b = b.getComponent(c, Ntry.STATIC.SCRIPT_CONTAINER),
        this._workspaceScript.script = b.script,
        b = b.timeStamp,
        c = this._workspaceScript,
        !c.timeStamp || c.timeStamp < b) && (c.timeStamp = b,
        this.setWorkspace(this._workspaceScript.script));
    }
    ;
    a.loadConfig = function() {
        this.updateGoalBlockNumber(Ntry.configManager.getConfig("limitBlockCnt"));
        this.setBlockMenu(Ntry.configManager.getConfig("availableBlocks"));
    }
    ;
    a.setBlockMenu = function(b) {
        var c = [];
        _.each(b, function(b) {
            b = Ntry.STATIC.blockInfo[b];
            b.xmls ? _.each(b.xmls, function(b) {
                c.push(jQuery.parseXML(b).childNodes[0]);
            }) : c.push(jQuery.parseXML(b.xml).childNodes[0]);
        });
        Blockly.mainWorkspace.blockMenu.show(c);
    }
    ;
    a.setWorkspace = function(b) {
        Blockly.mainWorkspace.clear();
        Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, $.parseXML(b).childNodes[0]);
    }
    ;
    a.setIsResizing = function(b) {
        Ntry.CpartyPlayground.isResizing = b;
    }
    ;
    a.injectBlockly = function() {
        Blockly.inject(this._workspace, {
            path: ".././",
            toolbox: Ntry.parseTexttoXML("<xml></xml>"),
            trashcan: !0,
            blockmenu: this._blockMenu,
            mediaFilePath: "/lib/entryjs/images/"
        });
        Blockly.mainWorkspace.flyout_.hide();
    }
    ;
    a.updateBlockCnt = function(b, c, d) {
        b = b.childNodes;
        var a = 0
          , f = this._goalBlockNumber.childNodes.length;
        if (0 < d - c) {
            for (a = c = 0; a < b.length; a++) {
                b[a].removeClass("cpartyGoalBlockAdd");
            }
            if (d > f) {
                for (; c < f; ) {
                    b[c].addClass("cpartyGoalFulled"),
                    c++;
                }
            } else {
                for (; c < d; ) {
                    b[c].addClass("cpartyGoalBlockAdd"),
                    c++;
                }
            }
        } else {
            if (d <= f && c >= f + 1) {
                for (; a < f; ) {
                    b[a].removeClass("cpartyGoalFulled"),
                    a++;
                }
            }
            if (c > f && d <= f) {
                for (a = 0; a < d; ) {
                    b[a].addClass("cpartyGoalBlockAdd"),
                    a++;
                }
            } else {
                if (d <= f) {
                    for (; d < c; ) {
                        b[d].removeClass("cpartyGoalBlockAdd"),
                        d++;
                    }
                }
            }
        }
    }
    ;
    a.updateCurrentBlockNumber = function(b, c) {
        var d = document.getElementById("goalBlockNumber");
        c && this.updateBlockCnt(d, 0, b);
        this._currentCnt != b && this._currentCnt != b && (0 > this._currentCnt && (this._currentCnt = 0),
        this.updateBlockCnt(d, this._currentCnt, b),
        this._currentCnt = b);
    }
    ;
    a.updateGoalBlockNumber = function(b) {
        for (var c = this._goalBlockNumber, d = 0; d < b; d++) {
            var a = Ntry.createElement("div", null, null, "cpartyGoalBlockNumberSub");
            c.appendChild(a);
        }
    }
    ;
    a.bindMouseEventToBlockMenu = function() {
        var b = this._blockMenu;
        $(b).mouseenter(function(b) {
            this.isResizing || (b = Blockly.mainWorkspace.blockMenu.blockMenuWidth + 84,
            200 < Blockly.mainWorkspace.blockMenu.blockMenuWidth && (this.widthBackup = 200,
            $(".ntryPlaygroundBlockMenu>svg").stop().animate({
                width: b - 64
            }, 200)));
        });
        $(b).mouseleave(function(c) {
            this.isResizing || (b.widthBackup && !Blockly.mainWorkspace.blockMenu.hasStalkerBlock && $(".ntryPlaygroundBlockMenu>svg").stop().animate({
                width: this.widthBackup
            }, 200),
            delete this.widthBackup);
        });
    }
    ;
    a.mouseupBlock = function() {
        if (Entry.activityReporter) {
            var b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace)
              , b = Blockly.Xml.domToText(b)
              , b = b.replace(/\sxmlns=\"(.*?)\"/, "")
              , b = b.replace(/\sclass=\"(.*?)\"/g, "")
              , b = b.replace(/\sid=\"(.*?)\"/g, "")
              , b = b.replace(/\sinline=\"(.*?)\"/g, "");
            Entry.activityReporter.add(new Entry.Activity("editBlock",[["script", b]]));
        }
    }
    ;
}
)(Ntry.CpartyPlayground.prototype);
Ntry.Ebs2015Hint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryHintHeader");
        Ntry.createElement("span", c, null, "ntryHintQuestionNumber").innerHTML = "\ub3c4\uc6c0\ub9d0";
        c = Ntry.createElement("span", c, null, "ntryHintContainer");
        this._hintTitle = Ntry.createElement("div", c, null, "ntryHintTitle");
        this._hintContent = Ntry.createElement("div", b, null, "ntryHintContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hint = Ntry.configManager.getConfig("hint");
        this.fillHintContent();
    }
    ;
    a.fillHintContent = function() {
        var b = this._hint
          , c = this._hintContent;
        this._hintTitle.innerHTML = b.title;
        c.innerHTML = b.content;
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , c = Ntry.configManager.getConfig("tileSize")
          , d = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * c * (3 < b.height ? 1 / b.width * 7 : 1) + d + 13;
        $(this._view).css("top", b + "px");
    }
    ;
}
)(Ntry.Ebs2015Hint.prototype);
Ntry.Ebs2015Intro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this.createDom();
}
;
(function(a) {
    a._ebsId_counts = [3, 4, 4];
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement("div", b, null, "ntryIntroContainer")
          , d = Ntry.createElement("div", c, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        c = Ntry.createElement("div", c, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", c, null, "ntryIntroLeftImg");
        d = Ntry.createElement("div", c, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", d, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", d, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", c, null, "ntryIntroStartButton");
        this._startButton.innerHTML = "\uc2dc\uc791\ud558\uae30";
        this._view.bindOnClick(function(c) {
            c.target == this && $(b).css("display", "none");
        });
    }
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , c = Ntry.configManager.getConfig("stageId")
          , c = c.split("-");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        this._rightTop.innerHTML = c[1] + "/" + this._ebsId_counts[c[0] - 1];
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        this._startButton.bindOnClick(function() {
            $(d._view).css("display", "none");
        });
        $(this._view).css("display", "block");
    }
    ;
}
)(Ntry.Ebs2015Intro.prototype);
Ntry.Engine = function() {
    this._status = Ntry.STATIC.ENGINE_STOP;
    Ntry.addEventListener("engineButtonClicked", this, this.changeStatus);
    Ntry.addEventListener("complete", this, this.clearScript);
    Ntry.addEventListener("replay", this, this.replayStatus);
}
;
(function(a) {
    a.START_BLOCKS = ["maze_step_start", "maze_step_unstart", "ai_start", "ai_start_un"];
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.RUNNING_SCRIPT), c;
        for (c in b) {
            this.computeFunction(b[c]);
        }
    }
    ;
    a.computeFunction = function(b) {
        for (var c = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.RUNNING_SCRIPT), d = c.script, a = !0, f = !1; d && !f && a; ) {
            try {
                var a = !d.isRooped
                  , g = d.run(b)
                  , f = g && g === d
                  , d = g;
            } catch (h) {
                throw h;
            }
        }
        d ? c.script = d : (Ntry.entityManager.removeComponent(b.id, Ntry.STATIC.RUNNING_SCRIPT),
        Ntry.dispatchEvent("executeEnd", Ntry.STATIC.COMPLETE));
    }
    ;
    a.clearScript = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.RUNNING_SCRIPT), c;
        for (c in b) {
            Ntry.entityManager.getComponent(c, Ntry.STATIC.RUNNING_SCRIPT).clearExecutors(),
            Ntry.entityManager.removeComponent(c, Ntry.STATIC.RUNNING_SCRIPT);
        }
    }
    ;
    a.getStatus = function() {
        return this._status;
    }
    ;
    a.setStatus = function(b) {
        this._status = b;
        var c = Ntry.STATIC;
        switch (b) {
        case c.ENGINE_STOP:
            Ntry.dispatchEvent("stop");
            break;
        case c.ENGINE_RUN:
            Ntry.dispatchEvent("workspaceRestore"),
            Ntry.dispatchEvent("run"),
            this.raiseEvent();
        }
    }
    ;
    a.changeStatus = function() {
        var b = this.getStatus()
          , c = Ntry.STATIC;
        switch (b) {
        case c.ENGINE_STOP:
            this.setStatus(c.ENGINE_RUN);
            break;
        case c.ENGINE_RUN:
            this.setStatus(c.ENGINE_STOP);
            break;
        case c.ENGINE_END:
            this.setStatus(c.ENGINE_STOP);
        }
    }
    ;
    a.replayStatus = function() {
        this.setStatus(Ntry.STATIC.ENGINE_END);
    }
    ;
    a.raiseEvent = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER), c;
        for (c in b) {
            for (var d = b[c], a = Ntry.entityManager.getComponent(d.id, Ntry.STATIC.SCRIPT_CONTAINER), a = Blockly.Xml.textToDom(a.script), f, g = 0; g < a.childNodes.length; g++) {
                -1 < this.START_BLOCKS.indexOf(a.childNodes[g].getAttribute("type")) && (f = a.childNodes[g]);
            }
            Ntry.entityManager.addComponent(d.id, {
                type: Ntry.STATIC.RUNNING_SCRIPT,
                entity: d,
                xml: f
            });
        }
    }
    ;
}
)(Ntry.Engine.prototype);
Ntry.AiResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , c = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , d = Ntry.createElement("div", c, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        c = Ntry.createElement("div", c, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", c, null, "ntryResultLeftImg");
        d = Ntry.createElement("div", c, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", d, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = Ntry.createElement("div", this._successContent, null, "ntryResultCertDiv_ai", "ntryRemove");
        this._certDivLeft = Ntry.createElement("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = Ntry.createElement("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = Ntry.createElement("input", this._certDivLeft, null, "ntryResultContentNameInput_ai");
        this._certNameInput.type = "text";
        this._certLink = Ntry.createElement("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = Ntry.createElement("div", d, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryAiResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", c, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", c, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var c = "", d = 0; d < b; d++) {
            var a = Math.floor(62 * Math.random())
              , c = c + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(a, a + 1)
        }
        return c;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function(b) {
        this._usedBlockCnt.ntryRemove();
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("ntryResultSuccessAi");
        var c = this;
        this._closeButton.bindOnClick(function() {
            $(c._view).css("display", "none");
            $(c._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(c._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var d = c._certNameInput.value;
            "" === d ? (alert(Lang.Users.name_not_empty),
            c._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + d + "/" + b);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
    }
    ;
    a.complete = function(b, c) {
        var d = Ntry.configManager.getConfig("stageId");
        d && (d = Number(d));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(a._view).css("display", "none");
        });
        this._nextLink = "/we/ai#!/" + (d - 20 + 1);
        window.cpartyuserkey && (this._nextLink = "/codingparty/2015#!/5/" + (d - 20 + 1));
        window.aiuserkey || (window.aiuserkey = this.randomString(8),
        $.ajax({
            method: "POST",
            url: "/api/ai/user",
            data: {
                key: window.aiuserkey
            },
            cache: !1
        }));
        this._certLink.rebindOnClick(function() {
            var b = a._certNameInput.value;
            "" === b ? (alert("\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694."),
            a._certNameInput.focus()) : window.location.href = window.cpartyuserkey ? "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + b + "/5" : "/we/ai#!/c/c/" + window.aiuserkey + "/" + b;
        });
        b ? this.inspectEssential() || 30 === d ? this.success(d, this.getScrollX()) : this.fail(d, Ntry.STATIC.ESSENTIAL_REQUIRED) : 30 === d && 0 < this.getScrollX() ? this.success(d, this.getScrollX()) : this.fail(d, c);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var c = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!c) {
            return !0;
        }
        for (var c = _.filter(c, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), c = _.reduce(c, function(b, c) {
            var d = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(c));
            return b + d;
        }, ""), d = 0, a = 0, f = b.blocks.length; a < f; a++) {
            RegExp(b.blocks[a], "i").test(c) && d++;
        }
        return d >= b.matchCnt;
    }
    ;
    a.getScrollX = function() {
        if (!this._scroll) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCROLL);
            if (b) {
                for (var c in b) {
                    this._scroll = Ntry.entityManager.getComponent(c, Ntry.STATIC.SCROLL);
                }
            } else {
                return 0;
            }
        }
        return Math.floor(this._scroll.scrollX / 100);
    }
    ;
    a.success = function(b, c) {
        this._leftImg.addClass("ntryResultSuccessAi");
        this._replayButton.removeClasses();
        30 === b ? (window.aiuserkey && $.ajax({
            method: "PUT",
            url: "/api/ai/user/finish/" + window.aiuserkey,
            cache: !1
        }),
        95 <= c ? (this._usedBlockCnt.ntryRemove(),
        this._usedBlockPrefix.ntryRemove(),
        this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_1) : (this._usedBlockCnt.innerHTML = c,
        this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_2,
        this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_3),
        this._replayButton.addClass("ntryResultReplayButtonFailed"),
        this._certDiv.ntryShow(),
        this._nextButton.ntryRemove()) : (this._usedBlockCnt.innerHTML = Ntry.countUsedBlocks(),
        this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_4,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._replayButton.addClass("ntryResultReplayButton"),
        this._nextButton.ntryShow());
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        window.cpartyuserkey && Ntry.dispatchEvent("saveLogs", "finish");
    }
    ;
    a.fail = function(b, c) {
        var d = ""
          , a = 1
          , f = [Lang.Menus.ai_cause_msg_1, Lang.Menus.ai_cause_msg_2, Lang.Menus.ai_cause_msg_3, Lang.Menus.ai_cause_msg_4];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (c) {
        case Ntry.STATIC.SIMOOROOK:
            d = f[0];
            a = 1;
            break;
        case Ntry.STATIC.COLLISION:
            d = f[1];
            a = 2;
            break;
        case Ntry.STATIC.LOST:
            d = f[2];
            a = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            d = f[3],
            a = 4,
            this.renderBlocks(b);
        }
        this._leftImg.addClass("ntryResultFail_ai_" + a);
        this._failCauseString.innerHTML = d;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var c = 1;
        23 == b ? c = 1 : 24 == b ? c = 2 : 25 <= b && 30 >= b && (c = 3);
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryAiResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryAiResultEssentialBlocks_" + c);
    }
    ;
}
)(Ntry.AiResult.prototype);
Ntry.CfestResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = document.cookie.split("lang=");
        if (0 >= b.length) {
            return "ntryResultSuccessImg";
        }
        for (var d = 0; d < b.length; d++) {
            if ("en" == b[d].substring(0, 2)) {
                return "ntryResultSuccessImgEn";
            }
        }
        return "ntryResultSuccessImg";
    }
    a.createDom = function() {
        var b = this
          , d = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , a = Ntry.createElement("div", d, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", a, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        d = Ntry.createElement("div", d, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", d, null, "ntryResultLeftImg");
        a = Ntry.createElement("div", d, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", a, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._limitBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certLink = Ntry.createElement("div", this._successContent, null, "ntryResultContentCert", "ntryRemove");
        this._certLink.innerHTML = Lang.Menus.close_experience;
        this._failContent = Ntry.createElement("div", a, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", d, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", d, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(b, d) {
        var a = Ntry.configManager.getConfig("stageId");
        a && (a = Number(a));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = "/we/cfest#!/" + (a + 1);
        this._certLink.bindOnClick(function() {
            window.location.href = "/we/cfest#!/1";
        });
        b ? this.inspectEssential() ? this.success(a) : this.fail(a, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(a, d);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var d = Ntry.entityManager
          , a = d.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        if (_.isEmpty(a)) {
            return !1;
        }
        if (!d.getComponent(_.first(_.keys(a)), Ntry.STATIC.RESTORE)) {
            return !0;
        }
        d = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!d) {
            return !0;
        }
        for (var d = _.filter(d, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), d = _.reduce(d, function(b, c) {
            var d = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(c));
            return b + d;
        }, ""), f = a = 0, g = b.blocks.length; f < g; f++) {
            RegExp(b.blocks[f], "i").test(d) && a++;
        }
        return a >= b.matchCnt;
    }
    ;
    a.success = function(c) {
        var d = Ntry.configManager.getConfig("limitBlockCnt")
          , a = Ntry.countUsedBlocks();
        this._leftImg.addClass(b());
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        6 === c ? this._replayButton.addClass("ntryResultFailAndReply") : this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._usedBlockCnt.innerHTML = a;
        this._limitBlockCnt.innerHTML = d;
        a === d ? (this._usedBlockPrefix.innerHTML = Lang.Menus.perfect,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._limitBlockCnt.ntryRemove(),
        this._limitBlockPrefix.ntryRemove(),
        this._limitBlockSuffix.ntryRemove()) : a < d ? (this._usedBlockPrefix.innerHTML = Lang.Menus.awesome,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_go_to_next,
        this._limitBlockCnt.ntryRemove(),
        this._limitBlockPrefix.ntryRemove(),
        this._limitBlockSuffix.ntryRemove(),
        this._replayButton.ntryRemove()) : (this._usedBlockPrefix.innerHTML = Lang.Menus.good,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._limitBlockPrefix.innerHTML = Lang.Menus.but,
        this._limitBlockSuffix.innerHTML = Lang.Menus.try_again,
        this._limitBlockCnt.ntryShow("ntryShowInlineBlock"),
        this._limitBlockPrefix.ntryShow("ntryShowInline"),
        this._limitBlockSuffix.ntryShow("ntryShowInline"));
        6 === c ? (this._usedBlockCnt.ntryRemove(),
        this._usedBlockPrefix.ntryRemove(),
        this._usedBlockSuffix.innerHTML = Lang.Menus.cfest_success,
        this._certLink.ntryShow(),
        this._replayButton.ntryShow(),
        this._nextButton.ntryRemove()) : this._nextButton.ntryShow();
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
    a.fail = function(b, d) {
        var a = ""
          , a = [Lang.Menus.cause_msgs_1, Lang.Menus.cause_msgs_2, Lang.Menus.cause_msgs_3, Lang.Menus.cause_msgs_4, Lang.Menus.cause_msgs_5];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (d) {
        case Ntry.STATIC.JUMP:
            a = a[1];
            break;
        case Ntry.STATIC.SIMOOROOK:
            a = a[4];
            break;
        case Ntry.STATIC.WALL_CRASH:
            a = a[0];
            break;
        case Ntry.STATIC.BEE_ATTACK:
            a = a[2];
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            a = a[2];
            break;
        case Ntry.STATIC.SLIP:
            a = a[2];
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            a = a[3];
            this.renderBlocks(b);
            break;
        default:
            a = a[4];
        }
        this._leftImg.addClass("ntryResultFailCfest");
        this._failCauseString.innerHTML = a;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var d = 5;
        if (3 === b || 4 === b) {
            d = 6;
        } else {
            if (5 === b || 6 === b) {
                d = 7;
            } else {
                if (7 === b || 8 === b) {
                    d = 1;
                } else {
                    if (9 === b) {
                        d = 2;
                    } else {
                        if (10 <= b && 12 >= b) {
                            d = 3;
                        } else {
                            if (13 === b || 14 === b) {
                                d = 4;
                            }
                        }
                    }
                }
            }
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryResultEssentialBlock_" + d);
    }
    ;
}
)(Ntry.CfestResult.prototype);
Ntry.CpartyCarResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , d = Ntry.createElement
          , a = d("div", this._view, null, "ntryResultContainer")
          , f = d("div", a, null, "ntryResultTitle");
        this._closeButton = d("span", f, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        a = d("div", a, null, "ntryResultContent");
        this._leftImg = d("div", a, null, "ntryResultLeftImg");
        f = d("div", a, null, "ntryResultRightDiv");
        this._successContent = d("div", f, null, "ntryResultRightContent");
        this._usedBlockPrefix = d("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockSuffix = d("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = d("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockSuffix = d("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = d("div", this._successContent, null, "cpartyCarResultCertDiv", "ntryRemove");
        this._certDivLeft = d("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = d("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = d("input", this._certDivLeft, null, "ntryResultContentNameInput");
        this._certNameInput.type = "text";
        this._certLink = d("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = d("div", f, null, "ntryResultRightContent");
        this._failCauseString = d("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = d("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = d("span", a, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = d("span", a, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var d = "", a = 0; a < b; a++) {
            var f = Math.floor(62 * Math.random())
              , d = d + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return d;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function(b) {
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        3 == b ? this._leftImg.addClass("ntryResultSuccess1Img") : 4 == b && this._leftImg.addClass("cpartyCarResultSuccess4Img");
        var d = this;
        this._closeButton.bindOnClick(function() {
            $(d._view).css("display", "none");
            $(d._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(d._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var a = d._certNameInput.value;
            "" === a ? (alert(Lang.Users.name_not_empty),
            d._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + a + "/" + b);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.removeClass("codingpartyResultCertReplay");
    }
    ;
    a.complete = function(b, d) {
        var a = Ntry.configManager.getConfig("stageId");
        a && (a = Number(a));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        mode = 3 + parseInt((a - 1) / 10);
        4 == mode && (a -= 10);
        this._nextLink = "/codingparty/2015#!/" + mode + "/" + (a + 1);
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Menus.cparty_insert_name),
            f._certNameInput.focus()) : window.location.href = "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + b + "/" + mode;
        });
        if (3 == mode) {
            if (b) {
                var g = this.inspectEssential();
                g ? (this.success(a),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(a, Ntry.STATIC.ESSENTIAL_REQUIRED);
            } else {
                this.fail(a, d);
            }
        } else {
            if (4 == mode) {
                b ? (g = this.inspectCodeEssential()) ? (this.Codesuccess(a),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(a, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(a, d);
            } else {
                return;
            }
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectCodeEssential = function() {
        var c = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === c) {
            return !0;
        }
        var c = c.blocks.slice(0)
          , a = b();
        if (_.isEmpty(a)) {
            return !1;
        }
        a = a.getEventMap("start")[0].getThread();
        if (_.isEmpty(a)) {
            return !1;
        }
        for (var a = a.getBlockList(), e = -1, f = 0; f < a.length; f++) {
            if (e = c.indexOf(a[f].type),
            -1 < e && c.splice(e, 1),
            0 === c.length) {
                return !0;
            }
        }
        return !1;
    }
    ;
    a.getBlockNameInLoop = function(b) {
        b = b._toJSON().values.STATEMENT._data;
        for (var a = [], e = 0; e < b.length; e++) {
            a.push(b[e]._toJSON().type);
        }
        return a;
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var a = Ntry.entityManager
          , e = a.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        if (_.isEmpty(e)) {
            return !1;
        }
        if (!a.getComponent(_.first(_.keys(e)), Ntry.STATIC.RESTORE)) {
            return !0;
        }
        a = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!a) {
            return !0;
        }
        for (var a = _.filter(a, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), a = _.reduce(a, function(b, c) {
            var a = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(c));
            return b + a;
        }, ""), f = e = 0, g = b.blocks.length; f < g; f++) {
            RegExp(b.blocks[f], "i").test(a) && e++;
        }
        return e >= b.matchCnt;
    }
    ;
    a.success = function(b) {
        var a = Ntry.configManager.getConfig("limitBlockCnt"), e;
        (b = Ntry.configManager.getConfig("stageId")) && (b = Number(b));
        10 >= b && (this._leftImg.addClass("ntryResultSuccess1Img"),
        this._leftImg.addClass(Lang.type),
        e = Ntry.countUsedBlocks());
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        10 === b ? (this._replayButton.addClass("codingpartyResultCertReplay"),
        $(this._replayButton).css("bottom", "22px")) : this._replayButton.addClass("ntryResultReplayButtonFailed");
        e === a ? 10 === b ? (this._usedBlockPrefix.innerHTML = "",
        this._usedBlockSuffix.innerHTML = Lang.Menus.cparty_result_success_3) : this._usedBlockPrefix.innerHTML = Lang.Menus.cparty_result_success_1 : this._usedBlockPrefix.innerHTML = e < a ? Lang.Menus.cparty_result_success_1 : Lang.Menus.cparty_result_success_2;
        10 === b ? (this._certDiv.ntryShow(),
        $(this._certDiv).show(),
        this._nextButton.ntryRemove()) : this._nextButton.ntryShow();
        a = CPartyData.player[b];
        e = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
        a.userScript = Blockly.Xml.domToText(e);
        this._successContent.ntryShow();
        this._replayButton.ntryShow();
        this._failContent.ntryRemove();
        window.cpartyuserkey && Ntry.dispatchEvent("addActivityLog", b, {
            name: "finish"
        });
    }
    ;
    a.currentUsedBlock = function() {
        var c = b();
        if (c) {
            return c.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.fail = function(b, a) {
        var e = 1;
        (b = Ntry.configManager.getConfig("stageId")) && (b = Number(b));
        10 >= b ? e = 1 : 20 >= b && 10 < b && (e = 4);
        var f = ""
          , g = 1
          , f = [Lang.Menus.cparty_result_fail_1, Lang.Menus.cparty_result_fail_2, Lang.Menus.cparty_result_fail_3, Lang.Menus.cparty_result_fail_4, Lang.Menus.cparty_result_fail_5];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            f = f[3];
            g = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            f = f[0];
            g = 2;
            break;
        case Ntry.STATIC.BEE_ATTACK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.SLIP:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            f = f[2];
            g = 1;
            this.renderBlocks(b, !0);
            break;
        case Ntry.STATIC.GO_SLOW_CRASH:
            f = f[4];
            g = 4;
            this.renderBlocks(b);
            break;
        default:
            f = f[3],
            g = 1;
        }
        this._leftImg.addClass("ntryResultFail_" + e + "_" + g);
        this._failCauseString.innerHTML = f;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b, a) {
        if (a) {
            if (10 < b) {
                switch (b % 10) {
                case 4:
                    ;
                case 5:
                    type = 7;
                    break;
                case 6:
                    ;
                case 7:
                    type = 8;
                    break;
                case 8:
                    type = 9;
                    break;
                case 9:
                    ;
                case 10:
                    type = 10;
                }
            } else {
                type = 5;
            }
        } else {
            type = 6;
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("cpartyResultEssentialBlocks");
        this._essentialBlocks.addClass("cpartyResultEssentialBlock_" + type);
        this._essentialBlocks.addClass(Lang.type);
    }
    ;
    a.currentUsedBlock = function() {
        var c = b();
        if (c) {
            return c.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.Codesuccess = function(c) {
        CPartyData.player[10 + c].userCode = b().toJSON();
        Ntry.dispatchEvent("jrActivityStageFinish", c);
        var a = Ntry.configManager.getConfig("limitBlockCnt")
          , e = this.currentUsedBlock();
        this._leftImg.addClass("cpartyCarResultSuccess4Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        10 === c ? this._replayButton.addClass("codingpartyResultCertReplay") : this._replayButton.addClass("ntryResultReplayButtonFailed");
        var f = this._usedBlockPrefix
          , g = Lang.Menus;
        e <= a ? f.innerHTML = 10 != c ? g.cparty_car_popup_prefix_1 : g.cparty_car_popup_suffix : e > a && (f.innerHTML = g.cparty_car_popup_prefix_2);
        a = this._nextButton;
        10 === c ? (this._certDiv.ntryShow(),
        $(this._certDiv).show(),
        a.ntryRemove(),
        this._replayButton.ntryRemove()) : a.ntryShow();
        this._successContent.ntryShow();
        this._replayButton.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
}
)(Ntry.CpartyCarResult.prototype);
Ntry.CpartyJrResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.path = window.location.pathname;
    this.path = "/jr" == this.path ? this.path + "#!/" : "/codingparty/2015" == this.path ? this.path + "#!/2/" : this.path + "/";
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = Lang.Menus
          , f = a("div", this._view, null, "ntryResultContainer")
          , g = a("div", f, null, "ntryResultTitle");
        this._closeButton = a("span", g, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = e.close;
        f = a("div", f, null, "ntryResultContent");
        this._leftImg = a("div", f, null, "ntryResultLeftImg");
        g = a("div", f, null, "ntryResultRightDiv");
        this._successContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "ntryResultCertDiv", "juni", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel", "juni");
        this._certNameLabel.innerHTML = e.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput", "juni");
        this._certNameInput.type = "text";
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = e.jr_down_cert;
        this._failContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", f, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = e.replay;
        this._nextButton = a("span", f, null, "ntryResultNextButton");
        this._nextButton.innerHTML = e.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function() {
        this._failContent.ntryRemove();
        $(this._replayButton).css("display", "none");
        $(this._view).css("display", "block");
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("jrResultSuccess1Img");
        var b = this;
        this._closeButton.bindOnClick(function() {
            $(b._view).css("display", "none");
            b._certDiv.ntryRemove();
            $(b._replayButton).css("display", "block");
        });
        this._certLink.rebindOnClick(function() {
            var a = b._certNameInput.value;
            "" === a ? (alert(Lang.Users.name_not_empty),
            b._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + a + "/2");
        });
        $(this._view).css("display", "block");
    }
    ;
    a.currentUsedBlock = function() {
        var c = b();
        if (c) {
            return c.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.complete = function(c, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = this.path + (e + 1);
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Users.name_not_empty),
            f._certNameInput.focus()) : window.location.href = window.cpartyuserkey ? "/codingparty/2015#!/certificate/" + window.cpartyuserkey + "/" + b + "/2" : f.path + "cert/" + b;
        });
        Ntry.configManager.getConfig("limitBlockCnt");
        this.currentUsedBlock();
        if (c) {
            if (this.inspectEssential()) {
                this.success(e);
                var g;
                "object" == typeof JRData && (g = JRData.player[e],
                g.userCode = b());
                "object" == typeof CPartyData && (g = CPartyData.player[e],
                g.userCode = b());
                Ntry.dispatchEvent("saveLogs", "finish");
            } else {
                this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            }
        } else {
            this.fail(e, a);
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        if (void 0 === Ntry.configManager.getConfig("essentialBlock")) {
            return !0;
        }
        var c = b();
        if (_.isEmpty(c)) {
            return !1;
        }
        c = c.getThreads();
        if (_.isEmpty(c)) {
            return !1;
        }
        for (var a = !1, e = 0, f = c.length; e < f; e++) {
            var g = c[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    if ("jr_repeat" == g[h].type) {
                        a = !0;
                        break;
                    }
                }
            }
        }
        return a;
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
    }
    ;
    a.success = function(b) {
        Ntry.dispatchEvent("jrActivityStageFinish", b);
        var a = Ntry.configManager.getConfig("limitBlockCnt")
          , e = this.currentUsedBlock();
        this._leftImg.addClass("jrResultSuccess1Img");
        this._leftImg.addClass(Lang.type);
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
        15 == b && this._replayButton.addClass("juniCert");
        var f, g = Lang.Menus;
        e <= a ? (this._certNameLabel.addClass("underCnt"),
        f = 15 != b ? Lang.Menus.cparty_jr_success_1 : g.cparty_jr_result_2) : e > a && (this._certNameLabel.removeClass("underCnt"),
        f = 15 == b ? g.cparty_jr_result_3 : g.cparty_jr_result_4);
        this._usedBlockPrefix.innerHTML = f;
        a = this._nextButton;
        15 === b ? (this._certDiv.ntryShow(),
        a.ntryRemove()) : a.ntryShow();
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
    a.fail = function(b, a) {
        var e = ""
          , f = 1
          , e = [Lang.Menus.jr_fail_dont_know, Lang.Menus.jr_fail_dont_go, Lang.Menus.jr_fail_no_pencil, Lang.Menus.jr_fail_forgot_pencil, Lang.Menus.jr_fail_need_repeat, Lang.Menus.jr_fail_much_blocks];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            e = e[0];
            f = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            e = e[1];
            f = 3;
            break;
        case Ntry.STATIC.GET_ITEM:
            e = e[2];
            f = 2;
            break;
        case Ntry.STATIC.WITHOUT_ITEM_SUCCESS:
            e = e[3];
            f = 2;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = e[4];
            f = 1;
            break;
        case Ntry.STATIC.OVER_LIMITED_BLOCK:
            e = e[5];
            f = 1;
            break;
        case Ntry.STATIC.NO_ITEM:
            e = e[5];
            f = 1;
            break;
        default:
            e = e[1],
            f = 1;
        }
        this._leftImg.addClass("ntryjrResultFail_" + f);
        this._failCauseString.innerHTML = e;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
}
)(Ntry.CpartyJrResult.prototype);
Ntry.Ebs2015Result = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    a._ebsId_counts = [3, 4, 4];
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "ntryResultContainer");
        this._container = b;
        var c = Ntry.createElement("div", b, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", c, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        b = Ntry.createElement("div", b, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", b, null, "ntryResultLeftImg");
        c = Ntry.createElement("div", b, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", c, null, "ntryResultRightContent");
        this._failContent = Ntry.createElement("div", c, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", b, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = "\ub2e4\uc2dc\ud558\uae30";
        this._nextButton = Ntry.createElement("span", b, null, "ntryResultNextButton");
        this._nextButton.innerHTML = "\ub2e4\uc74c\ub2e8\uacc4 \uac00\uae30";
        this._finalButton = Ntry.createElement("span", b, null, "ntryResultFinalButton");
        this._finalButton.innerHTML = Lang.Menus.go_further;
        this._finalButton.addClass("ntryRemove");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(b, c) {
        var a = Ntry.configManager.getConfig("stageId").split("-")
          , e = Number(a[0])
          , a = Number(a[1]);
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._container.removeClasses();
        this._container.addClass("ntryResultContainer");
        b ? this.inspectEssential() ? this.success(e, a) : this.fail(e, a, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(e, a, c);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var c = Ntry.entityManager
          , a = c.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        if (_.isEmpty(a)) {
            return !1;
        }
        if (!c.getComponent(_.first(_.keys(a)), Ntry.STATIC.RESTORE)) {
            return !0;
        }
        c = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!c) {
            return !0;
        }
        for (var c = _.filter(c, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), c = _.reduce(c, function(b, c) {
            var a = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(c));
            return b + a;
        }, ""), e = a = 0, f = b.blocks.length; e < f; e++) {
            RegExp(b.blocks[e], "i").test(c) && a++;
        }
        return a >= b.matchCnt;
    }
    ;
    a.success = function(b, c) {
        if (c === this._ebsId_counts[b - 1]) {
            this._leftImg.addClass("ntryResultSuccess2Img");
            this._finalButton.bindOnClick(function(b) {
                switch (b) {
                case 1:
                    window.location.href = "/le#!/55dfff4a798ef40c00475e0b";
                    break;
                case 2:
                    window.location.href = "/le#!/55e43b0b7e65fe11007078d8";
                    break;
                default:
                    window.location.href = "/le#!/55f2bc9d053dab150075be83";
                }
            });
            switch (b) {
            case 1:
                this._successContent.innerHTML = "\uc18c\ud53c\uc57c~ \uba4b\uc9c0\uac8c \uc2ec\ubd80\ub984\uc744 \uc131\uacf5\ud574\uc918\uc11c \uace0\ub9c8\uc6cc!<br/> \ub124\uac00 \ub0b4 \uce5c\uad6c\uc5ec\uc11c \uc815\ub9d0 \uc88b\uc544!";
                break;
            case 2:
                this._successContent.innerHTML = "\uc18c\ud53c\uc57c~ \uc624\ub298 \ud568\uaed8 \ub180\uc544\uc11c \uc815\ub9d0 \uc990\uac70\uc6e0\uc5b4! \ub2e4\uc74c\uc5d0 \ub610 \uac19\uc774 \ub180\uc790!";
                break;
            case 3:
                this._successContent.innerHTML = "\uc18c\ud53c\uc57c~ \ub108\uc758 \ubbf8\ub85c\ucc3e\uae30 \uc2e4\ub825, \uc815\ub9d0 \uba4b\uc9c4\uac78?<br/> \ub355\ubd84\uc5d0 \uae38\uc744 \uc783\uc9c0 \uc54a\uc558\uc5b4. \uace0\ub9c8\uc6cc!";
            }
            this._nextButton.ntryRemove();
            this._replayButton.removeClasses();
            this._finalButton.removeClass("ntryRemove");
            this._replayButton.addClass("ntryResultReplayButtonTryMore");
        } else {
            this._successContent.innerHTML = "\uc18c\ud53c, \uba4b\uc9c0\uac8c \ubbf8\uc158 \uc131\uacf5!",
            this._leftImg.addClass("ntryResultSuccess1Img"),
            this._nextButton.bindOnClick(function() {
                window.location.href = "/ebs_2015#!/" + b + "/" + (c + 1);
            }),
            this._nextButton.ntryShow(),
            this._replayButton.removeClasses(),
            this._replayButton.addClass("ntryResultReplayButton");
        }
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
    a.fail = function(b, c, a) {
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        var e = "\uc557, \ubbf8\uc158\uc744 \uc644\ub8cc\ud558\uc9c0 \ubabb\ud588\uc7ce\uc544? \ub2e4\uc2dc \ud55c \ubc88 \ud574\ubcf4\uc790!";
        3 === b && 4 === c && a === Ntry.STATIC.ESSENTIAL_REQUIRED ? (this._container.removeClasses(),
        this._container.addClass("ntryResultContainerTaller")) : (this._container.removeClasses(),
        this._container.addClass("ntryResultContainer"));
        switch (a) {
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = "\uaf2d \uc0ac\uc6a9\ud574\uc57c \ud558\ub294 \ube14\ub85d\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc558\uc5b4. \ub2e4\uc2dc \ud55c \ubc88 \ud574\ubcf4\uc790!";
            this.renderBlocks(b, c);
            break;
        case Ntry.STATIC.SEQUENCE_SIMOOROOK:
            e = "\uc557, \uc0ac\uacfc\ub97c \uc0ac\uc9c0 \uc54a\uace0 \ud560\uba38\ub2c8\ub301\uc5d0 \uc654\uc796\uc544? \ub2e4\uc2dc \ud55c \ubc88 \ud574\ubcf4\uc790!";
        }
        this._leftImg.addClass("ntryResultFailImg");
        this._failCauseString.innerHTML = e;
        this._failContent.ntryShow();
        this._successContent.ntryRemove();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultReplayButtonFailed");
    }
    ;
    a.renderBlocks = function(b, c) {
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryResultEssentialBlock_" + b + "_" + c);
    }
    ;
}
)(Ntry.Ebs2015Result.prototype);
Ntry.entryPlayground = function() {
    window.playground = this;
    this._view = Ntry.interfaceManager.getDom("ntryPlayground");
    this.createDom();
    this.isResizing = !1;
    this._currentCnt = 0;
    this.parserSetted = this._inited = !1;
    this.mode = "0";
    this.availableCode = this.code = null;
    Ntry.addEventListener("run", this, this.convertCode);
    this.currentNumberText = Lang.Menus.used_blocks;
    this.goalNumberText = Lang.Menus.maximum;
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , c = Ntry.createElement
          , a = c("div", b, null, "ntryRightColTop");
        this._currentBlockNumber = c("div", a, null, "currentBlockNumber");
        this._goalBlockNumber = c("div", a, null, "goalBlockNumber");
        this.topbackground = c("div", a, null, "topbackground");
        a = c("div", b, null, "ntryRightColInfo");
        this._blockBoxText = c("div", a, null, "ntryRightColInfoLeft");
        this._blockBoxText.innerHTML = Lang.Menus.block_box;
        this._blockAssemblyText = c("div", a, null, "ntryRightColInfoRight");
        this._blockAssemblyText.innerHTML = Lang.Menus.block_assembly;
        b = c("div", b, null, "ntryPlayground");
        this._blockMenu = c("div", b, "ntryPlaygroundBlockMenu", "ntryPlaygroundBlockMenu", "blockMenuWorkspace", "selectDisable");
        this._workspace = c("div", b, "ntryPlaygroundWorkspace", "ntryPlaygroundWorkspace");
        this.blockBg = c("div", this._blockMenu, null, "blockBackground");
        Entry.toast = new Entry.Toast;
        Entry.mainWorkspace = new Entry.Workspace({
            blockMenu: {
                dom: "ntryPlaygroundBlockMenu",
                scroll: !0
            },
            board: {
                dom: "ntryPlaygroundWorkspace"
            },
            textType: Entry.Vim.TEXT_TYPE_JS
        });
    }
    ;
    a.update = function() {
        this.code || this.findCode();
        this.availableCode || this.findAvailableCode();
        !this.parserSetted && this.code && this.availableCode && (Entry.mainWorkspace.vimBoard.setParserAvailableCode(this.code, this.availableCode),
        this.parserSetted = !0);
    }
    ;
    a.findCode = function() {
        var b = Ntry.entityManager, c = b.getEntitiesByComponent(Ntry.STATIC.CODE), a, e;
        for (e in c) {
            a = c[e];
        }
        a && (this.code = b.getComponent(a.id, Ntry.STATIC.CODE).code);
        this.code && (Entry.mainWorkspace.changeBoardCode(this.code),
        this.watchingThreads = b = this.code.getThreads(),
        this.code.executeEndEvent.attach(this, function() {
            Ntry.dispatchEvent("executeEnd", Ntry.STATIC.COMPLETE);
        }),
        this.code.changeEvent.attach(this, this.updateCurrentBlockNumber),
        this.updateCurrentBlockNumber(),
        this.setMode(this.mode),
        b && b[0] && b[0].getFirstBlock() && 0 === b[0].getFirstBlock().x && setTimeout(function() {
            this.code.board.alignThreads();
        }
        .bind(this), 0));
    }
    ;
    a.findAvailableCode = function() {
        var b = Ntry.configManager.getConfig("availableCode");
        b && (this.availableCode = new Entry.Code(b)) && Entry.mainWorkspace.changeBlockMenuCode(this.availableCode);
    }
    ;
    a.loadConfig = function() {
        this.code && (this.code.clear(),
        this.code = null);
        this.availableCode && (this.availableCode.clear(),
        this.availableCode = null);
        !this._inited && Entry.getMainWS() && (this._inited = !0,
        Entry.getMainWS().changeEvent.attach(this, this.setMode));
        var b = Ntry.configManager.getConfig("blockMenuAlign");
        Entry.mainWorkspace.addVimBoard("ntryPlaygroundWorkspace");
        Entry.mainWorkspace.blockMenu.setAlign(b);
        this.updateGoalBlockNumber(Ntry.configManager.getConfig("limitBlockCnt"));
        Entry.mainWorkspace.board.deActivateContextOption(Entry.Board.OPTION_CLEAR);
        Entry.Utils.bindBlockExecuteFocusEvents();
    }
    ;
    a.setMode = function(b) {
        this._mode = b = void 0 === b ? Entry.getMainWS().getMode() : b;
        this._mode = Number(b) || 0;
        var c = Ntry.configManager.getConfig("limitBlockCnt"), a;
        switch (Number(b)) {
        case Entry.Workspace.MODE_BOARD:
            this._blockBoxText.innerHTML = Lang.Menus.block_box;
            this._blockAssemblyText.innerHTML = Lang.Menus.block_assembly;
            this.currentNumberText = Lang.Menus.used_blocks;
            this.goalNumberText = Lang.Menus.maximum;
            if (b = this.code) {
                var e = Entry.Block.DELETABLE_FALSE_LIGHTEN
                  , f = b.getEventMap("start");
                f && (f[0].setDeletable(e),
                f[0].setCopyable(!1));
                (f = b.getEventMap("define")) && f[0] && (f[0].setDeletable(e),
                f[0].setCopyable(!1));
            }
            break;
        case Entry.Workspace.MODE_VIMBOARD:
            this._blockBoxText.innerHTML = Lang.Menus.command_box,
            this._blockAssemblyText.innerHTML = Lang.Menus.command_assembly,
            this.currentNumberText = Lang.Menus.used_command,
            this.goalNumberText = Lang.Menus.maximum_command,
            c--,
            a = this._currentCnt;
        }
        this.updateCurrentBlockNumber(a);
        this.updateGoalBlockNumber(c);
        Entry.windowResized.notify();
    }
    ;
    a.convertCode = function() {
        var b = Entry.mainWorkspace;
        b && (b.textToCode(),
        setTimeout(function() {
            this.updateCurrentBlockNumber();
        }
        .bind(this)));
    }
    ;
    a.updateCurrentBlockNumber = function(b) {
        if (this.code) {
            if (void 0 === b) {
                var c = this.code
                  , a = c.getEventMap("start");
                if (!a) {
                    return;
                }
                a && a[0] && (a = a[0].getThread(),
                b = a.getBlockList(!0).length);
                (c = c.getEventMap("define")) && c[0] && (c = c[0].getThread(),
                b += c.getBlockList(!0).length);
            }
            Entry.mainWorkspace.getMode() === Entry.Workspace.MODE_VIMBOARD && b--;
            void 0 !== b && (this._currentCnt = b,
            this._currentBlockNumber.innerHTML = this.currentNumberText + ": " + b);
        }
    }
    ;
    a.updateGoalBlockNumber = function(b) {
        this._goalBlockNumber.innerHTML = this.goalNumberText + ": " + b;
    }
    ;
}
)(Ntry.entryPlayground.prototype);
Ntry.GridSystem = function() {
    this.tileSize = this.height = this.width = 0;
}
;
(function(a) {
    a.loadConfig = function() {
        var b = Ntry.configManager.getConfig("gridSize");
        this.width = b.width;
        this.height = b.height;
        this.tileSize = Ntry.configManager.getConfig("tileSize");
    }
    ;
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.GRID), c;
        for (c in b) {
            var a = b[c]
              , e = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID)
              , f = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.POSITION);
            f || (f = Ntry.entityManager.addComponent(a.id, {
                type: Ntry.STATIC.POSITION
            }),
            f.x = this.tileSize * e.x + this.tileSize / 2 - this.getScrollX(),
            f.y = this.tileSize * e.y + this.tileSize / 2);
        }
    }
    ;
    a.getScrollX = function() {
        if (!this._scroll) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCROLL);
            if (b) {
                for (var c in b) {
                    this._scroll = Ntry.entityManager.getComponent(c, Ntry.STATIC.SCROLL);
                }
            } else {
                return 0;
            }
        }
        return this._scroll.scrollX;
    }
    ;
}
)(Ntry.GridSystem.prototype);
Ntry.CommandPopup = {
    pageIndex: 0,
    setPopupLayout: function(a) {
        this.pageIndex = 0;
        this.exampleBadge_ = Entry.Dom("div", {
            class: "entryPopupHelperExampleBadge"
        }).text(Lang.Menus.maze_command_ex);
        this.leftButton_ = Entry.Dom("div", {
            class: "entryPopupHelperLeft"
        });
        this.leftButton_.bindOnClick(function() {
            this.setPrevStep();
        }
        .bind(this));
        this.rightButton_ = Entry.Dom("div", {
            class: "entryPopupHelperRight"
        });
        this.rightButton_.bindOnClick(function() {
            this.setNextStep();
        }
        .bind(this));
        this.indicator_ = Entry.Dom("div", {
            class: "entryPopupHelperIndicator"
        });
        if (1 < this.content.length) {
            var b = Entry.Dom("hr", {
                class: "indicatorHr"
            });
            this.indicator_.append(b);
            for (var b = Entry.Dom("span", {
                class: "indicator"
            }), c = 0; c < this.content.length; c++) {
                var d = b.clone(!0);
                this.indicator_.append(d);
            }
            var e = this;
            this.indicator_.off().on("click", "span:not(.on)", function() {
                var b = e.indicator_.find("span").index(this);
                e.setNthStep(b);
            });
            this.indicator_.addClass("show");
        }
        this.content_ = Entry.Dom("div", {
            class: "entryPopupHelperContent"
        });
        this.contentCommand_ = Entry.Dom("div", {
            class: "entryPopupHelperContentCommand"
        });
        this.contentDesc_ = Entry.Dom("div", {
            class: "entryPopupHelperContentDesc"
        });
        b = Entry.Dom("div");
        b.append(this.leftButton_);
        b.append(this.rightButton_);
        b.append(this.contentCommand_);
        b.append(this.contentDesc_);
        b.append(this.exampleBadge_);
        b.append(this.content_);
        b.append(this.indicator_);
        a.popupWrapper_.append(b);
        a.addClass("commandPopupWindow");
        this.setContent(this);
    },
    setContent: function() {
        1 < this.content.length ? (0 === this.pageIndex ? (this.rightButton_.addClass("show"),
        this.leftButton_.removeClass("show")) : this.pageIndex === this.content.length - 1 ? (this.leftButton_.addClass("show"),
        this.rightButton_.removeClass("show")) : (this.rightButton_.addClass("show"),
        this.leftButton_.addClass("show")),
        this.indicator_.find("span").removeClass("on"),
        this.indicator_.find("span:eq(" + this.pageIndex + ")").addClass("on")) : (this.rightButton_.removeClass("show"),
        this.leftButton_.removeClass("show"));
        var a = this.content[this.pageIndex];
        this.contentCommand_.html("<span>" + a.command + "</span>");
        this.contentDesc_.html(a.description);
        this.content_.html("");
        a.images.forEach(function(b) {
            var c = Entry.Dom("div");
            c.addClass(b);
            this.content_.append(c);
        }
        .bind(this));
    },
    setNthStep: function(a) {
        this.pageIndex = a;
        this.setContent();
    },
    setNextStep: function() {
        this.pageIndex++;
        this.setContent();
    },
    setPrevStep: function() {
        this.pageIndex--;
        this.setContent();
    },
    onShow: function() {}
};
Ntry.ObjectPopup = {
    setPopupLayout: function(a) {
        this.content_ = Entry.Dom("div", {
            class: "entryPopupHelperContent"
        });
        a.popupWrapper_.append(this.content_);
        a.addClass("objectPopupWindow");
        this.setContent(this, a);
    },
    setContent: function(a, b) {
        1 === this.object.length ? (a.content_.addClass("singleItem"),
        b.css("height", "219px")) : (a.content_.addClass("multiItem"),
        b.css("height", 107 * this.object.length + 102 + "px"));
        this.object.forEach(function(c, d) {
            var e = Entry.Dom("div");
            0 < d && e.css("margin-top", "25px");
            var f = Entry.Dom("div");
            f.addClass(c.class);
            var g = Entry.Dom("div", {
                class: "equal"
            })
              , h = Entry.Dom("div", {
                class: "objectText"
            });
            "small" === c.type ? (f.css("width", "82px"),
            f.css("margin-left", "35px")) : (f.css("width", "162px"),
            b.css("width", "480px"),
            a.content_.css("paddingLeft", "35px"));
            h.text(c.text);
            e.append(f);
            e.append(g);
            e.append(h);
            a.content_.append(e);
        });
    }
};
Ntry.OperationPopup = {
    pageIndex: 0,
    setPopupLayout: function(a) {
        this.pageIndex = 0;
        this.stepBadge_ = Entry.Dom("div", {
            class: "entryPopupHelperStep"
        });
        this.leftButton_ = Entry.Dom("div", {
            class: "entryPopupHelperLeft"
        });
        this.leftButton_.bindOnClick(function() {
            this.setPrevStep();
        }
        .bind(this));
        this.rightButton_ = Entry.Dom("div", {
            class: "entryPopupHelperRight"
        });
        this.rightButton_.bindOnClick(function() {
            this.setNextStep();
        }
        .bind(this));
        this.view_ = Entry.Dom("div", {
            class: "entryPopupHelperView"
        });
        this.content_ = Entry.Dom("div", {
            class: "entryPopupHelperContent"
        });
        a.addClass("operationPopupWindow");
        a.popupWrapper_.append(this.stepBadge_);
        a.popupWrapper_.append(this.leftButton_);
        a.popupWrapper_.append(this.rightButton_);
        a.popupWrapper_.append(this.content_);
        a.popupWrapper_.append(this.view_);
        this.setSetpBadge();
        this.setContent();
    },
    setSetpBadge: function() {
        this.stepBadge_.text(["STEP ", this.pageIndex + 1, "/", this.content.length].join(""));
    },
    setContent: function() {
        1 < this.content.length ? 0 === this.pageIndex ? (this.rightButton_.addClass("show"),
        this.leftButton_.removeClass("show")) : this.pageIndex === this.content.length - 1 ? (this.leftButton_.addClass("show"),
        this.rightButton_.removeClass("show")) : (this.rightButton_.addClass("show"),
        this.leftButton_.addClass("show")) : (this.rightButton_.removeClass("show"),
        this.leftButton_.removeClass("show"));
        this.setSetpBadge();
        var a = this.content[this.pageIndex];
        this.view_.html(a.description);
        this.view_.attr("class", ["entryPopupHelperView", a.descStyle].join(" "));
        this.content_.html("");
        this.content_.attr("class", ["entryPopupHelperContent", a.contentStyle].join(" "));
        if (a.textSet && 0 < a.textSet.length) {
            for (var b in a.textSet) {
                var c = a.textSet[b]
                  , d = Entry.Dom("div", {
                    class: "defaultChildText"
                });
                d.html(c.text);
                var e = {};
                e.bottom = [c.y, "px"].join("");
                e.left = [c.x, "px"].join("");
                c.align && (e["text-align"] = c.align);
                c.align && "center" !== d.css("text-align") && (e.width = "1px");
                d.css(e);
                this.content_.append(d);
            }
        }
    },
    setNextStep: function() {
        this.pageIndex++;
        this.setContent();
    },
    setPrevStep: function() {
        this.pageIndex--;
        this.setContent();
    },
    onShow: function() {}
};
Ntry.Hint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._currentIndex = 0;
    this._hints;
    this.createDom();
    this._popupHelper = new Entry.popupHelper(!0);
    Ntry.addEventListener("changeMode", this, this.setMode);
    Ntry.addEventListener("hideIntro", this, this.hideIntro);
    this.hideIntroCount = this.operationCount = this._mode = 0;
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , c = this._view;
        this._blockHintView = Ntry.createElement("div", c, null, "ntryBlockHintArea");
        this._textHintView = Ntry.createElement("div", c, null, "ntryTextHintArea");
        c = Ntry.createElement("div", this._textHintView, null, "ntryTextHintHeader");
        this._textHintView.ntryRemove();
        Ntry.createElement("span", c, null, "ntryTextHintQuestion").textContent = Lang.Menus.goals;
        this._textHintContainer = Ntry.createElement("span", c, null, "ntryTextHintContainer");
        c = Ntry.createElement("div", this._textHintView, null, "ntryHintButtonArea");
        this._operationBtn = Ntry.createElement("button", c, null, "ntryHintOperationBtn ntryHintButton");
        this._commandBtn = Ntry.createElement("button", c, null, "ntryHintCommandBtn ntryHintButton");
        this._objectBtn = Ntry.createElement("button", c, null, "ntryHintObjectBtn ntryHintButton");
        this._operationBtn.bindOnClick(function() {
            b._popupHelper.show("operation");
        });
        this._commandBtn.bindOnClick(function() {
            b._popupHelper.show("command");
        });
        this._objectBtn.bindOnClick(function() {
            b._popupHelper.show("object");
        });
        this._operationBtn.textContent = Lang.Menus.instructions;
        this._commandBtn.textContent = Lang.Menus.command_guide;
        this._objectBtn.textContent = Lang.Menus.object_info;
        c = Ntry.createElement("div", this._blockHintView, null, "ntryHintHeader");
        Ntry.createElement("button", c, null, "ntryHintLeftArrow").bindOnClick(function() {
            b.setCurrentIndex(b.getCurrentIndex() - 1);
        });
        Ntry.createElement("button", c, null, "ntryHintRightArrow").bindOnClick(function() {
            b.setCurrentIndex(b.getCurrentIndex() + 1);
        });
        this._hintNumber = Ntry.createElement("span", c, null, "ntryHintQuestionNumber");
        var c = Ntry.createElement("span", c, null, "ntryHintContainer")
          , a = Ntry.createElement("div", c, null, "ntryHintTopDiv");
        this._hintTitle = Ntry.createElement("div", a, null, "ntryHintTitle");
        this._hintsIndicator = Ntry.createElement("span", a, null, "ntryHintsIndicator");
        this._hintContent = Ntry.createElement("div", c, null, "ntryHintContent");
        this._hintThumbnail = Ntry.createElement("div", this._blockHintView, null, "ntryHintThumbnail");
        this._hintDetail = Ntry.createElement("div", this._blockHintView, null, "ntryHintDetailView");
        this._hintModal = Ntry.createElement("div", this._blockHintView, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(c) {
            c.target == this && (c.stopPropagation(),
            c.preventDefault(),
            b._hintModal.ntryRemove());
        });
        c = Ntry.createElement("div", this._hintModal, null, "ntryHintModalContainer");
        a = Ntry.createElement("div", c, null, "ntryHintModalTitle");
        Ntry.createElement("span", a, null, "ntryModalTitleText").innerHTML = Lang.Menus.jr_help;
        this._closeButton = Ntry.createElement("span", a, null, "ntryHintModalCloseButton");
        this._modalContent = Ntry.createElement("div", c, null, "ntryHintModalContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hints = Ntry.configManager.getConfig("hints");
        (this._popups = Ntry.configManager.getConfig("popups")) ? (this._textHintContainer.textContent = this._popups.objective,
        "operation"in this._popups ? this.setOperationPopup() : this._operationBtn.hidden = !0,
        "command"in this._popups ? this.setCommandPopup() : this._commandBtn.hidden = !0,
        "object"in this._popups ? this.setObjectPopup() : this._objectBtn.hidden = !0) : (this._objectBtn.hidden = !0,
        this._commandBtn.hidden = !0,
        this._operationBtn.hidden = !0);
        this.setCurrentIndex(0);
        this.setMode(this.mode);
    }
    ;
    a.setMode = function(b) {
        this._mode = Number(b) || 0;
        switch (this._mode) {
        case Entry.Workspace.MODE_VIMBOARD:
            this._blockHintView.hidden = !0;
            this._textHintView.hidden = !1;
            this._textHintView.ntryShow();
            break;
        case Entry.Workspace.MODE_BOARD:
            this._textHintView.hidden = !0,
            this._textHintView.ntryRemove(),
            this._blockHintView.hidden = !1;
        }
        this.showOperationPopup();
    }
    ;
    a.hideIntro = function(b) {
        b === Entry.Workspace.MODE_VIMBOARD && (this.hideIntroCount++,
        this.showOperationPopup());
    }
    ;
    a.showOperationPopup = function() {
        0 < this.hideIntroCount && 0 === this.operationCount && this._mode === Entry.Workspace.MODE_VIMBOARD && this._popupHelper.hasPopup("operation") && (this._popupHelper.show("operation"),
        this.operationCount++);
    }
    ;
    a.fillHintContent = function() {
        var b = this._hints
          , c = this.getCurrentIndex()
          , a = this._hintTitle
          , e = this._hintContent
          , f = this._hintsIndicator
          , g = this._hintDetail
          , h = b[c];
        this._hintNumber.innerHTML = "Q." + (c + 1);
        a.innerHTML = h.title;
        e.innerHTML = h.content;
        for (g.innerHTML = h.detail; f.firstChild; ) {
            f.removeChild(f.firstChild);
        }
        if (h.image) {
            c = h.image;
            a = document.cookie.match(/lang=../)[0].split("lang=")[1];
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("ntryHintThumbnail");
            this._hintThumbnail.addClass("ntryHintThumbnail_" + c);
            "ko" !== a && (this._hintThumbnail.removeClasses(),
            this._hintThumbnail.addClass("ntryHintThumbnail"),
            this._hintThumbnail.addClass("en"),
            this._hintThumbnail.addClass("ntryHintThumbnail_" + c));
            this._modalContent.removeClasses();
            this._modalContent.addClass("ntryHintModalImage");
            this._modalContent.addClass("ntryHintModalImage_" + c);
            "ko" !== a && (this._modalContent.removeClasses(),
            this._modalContent.addClass("ntryHintModalImage"),
            this._modalContent.addClass("en"),
            this._modalContent.addClass("ntryHintModalImage_" + c));
            var l = this;
            this._hintThumbnail.bindOnClick(function(b) {
                b.stopPropagation();
                b.preventDefault();
                l._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                l._hintModal.ntryRemove();
            });
        }
        if (!(2 > b.length)) {
            for (c = 0,
            b = b.length; c < b; c++) {
                var k = this;
                (function(b) {
                    var c = Ntry.createElement("button", f, null, "ntryHintIndicator");
                    b == k.getCurrentIndex() && c.addClass("selected");
                    c.bindOnClick(function() {
                        k.setCurrentIndex(b);
                    });
                }
                )(c);
            }
        }
    }
    ;
    a.getCurrentIndex = function() {
        return this._currentIndex;
    }
    ;
    a.setCurrentIndex = function(b) {
        var c = this._hints;
        _.isEmpty(c) || 0 > b || b > _.size(c) - 1 || (this._currentIndex = b,
        this.fillHintContent(b));
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , c = Ntry.configManager.getConfig("tileSize")
          , a = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * c * (3 < b.height ? 1 / b.width * 7 : 1) + a + 13;
        $(this._view).css("top", b + "px");
    }
    ;
    a.setOperationPopup = function() {
        var b = Ntry.OperationPopup;
        b.title = this._popups.operation.title;
        b.content = this._popups.operation.content;
        this._popupHelper.addPopup("operation", b);
    }
    ;
    a.setCommandPopup = function() {
        var b = Ntry.CommandPopup;
        b.title = this._popups.command.title;
        b.content = this._popups.command.content;
        this._popupHelper.addPopup("command", b);
    }
    ;
    a.setObjectPopup = function() {
        var b = Ntry.ObjectPopup;
        b.title = this._popups.object.title;
        b.popupType = this._popups.object.popupType;
        b.object = this._popups.object.object;
        this._popupHelper.addPopup("object", b);
    }
    ;
}
)(Ntry.Hint.prototype);
Ntry.Interpreter = function() {
    this._status = Ntry.STATIC.ENGINE_STOP;
    Ntry.addEventListener("engineButtonClicked", this, this.changeStatus);
    Ntry.addEventListener("complete", this, this.clearScript);
    Ntry.addEventListener("replay", this, this.replayStatus);
}
;
(function(a) {
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE), c;
        for (c in b) {
            this.computeFunction(b[c]);
        }
    }
    ;
    a.computeFunction = function(b) {
        Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code.tick();
    }
    ;
    a.clearScript = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE), c;
        for (c in b) {
            Ntry.entityManager.getComponent(c, Ntry.STATIC.CODE).code.clearExecutors();
        }
    }
    ;
    a.getStatus = function() {
        return this._status;
    }
    ;
    a.setStatus = function(b) {
        this._status = b;
        var c = Ntry.STATIC;
        switch (b) {
        case c.ENGINE_STOP:
            this.clearScript();
            Ntry.dispatchEvent("stop");
            break;
        case c.ENGINE_RUN:
            Ntry.dispatchEvent("run"),
            this.raiseEvent();
        }
    }
    ;
    a.changeStatus = function() {
        var b = this.getStatus()
          , c = Ntry.STATIC;
        switch (b) {
        case c.ENGINE_STOP:
            this.setStatus(c.ENGINE_RUN);
            break;
        case c.ENGINE_RUN:
            this.setStatus(c.ENGINE_STOP);
            break;
        case c.ENGINE_END:
            this.setStatus(c.ENGINE_STOP);
        }
    }
    ;
    a.replayStatus = function() {
        this.setStatus(Ntry.STATIC.ENGINE_END);
    }
    ;
    a.raiseEvent = function() {
        var b = Entry.mainWorkspace, c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE), a;
        for (a in c) {
            var e = c[a]
              , f = Ntry.entityManager.getComponent(e.id, Ntry.STATIC.CODE);
            if (b.getMode() == Entry.Workspace.MODE_VIMBOARD) {
                var g = b.vimBoard.textToCode(Entry.Vim.TEXT_TYPE_JS);
                f.code.load(g);
            }
            f.code.raiseEvent("start", e);
        }
    }
    ;
}
)(Ntry.Interpreter.prototype);
Ntry.ItemSystem = function() {
    Ntry.addEventListener("run", this, this.raiseItem);
    Ntry.addEventListener("stop", this, this.resetItem);
    this._eatenSequencialItemCount = 0;
}
;
(function(a) {
    a.update = function(b) {
        this._unit ? Ntry.entityManager.hasComponent(this._unit.id, Ntry.STATIC.UNIT) || this.findUnit() : this.findUnit();
        if (this._unit) {
            var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), a = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.POSITION), e = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.GRID), f;
            for (f in c) {
                if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.ITEM),
                !c.isEaten) {
                    var g = Ntry.entityManager.getComponent(f, Ntry.STATIC.POSITION)
                      , h = Ntry.entityManager.getComponent(f, Ntry.STATIC.GRID);
                    g.y - c.tolerance < a.y && g.y + c.tolerance > a.y && g.x - c.tolerance < a.x && g.x + c.tolerance > a.x && h.x == e.x && h.y == e.y && (isNaN(c.sequence) || (this._eatenSequencialItemCount != c.sequence ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.SEQUENCE_SIMOOROOK) : this._eatenSequencialItemCount++),
                    c.isEaten = !0,
                    Ntry.dispatchEvent("itemFire", c.itemType),
                    -1 < Ntry.STATIC.CONSUMABLE_ITEMS.indexOf(c.itemType) && Ntry.entityManager.addComponent(f, {
                        type: Ntry.STATIC.ANIMATE,
                        animateType: Ntry.STATIC.FADE_OUT,
                        duration: 0.5
                    }));
                    if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.SPRITE)) {
                        0 == b % 8 ? c.currentFrame = 0 : 4 == b % 8 && (c.currentFrame = 1);
                    }
                }
            }
        }
    }
    ;
    a.raiseItem = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), c;
        for (c in b) {
            b = Ntry.entityManager.getComponent(c, Ntry.STATIC.ITEM),
            Ntry.dispatchEvent("raiseItem", b.itemType);
        }
    }
    ;
    a.resetItem = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), c;
        for (c in b) {
            Ntry.entityManager.getComponent(c, Ntry.STATIC.ITEM).isEaten = !1;
        }
        this._eatenSequencialItemCount = 0;
    }
    ;
    a.findUnit = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), c;
        for (c in b) {
            this._unit = b[c];
        }
    }
    ;
}
)(Ntry.ItemSystem.prototype);
Ntry.JrEngineView = function() {
    this._view = Ntry.interfaceManager.getDom("ntryEngine");
    Ntry.addEventListener("run", this, this.viewModeRun);
    Ntry.addEventListener("stop", this, this.viewModeStop);
    Ntry.addEventListener("replay", this, this.viewModeReplay);
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        this._engineButton = Ntry.createElement("button", this._view, "jrEngineButton", "stopped");
        this._engineButton.innerHTML = Lang.Workspace.run;
        this._engineButton.bindOnClick(function(b) {
            b.preventDefault();
            this.blur();
            Ntry.dispatchEvent("engineButtonClicked");
        });
    }
    ;
    a.viewModeRun = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Menus.engine_running;
        b.addClass("running");
        Ntry.configManager.getConfig("stageId");
        var b = Ntry.entityManager, c = b.getEntitiesByComponent(Ntry.STATIC.CODE), a, e;
        for (e in c) {
            a = c[e];
        }
        if (a = b.getComponent(a.id, Ntry.STATIC.CODE).code) {
            a = new Entry.Activity("run",[["code", a.stringify()]]),
            Entry.activityReporter.add(a),
            Ntry.dispatchEvent("saveLogs");
        }
    }
    ;
    a.viewModeStop = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Menus.start;
        b.addClass("stopped");
    }
    ;
    a.viewModeReplay = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Menus.engine_replay;
        b.addClass("end");
    }
    ;
    a.getPureButton = function() {
        this._engineButton.removeClasses();
        return this._engineButton;
    }
    ;
}
)(Ntry.JrEngineView.prototype);
Ntry.JrHelper = function() {
    Ntry.addEventListener("helperAction", this, this.actions);
}
;
(function(a) {
    a.update = function() {
        !this.executeEndEvent && this.workspace.board.code && (this.executeEndEvent = this.workspace.board.code.executeEndEvent.attach(this, function(b) {
            console.log(232323);
            this._played.push(b);
            this.actions();
        }));
    }
    ;
    a.loadConfig = function() {
        this._played = [];
        this._play = !1;
        this._helper = Ntry.configManager.getConfig("helper");
        this.workspace = Entry.mainWorkspace;
    }
    ;
    a.actions = function() {
        var b = this._played ? this._played.length : 0;
        b < this._helper.length && this.action(this._helper[b]);
    }
    ;
    a.action = function(b) {
        "add" == b.action ? this.workspace.playAddBlock(b) : "click" == b.action ? this.playClick(b) : "move" == b.action ? this.playMove(b) : "delete" == b.action && this.playDelete(b);
    }
    ;
    a.playClick = function(b) {
        var c = this
          , a = $("#" + b.target);
        a ? (a.position(),
        a.click(),
        setTimeout(function() {
            console.log("notify playClick finish");
            c._stopEvent.notify(b);
        }, b.duration)) : this._play = !1;
    }
    ;
    a.playMove = function(b) {
        var c = this;
        console.log("playMove help");
        setTimeout(function() {
            console.log("stop playMove");
            c._stopEvent.notify(b);
        }, b.duration);
    }
    ;
    a.playDelete = function(b) {
        var c = this;
        console.log("playDelete help");
        setTimeout(function() {
            console.log("stop playDelete");
            c._stopEvent.notify(b);
        }, b.duration);
    }
    ;
}
)(Ntry.JrHelper.prototype);
Ntry.JrHint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._view.addClass("jrHintArea");
    this._currentIndex = 0;
    this._hints;
    this.createDom();
    this.mode = this.aniPlay = !0;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement
          , c = this
          , a = this._view
          , a = b("div", this._view, "jrhintArea", null)
          , e = b("div", a, null, "jrHintHeader");
        this._hintNumber = b("span", e, null, "jrHintQuestionNumber");
        this._hintNumber.innerHTML = Lang.Menus.goals;
        e = b("span", e, null, "jrHintContainer");
        this._hintContent = b("table", e, null, "jrHintContent");
        e = b("tbody", this._hintContent, null, "tbody");
        e = b("tr", e, null, "tr");
        this._td = b("td", e, null, "td");
        this._hintThumbnail = b("div", a, null, "jrHintThumbnail");
        this._hintModal = b("div", a, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(b) {
            b.target == this && (b.stopPropagation(),
            b.preventDefault(),
            c._hintModal.ntryRemove());
        });
        b = Ntry.createElement("div", this._hintModal, null, "jrHintModalContainer");
        a = Ntry.createElement("div", b, null, "ntryHintModalTitle");
        Ntry.createElement("span", a, null, "ntryModalTitleText").innerHTML = Lang.Menus.help;
        this._closeButton = Ntry.createElement("span", a, null, "ntryHintModalCloseButton");
        this._modalContent = Ntry.createElement("div", b, null, "jrHintModalContent");
    }
    ;
    a.initmode = function(b) {
        document.getElementById("jrhintArea").style.display = "block";
        document.getElementById("jrAnimationArea").style.display = "none";
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        var b = Ntry.configManager;
        this.position();
        this._hints = b.getConfig("hints");
        this.fillHintContent();
    }
    ;
    a.showPlayAnimationMode = function() {}
    ;
    a.fillAnimationContent = function(b) {
        this.header_content.innerHTML = this._hints[0].text[void 0 == b ? 0 : b];
    }
    ;
    a.fillHintContent = function() {
        var b = this._hints[0];
        this._td.innerHTML = b.content;
        if (b = b.image) {
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("jrHintThumbnail");
            this._hintThumbnail.addClass("jrHintThumbnail_" + b);
            1 != b && 11 != b || this._hintThumbnail.addClass(Lang.type);
            this._modalContent.removeClasses();
            this._modalContent.addClass("jrHintModalImage");
            this._modalContent.addClass("jrHintModalImage_" + b);
            1 != b && 11 != b || this._modalContent.addClass(Lang.type);
            var c = this;
            this._hintThumbnail.bindOnClick(function(b) {
                b.stopPropagation();
                b.preventDefault();
                c._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                c._hintModal.ntryRemove();
            });
        }
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , c = Ntry.configManager.getConfig("tileSize")
          , a = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * c * (3 < b.height ? 1 / b.width * 7 : 1) + a + 13;
        $(this._view).css("top", b + "px");
    }
    ;
}
)(Ntry.JrHint.prototype);
Ntry.JrIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this._popupHelper = new Entry.popupHelper(!0);
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement
          , c = this._view
          , a = b("div", c, null, "ntryIntroContainer")
          , e = b("div", a, null, "ntryIntroTitle");
        this._closeButton = b("span", e, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        a = b("div", a, null, "ntryIntroContent");
        this._leftImg = b("div", a, null, "ntryIntroLeftImg");
        e = b("div", a, null, "ntryIntroRightDiv");
        this._rightTop = b("div", e, null, "ntryIntroRightTop");
        this._rightCenter = b("div", e, null, "ntryIntroRightCenter");
        this._startButton = b("span", a, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Menus.start;
        var f = this;
        this._view.bindOnClick(function(b) {
            b.target == this && ($(c).css("display", "none"),
            b = Ntry.configManager.getConfig("stageId"),
            1 != b && 11 != b || f.showHelpPopup(b));
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , c = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("jrIntroLeftImg");
        this._leftImg.addClass("jrIntroLeft1Img");
        this._rightTop.innerHTML = c + "/15";
        this._rightCenter.innerHTML = b.content;
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            1 != c && 11 != c || a.showHelpPopup(c);
        });
        this._startButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            1 != c && 11 != c || a.showHelpPopup(c);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.setHelpPopup = function(b) {
        this._popupHelper.addPopup("mazeHelp", {
            title: Lang.Menus.mission_guide,
            setPopupLayout: function(c) {
                var a = Entry.Dom("div", {
                    class: "helpImage helpImage_1_" + b
                });
                c.append(a);
            }
        });
    }
    ;
    a.showHelpPopup = function(b) {
        this.setHelpPopup(b);
        this._popupHelper.show("mazeHelp");
    }
    ;
}
)(Ntry.JrIntro.prototype);
Ntry.JrItemSystem = function() {
    Ntry.addEventListener("run", this, this.raiseItem);
    Ntry.addEventListener("stop", this, this.resetItem);
    Ntry.addEventListener("getItem", this, this.getItem);
}
;
(function(a) {
    a.update = function(b) {
        this._unit ? Ntry.entityManager.hasComponent(this._unit.id, Ntry.STATIC.UNIT) || this.findUnit() : this.findUnit();
        if (this._unit) {
            var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), a = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.POSITION), e = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.GRID), f;
            for (f in c) {
                if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.ITEM),
                !c.isEaten) {
                    var g = Ntry.entityManager.getComponent(f, Ntry.STATIC.POSITION)
                      , h = Ntry.entityManager.getComponent(f, Ntry.STATIC.GRID);
                    c.itemType == Ntry.STATIC.GOAL_ITEM && g.y - c.tolerance < a.y && g.y + c.tolerance > a.y && g.x - c.tolerance < a.x && g.x + c.tolerance > a.x && h.x == e.x && h.y == e.y && (Ntry.dispatchEvent("itemFire", c.itemType),
                    g = Ntry.configManager.getConfig("stageId"),
                    Ntry.dispatchEvent("jrActivityStageFinish", g),
                    c.isEaten = !0);
                    if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.SPRITE)) {
                        0 == b % 8 ? c.currentFrame = 0 : 4 == b % 8 && (c.currentFrame = 1);
                    }
                }
            }
        }
    }
    ;
    a.getItem = function(b) {
        this._unit ? Ntry.entityManager.hasComponent(this._unit.id, Ntry.STATIC.UNIT) || this.findUnit() : this.findUnit();
        if (this._unit) {
            var c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM);
            Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.POSITION);
            var a = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.GRID), e = !1, f;
            for (f in c) {
                if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.ITEM),
                !c.isEaten) {
                    Ntry.entityManager.getComponent(f, Ntry.STATIC.POSITION);
                    var g = Ntry.entityManager.getComponent(f, Ntry.STATIC.GRID);
                    this.checkItemPos(g, a) && (c.isEaten || (c.isEaten = !0,
                    Ntry.dispatchEvent("itemFire", c.itemType),
                    e = !0),
                    -1 < Ntry.STATIC.CONSUMABLE_ITEMS.indexOf(c.itemType) && Ntry.entityManager.addComponent(f, {
                        type: Ntry.STATIC.ANIMATE,
                        animateType: Ntry.STATIC.FADE_OUT,
                        duration: 0.5
                    }));
                    if (c = Ntry.entityManager.getComponent(f, Ntry.STATIC.SPRITE)) {
                        0 == b % 8 ? c.currentFrame = 0 : 4 == b % 8 && (c.currentFrame = 1);
                    }
                }
            }
            e || Ntry.dispatchEvent("complete", !1, Ntry.STATIC.GET_ITEM);
        }
    }
    ;
    a.checkItemPos = function(b, c) {
        return b.x == c.x && b.y == c.y ? !0 : !1;
    }
    ;
    a.raiseItem = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), c;
        for (c in b) {
            b = Ntry.entityManager.getComponent(c, Ntry.STATIC.ITEM),
            Ntry.dispatchEvent("raiseItem", b.itemType);
        }
    }
    ;
    a.resetItem = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), c;
        for (c in b) {
            Ntry.entityManager.getComponent(c, Ntry.STATIC.ITEM).isEaten = !1;
        }
    }
    ;
    a.findUnit = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), c;
        for (c in b) {
            this._unit = b[c];
        }
    }
    ;
}
)(Ntry.JrItemSystem.prototype);
Ntry.JrPlayground = {};
Ntry.jrPlayground = function() {
    this._view = Ntry.interfaceManager.getDom("ntryPlayground");
    this.createDom();
    this.isResizing = !1;
    this._currentCnt = 0;
    this.availableCode = this.code = null;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement
          , c = this._view
          , a = b("div", c, null, "jrRightColTop");
        this._currentBlockNumber = b("div", a, null, "jrCurrentBlockNumber");
        this._goalBlockNumber = b("div", a, null, "jrGoalBlockNumber");
        this._goalBlockNumber.setAttribute("id", "jrGoalBlockNumber");
        this.topbackground = b("div", a, null, "topbackground");
        a = b("div", c, null, "jrRightColInfo");
        b("div", a, null, "jrRightColInfoLeft").innerHTML = Lang.Menus.block_box;
        b("div", a, null, "jrRightColInfoRight").innerHTML = Lang.Menus.block_assembly;
        c = b("div", c, null, "ntryPlayground");
        this._blockMenu = b("div", c, "jrPlaygroundBlockMenu", "jrPlaygroundBlockMenu", "blockMenuWorkspace", "selectDisable");
        this._workspace = b("div", c, "jrPlaygroundWorkspace", "jrPlaygroundWorkspace");
        this.blockBg = b("div", this._blockMenu, null, "blockBackground");
    }
    ;
    a.update = function() {
        this.code || this.findCode();
        this.availableCode || this.findAvailableCode();
    }
    ;
    a.findCode = function() {
        var b = Ntry.entityManager, c = b.getEntitiesByComponent(Ntry.STATIC.CODE), a, e;
        for (e in c) {
            a = c[e];
        }
        a && (this.code = b.getComponent(a.id, Ntry.STATIC.CODE).code);
        if (this.code) {
            Entry.mainWorkspace.board.changeCode(this.code);
            var f = this.code.getThreads()[0];
            this.code.changeEvent.attach(this, function() {
                this._updateGoals(f);
            });
            this._updateGoals(f);
            this.code.executeEndEvent.attach(this, function() {
                Ntry.dispatchEvent("executeEnd", Ntry.STATIC.COMPLETE);
            });
        }
    }
    ;
    a.findAvailableCode = function() {
        var b = Ntry.configManager.getConfig("availableCode");
        b && (this.availableCode = new Entry.Code(b)) && Entry.mainWorkspace.changeBlockMenuCode(this.availableCode);
    }
    ;
    a.loadConfig = function() {
        Entry.toast = new Entry.Toast;
        this._generateGoals(Ntry.configManager.getConfig("limitBlockCnt"));
        Entry.mainWorkspace = new Entry.Workspace({
            blockMenu: {
                dom: "jrPlaygroundBlockMenu",
                align: Ntry.configManager.getConfig("blockMenuAlign")
            },
            board: {
                dom: "jrPlaygroundWorkspace"
            }
        });
        Entry.Utils.bindBlockExecuteFocusEvents();
    }
    ;
    a._generateGoals = function(b) {
        var c = this._goalBlockNumber;
        this._goalBlocks = [];
        for (var a = 0; a < b; a++) {
            var e = Ntry.createElement("div", null, null, "jrGoalBlockNumberSub");
            this._goalBlocks.push(e);
            c.appendChild(e);
        }
    }
    ;
    a._updateGoals = function(b) {
        b = b.countBlock() - 1;
        var c = this._goalBlocks
          , a = this._goalBlocks.length;
        this._goalBlockNumber.removeClass("blinkStar");
        for (var e = (a = a < b) ? "jrGoalFulled" : "jrGoalBlockAdd", f = 0; f < c.length; f++) {
            var g = c[f];
            g.removeClass("jrGoalBlockAdd");
            g.removeClass("jrGoalFulled");
            g.removeClass("blinkStar");
            f < b && g.addClass(e);
        }
        if (a) {
            var h = this._goalBlockNumber;
            h.addClass("blinkStar");
            $(h).bind("oanimationend animationend webkitAnimationEnd", function() {
                h.removeClass("blinkStar");
            });
        }
    }
    ;
}
)(Ntry.jrPlayground.prototype);
Ntry.JrResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.path = window.location.pathname;
    this.path = "/jr" == this.path ? this.path + "#!/" : "/codingparty" == this.path ? this.path + "#!/2/" : this.path + "/";
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = Lang.Menus
          , f = a("div", this._view, null, "ntryResultContainer")
          , g = a("div", f, null, "ntryResultTitle");
        this._closeButton = a("span", g, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = e.close;
        f = a("div", f, null, "ntryResultContent");
        this._leftImg = a("div", f, null, "ntryResultLeftImg");
        g = a("div", f, null, "ntryResultRightDiv");
        this._successContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "ntryResultCertDiv", "juni", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel", "juni");
        this._certNameLabel.innerHTML = e.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput", "juni");
        this._certNameInput.type = "text";
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = e.jr_down_cert;
        this._failContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", f, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = e.replay;
        this._nextButton = a("span", f, null, "ntryResultNextButton");
        this._nextButton.innerHTML = e.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function() {
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("jrResultSuccess1Img");
        var b = this;
        this._closeButton.bindOnClick(function() {
            $(b._view).css("display", "none");
            $(b._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(b._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var a = b._certNameInput.value;
            "" === a ? (alert(Lang.Users.name_not_empty),
            b._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty#!/certificate/" + window.cpartyuserkey + "/" + a + "/2");
        });
        $(this._view).css("display", "block");
    }
    ;
    a.currentUsedBlock = function() {
        var c = b();
        if (c) {
            return c.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.complete = function(c, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = this.path + (e + 1);
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Users.name_not_empty),
            f._certNameInput.focus()) : window.location.href = window.cpartyuserkey ? "/codingparty#!/certificate/" + window.cpartyuserkey + "/" + b + "/2" : f.path + "cert/" + b;
        });
        Ntry.configManager.getConfig("limitBlockCnt");
        this.currentUsedBlock();
        if (c) {
            if (this.inspectEssential()) {
                this.success(e);
                var g;
                "object" == typeof JRData && (g = JRData.player[e],
                g.userCode = b().toJSON());
                "object" == typeof CPartyData && (g = CPartyData.player[e],
                g.userCode = b());
                Ntry.dispatchEvent("saveLogs", "finish");
            } else {
                this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            }
        } else {
            this.fail(e, a);
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        if (void 0 === Ntry.configManager.getConfig("essentialBlock")) {
            return !0;
        }
        var c = b();
        if (_.isEmpty(c)) {
            return !1;
        }
        c = c.getThreads();
        if (_.isEmpty(c)) {
            return !1;
        }
        for (var a = !1, e = 0, f = c.length; e < f; e++) {
            var g = c[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    if ("jr_repeat" == g[h].type) {
                        a = !0;
                        break;
                    }
                }
            }
        }
        return a;
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
    }
    ;
    a.success = function(b) {
        Ntry.dispatchEvent("jrActivityStageFinish", b);
        var a = Ntry.configManager.getConfig("limitBlockCnt")
          , e = this.currentUsedBlock();
        this._leftImg.addClass("jrResultSuccess1Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
        15 == b && this._replayButton.addClass("juniCert");
        var f, g = Lang.Menus;
        e <= a ? (this._certNameLabel.addClass("underCnt"),
        f = 15 != b ? g.jr_popup_prefix_1 : g.jr_popup_suffix) : e > a && (this._certNameLabel.removeClass("underCnt"),
        f = g.jr_popup_prefix_2);
        this._usedBlockPrefix.innerHTML = f;
        a = this._nextButton;
        15 === b ? (this._certDiv.ntryShow(),
        a.ntryRemove()) : a.ntryShow();
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        -1 < JRData.successedStage.indexOf(b) || JRData.successedStage.push(b);
    }
    ;
    a.fail = function(b, a) {
        var e = ""
          , f = 1
          , e = [Lang.Menus.jr_fail_dont_know, Lang.Menus.jr_fail_dont_go, Lang.Menus.jr_fail_no_flower, Lang.Menus.jr_fail_forgot_flower, Lang.Menus.jr_fail_need_repeat, "\ub108\ubb34\ub9ce\uc740 \ube14\ub85d\uc744 \uc0ac\uc6a9\ud588\uc5b4, \ub2e4\uc2dc \ub3c4\uc804\ud574\ubcfc\ub798?"];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            e = e[0];
            f = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            e = e[1];
            f = 3;
            break;
        case Ntry.STATIC.GET_ITEM:
            e = e[2];
            f = 2;
            break;
        case Ntry.STATIC.WITHOUT_ITEM_SUCCESS:
            e = e[3];
            f = 2;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = e[4];
            f = 1;
            break;
        case Ntry.STATIC.OVER_LIMITED_BLOCK:
            e = e[5];
            f = 1;
            break;
        case Ntry.STATIC.NO_ITEM:
            e = e[5];
            f = 1;
            break;
        default:
            e = e[1],
            f = 1;
        }
        this._leftImg.addClass("ntryjrResultFail_" + f);
        this._failCauseString.innerHTML = e;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
}
)(Ntry.JrResult.prototype);
Ntry.LmsJrResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
}
;
(function(a) {
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(b, c) {
        b && entrylms.emit("ExitStudy", {
            category: "maze"
        });
    }
    ;
}
)(Ntry.LmsJrResult.prototype);
Ntry.Mapper = function() {
    this._updateRequired = this._isGenerate = this.isEnabled = !1;
    this.previousLine = {};
    this.bgB = this.bgA = null;
    Ntry.addEventListener("gridChange", this, this.toggleUpdate);
    Ntry.addEventListener("run", this, this.toggleRun);
    Ntry.addEventListener("stop", this, this.toggleStop);
}
;
(function(a) {
    a.backWidth = 700;
    a.start = 1600;
    a.backPath = "stage_infinite";
    a.loadConfig = function() {
        this.isEnabled = Ntry.configManager.getConfig("mapper") ? !0 : !1;
    }
    ;
    a.update = function() {
        this.isEnabled && !this.bgA && (this.bgA = this.createBG(!0),
        this.bgB = this.createBG());
        this._updateRequired && (this.updateMap(),
        this._updateRequired = !1);
    }
    ;
    a.toggleRun = function() {
        this.isEnabled && (this._itemCount = 0,
        this._isGenerate = !0);
    }
    ;
    a.toggleStop = function() {
        this.isEnabled && (this._isGenerate = !1,
        this.clearMap());
    }
    ;
    a.toggleUpdate = function() {
        this.isEnabled && (this._updateRequired = !0);
    }
    ;
    a.updateMap = function() {
        if (this._isGenerate) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.RADAR);
            _.isEmpty(b) || (b = _.values(b)[0],
            b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID),
            this.remainItem = 0,
            this.generateLine(b.x + 4),
            this.updateBG(b.x));
        }
    }
    ;
    a.generateLine = function(b) {
        var c = [];
        if (100 == b) {
            var a = Ntry.configManager.getConfig("stageId");
            c.push(Ntry.createPlanet(b, 0, null));
            c.push(Ntry.createPlanet(b, 1, a));
            c.push(Ntry.createPlanet(b, 2, null));
            Ntry.entityManager.fromJSON(c);
        } else {
            if (!(100 < b)) {
                for (var e = {}, f = 0; 3 > f; f++) {
                    if (Math.random() < 0.2 + 0.4 * Math.min(b / 30, 1)) {
                        c.push(Ntry.createMeteo(b, f)),
                        e[f] = !0;
                    } else {
                        if (0.04 > Math.random()) {
                            var g = Ntry.createSpaceItem(b, f);
                            c.push(g);
                            this._itemCount++;
                            this.remainItem++;
                        }
                        e[f] = !1;
                    }
                }
                e[0] && e[1] && e[2] && (this.remainItem ? this.remainItem-- : (f = Math.floor(3 * Math.random()),
                c.splice(f, 1),
                e[f] = !1));
                if (this.previousLine && (!this.previousLine[0] && this.previousLine[1] && e[0] && e[1] || !this.previousLine[2] && this.previousLine[1] && e[2] && e[1])) {
                    return this.generateLine(b);
                }
                this.previousLine = e;
                Ntry.entityManager.fromJSON(c);
                c = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM);
                for (a in c) {
                    Ntry.entityManager.getComponent(a, Ntry.STATIC.GRID).x < b - 5 && Ntry.entityManager.removeEntity(a);
                }
            }
        }
    }
    ;
    a.clearMap = function() {}
    ;
    a.updateBG = function(b) {
        this.isEnabled && (2 == b % 14 ? (position = Ntry.entityManager.getComponent(this.bgA.id, Ntry.STATIC.POSITION),
        position.x += 2 * this.backWidth) : 9 == b % 14 && (position = Ntry.entityManager.getComponent(this.bgB.id, Ntry.STATIC.POSITION),
        position.x += 2 * this.backWidth));
    }
    ;
    a.createBG = function(b) {
        var a = Ntry.entityManager.addEntity();
        Ntry.entityManager.addComponent(a.id, {
            type: Ntry.STATIC.BITMAP,
            image: this.backPath,
            regX: 0,
            regY: 0
        });
        Ntry.entityManager.addComponent(a.id, {
            type: Ntry.STATIC.GRID,
            x: 0,
            y: 0
        });
        Ntry.entityManager.addComponent(a.id, {
            type: Ntry.STATIC.POSITION,
            x: b ? this.start - 3 * this.backWidth - 100 : this.start - 2 * this.backWidth - 100,
            y: 0
        });
        return a;
    }
    ;
    a.getScrollX = function() {
        if (!this._scroll) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCROLL);
            if (b) {
                for (var a in b) {
                    this._scroll = Ntry.entityManager.getComponent(a, Ntry.STATIC.SCROLL);
                }
            } else {
                return 0;
            }
        }
        return this._scroll.scrollX;
    }
    ;
}
)(Ntry.Mapper.prototype);
Ntry.MazeEngineView = function() {
    this._view = Ntry.interfaceManager.getDom("ntryEngine");
    Ntry.addEventListener("run", this, this.viewModeRun);
    Ntry.addEventListener("stop", this, this.viewModeStop);
    Ntry.addEventListener("replay", this, this.viewModeReplay);
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        this._engineButton = Ntry.createElement("button", this._view, "ntryEngineButton", "stopped");
        this._engineButton.innerHTML = Lang.Workspace.run;
        this._engineButton.bindOnClick(function(b) {
            b.preventDefault();
            this.blur();
            Ntry.dispatchEvent("engineButtonClicked");
        });
    }
    ;
    a.viewModeRun = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Menus.engine_running;
        b.addClass("running");
        window.cpartyuserkey && (b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace),
        b = Blockly.Xml.domToText(b),
        b = new Entry.Activity("run",[["script", b]]),
        Entry.activityReporter.add(b),
        Ntry.dispatchEvent("saveLogs"));
    }
    ;
    a.viewModeStop = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Workspace.run;
        b.addClass("stopped");
    }
    ;
    a.viewModeReplay = function() {
        var b = this.getPureButton();
        this._engineButton.innerHTML = Lang.Menus.engine_replay;
        b.addClass("end");
    }
    ;
    a.getPureButton = function() {
        this._engineButton.removeClasses();
        return this._engineButton;
    }
    ;
}
)(Ntry.MazeEngineView.prototype);
Ntry.MazeIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this.createDom();
    Ntry.addEventListener("changeMode", this, this.setMode);
    this.blockModeShown = this.textModeShown = !1;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "ntryIntroContainer")
          , a = Ntry.createElement("div", b, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", a, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        b = Ntry.createElement("div", b, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", b, null, "ntryIntroLeftImg");
        a = Ntry.createElement("div", b, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", a, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", a, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", b, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Workspace.run;
        var d = this;
        this._view.bindOnClick(function(b) {
            b.target == this && d.hide();
        });
    }
    ;
    a.hide = function() {
        Ntry.dispatchEvent("hideIntro", this.mode);
        $(this._view).css("display", "none");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , a = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        6 >= a ? this._leftImg.addClass("ntryIntroLeft1Img") : 14 >= a ? this._leftImg.addClass("ntryIntroLeft2Img") : this._leftImg.addClass("ntryIntroLeft3Img");
        this._rightTop.innerHTML = a + "/20";
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            d.hide();
        });
        this._startButton.bindOnClick(function() {
            d.hide();
        });
        $(this._view).css("display", "block");
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this.mode = Number(b);
        Entry.Workspace.MODE_BOARD !== this.mode || this.blockModeShown ? Entry.Workspace.MODE_VIMBOARD !== this.mode || this.textModeShown || (this._rightCenter.innerHTML = this._intro.textContent || "",
        $(this._view).css("display", "block"),
        this.textModeShown = !0) : (this._rightCenter.innerHTML = this._intro.content,
        $(this._view).css("display", "block"),
        this.blockModeShown = !0);
    }
    ;
}
)(Ntry.MazeIntro.prototype);
Ntry.MazeResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , e = Ntry.createElement("div", a, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", e, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        a = Ntry.createElement("div", a, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", a, null, "ntryResultLeftImg");
        e = Ntry.createElement("div", a, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._limitBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = Ntry.createElement("div", this._successContent, null, "ntryResultCertDiv", "ntryRemove");
        this._certDivLeft = Ntry.createElement("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = Ntry.createElement("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = Ntry.createElement("input", this._certDivLeft, null, "ntryResultContentNameInput");
        this._certNameInput.type = "text";
        this._certLink = Ntry.createElement("div", this._certDiv, null, "ntryResultContentCert", "maze");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", a, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", a, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(b, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        "ko" == document.cookie.match(/lang=../)[0].split("lang=")[1] ? this._leftImg.addClass("ntryResultLeftImg") : (this._leftImg.addClass("ntryResultLeftImg"),
        this._leftImg.addClass("en"));
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = "/we/maze#!/" + (e + 1);
        window.mazeuserkey || (window.mazeuserkey = this.randomString(8),
        $.ajax({
            method: "POST",
            url: "/api/maze/user",
            data: {
                key: window.mazeuserkey
            },
            cache: !1
        }));
        this._certNameInput.bindOnClick(function() {
            f._certNameInput.focus();
        });
        this._certLink.bindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.cparty_insert_name),
            f._certNameInput.focus()) : window.location.href = "/we/maze#!/c/c/" + window.mazeuserkey + "/" + b;
        });
        b ? this.inspectEssential() ? this.success(e) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(e, a);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var a = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === a) {
            return !0;
        }
        var a = a.blocks.slice(0)
          , d = b();
        if (_.isEmpty(d)) {
            return !1;
        }
        d = d.getThreads();
        if (_.isEmpty(d)) {
            return !1;
        }
        for (var e = 0, f = d.length; e < f; e++) {
            var g = d[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    var l = g[h]
                      , k = l.type
                      , k = a.indexOf(k);
                    -1 < k && a.splice(k, 1);
                    if (k = l.statements[0]) {
                        for (var l = k.getBlocks(), m = 0; m < l.length; m++) {
                            k = l[m].type,
                            k = a.indexOf(k),
                            -1 < k && a.splice(k, 1);
                        }
                    }
                    if (0 === a.length) {
                        return !0;
                    }
                }
            }
        }
        return 0 === a.length;
    }
    ;
    a.success = function(a) {
        var d = Ntry.configManager.getConfig("limitBlockCnt")
          , e = 0
          , f = b();
        f && (e = f.getEventMap("start")[0].getThread().countBlock(),
        (f = f.getEventMap("define")) && f[0] && (f = f[0].getThread(),
        e += f.countBlock()));
        6 >= a ? this._leftImg.addClass("ntryResultSuccess1Img") : 14 >= a ? this._leftImg.addClass("ntryResultSuccess2Img") : this._leftImg.addClass("ntryResultSuccess3Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        20 === a ? this._replayButton.ntryRemove() : this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._usedBlockCnt.innerHTML = e;
        this._limitBlockCnt.innerHTML = d;
        e === d ? (this._usedBlockPrefix.innerHTML = Lang.Menus.perfect,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._limitBlockCnt.ntryRemove(),
        this._limitBlockPrefix.ntryRemove(),
        this._limitBlockSuffix.ntryRemove()) : e < d ? (this._usedBlockPrefix.innerHTML = Lang.Menus.awesome,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_go_to_next,
        20 === a && (this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_and_cert),
        this._limitBlockCnt.ntryRemove(),
        this._limitBlockPrefix.ntryRemove(),
        this._limitBlockSuffix.ntryRemove(),
        this._replayButton.ntryRemove()) : (this._usedBlockPrefix.innerHTML = Lang.Menus.good,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._limitBlockPrefix.innerHTML = Lang.Menus.but,
        this._limitBlockSuffix.innerHTML = Lang.Menus.try_again,
        this._limitBlockCnt.ntryShow("ntryShowInlineBlock"),
        this._limitBlockPrefix.ntryShow("ntryShowInline"),
        this._limitBlockSuffix.ntryShow("ntryShowInline"));
        20 === a ? (this._certDiv.ntryShow(),
        this._nextButton.ntryRemove()) : this._nextButton.ntryShow();
        Entry.mainWorkspace && (NtryData.player[a].code = Entry.mainWorkspace.board.code.toJSON());
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
    a.fail = function(b, a) {
        var e = 1
          , e = 6 >= b ? 1 : 14 >= b ? 2 : 3
          , f = ""
          , g = 1
          , f = [Lang.Menus.cause_msgs_1, Lang.Menus.cause_msgs_2, Lang.Menus.cause_msgs_3, Lang.Menus.cause_msgs_4, Lang.Menus.cause_msgs_5];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.JUMP:
            f = f[1];
            g = 1;
            break;
        case Ntry.STATIC.SIMOOROOK:
            f = f[4];
            g = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            f = f[0];
            g = 2;
            break;
        case Ntry.STATIC.BEE_ATTACK:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.SLIP:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            f = f[3];
            g = 1;
            this.renderBlocks(b);
            break;
        default:
            f = f[4],
            g = 1;
        }
        this._leftImg.addClass("ntryResultFail_" + e + "_" + g);
        this._failCauseString.innerHTML = f;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var a = 5;
        if (7 === b || 8 === b) {
            a = 1;
        } else {
            if (9 === b) {
                a = 2;
            } else {
                if (10 <= b && 12 >= b) {
                    a = 3;
                } else {
                    if (13 === b || 14 === b) {
                        a = 4;
                    }
                }
            }
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryResultEssentialBlock_" + a);
    }
    ;
}
)(Ntry.MazeResult.prototype);
Ntry.MazeStaticIntro = function() {
    this._popupHelper = new Entry.popupHelper(!0);
    this._introPopup = new entrylms.Modal;
}
;
(function(a) {
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.remove = function() {
        this._introPopup.off();
        delete this._popupHelper;
        delete this._introPopup;
    }
    ;
    a.fillContent = function() {
        var b = this._intro;
        Ntry.configManager.getConfig("stageId");
        Ntry.configManager.getConfig("modeId");
        var a = Ntry.configManager.getConfig("introData")
          , b = a ? a.items.map(function(b) {
            b.type = "INTRO";
            b.title = Lang.Menus.start;
            return b;
        }) : {
            type: "INTRO",
            title: Lang.Menus.start,
            content: b.content
        };
        this._introPopup.modalData = b;
        this._introPopup.show();
    }
    ;
    a.setHelpPopup = function(b, a) {
        this._popupHelper.addPopup("mazeHelp", {
            title: Lang.Menus.mission_guide,
            setPopupLayout: function(d) {
                var e = Entry.Dom("div", {
                    class: "helpImage helpImage_" + b + "_" + a
                });
                d.append(e);
            }
        });
    }
    ;
}
)(Ntry.MazeStaticIntro.prototype);
Ntry.MazeStaticResult = function() {
    this._completePopup = new entrylms.Modal;
}
;
(function(a) {
    function b(b, a) {
        var c = Ntry.configManager.getConfig("limitBlockCnt"), d;
        d = (d = e()) ? d.getEventMap("start")[0].getThread().countBlock() - 1 : void 0;
        var k = {};
        if (1 == b) {
            d <= c ? (k.titleType = "FINISH",
            k.content = 15 != a ? Lang.Menus.jr_popup_prefix_3 : Lang.Menus.jr_popup_suffix_1) : d > c && (k.titleType = "INCOMPLETE",
            k.content = Lang.Menus.jr_popup_prefix_4);
        } else {
            if (2 == b) {
                d += 1,
                d <= c ? (k.titleType = "FINISH",
                k.content = 12 == m ? Lang.Menus.cparty_result_success_3 : Lang.Menus.cparty_result_success_1) : d > c && (k.titleType = "INCOMPLETE",
                k.content = Lang.Menus.cparty_result_success_2);
            } else {
                if (3 == b) {
                    var m = Number(a) + 12;
                    d += 1;
                    d <= c ? (k.titleType = "FINISH",
                    k.content = 22 != m ? Lang.Menus.cparty_car_popup_prefix_1 : Lang.Menus.cparty_car_popup_suffix) : d > c && (k.titleType = "INCOMPLETE",
                    k.content = Lang.Menus.cparty_car_popup_prefix_2);
                } else {
                    if (5 == b) {
                        d = 0;
                        if (m = e()) {
                            d = m.getEventMap("start")[0].getThread().countBlock(),
                            (m = m.getEventMap("define")) && m[0] && (m = m[0].getThread(),
                            d += m.countBlock());
                        }
                        d === c ? (k.titleType = "FINISH",
                        k.content = [Lang.Menus.perfect, d, Lang.Menus.succeeded_using_blocks].join(" ")) : d < c ? (k.titleType = "INCOMPLETE",
                        k.content = [Lang.Menus.awesome, d, Lang.Menus.succeeded_go_to_next].join(" ")) : (k.titleType = "INCOMPLETE",
                        k.content = [Lang.Menus.good, d, Lang.Menus.succeeded_using_blocks, Lang.Menus.but, c, Lang.Menus.try_again].join(" "));
                    }
                }
            }
        }
        return k;
    }
    function c(b, a, c) {
        var e = {};
        if (1 == b) {
            var k = [Lang.Menus.jr_fail_dont_know, Lang.Menus.jr_fail_dont_go, Lang.Menus.jr_fail_no_pencil, Lang.Menus.jr_fail_forgot_pencil, Lang.Menus.jr_fail_need_repeat, Lang.Menus.jr_fail_much_blocks];
            switch (c) {
            case Ntry.STATIC.SIMOOROOK:
                e.content = k[0];
                break;
            case Ntry.STATIC.GET_ITEM:
                e.content = k[2];
                break;
            case Ntry.STATIC.WITHOUT_ITEM_SUCCESS:
                e.content = k[3];
                break;
            case Ntry.STATIC.ESSENTIAL_REQUIRED:
                e.content = k[4];
                break;
            case Ntry.STATIC.OVER_LIMITED_BLOCK:
                ;
            case Ntry.STATIC.NO_ITEM:
                e.content = k[5];
                break;
            default:
                e.content = k[1];
            }
        } else {
            if (2 == b || 3 == b) {
                switch (k = [Lang.Menus.cparty_result_fail_1, Lang.Menus.cparty_result_fail_2, Lang.Menus.cparty_result_fail_3, Lang.Menus.cparty_result_fail_4, Lang.Menus.cparty_result_fail_5],
                c) {
                case Ntry.STATIC.WALL_CRASH:
                    e.content = k[0];
                    break;
                case Ntry.STATIC.BEE_ATTACK:
                    ;
                case Ntry.STATIC.ELECTRIC_SHOCK:
                    ;
                case Ntry.STATIC.SLIP:
                    e.content = k[1];
                    break;
                case Ntry.STATIC.ESSENTIAL_REQUIRED:
                    e.content = k[2];
                    e.media = {
                        category: "IMAGE",
                        content: d(b, a, !0)
                    };
                    break;
                case Ntry.STATIC.GO_SLOW_CRASH:
                    e.content = k[4];
                    e.media = {
                        category: "IMAGE",
                        content: d(b, a)
                    };
                    break;
                default:
                    e.content = k[3];
                }
            } else {
                if (5 == b) {
                    switch (k = [Lang.Menus.cause_msgs_1, Lang.Menus.cause_msgs_2, Lang.Menus.cause_msgs_3, Lang.Menus.cause_msgs_4, Lang.Menus.cause_msgs_5, Lang.Menus.cause_msgs_6],
                    c) {
                    case Ntry.STATIC.WALL_CRASH:
                        e.content = k[0];
                        break;
                    case Ntry.STATIC.JUMP:
                        e.content = k[1];
                        break;
                    case Ntry.STATIC.BEE_ATTACK:
                        ;
                    case Ntry.STATIC.ELECTRIC_SHOCK:
                        ;
                    case Ntry.STATIC.SLIP:
                        e.content = k[2];
                        break;
                    case Ntry.STATIC.ESSENTIAL_REQUIRED:
                        e.content = k[3];
                        e.media = {
                            category: "IMAGE",
                            content: d(b, a)
                        };
                        break;
                    default:
                        e.content = k[4];
                    }
                }
            }
        }
        return e;
    }
    function d(b, a, c) {
        var d = "";
        if (3 == b) {
            if (c) {
                if (12 < a) {
                    switch (a % 12) {
                    case 4:
                        ;
                    case 5:
                        d = "en" == Lang.type ? "/img/assets/codingparty/essentials/en/4_5.png" : "/img/assets/codingparty/essentials/4_5.png";
                        break;
                    case 6:
                        ;
                    case 7:
                        d = "en" == Lang.type ? "/img/assets/codingparty/essentials/en/6_7.png" : "/img/assets/codingparty/essentials/6_7.png";
                        break;
                    case 8:
                        d = "en" == Lang.type ? "/img/assets/codingparty/essentials/en/8.png" : "/img/assets/codingparty/essentials/8.png";
                        break;
                    case 9:
                        ;
                    case 10:
                        d = "en" == Lang.type ? "/img/assets/codingparty/essentials/en/9_10.png" : "/img/assets/codingparty/essentials/9_10.png";
                    }
                } else {
                    d = "/img/assets/ntry/essentials/7_8.png";
                }
            } else {
                d = "/img/assets/ntry/essentials/cparty/slow_1.png";
            }
        } else {
            5 == b && (d = 1 == a || 2 == a ? "/img/assets/ntry/essentials/7_8.png" : 3 == a ? "/img/assets/ntry/essentials/9.png" : 4 <= a && 6 >= a ? "/img/assets/ntry/essentials/10_11_12.png" : 7 == a || 8 == a ? "/img/assets/ntry/essentials/13_14.png" : "/img/assets/ntry/essentials/15-20.png");
        }
        return d;
    }
    function e() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(a, d) {
        var h = Ntry.configManager.getConfig("stageId")
          , l = Ntry.configManager.getConfig("modeId")
          , k = Ntry.configManager.getConfig("isHomework")
          , m = Ntry.configManager.getConfig("isHomeworkLapse")
          , p = Ntry.configManager.getConfig("isLastStudy")
          , n = {};
        a ? this.inspectEssential(l) ? (n = b(l, h),
        n.titleType = "SUCCESS",
        n.title = Lang.Menus.success + "!") : (n = c(l, h, Ntry.STATIC.ESSENTIAL_REQUIRED),
        n.titleType = "FAIL",
        n.title = Lang.Menus.fail) : (n = c(l, h, d),
        n.titleType = "FAIL",
        n.title = Lang.Menus.fail);
        h = {
            type: "COMPLETE",
            title: n.title,
            titleType: n.titleType,
            isHomework: k,
            isHomeworkLapse: m,
            isLastStudy: p,
            buttons: [{
                text: Lang.Menus.replay,
                click: function(b) {
                    this._completePopup.hide();
                    Ntry.dispatchEvent("replay");
                }
                .bind(this)
            }],
            content: n.content
        };
        n.media && (h.media = n.media);
        this._completePopup.modalData = h;
        this._completePopup.off("click").on("click", function(b) {
            if ("prev" === b) {
                Ntry.dispatchEvent("replay");
            } else {
                var a = e();
                a && (a = a.toJSON());
                var c = "ExitStudy";
                if (k && !m || "submit" == b) {
                    c = "SubmitStudy";
                }
                entrylms.emit(c, {
                    type: "mazeStatic",
                    value: {
                        code: a
                    }
                });
            }
        });
        this._completePopup.show();
    }
    ;
    a.inspectEssential = function(b) {
        var a = Ntry.configManager.getConfig("essentialBlock");
        if (void 0 === a) {
            return !0;
        }
        var c = e();
        if (_.isEmpty(c)) {
            return !1;
        }
        c = c.getThreads();
        if (_.isEmpty(c)) {
            return !1;
        }
        var d = !1;
        if (1 == b) {
            for (b = 0,
            a = c.length; b < a; b++) {
                var k = c[b]
                  , m = k.getFirstBlock();
                if (m && m._schema.event) {
                    for (k = k.getBlocks(),
                    m = 0; m < k.length; m++) {
                        var p = k[m].type;
                        if ("jr_repeat" == p) {
                            d = !0;
                            break;
                        }
                    }
                }
            }
        } else {
            if (3 == b) {
                var n = a.blocks.slice(0)
                  , p = -1;
                for (b = 0; b < k.length; b++) {
                    p = n.indexOf(k[b].type),
                    -1 < p && n.splice(p, 1),
                    0 === n.length && (d = !0);
                }
            } else {
                if (5 == b) {
                    for (n = a.blocks.slice(0),
                    b = 0,
                    a = c.length; b < a; b++) {
                        if (k = c[b],
                        (m = k.getFirstBlock()) && m._schema.event) {
                            for (k = k.getBlocks(),
                            m = 0; m < k.length; m++) {
                                var q = k[m]
                                  , p = q.type
                                  , p = n.indexOf(p);
                                -1 < p && n.splice(p, 1);
                                if (p = q.statements[0]) {
                                    for (var q = p.getBlocks(), r = 0; r < q.length; r++) {
                                        p = q[r].type,
                                        p = n.indexOf(p),
                                        -1 < p && n.splice(p, 1);
                                    }
                                }
                                0 === n.length && (d = !0);
                            }
                        }
                    }
                }
            }
        }
        return d;
    }
    ;
}
)(Ntry.MazeStaticResult.prototype);
Ntry.MazeSystem = function() {
    this._unit;
    this._unitGrid = {
        x: -1,
        y: -1
    };
    this._eventTileType = this._eventDelay = null;
    this._itemCount = this._goalCount = 0;
    Ntry.addEventListener("stop", this, this.clearGoal);
    Ntry.addEventListener("raiseItem", this, this.countGoal);
    Ntry.addEventListener("itemFire", this, this.getGoal);
    Ntry.addEventListener("executeEnd", this, this.checkEnd);
    Ntry.addEventListener("fail", this, this.fail);
}
;
(function(a) {
    a.TILE_EVENT = {};
    a.TILE_EVENT[Ntry.STATIC.WALL] = Ntry.STATIC.WALL_CRASH;
    a.TILE_EVENT[Ntry.STATIC.OBSTACLE_ELECTRIC] = Ntry.STATIC.ELECTRIC_SHOCK;
    a.TILE_EVENT[Ntry.STATIC.OBSTACLE_BEE] = Ntry.STATIC.BEE_ATTACK;
    a.TILE_EVENT[Ntry.STATIC.OBSTACLE_BANANA] = Ntry.STATIC.SLIP;
    a.TILE_EVENT[Ntry.STATIC.OBSTACLE_SIGN] = Ntry.STATIC.WALL_CRASH;
    a.TILE_EVENT[Ntry.STATIC.OBSTACLE_SLOW] = Ntry.STATIC.GO_SLOW_CRASH;
    a.EVENT_DELAY = {};
    a.EVENT_DELAY[Ntry.STATIC.WALL] = 2;
    a.EVENT_DELAY[Ntry.STATIC.OBSTACLE_ELECTRIC] = 10;
    a.EVENT_DELAY[Ntry.STATIC.OBSTACLE_BEE] = 7;
    a.EVENT_DELAY[Ntry.STATIC.OBSTACLE_BANANA] = 3;
    a.EVENT_DELAY[Ntry.STATIC.OBSTACLE_SIGN] = 5;
    a.EVENT_DELAY[Ntry.STATIC.OBSTACLE_SLOW] = 2;
    a.update = function() {
        this._unit ? Ntry.entityManager.hasComponent(this._unit.id, Ntry.STATIC.UNIT) || this.findUnit() : this.findUnit();
        if (this._unit) {
            var b = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.GRID);
            if (this._unitGrid.x != b.x || this._unitGrid.y != b.y) {
                this._unitGrid = {
                    x: b.x,
                    y: b.y
                },
                b = this.getTile(this._unitGrid),
                this.dispatchGroundEvent(b ? b.tileType : Ntry.STATIC.WALL);
            }
            this._eventDelay && (this._eventDelay--,
            0 == this._eventDelay && (this._dispatchGroundEvent(this._eventTileType),
            this._eventDelay = null));
        }
    }
    ;
    a.clearGoal = function(b) {
        this._itemCount = this._goalCount = 0;
    }
    ;
    a.countGoal = function(b) {
        b == Ntry.STATIC.GOAL_ITEM ? this._goalCount++ : b == Ntry.STATIC.JR_ITEM && this._itemCount++;
    }
    ;
    a.getGoal = function(b) {
        b == Ntry.STATIC.JR_ITEM ? this._itemCount-- : b == Ntry.STATIC.GOAL_ITEM && (this._goalCount--,
        0 == this._goalCount && 0 == this._itemCount ? (Ntry.dispatchEvent("playSound", "mazeSuccess"),
        Ntry.dispatchEvent("complete", !0)) : 0 != this._itemCount ? Ntry.dispatchEvent("complete", !1, Ntry.STATIC.WITHOUT_ITEM_SUCCESS) : 0 == this._goalCount && Ntry.dispatchEvent("unitAction", Ntry.STATIC.SIMOOROOK));
    }
    ;
    a.fail = function() {
        Ntry.dispatchEvent("unitAction", Ntry.STATIC.FAIL);
    }
    ;
    a.checkEnd = function() {
        0 == this._goalCount ? (Ntry.dispatchEvent("playSound", "mazeSuccess"),
        Ntry.dispatchEvent("complete", !0)) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.SIMOOROOK);
    }
    ;
    a.dispatchGroundEvent = function(b) {
        this.TILE_EVENT[b] && (this._eventDelay = this.EVENT_DELAY[b],
        this._eventTileType = b);
    }
    ;
    a._dispatchGroundEvent = function(b) {
        Ntry.dispatchEvent("unitAction", this.TILE_EVENT[b]);
    }
    ;
    a.getTile = function(b) {
        var a = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.TILE), d, e;
        for (e in a) {
            var f = a[e]
              , g = Ntry.entityManager.getComponent(f.id, Ntry.STATIC.GRID);
            g.x == b.x && g.y == b.y && (f = Ntry.entityManager.getComponent(f.id, Ntry.STATIC.TILE),
            d && d.tileType != Ntry.STATIC.ROAD || (d = f));
        }
        return d;
    }
    ;
    a.findUnit = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), a;
        for (a in b) {
            this._unit = b[a];
        }
    }
    ;
}
)(Ntry.MazeSystem.prototype);
Ntry.Playground = function() {
    var a = this;
    this._workspaceScript = {};
    this._view = Ntry.interfaceManager.getDom("ntryPlayground");
    this.createDom();
    this.injectBlockly();
    this.bindMouseEventToBlockMenu();
    this.setBlockMenu();
    this.isResizing = !1;
    this._currentCnt = -1;
    Ntry.addEventListener("workspaceRestore", this, this.syncScript);
    Blockly.mainWorkspace.svgBlockCanvas_.addEventListener("blocklyWorkspaceChange", function() {
        a.updateCurrentBlockNumber(Ntry.countUsedBlocks());
    });
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , a = Ntry.createElement("div", b, null, "ntryRightColTop");
        this._currentBlockNumber = Ntry.createElement("div", a, null, "currentBlockNumber");
        this._goalBlockNumber = Ntry.createElement("div", a, null, "goalBlockNumber");
        this.topbackground = Ntry.createElement("div", a, null, "topbackground");
        a = Ntry.createElement("div", b, null, "ntryRightColInfo");
        Ntry.createElement("div", a, null, "ntryRightColInfoLeft").innerHTML = Lang.Menus.block_box;
        Ntry.createElement("div", a, null, "ntryRightColInfoRight").innerHTML = Lang.Menus.block_assembly;
        b = Ntry.createElement("div", b, null, "ntryPlayground");
        this._blockMenu = Ntry.createElement("div", b, null, "ntryPlaygroundBlockMenu", "blockMenuWorkspace", "selectDisable");
        this._workspace = Ntry.createElement("div", b, null, "ntryPlaygroundWorkspace");
        this.blockBg = Ntry.createElement("div", this._blockMenu, null, "blockBackground");
    }
    ;
    a.syncScript = function() {
        var b = Ntry.entityManager
          , a = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace)
          , a = Blockly.Xml.domToText(a)
          , a = a.replace(/\sxmlns=\"(.*?)\"/, "")
          , a = a.replace(/\sclass=\"(.*?)\"/g, "")
          , a = a.replace(/\sid=\"(.*?)\"/g, "")
          , a = a.replace(/\sinline=\"(.*?)\"/g, "")
          , d = b.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        _.isEmpty(d) || (d = _.first(_.keys(d)),
        b.addComponent(d, {
            script: a,
            timeStamp: (new Date).getTime(),
            type: Ntry.STATIC.SCRIPT_CONTAINER
        }));
    }
    ;
    a.update = function() {
        var b = Ntry.entityManager
          , a = b.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        !_.isEmpty(a) && (a = _.first(_.keys(a)),
        b = b.getComponent(a, Ntry.STATIC.SCRIPT_CONTAINER),
        this._workspaceScript.script = b.script,
        b = b.timeStamp,
        a = this._workspaceScript,
        !a.timeStamp || a.timeStamp < b) && (a.timeStamp = b,
        this.setWorkspace(this._workspaceScript.script));
    }
    ;
    a.loadConfig = function() {
        this.updateGoalBlockNumber(Ntry.configManager.getConfig("limitBlockCnt"));
        this.setBlockMenu(Ntry.configManager.getConfig("availableBlocks"));
    }
    ;
    a.setBlockMenu = function(b) {
        var a = [];
        _.each(b, function(b) {
            b = Ntry.STATIC.blockInfo[b];
            b.xmls ? _.each(b.xmls, function(b) {
                a.push(jQuery.parseXML(b).childNodes[0]);
            }) : a.push(jQuery.parseXML(b.xml).childNodes[0]);
        });
        Blockly.mainWorkspace.blockMenu.show(a);
    }
    ;
    a.setWorkspace = function(b) {
        Blockly.mainWorkspace.clear();
        Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, $.parseXML(b).childNodes[0]);
    }
    ;
    a.setIsResizing = function(b) {
        Ntry.playground.isResizing = b;
    }
    ;
    a.injectBlockly = function() {
        Blockly.inject(this._workspace, {
            path: ".././",
            toolbox: Ntry.parseTexttoXML("<xml></xml>"),
            trashcan: !0,
            blockmenu: this._blockMenu,
            mediaFilePath: "/lib/entryjs/images/"
        });
        Blockly.mainWorkspace.flyout_.hide();
    }
    ;
    a.updateCurrentBlockNumber = function(b) {
        this._currentCnt != b && (this._currentCnt = b,
        this._currentBlockNumber.innerHTML = Lang.Menus.used_blocks + ": " + b);
    }
    ;
    a.updateGoalBlockNumber = function(b) {
        this._goalBlockNumber.innerHTML = Lang.Menus.maximum + ": " + b;
    }
    ;
    a.bindMouseEventToBlockMenu = function() {
        var b = this._blockMenu;
        $(b).mouseenter(function(b) {
            this.isResizing || (b = Blockly.mainWorkspace.blockMenu.blockMenuWidth + 84,
            200 < Blockly.mainWorkspace.blockMenu.blockMenuWidth && (this.widthBackup = 200,
            $(".ntryPlaygroundBlockMenu>svg").stop().animate({
                width: b - 64
            }, 200)));
        });
        $(b).mouseleave(function(a) {
            this.isResizing || (b.widthBackup && !Blockly.mainWorkspace.blockMenu.hasStalkerBlock && $(".ntryPlaygroundBlockMenu>svg").stop().animate({
                width: this.widthBackup
            }, 200),
            delete this.widthBackup);
        });
    }
    ;
    a.mouseupBlock = function() {
        if (Entry.activityReporter) {
            var b = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace)
              , b = Blockly.Xml.domToText(b)
              , b = b.replace(/\sxmlns=\"(.*?)\"/, "")
              , b = b.replace(/\sclass=\"(.*?)\"/g, "")
              , b = b.replace(/\sid=\"(.*?)\"/g, "")
              , b = b.replace(/\sinline=\"(.*?)\"/g, "");
            Entry.activityReporter.add(new Entry.Activity("editBlock",[["script", b]]));
        }
    }
    ;
}
)(Ntry.Playground.prototype);
Ntry.RadarSystem = function() {
    this._radarGrid = {
        x: -1,
        y: -1
    };
    this._spaceWidth = 0;
    Ntry.addEventListener("triggerWeapon", this, this.updateRadar);
    Ntry.addEventListener("restoreEnd", this, this.updateRadar);
}
;
(function(a) {
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.RADAR);
        _.isEmpty(b) || (b = _.values(b)[0],
        b = Ntry.entityManager.getComponent(b.id, Ntry.STATIC.GRID),
        b.x == this._radarGrid.x && b.y == this._radarGrid.y) || b.x >= this._spaceWidth || this.updateRadar();
    }
    ;
    a.updateRadar = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.RADAR);
        if (!_.isEmpty(b)) {
            var a = _.values(b)[0]
              , b = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.RADAR)
              , a = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.GRID);
            switch (a.y) {
            case 0:
                b.left = {
                    distance: 0,
                    type: Ntry.STATIC.AI_WALL
                };
                b.center = this.seekLine(a.x, 0);
                b.right = this.seekLine(a.x, 1);
                break;
            case 1:
                b.left = this.seekLine(a.x, 0);
                b.center = this.seekLine(a.x, 1);
                b.right = this.seekLine(a.x, 2);
                break;
            case 2:
                b.left = this.seekLine(a.x, 1),
                b.center = this.seekLine(a.x, 2),
                b.right = {
                    distance: 0,
                    type: Ntry.STATIC.AI_WALL
                };
            }
            this._radarGrid.x = a.x;
            this._radarGrid.y = a.y;
        }
    }
    ;
    a.loadConfig = function() {
        this._spaceWidth = Ntry.configManager.getConfig("spaceWidth");
    }
    ;
    a.seekLine = function(b, a) {
        for (var d = [], e = b; 0 == d.length && e < b + 10; ) {
            e++,
            d = Ntry.entityManager.find({
                type: Ntry.STATIC.GRID,
                x: e,
                y: a
            });
        }
        var f = Ntry.STATIC.AI_GOAL, g;
        for (g in d) {
            if (itemComp = Ntry.entityManager.getComponent(d[g].id, Ntry.STATIC.ITEM)) {
                f = itemComp.itemType;
            }
        }
        return {
            distance: e - b,
            type: f
        };
    }
    ;
}
)(Ntry.RadarSystem.prototype);
Ntry.Restorer = function() {
    Ntry.addEventListener("run", this, this.backup);
    Ntry.addEventListener("stop", this, this.recover);
    this._isBackuped = !1;
}
;
(function(a) {
    a.backup = function() {
        var b = Ntry.entityManager.getEntities();
        _.each(b, function(b) {
            var a = b.id;
            b = _.map(_.keys(b.components), function(b) {
                return Number(b);
            });
            var e = _.intersection(b, Ntry.STATIC.RESTORE_COMPONENT_TYPES);
            b = {};
            _.isEmpty(e) ? b.shouldRestore = Ntry.STATIC.RESTORE_FALSE : (b.shouldRestore = Ntry.STATIC.RESTORE_TRUE,
            e = Ntry.entityManager.getComponentsJSON(a),
            b.origins = e.origins,
            b.data = e.data);
            b.type = Ntry.STATIC.RESTORE;
            Ntry.entityManager.addComponent(a, b);
        });
        this._isBackuped = !0;
    }
    ;
    a.recover = function() {
        if (this._isBackuped) {
            var b = Ntry.entityManager
              , a = Ntry.entityManager.getEntities();
            _.each(a, function(a) {
                a = a.id;
                if (b.hasComponent(a, Ntry.STATIC.RESTORE)) {
                    var c = b.getComponent(a, Ntry.STATIC.RESTORE);
                    if (c.shouldRestore) {
                        var f = c.origins, g = b.getComponents(a), h;
                        for (h in g) {
                            0 > f.indexOf(h) && b.removeComponent(a, h);
                        }
                        h = c.data;
                        for (var l in h) {
                            h[l].type = l,
                            b.addComponent(a, h[l]);
                        }
                    }
                } else {
                    b.removeEntity(a);
                }
            });
            Ntry.dispatchEvent("restoreEnd");
            this._isBackuped = !1;
        }
    }
    ;
}
)(Ntry.Restorer.prototype);
Ntry.SoundSystem = function() {
    this.soundPath = "media/ntry/";
    this.initSoundJS();
    Ntry.addEventListener("unitAction", this, this.playUnitSound);
    Ntry.addEventListener("itemFire", this, this.playItemSound);
    Ntry.addEventListener("playSound", this, this.playNormalSound);
    Ntry.addEventListener("run", this, this.bgmStart);
    Ntry.addEventListener("stop", this, this.bgmEnd);
    Ntry.addEventListener("complete", this, this.bgmEnd);
}
;
(function(a) {
    a.loadConfig = function() {
        var b = Number(Ntry.configManager.getConfig("stageId"))
          , a = Ntry.configManager.getConfig("playerType");
        "CpartyCar" == a || 20 >= b ? (this.addSounds([{
            event: "unitAction",
            name: "maze_walk",
            eventType: Ntry.STATIC.WALK
        }, {
            event: "unitAction",
            name: "maze_simoorook",
            eventType: Ntry.STATIC.SIMOOROOK
        }, {
            event: "unitAction",
            name: "maze_jump",
            eventType: Ntry.STATIC.JUMP
        }, {
            event: "unitAction",
            name: "maze_wall",
            eventType: Ntry.STATIC.WALL_CRASH
        }, {
            event: "unitAction",
            name: "maze_bee",
            eventType: Ntry.STATIC.BEE_ATTACK
        }, {
            event: "unitAction",
            name: "maze_electric",
            eventType: Ntry.STATIC.ELECTRIC_SHOCK
        }, {
            event: "unitAction",
            name: "maze_fall",
            eventType: Ntry.STATIC.SLIP
        }, {
            event: "itemFire",
            name: "maze_dest",
            eventType: Ntry.STATIC.GOAL_ITEM
        }, {
            name: "maze_success",
            eventType: "mazeSuccess"
        }, {
            event: "unitAction",
            name: "jr_walk",
            eventType: Ntry.STATIC.WALK
        }, {
            event: "unitAction",
            name: "jr_simoorook",
            eventType: Ntry.STATIC.SIMOOROOK
        }, {
            event: "unitAction",
            name: "jr_wall",
            eventType: Ntry.STATIC.WALL_CRASH
        }, {
            event: "itemFire",
            name: "jr_flower",
            eventType: Ntry.STATIC.JR_ITEM
        }, {
            event: "unitAction",
            name: "maze_simoorook",
            eventType: Ntry.STATIC.GO_SLOW_CRASH
        }]),
        "juni" == a && 15 == b ? this.addSound({
            event: "itemFire",
            name: "jr_complete",
            eventType: Ntry.STATIC.GOAL_ITEM
        }) : this.addSound({
            event: "itemFire",
            name: "jr_meet",
            eventType: Ntry.STATIC.GOAL_ITEM
        })) : (30 > b ? this.addSounds([{
            event: "itemFire",
            name: "ai_success",
            eventType: Ntry.STATIC.AI_GOAL
        }, {
            event: "itemFire",
            name: "ai_item_get",
            eventType: Ntry.STATIC.AI_ITEM
        }, {
            event: "itemFire",
            name: "ai_meteo",
            eventType: Ntry.STATIC.AI_METEO
        }, {
            name: "ai_out",
            eventType: Ntry.STATIC.LOST
        }, {
            name: "ai_item_use",
            eventType: "ai_use_item"
        }, {
            name: "ai_simoorook",
            eventType: "ai_simoorook"
        }]) : this.addSounds([{
            event: "itemFire",
            name: "ai_success",
            eventType: Ntry.STATIC.AI_GOAL
        }, {
            event: "itemFire",
            name: "ai_item_get",
            eventType: Ntry.STATIC.AI_ITEM
        }, {
            event: "itemFire",
            name: "ai_success",
            eventType: Ntry.STATIC.AI_METEO
        }, {
            name: "ai_success",
            eventType: Ntry.STATIC.LOST
        }, {
            name: "ai_item_use",
            eventType: "ai_use_item"
        }, {
            name: "ai_simoorook",
            eventType: "ai_simoorook"
        }]),
        this.addBgm({
            name: "ai_move"
        }));
    }
    ;
    a.initSoundJS = function() {
        "IE" != Ntry.getBrowserType().substr(0, 2) || window.flashaudio ? createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) : (createjs.FlashAudioPlugin.swfPath = "/media/",
        createjs.Sound.registerPlugins([createjs.FlashAudioPlugin]),
        window.flashaudio = !0);
        this.soundQueue = new createjs.LoadQueue;
        this.soundQueue.installPlugin(createjs.Sound);
        this._loadAudio(["media/click.mp3", "media/click.wav", "media/click.ogg"], "click");
        this._loadAudio(["media/delete.mp3", "media/delete.ogg", "media/delete.wav"], "delete");
        this._loadAudio(["media/click.mp3"], "entryMagneting");
        this._loadAudio(["media/delete.mp3"], "entryDelete");
        createjs.Sound.stop();
    }
    ;
    a._loadAudio = function(b, a) {
        if (window.Audio && b.length) {
            for (; 0 < b.length; ) {
                this.soundQueue.loadFile({
                    id: a,
                    src: b[0],
                    type: createjs.LoadQueue.SOUND
                });
                break;
            }
        }
    }
    ;
    a.addSounds = function(b) {
        var a = this;
        b.map(function(b) {
            a.addSound(b);
        });
    }
    ;
    a.addSound = function(b) {
        this.initSound({
            name: b.name,
            id: (b.event ? b.event : "playSound") + b.eventType
        });
    }
    ;
    a.initSound = function(b) {
        this.soundQueue.loadFile({
            id: b.id,
            src: this.soundPath + b.name + ".mp3",
            type: createjs.LoadQueue.SOUND
        });
    }
    ;
    a.playSound = function(b) {
        createjs.Sound.play(b);
    }
    ;
    a.playNormalSound = function(b) {
        this.playSound("playSound" + b);
    }
    ;
    a.playUnitSound = function(b) {
        this.playSound("unitAction" + b);
    }
    ;
    a.playItemSound = function(b) {
        this.playSound("itemFire" + b);
    }
    ;
    a.bgmStart = function() {
        this.bgmId && (this.bgmInstance = createjs.Sound.play(this.bgmId, {
            loop: -1
        }));
    }
    ;
    a.bgmEnd = function() {
        this.bgmInstance && this.bgmInstance.stop();
    }
    ;
    a.addBgm = function(b) {
        this.initSound({
            name: b.name,
            id: b.name
        });
        this.bgmId = b.name;
    }
    ;
}
)(Ntry.SoundSystem.prototype);
Ntry.SpaceSystem = function() {
    this.scroll = null;
    this._scrollSpeed = 0;
    this._spaceWidth = 300;
    this._gridCallBack = null;
    this._isSafe = !0;
    this._tileSize;
    this._isSlideAvailable = !0;
    this._maxItem = this._itemCount = 0;
    this._itemEntities = [];
    Ntry.addEventListener("run", this, this.toggleRun);
    Ntry.addEventListener("stop", this, this.toggleStop);
    Ntry.addEventListener("gridChange", this, this.getGridChangeEvent);
    Ntry.addEventListener("itemFire", this, this.getItemEvent);
    Ntry.addEventListener("executeEnd", this, this.getScriptEvent);
    Ntry.addEventListener("engineSliderMove", this, this.slide);
    Ntry.addEventListener("triggerWeapon", this, this.useItem);
}
;
(function(a) {
    a.loadConfig = function() {
        this._maxItem = (this._maxItem = Ntry.configManager.getConfig("maxItem")) ? this._maxItem : 0;
        this._tileSize = Ntry.configManager.getConfig("tileSize");
        Ntry.configManager.getConfig("mapper") ? this._spaceWidth = Number.MAX_VALUE : this._spaceWidth = (Ntry.configManager.getConfig("spaceWidth") - 4) * this._tileSize;
    }
    ;
    a.update = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.GRID);
        this.scroll || (this.scroll = this.makeScrollComponent());
        var a = this.scroll.scrollX <= this._spaceWidth ? this._scrollSpeed : 0, d;
        for (d in b) {
            var e = b[d]
              , f = Ntry.entityManager.getComponent(e.id, Ntry.STATIC.POSITION);
            (e = Ntry.entityManager.getComponent(e.id, Ntry.STATIC.SPACE_SHIP)) ? (Ntry.addVectorByDirection(f, e.direction, e.direction != Ntry.STATIC.EAST ? this._scrollSpeed : 0),
            Ntry.addVectorByDirection(f, Ntry.STATIC.EAST, a ? 0 : this._scrollSpeed),
            (30 > f.y || 270 < f.y) && this._isSafe && (Ntry.dispatchEvent("complete", !1, Ntry.STATIC.LOST),
            Ntry.dispatchEvent("playSound", Ntry.STATIC.LOST),
            this._isSafe = !1,
            this._scrollSpeed = 0,
            Ntry.entityManager.addComponent(d, {
                type: Ntry.STATIC.ANIMATE,
                animateType: Ntry.STATIC.VIBRATE,
                animateValue: f.x
            }))) : f.x -= a;
        }
        this._gridCallBack && 0 == this.scroll.scrollX % this._tileSize && (this._gridCallBack.call(),
        this._gridCallBack = null);
        this.scroll.scrollX += this._scrollSpeed;
    }
    ;
    a.getScriptEvent = function() {
        this._scrollSpeed = 0;
        Ntry.dispatchEvent("complete", !1, Ntry.STATIC.SIMOOROOK);
        Ntry.dispatchEvent("playSound", "ai_simoorook");
    }
    ;
    a.getItemEvent = function(b) {
        switch (b) {
        case Ntry.STATIC.AI_GOAL:
            this._scrollSpeed = 0;
            Ntry.dispatchEvent("complete", !0);
            break;
        case Ntry.STATIC.AI_METEO:
            this._scrollSpeed = 0;
            Ntry.dispatchEvent("complete", !1, Ntry.STATIC.COLLISION);
            break;
        case Ntry.STATIC.AI_ITEM:
            this._itemCount < this._maxItem && this.addItemEntity(this._itemCount),
            this._itemCount++,
            this._itemCount = Math.min(this._itemCount, this._maxItem);
        }
    }
    ;
    a.getGridChangeEvent = function(b) {
        this._gridCallBack = b;
    }
    ;
    a.addItemEntity = function(b) {
        var a = Ntry.entityManager
          , d = a.addEntity();
        a.addComponent(d.id, {
            type: Ntry.STATIC.BITMAP,
            image: "item",
            regX: 10,
            regY: 10
        });
        a.addComponent(d.id, {
            type: Ntry.STATIC.POSITION,
            x: 30 * b + 20,
            y: 280
        });
        this._itemEntities.push(d.id);
    }
    ;
    a.removeItemEntity = function() {
        var b = Ntry.entityManager
          , a = this._itemEntities.pop();
        b.removeEntity(a);
    }
    ;
    a.toggleRun = function() {
        this._scrollSpeed = 4;
        this._isSafe = !0;
        this._isSlideAvailable = !1;
        this.recoverSlide();
    }
    ;
    a.toggleStop = function() {
        this._scrollSpeed = this._itemCount = 0;
        this.scroll.scrollX = 0;
        this._isSlideAvailable = !0;
        this._gridCallBack = null;
        this._itemEntities = [];
    }
    ;
    a.useItem = function() {
        if (!(0 >= this._itemCount)) {
            Ntry.dispatchEvent("playSound", "ai_use_item");
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.ITEM), a;
            for (a in b) {
                Ntry.entityManager.getComponent(a, Ntry.STATIC.ITEM).itemType == Ntry.STATIC.AI_METEO && (b = Ntry.entityManager.getComponent(a, Ntry.STATIC.POSITION),
                0 < b.x && 400 > b.x && (Ntry.entityManager.removeComponent(a, Ntry.STATIC.ITEM),
                Ntry.entityManager.addComponent(a, {
                    type: Ntry.STATIC.ANIMATE,
                    animateType: Ntry.STATIC.POP_OUT
                })));
            }
            this._itemCount--;
            this.removeItemEntity();
        }
    }
    ;
    a.slide = function(b) {
        if (this._isSlideAvailable) {
            b *= this._spaceWidth;
            var a = this.scroll.scrollX - b, d = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.POSITION), e;
            for (e in d) {
                Ntry.entityManager.getComponent(d[e].id, Ntry.STATIC.POSITION).x += a;
            }
            this.scroll.scrollX = b;
        }
    }
    ;
    a.recoverSlide = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.POSITION), a;
        for (a in b) {
            Ntry.entityManager.getComponent(b[a].id, Ntry.STATIC.POSITION).x += this.scroll.scrollX;
        }
        this.scroll.scrollX = 0;
    }
    ;
    a.makeScrollComponent = function() {
        var b = Ntry.entityManager.addEntity();
        return Ntry.entityManager.addComponent(b.id, {
            type: Ntry.STATIC.SCROLL
        });
    }
    ;
}
)(Ntry.SpaceSystem.prototype);
Ntry.StudyJrHint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._currentIndex = 0;
    this._hints;
    this.createDom();
    this._popupHelper = new Entry.popupHelper(!0);
    Ntry.addEventListener("changeMode", this, this.setMode);
    Ntry.addEventListener("hideIntro", this, this.hideIntro);
    this.hideIntroCount = this.operationCount = this._mode = 0;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement
          , a = this
          , d = this._view;
        this._blockHintView = b("div", d, null, "ntryBlockHintArea");
        this._textHintView = b("div", d, null, "ntryTextHintArea");
        d = b("div", this._textHintView, null, "ntryTextHintHeader");
        this._textHintView.ntryRemove();
        b("span", d, null, "ntryTextHintQuestion").textContent = Lang.Menus.goals;
        this._textHintContainer = b("span", d, null, "ntryTextHintContainer");
        d = b("div", this._textHintView, null, "ntryHintButtonArea");
        this._operationBtn = b("button", d, null, "ntryHintOperationBtn ntryHintButton");
        this._commandBtn = b("button", d, null, "ntryHintCommandBtn ntryHintButton");
        this._objectBtn = b("button", d, null, "ntryHintObjectBtn ntryHintButton");
        this._operationBtn.bindOnClick(function() {
            a._popupHelper.show("operation");
        });
        this._commandBtn.bindOnClick(function() {
            a._popupHelper.show("command");
        });
        this._objectBtn.bindOnClick(function() {
            a._popupHelper.show("object");
        });
        this._operationBtn.textContent = Lang.Menus.instructions;
        this._commandBtn.textContent = Lang.Menus.command_guide;
        this._objectBtn.textContent = Lang.Menus.object_info;
        d = b("div", this._blockHintView, null, "ntryHintHeader");
        this._hintNumber = b("span", d, null, "ntryHintQuestionNumber");
        this._hintNumber.innerHTML = Lang.Menus.goals;
        d = b("span", d, null, "ntryHintContainer");
        this._hintContent = b("table", d, null, "ntryHintContent");
        d = b("tbody", this._hintContent, null, "tbody");
        d = b("tr", d, null, "tr");
        this._td = b("td", d, null, "td");
        this._hintThumbnail = b("div", this._blockHintView, null, "ntryHintThumbnail");
        this._hintDetail = b("div", this._blockHintView, null, "ntryHintDetailView");
        this._hintModal = b("div", this._blockHintView, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(b) {
            b.target == this && (b.stopPropagation(),
            b.preventDefault(),
            a._hintModal.ntryRemove());
        });
        this._modalContainer = d = b("div", this._hintModal, null, "ntryHintModalContainer");
        var e = b("div", d, null, "ntryHintModalTitle");
        b("span", e, null, "ntryModalTitleText").innerHTML = Lang.Menus.jr_help;
        this._closeButton = b("span", e, null, "ntryHintModalCloseButton");
        this._modalContent = b("div", d, null, "ntryHintModalContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hints = Ntry.configManager.getConfig("hints");
        (this._popups = Ntry.configManager.getConfig("popups")) ? (this._textHintContainer.textContent = this._popups.objective,
        "operation"in this._popups ? this.setOperationPopup() : this._operationBtn.hidden = !0,
        "command"in this._popups ? this.setCommandPopup() : this._commandBtn.hidden = !0,
        "object"in this._popups ? this.setObjectPopup() : this._objectBtn.hidden = !0) : (this._objectBtn.hidden = !0,
        this._commandBtn.hidden = !0,
        this._operationBtn.hidden = !0);
        this.setCurrentIndex(0);
        this.setMode(this.mode);
    }
    ;
    a.setMode = function(b) {
        this._mode = Number(b) || 0;
        switch (this._mode) {
        case Entry.Workspace.MODE_VIMBOARD:
            this._blockHintView.hidden = !0;
            this._textHintView.hidden = !1;
            this._textHintView.ntryShow();
            break;
        case Entry.Workspace.MODE_BOARD:
            this._textHintView.hidden = !0,
            this._textHintView.ntryRemove(),
            this._blockHintView.hidden = !1;
        }
        this.showOperationPopup();
    }
    ;
    a.hideIntro = function(b) {
        b === Entry.Workspace.MODE_VIMBOARD && (this.hideIntroCount++,
        this.showOperationPopup());
    }
    ;
    a.showOperationPopup = function() {
        0 < this.hideIntroCount && 0 === this.operationCount && this._mode === Entry.Workspace.MODE_VIMBOARD && this._popupHelper.hasPopup("operation") && (this._popupHelper.show("operation"),
        this.operationCount++);
    }
    ;
    a.fillHintContent = function() {
        var b = this
          , a = this._hints
          , d = this.getCurrentIndex()
          , a = a[d];
        this._td.innerHTML = a.content;
        if (a.image) {
            a = a.image;
            d = document.cookie.match(/lang=../)[0].split("lang=")[1];
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("ntryHintThumbnail");
            this._hintThumbnail.addClass("ntryHintThumbnail_" + a);
            "ko" !== d && (this._hintThumbnail.removeClasses(),
            this._hintThumbnail.addClass("ntryHintThumbnail"),
            this._hintThumbnail.addClass("en"),
            this._hintThumbnail.addClass("ntryHintThumbnail_" + a));
            this._modalContent.removeClasses();
            this._modalContent.addClass("ntryHintModalImage");
            this._modalContent.addClass("ntryHintModalImage_" + a);
            "ko" !== d && (this._modalContent.removeClasses(),
            this._modalContent.addClass("ntryHintModalImage"),
            this._modalContent.addClass("en"),
            this._modalContent.addClass("ntryHintModalImage_" + a));
            var e = this;
            this._hintThumbnail.bindOnClick(function(b) {
                b.stopPropagation();
                b.preventDefault();
                e._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                e._hintModal.ntryRemove();
            });
            var f = new Image;
            f.onload = function() {
                $(b._modalContainer).css({
                    height: f.height
                });
            }
            ;
            f.src = /\/img(.)*g/.exec($(this._modalContent).css("background-image"))[0];
        }
    }
    ;
    a.getCurrentIndex = function() {
        return this._currentIndex;
    }
    ;
    a.setCurrentIndex = function(b) {
        var a = this._hints;
        _.isEmpty(a) || 0 > b || b > _.size(a) - 1 || (this._currentIndex = b,
        this.fillHintContent(b));
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , a = Ntry.configManager.getConfig("tileSize")
          , d = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * a * (3 < b.height ? 1 / b.width * 7 : 1) + d + 13;
        $(this._view).css("top", b + "px");
    }
    ;
    a.setOperationPopup = function() {
        var b = Ntry.OperationPopup;
        b.title = this._popups.operation.title;
        b.content = this._popups.operation.content;
        this._popupHelper.addPopup("operation", b);
    }
    ;
    a.setCommandPopup = function() {
        var b = Ntry.CommandPopup;
        b.title = this._popups.command.title;
        b.content = this._popups.command.content;
        this._popupHelper.addPopup("command", b);
    }
    ;
    a.setObjectPopup = function() {
        var b = Ntry.ObjectPopup;
        b.title = this._popups.object.title;
        b.popupType = this._popups.object.popupType;
        b.object = this._popups.object.object;
        this._popupHelper.addPopup("object", b);
    }
    ;
}
)(Ntry.StudyJrHint.prototype);
Ntry.StudyAiHint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._currentIndex = 0;
    this._hints;
    this.createDom();
    this._popupHelper = new Entry.popupHelper(!0);
    Ntry.addEventListener("changeMode", this, this.setMode);
    Ntry.addEventListener("hideIntro", this, this.hideIntro);
    this.hideIntroCount = this.operationCount = this._mode = 0;
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , a = this._view;
        this._blockHintView = Ntry.createElement("div", a, null, "ntryBlockHintArea");
        this._textHintView = Ntry.createElement("div", a, null, "ntryTextHintArea");
        a = Ntry.createElement("div", this._textHintView, null, "ntryTextHintHeader");
        this._textHintView.ntryRemove();
        Ntry.createElement("span", a, null, "ntryTextHintQuestion").textContent = Lang.Menus.goals;
        this._textHintContainer = Ntry.createElement("span", a, null, "ntryTextHintContainer");
        a = Ntry.createElement("div", this._textHintView, null, "ntryHintButtonArea");
        this._operationBtn = Ntry.createElement("button", a, null, "ntryHintOperationBtn ntryHintButton");
        this._commandBtn = Ntry.createElement("button", a, null, "ntryHintCommandBtn ntryHintButton");
        this._objectBtn = Ntry.createElement("button", a, null, "ntryHintObjectBtn ntryHintButton");
        this._operationBtn.bindOnClick(function() {
            b._popupHelper.show("operation");
        });
        this._commandBtn.bindOnClick(function() {
            b._popupHelper.show("command");
        });
        this._objectBtn.bindOnClick(function() {
            b._popupHelper.show("object");
        });
        this._operationBtn.textContent = Lang.Menus.instructions;
        this._commandBtn.textContent = Lang.Menus.command_guide;
        this._objectBtn.textContent = Lang.Menus.object_info;
        a = Ntry.createElement("div", this._blockHintView, null, "ntryHintHeader");
        Ntry.createElement("button", a, null, "ntryHintLeftArrow").bindOnClick(function() {
            b.setCurrentIndex(b.getCurrentIndex() - 1);
        });
        Ntry.createElement("button", a, null, "ntryHintRightArrow").bindOnClick(function() {
            b.setCurrentIndex(b.getCurrentIndex() + 1);
        });
        this._hintNumber = Ntry.createElement("span", a, null, "ntryHintQuestionNumber");
        var a = Ntry.createElement("span", a, null, "ntryHintContainer")
          , d = Ntry.createElement("div", a, null, "ntryHintTopDiv");
        this._hintTitle = Ntry.createElement("div", d, null, "ntryHintTitle");
        this._hintsIndicator = Ntry.createElement("span", d, null, "ntryHintsIndicator");
        this._hintContent = Ntry.createElement("div", a, null, "ntryHintContent");
        this._hintThumbnail = Ntry.createElement("div", this._blockHintView, null, "ntryHintThumbnail");
        this._hintDetail = Ntry.createElement("div", this._blockHintView, null, "ntryHintDetailView");
        this._hintModal = Ntry.createElement("div", this._blockHintView, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(a) {
            a.target == this && (a.stopPropagation(),
            a.preventDefault(),
            b._hintModal.ntryRemove());
        });
        a = Ntry.createElement("div", this._hintModal, null, "ntryHintModalContainer");
        d = Ntry.createElement("div", a, null, "ntryHintModalTitle");
        Ntry.createElement("span", d, null, "ntryModalTitleText").innerHTML = Lang.Menus.jr_help;
        this._closeButton = Ntry.createElement("span", d, null, "ntryHintModalCloseButton");
        this._modalContent = Ntry.createElement("div", a, null, "ntryHintModalContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hints = Ntry.configManager.getConfig("hints");
        (this._popups = Ntry.configManager.getConfig("popups")) ? (this._textHintContainer.textContent = this._popups.objective,
        "operation"in this._popups ? this.setOperationPopup() : this._operationBtn.hidden = !0,
        "command"in this._popups ? this.setCommandPopup() : this._commandBtn.hidden = !0,
        "object"in this._popups ? this.setObjectPopup() : this._objectBtn.hidden = !0) : (this._objectBtn.hidden = !0,
        this._commandBtn.hidden = !0,
        this._operationBtn.hidden = !0);
        this.setCurrentIndex(0);
        this.setMode(this.mode);
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this._mode = Number(b) || 0;
        switch (this._mode) {
        case Entry.Workspace.MODE_VIMBOARD:
            this._blockHintView.hidden = !0;
            this._textHintView.hidden = !1;
            this._textHintView.ntryShow();
            break;
        case Entry.Workspace.MODE_BOARD:
            this._textHintView.hidden = !0,
            this._textHintView.ntryRemove(),
            this._blockHintView.hidden = !1;
        }
    }
    ;
    a.hideIntro = function(b) {
        b === Entry.Workspace.MODE_VIMBOARD && (this.hideIntroCount++,
        this.showOperationPopup());
    }
    ;
    a.showOperationPopup = function() {
        0 < this.hideIntroCount && 0 === this.operationCount && this._mode === Entry.Workspace.MODE_VIMBOARD && this._popupHelper.hasPopup("operation") && (this._popupHelper.show("operation"),
        this.operationCount++);
    }
    ;
    a.fillHintContent = function() {
        var b = this._hints
          , a = this.getCurrentIndex()
          , d = this._hintTitle
          , e = this._hintContent
          , f = this._hintsIndicator
          , g = this._hintDetail
          , h = b[a];
        this._hintNumber.innerHTML = "Q." + (a + 1);
        d.innerHTML = h.title;
        e.innerHTML = h.content;
        for (g.innerHTML = h.detail; f.firstChild; ) {
            f.removeChild(f.firstChild);
        }
        if (h.image) {
            a = h.image;
            d = document.cookie.match(/lang=../)[0].split("lang=")[1];
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("ntryHintThumbnail");
            this._hintThumbnail.addClass("ntryHintThumbnail_" + a);
            "ko" !== d && (this._hintThumbnail.removeClasses(),
            this._hintThumbnail.addClass("ntryHintThumbnail"),
            this._hintThumbnail.addClass("en"),
            this._hintThumbnail.addClass("ntryHintThumbnail_" + a));
            this._modalContent.removeClasses();
            this._modalContent.addClass("ntryHintModalImage");
            this._modalContent.addClass("ntryHintModalImage_" + a);
            "ko" !== d && (this._modalContent.removeClasses(),
            this._modalContent.addClass("ntryHintModalImage"),
            this._modalContent.addClass("en"),
            this._modalContent.addClass("ntryHintModalImage_" + a));
            var l = this;
            this._hintThumbnail.bindOnClick(function(b) {
                b.stopPropagation();
                b.preventDefault();
                l._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                l._hintModal.ntryRemove();
            });
        }
        if (!(2 > b.length)) {
            for (a = 0,
            b = b.length; a < b; a++) {
                var k = this;
                (function(b) {
                    var a = Ntry.createElement("button", f, null, "ntryHintIndicator");
                    b == k.getCurrentIndex() && a.addClass("selected");
                    a.bindOnClick(function() {
                        k.setCurrentIndex(b);
                    });
                }
                )(a);
            }
        }
    }
    ;
    a.getCurrentIndex = function() {
        return this._currentIndex;
    }
    ;
    a.setCurrentIndex = function(b) {
        var a = this._hints;
        _.isEmpty(a) || 0 > b || b > _.size(a) - 1 || (this._currentIndex = b,
        this.fillHintContent(b));
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , a = Ntry.configManager.getConfig("tileSize")
          , d = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * a * (3 < b.height ? 1 / b.width * 7 : 1) + d + 13;
        $(this._view).css("top", b + "px");
    }
    ;
    a.setOperationPopup = function() {
        var b = Ntry.OperationPopup;
        b.title = this._popups.operation.title;
        b.content = this._popups.operation.content;
        this._popupHelper.addPopup("operation", b);
    }
    ;
    a.setCommandPopup = function() {
        var b = Ntry.CommandPopup;
        b.title = this._popups.command.title;
        b.content = this._popups.command.content;
        this._popupHelper.addPopup("command", b);
    }
    ;
    a.setObjectPopup = function() {
        var b = Ntry.ObjectPopup;
        b.title = this._popups.object.title;
        b.popupType = this._popups.object.popupType;
        b.object = this._popups.object.object;
        this._popupHelper.addPopup("object", b);
    }
    ;
}
)(Ntry.StudyAiHint.prototype);
Ntry.StudyAiIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this._popupHelper = new Entry.popupHelper(!0);
    this.createDom();
    Ntry.addEventListener("changeMode", this, this.setMode);
    this.blockModeShown = this.textModeShown = !1;
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement("div", this._view, null, "ntryIntroContainer")
          , d = Ntry.createElement("div", a, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        a = Ntry.createElement("div", a, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", a, null, "ntryIntroLeftImg");
        d = Ntry.createElement("div", a, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", d, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", d, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", a, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Workspace.run;
        this._view.bindOnClick(function(a) {
            a.target == this && b.hide();
        });
    }
    ;
    a.update = function() {}
    ;
    a.hide = function() {
        $(this._view).css("display", "none");
        Ntry.dispatchEvent("hideIntro", this.mode);
    }
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , a = Ntry.configManager.getConfig("stageId");
        this._leftImg.addClass("ntryIntroLeftImg");
        this._leftImg.addClass("ntryIntroLeftAiImg");
        this._rightTop.innerHTML = a - 22 + "/10";
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.rebindOnClick(function() {
            d.hide();
        });
        this._startButton.rebindOnClick(function() {
            window.cpartyuserkey && Ntry.dispatchEvent("saveLogs", "start");
            d.hide();
        });
        $(this._view).css("display", "block");
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this.mode = Number(b);
        Entry.Workspace.MODE_BOARD !== this.mode || this.blockModeShown ? Entry.Workspace.MODE_VIMBOARD !== this.mode || this.textModeShown || (this._rightCenter.innerHTML = this._intro.textContent || "",
        $(this._view).css("display", "block"),
        this.textModeShown = !0) : (this._rightCenter.innerHTML = this._intro.content,
        $(this._view).css("display", "block"),
        this.blockModeShown = !0);
    }
    ;
}
)(Ntry.StudyAiIntro.prototype);
Ntry.StudyAiResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , e = Ntry.createElement("div", a, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", e, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        a = Ntry.createElement("div", a, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", a, null, "ntryResultLeftImg");
        e = Ntry.createElement("div", a, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = Ntry.createElement("div", this._successContent, null, "ntryResultCertDiv_ai", "ntryRemove");
        this._certDivLeft = Ntry.createElement("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = Ntry.createElement("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = Ntry.createElement("input", this._certDivLeft, null, "ntryResultContentNameInput_ai");
        this._certNameInput.type = "text";
        this._certNameInput.onkeyup = Ntry.getInputLimitChecker(30);
        this._certLink = Ntry.createElement("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryAiResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", a, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", a, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function(b) {
        this._usedBlockCnt.ntryRemove();
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("ntryResultSuccessAi");
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            $(a._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(a._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var e = a._certNameInput.value;
            "" === e ? (alert(Lang.Users.name_not_empty),
            a._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(e) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            a._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + e + "/" + b;
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
    }
    ;
    a.complete = function(b, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = "/study/maze#!/4/" + (e - 22 + 1);
        window.aiuserkey || (window.aiuserkey = this.randomString(8),
        $.ajax({
            method: "POST",
            url: "/api/ai/user",
            data: {
                key: window.aiuserkey
            },
            cache: !1
        }));
        this._certNameInput.bindOnClick(function() {
            f._certNameInput.focus();
        });
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert("\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694."),
            f._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(b) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            f._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + b + "/4";
        });
        b ? this.inspectEssential() || 32 === e ? this.success(e, this.getScrollX()) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED) : 32 === e && 0 < this.getScrollX() ? this.success(e, this.getScrollX()) : this.fail(e, a);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var a = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === a) {
            return !0;
        }
        var d = a.matchCnt || 1
          , a = a.blocks.slice(0)
          , e = b();
        if (_.isEmpty(e)) {
            return !1;
        }
        e = e.getEventMap("start")[0].getThread();
        if (_.isEmpty(e)) {
            return !1;
        }
        for (var e = e.getBlockList(), f = -1, g = 0, h = 0; h < e.length; h++) {
            if (f = a.indexOf(e[h].type),
            -1 < f && ++g >= d) {
                return a.splice(h, 1),
                !0;
            }
        }
        return !1;
    }
    ;
    a.getScrollX = function() {
        if (!this._scroll) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCROLL);
            if (b) {
                for (var a in b) {
                    this._scroll = Ntry.entityManager.getComponent(a, Ntry.STATIC.SCROLL);
                }
            } else {
                return 0;
            }
        }
        return Math.floor(this._scroll.scrollX / 100);
    }
    ;
    a.success = function(b, a) {
        this._leftImg.addClass("ntryResultSuccessAi");
        this._replayButton.removeClasses();
        if (32 === b) {
            95 <= a ? (this._usedBlockCnt.ntryRemove(),
            this._usedBlockPrefix.ntryRemove(),
            this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_1) : (this._usedBlockCnt.innerHTML = a,
            this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_2,
            this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_3),
            this._replayButton.addClass("ntryResultReplayButtonFailed"),
            this._certDiv.ntryShow(),
            this._nextButton.ntryRemove();
        } else {
            var e = this.currentUsedBlock();
            this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_4;
            var f = "blocks";
            Entry.mainWorkspace.getMode() === Entry.Workspace.MODE_VIMBOARD && (f = "commands",
            e--);
            this._usedBlockCnt.innerHTML = e;
            this._usedBlockSuffix.innerHTML = Lang.Menus["succeeded_using_" + f];
            this._replayButton.addClass("ntryResultReplayButton");
            this._nextButton.ntryShow();
        }
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        Ntry.dispatchEvent("saveLogs", "finish");
    }
    ;
    a.currentUsedBlock = function() {
        var a = b();
        if (a) {
            return a.getEventMap("start")[0].getThread().getBlockList(!0).length;
        }
    }
    ;
    a.fail = function(b, a) {
        var e = ""
          , f = 1
          , g = [Lang.Menus.ai_cause_msg_1, Lang.Menus.ai_cause_msg_2, Lang.Menus.ai_cause_msg_3, Lang.Menus.ai_cause_msg_4];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            e = g[0];
            f = 1;
            break;
        case Ntry.STATIC.COLLISION:
            e = g[1];
            f = 2;
            break;
        case Ntry.STATIC.LOST:
            e = g[2];
            f = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = g[3],
            f = 4,
            this.renderBlocks(b);
        }
        this._leftImg.addClass("ntryResultFail_ai_" + f);
        this._failCauseString.innerHTML = e;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var a = 1;
        24 == b ? a = 2 : 25 <= b && 30 >= b && (a = 3);
        b = this._essentialBlocks;
        b.removeClasses();
        b.addClass("ntryAiResultEssentialBlocks");
        b.addClass("ntryAiResultEssentialBlocks_" + a);
    }
    ;
}
)(Ntry.StudyAiResult.prototype);
Ntry.StudyCarResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = a("div", this._view, null, "ntryResultContainer")
          , f = a("div", e, null, "ntryResultTitle");
        this._closeButton = a("span", f, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        e = a("div", e, null, "ntryResultContent");
        this._leftImg = a("div", e, null, "ntryResultLeftImg");
        f = a("div", e, null, "ntryResultRightDiv");
        this._successContent = a("div", f, null, "ntryResultRightContent");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockSuffix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockSuffix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "cpartyCarResultCertDiv", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput");
        this._certNameInput.type = "text";
        this._certNameInput.onkeyup = Ntry.getInputLimitChecker(30);
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = a("div", f, null, "ntryResultRightContent");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", e, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = a("span", e, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function(b) {
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        2 == b ? this._leftImg.addClass("ntryResultSuccess1Img") : 3 == b && this._leftImg.addClass("cpartyCarResultSuccess4Img");
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            $(a._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(a._view).css("display", "none");
        });
        this._certNameInput.bindOnClick(function() {
            a._certNameInput.focus();
        });
        this._certLink.rebindOnClick(function() {
            var e = a._certNameInput.value;
            "" === e ? (alert(Lang.Users.name_not_empty),
            a._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(e) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            a._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + e + "/" + b;
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.removeClass("codingpartyResultCertReplay");
    }
    ;
    a.complete = function(b, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        mode = 2 + parseInt((e - 1) / 12);
        3 == mode && (e -= 12);
        this._nextLink = "/study/maze#!/" + mode + "/" + (e + 1);
        this._certNameInput.bindOnClick(function() {
            f._certNameInput.focus();
        });
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Menus.cparty_insert_name),
            f._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(b) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            f._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + b + "/" + mode;
        });
        if (2 == mode) {
            if (b) {
                var g = this.inspectEssential();
                g ? (this.success(e),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            } else {
                this.fail(e, a);
            }
        } else {
            if (3 == mode) {
                b ? (g = this.inspectEssential()) ? (this.success(e + 12),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(e, a);
            } else {
                return;
            }
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var a = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === a) {
            return !0;
        }
        var a = a.blocks.slice(0)
          , d = b();
        if (_.isEmpty(d)) {
            return !1;
        }
        d = d.getEventMap("start")[0].getThread();
        if (_.isEmpty(d)) {
            return !1;
        }
        for (var d = d.getBlockList(), e = -1, f = 0; f < d.length; f++) {
            if (e = a.indexOf(d[f].type),
            -1 < e && a.splice(e, 1),
            0 === a.length) {
                return !0;
            }
        }
        return !1;
    }
    ;
    a.currentUsedBlock = function() {
        return b().getEventMap("start")[0].getThread().countBlock();
    }
    ;
    a.fail = function(b, a) {
        var e = 1;
        (b = Ntry.configManager.getConfig("stageId")) && (b = Number(b));
        12 >= b ? e = 1 : 22 >= b && 12 < b && (e = 4);
        var f = ""
          , g = 1
          , f = [Lang.Menus.cparty_result_fail_1, Lang.Menus.cparty_result_fail_2, Lang.Menus.cparty_result_fail_3, Lang.Menus.cparty_result_fail_4, Lang.Menus.cparty_result_fail_5];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            f = f[3];
            g = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            f = f[0];
            g = 2;
            break;
        case Ntry.STATIC.BEE_ATTACK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.SLIP:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            f = f[2];
            g = 1;
            this.renderBlocks(b, !0);
            break;
        case Ntry.STATIC.GO_SLOW_CRASH:
            f = f[4];
            g = 4;
            this.renderBlocks(b);
            break;
        default:
            f = f[3],
            g = 1;
        }
        this._leftImg.addClass("ntryResultFail_" + e + "_" + g);
        this._failCauseString.innerHTML = f;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b, a) {
        if (a) {
            if (12 < b) {
                switch (b % 12) {
                case 4:
                    ;
                case 5:
                    type = 7;
                    break;
                case 6:
                    ;
                case 7:
                    type = 8;
                    break;
                case 8:
                    type = 9;
                    break;
                case 9:
                    ;
                case 10:
                    type = 10;
                }
            } else {
                type = 5;
            }
        } else {
            type = 6;
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("cpartyResultEssentialBlocks");
        this._essentialBlocks.addClass("cpartyResultEssentialBlock_" + type);
        this._essentialBlocks.addClass(Lang.type);
    }
    ;
    a.success = function(a) {
        var d = Entry.mainWorkspace.getMode()
          , e = 2 + parseInt((a - 1) / 12)
          , f = Ntry.configManager.getConfig("limitBlockCnt");
        StudyData.player[a].userCode = b().toJSON();
        Ntry.dispatchEvent("jrActivityStageFinish", a);
        var g = this.currentUsedBlock();
        2 == e ? this._leftImg.addClass("ntryResultSuccess1Img") : this._leftImg.addClass("cpartyCarResultSuccess4Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass(22 === a || 12 === a ? "codingpartyResultCertReplay" : "ntryResultReplayButtonFailed");
        var h = this._usedBlockPrefix
          , l = Lang.Menus;
        console.log(e, a);
        2 === e ? (12 === a ? (this._replayButton.addClass("codingpartyResultCertReplay"),
        $(this._replayButton).css("bottom", "22px")) : this._replayButton.addClass("ntryResultReplayButtonFailed"),
        h.innerHTML = g === f ? 12 === a ? Lang.Menus.cparty_result_success_3 : Lang.Menus.cparty_result_success_1 : g < f ? Lang.Menus.cparty_result_success_1 : d == Entry.Workspace.MODE_BOARD ? Lang.Menus.cparty_result_success_2 : Lang.Menus.cparty_result_success_2_text) : g <= f ? h.innerHTML = 22 !== a ? l.cparty_car_popup_prefix_1 : l.cparty_car_popup_suffix : g > f && (h.innerHTML = d == Entry.Workspace.MODE_BOARD ? l.cparty_car_popup_prefix_2 : l.cparty_car_popup_prefix_2_text);
        d = this._nextButton;
        22 === a || 12 === a ? (this._certDiv.ntryShow(),
        $(this._certDiv).show(),
        d.ntryRemove(),
        this._replayButton.ntryRemove()) : d.ntryShow();
        this._successContent.ntryShow();
        this._replayButton.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
}
)(Ntry.StudyCarResult.prototype);
Ntry.StudyCodingpartyHint = function() {
    this._view = Ntry.interfaceManager.getDom("ntryHintArea");
    this._currentIndex = 0;
    this._hint;
    this.createDom();
    this._popupHelper = new Entry.popupHelper(!0);
    Ntry.addEventListener("changeMode", this, this.setMode);
    Ntry.addEventListener("hideIntro", this, this.hideIntro);
    this.hideIntroCount = this.operationCount = this._mode = 0;
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , a = this._view;
        this._blockHintView = Ntry.createElement("div", a, null, "ntryBlockHintArea");
        this._textHintView = Ntry.createElement("div", a, null, "ntryTextHintArea");
        a = Ntry.createElement("div", this._textHintView, null, "ntryTextHintHeader");
        this._textHintView.ntryRemove();
        Ntry.createElement("span", a, null, "ntryTextHintQuestion").textContent = Lang.Menus.goals;
        this._textHintContainer = Ntry.createElement("span", a, null, "ntryTextHintContainer");
        a = Ntry.createElement("div", this._textHintView, null, "ntryHintButtonArea");
        this._operationBtn = Ntry.createElement("button", a, null, "ntryHintOperationBtn ntryHintButton");
        this._commandBtn = Ntry.createElement("button", a, null, "ntryHintCommandBtn ntryHintButton");
        this._objectBtn = Ntry.createElement("button", a, null, "ntryHintObjectBtn ntryHintButton");
        this._operationBtn.bindOnClick(function() {
            b._popupHelper.show("operation");
        });
        this._commandBtn.bindOnClick(function() {
            b._popupHelper.show("command");
        });
        this._objectBtn.bindOnClick(function() {
            b._popupHelper.show("object");
        });
        this._operationBtn.textContent = Lang.Menus.instructions;
        this._commandBtn.textContent = Lang.Menus.command_guide;
        this._objectBtn.textContent = Lang.Menus.object_info;
        a = Ntry.createElement("div", this._blockHintView, null, "ntryHintHeader");
        this._hintNumber = Ntry.createElement("span", a, null, "ntryHintQuestionNumber");
        this._hintNumber.textContent = Lang.Menus.goals;
        this._hintContainer = Ntry.createElement("span", a, null, "codingpartyHintContainer");
        this._hintContainer.addClass("ntryHintContent");
        this._hintThumbnail = Ntry.createElement("div", this._blockHintView, null, "ntryHintThumbnail");
        this._hintModal = Ntry.createElement("div", this._blockHintView, null, "ntryHintModal");
        this._hintModal.ntryRemove();
        this._hintModal.bindOnClick(function(a) {
            a.target == this && b._hintModal.ntryRemove();
        });
        var a = Ntry.createElement("div", this._hintModal, null, "ntryHintModalContainer")
          , d = Ntry.createElement("div", a, null, "ntryHintModalTitle");
        Ntry.createElement("span", d, null, "ntryModalTitleText").innerHTML = Lang.Menus.jr_help;
        this._closeButton = Ntry.createElement("span", d, null, "ntryHintModalCloseButton");
        this._modalContent = Ntry.createElement("div", a, null, "ntryHintModalContent");
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        this.position();
        this._hint = Ntry.configManager.getConfig("intro");
        (this._popups = Ntry.configManager.getConfig("popups")) ? (this._textHintContainer.textContent = this._popups.objective,
        "operation"in this._popups ? this.setOperationPopup() : this._operationBtn.hidden = !0,
        "command"in this._popups ? this.setCommandPopup() : this._commandBtn.hidden = !0,
        "object"in this._popups ? this.setObjectPopup() : this._objectBtn.hidden = !0) : (this._objectBtn.hidden = !0,
        this._commandBtn.hidden = !0,
        this._operationBtn.hidden = !0);
        this.setMode(this.mode);
        this.fillHintContent();
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this._mode = Number(b) || 0;
        switch (this._mode) {
        case Entry.Workspace.MODE_VIMBOARD:
            this._blockHintView.hidden = !0;
            this._textHintView.hidden = !1;
            this._textHintView.ntryShow();
            break;
        case Entry.Workspace.MODE_BOARD:
            this._textHintView.hidden = !0,
            this._textHintView.ntryRemove(),
            this._blockHintView.hidden = !1;
        }
    }
    ;
    a.hideIntro = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this._mode = Number(b) || 0;
        b === Entry.Workspace.MODE_VIMBOARD && (this.hideIntroCount++,
        this.showOperationPopup());
    }
    ;
    a.showOperationPopup = function() {
        0 < this.hideIntroCount && 0 === this.operationCount && this._mode === Entry.Workspace.MODE_VIMBOARD && this._popupHelper.hasPopup("operation") && (this._popupHelper.show("operation"),
        this.operationCount++);
    }
    ;
    a.fillHintContent = function() {
        var b = this._hint;
        this._hintContainer.innerHTML = b.content;
        if (b.image) {
            b = b.image;
            this._hintThumbnail.removeClasses();
            this._hintThumbnail.addClass("cpartyHintThumbnail");
            this._hintThumbnail.addClass("cpartyHintThumbnail_" + b);
            1 != b && 6 != b && 11 != b || this._hintThumbnail.addClass(Lang.type);
            this._modalContent.removeClasses();
            this._modalContent.addClass("cpartyHintModalImage");
            this._modalContent.addClass("cpartyHintModalImage_" + b);
            1 != b && 6 != b && 11 != b || this._modalContent.addClass(Lang.type);
            var a = this;
            this._hintThumbnail.bindOnClick(function() {
                a._hintModal.ntryShow();
            });
            this._closeButton.bindOnClick(function() {
                a._hintModal.ntryRemove();
            });
        }
    }
    ;
    a.position = function() {
        var b = Ntry.configManager.getConfig("gridSize")
          , a = Ntry.configManager.getConfig("tileSize")
          , d = $(Ntry.interfaceManager.getDom("ntryEngine")).height()
          , b = b.height * a * (3 < b.height ? 1 / b.width * 7 : 1) + d + 13;
        $(this._view).css("top", b + "px");
    }
    ;
    a.setOperationPopup = function() {
        var b = Ntry.OperationPopup;
        b.title = this._popups.operation.title;
        b.content = this._popups.operation.content;
        this._popupHelper.addPopup("operation", b);
    }
    ;
    a.setCommandPopup = function() {
        var b = Ntry.CommandPopup;
        b.title = this._popups.command.title;
        b.content = this._popups.command.content;
        this._popupHelper.addPopup("command", b);
    }
    ;
    a.setObjectPopup = function() {
        var b = Ntry.ObjectPopup;
        b.title = this._popups.object.title;
        b.popupType = this._popups.object.popupType;
        b.object = this._popups.object.object;
        this._popupHelper.addPopup("object", b);
    }
    ;
}
)(Ntry.StudyCodingpartyHint.prototype);
Ntry.StudyIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this._popupHelper = new Entry.popupHelper(!0);
    this.createDom();
    Ntry.addEventListener("changeMode", this, this.setMode);
    this.blockModeShown = this.textModeShown = !1;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "ntryIntroContainer")
          , a = Ntry.createElement("div", b, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", a, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        b = Ntry.createElement("div", b, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", b, null, "ntryIntroLeftImg");
        a = Ntry.createElement("div", b, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", a, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", a, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", b, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Menus.start;
        var d = this;
        this._view.bindOnClick(function(b) {
            b.target == this && (d.hide(),
            b = Ntry.configManager.getConfig("stageId"),
            1 != b && 8 != b && 13 != b || d.showHelpPopup(b));
        });
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , a = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        12 >= a ? (this._leftImg.addClass("cpartyIntroLeft1Img"),
        this._rightTop.innerHTML = a / 12 && 0 == a % 12 ? "12/12" : a % 12 + "/12") : 22 >= a && (this._leftImg.addClass("cpartyIntroLeft2Img"),
        this._rightTop.innerHTML = a / 22 && 0 == a % 22 ? "10/10" : a % 12 + "/10");
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            1 != a && 8 != a && 13 != a || d.showHelpPopup(a);
            d.hide();
        });
        this._startButton.bindOnClick(function() {
            window.cpartyuserkey && Ntry.dispatchEvent("saveLogs", "start");
            d.hide();
            1 != a && 8 != a && 13 != a || d.showHelpPopup(a);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.setHelpPopup = function(b) {
        this._popupHelper.addPopup("mazeHelp", {
            title: Lang.Menus.mission_guide,
            setPopupLayout: function(a) {
                var d = Entry.Dom("div", {
                    class: "helpImage helpImage_2_" + b
                });
                a.append(d);
            }
        });
    }
    ;
    a.showHelpPopup = function(b) {
        this.mode !== Entry.Workspace.MODE_VIMBOARD && (this.setHelpPopup(b),
        this._popupHelper.show("mazeHelp"));
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this.mode = Number(b);
        Entry.Workspace.MODE_BOARD !== this.mode || this.blockModeShown ? Entry.Workspace.MODE_VIMBOARD !== this.mode || this.textModeShown || (this._rightCenter.innerHTML = this._intro.textContent || "",
        $(this._view).css("display", "block"),
        this.textModeShown = !0) : (this._rightCenter.innerHTML = this._intro.content,
        $(this._view).css("display", "block"),
        this.blockModeShown = !0);
    }
    ;
    a.hide = function() {
        $(this._view).css("display", "none");
        Ntry.dispatchEvent("hideIntro", this.mode);
    }
    ;
}
)(Ntry.StudyIntro.prototype);
Ntry.StudyMazeIntro = function() {
    this._view = Ntry.interfaceManager.getDom("ntryIntroArea");
    this._popupHelper = new Entry.popupHelper(!0);
    this.createDom();
    Ntry.addEventListener("changeMode", this, this.setMode);
    this.blockModeShown = this.textModeShown = !1;
}
;
(function(a) {
    a.createDom = function() {
        var b = Ntry.createElement("div", this._view, null, "ntryIntroContainer")
          , a = Ntry.createElement("div", b, null, "ntryIntroTitle");
        this._closeButton = Ntry.createElement("span", a, null, "ntryIntroCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        b = Ntry.createElement("div", b, null, "ntryIntroContent");
        this._leftImg = Ntry.createElement("div", b, null, "ntryIntroLeftImg");
        a = Ntry.createElement("div", b, null, "ntryIntroRightDiv");
        this._rightTop = Ntry.createElement("div", a, null, "ntryIntroRightTop");
        this._rightCenter = Ntry.createElement("div", a, null, "ntryIntroRightCenter");
        this._startButton = Ntry.createElement("span", b, null, "ntryIntroStartButton");
        this._startButton.innerHTML = Lang.Workspace.run;
        var d = this;
        this._view.bindOnClick(function(b) {
            b.target == this && (d.hide(),
            b = Ntry.configManager.getConfig("stageId"),
            1 != b && 3 != b && 4 != b && 9 != b || d.showHelpPopup(b));
        });
    }
    ;
    a.hide = function() {
        $(this._view).css("display", "none");
        Ntry.dispatchEvent("hideIntro", this.mode);
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {
        (this._intro = Ntry.configManager.getConfig("intro")) && this.fillContent();
    }
    ;
    a.fillContent = function() {
        var b = this._intro
          , a = Ntry.configManager.getConfig("stageId");
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryIntroLeftImg");
        8 >= a ? (this._leftImg.addClass("ntryIntroLeft2Img"),
        this._rightTop.innerHTML = a + "/8") : (this._leftImg.addClass("ntryIntroLeft3Img"),
        this._rightTop.innerHTML = Number(a) - 8 + "/6");
        this._rightCenter.innerHTML = b.content;
        var d = this;
        this._closeButton.bindOnClick(function() {
            d.hide();
            1 != a && 3 != a && 4 != a && 9 != a || d.showHelpPopup(a);
        });
        this._startButton.bindOnClick(function() {
            d.hide();
            1 != a && 3 != a && 4 != a && 9 != a || d.showHelpPopup(a);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.setMode = function(b) {
        b = void 0 === b ? 0 : b;
        b = isNaN(b) ? b.boardType : b;
        this.mode = Number(b);
        Entry.Workspace.MODE_BOARD !== this.mode || this.blockModeShown ? Entry.Workspace.MODE_VIMBOARD !== this.mode || this.textModeShown || (this._rightCenter.innerHTML = this._intro.textContent || "",
        $(this._view).css("display", "block"),
        this.textModeShown = !0) : (this._rightCenter.innerHTML = this._intro.content,
        $(this._view).css("display", "block"),
        this.blockModeShown = !0);
    }
    ;
    a.setHelpPopup = function(b) {
        this._popupHelper.addPopup("mazeHelp", {
            title: Lang.Menus.mission_guide,
            setPopupLayout: function(a) {
                var d = Entry.Dom("div", {
                    class: "helpImage helpImage_5_" + b
                });
                a.append(d);
            }
        });
    }
    ;
    a.showHelpPopup = function(b) {
        Entry.mainWorkspace.getMode() === Entry.Workspace.MODE_BOARD && (this.setHelpPopup(b),
        this._popupHelper.show("mazeHelp"));
    }
    ;
}
)(Ntry.StudyMazeIntro.prototype);
Ntry.StudyMazeJrResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.path = window.location.pathname;
    this.path = "/jr" == this.path ? this.path + "#!/" : "/study/maze" == this.path ? this.path + "#!/1/" : this.path + "/";
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = Lang.Menus
          , f = a("div", this._view, null, "ntryResultContainer")
          , g = a("div", f, null, "ntryResultTitle");
        this._closeButton = a("span", g, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = e.close;
        f = a("div", f, null, "ntryResultContent");
        this._leftImg = a("div", f, null, "ntryResultLeftImg");
        g = a("div", f, null, "ntryResultRightDiv");
        this._successContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "ntryResultCertDiv", "juni", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel", "juni");
        this._certNameLabel.innerHTML = e.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput", "juni");
        this._certNameInput.type = "text";
        this._certNameInput.onkeyup = Ntry.getInputLimitChecker(30);
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = e.jr_down_cert;
        this._failContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", f, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = e.replay;
        this._nextButton = a("span", f, null, "ntryResultNextButton");
        this._nextButton.innerHTML = e.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function() {
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("jrResultSuccess1Img");
        var b = this;
        this._closeButton.bindOnClick(function() {
            $(b._view).css("display", "none");
            $(b._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(b._view).css("display", "none");
        });
        this._certNameInput.bindOnClick(function() {
            b._certNameInput.focus();
        });
        this._certLink.rebindOnClick(function() {
            var a = b._certNameInput.value;
            "" === a ? (alert(Lang.Users.name_not_empty),
            b._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(a) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            b._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + a + "/1";
        });
        $(this._view).css("display", "block");
    }
    ;
    a.currentUsedBlock = function() {
        var a = b();
        if (a) {
            return a.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.complete = function(a, d) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = this.path + (e + 1);
        this._certNameInput.bindOnClick(function() {
            f._certNameInput.focus();
        });
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Users.name_not_empty),
            f._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(b) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            f._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + b + "/1";
        });
        Ntry.configManager.getConfig("limitBlockCnt");
        this.currentUsedBlock();
        if (a) {
            if (this.inspectEssential()) {
                this.success(e);
                var g;
                "object" == typeof StudyData && (g = StudyData.player[e],
                g.userCode = b().toJSON());
                "object" == typeof CPartyData && (g = CPartyData.player[e],
                g.userCode = b());
                Ntry.dispatchEvent("saveLogs", "finish");
            } else {
                this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            }
        } else {
            this.fail(e, d);
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        if (void 0 === Ntry.configManager.getConfig("essentialBlock")) {
            return !0;
        }
        var a = b();
        if (_.isEmpty(a)) {
            return !1;
        }
        a = a.getThreads();
        if (_.isEmpty(a)) {
            return !1;
        }
        for (var d = !1, e = 0, f = a.length; e < f; e++) {
            var g = a[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    if ("jr_repeat" == g[h].type) {
                        d = !0;
                        break;
                    }
                }
            }
        }
        return d;
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
    }
    ;
    a.success = function(b) {
        Ntry.dispatchEvent("jrActivityStageFinish", b);
        var a = Ntry.configManager.getConfig("limitBlockCnt")
          , e = this.currentUsedBlock();
        this._leftImg.addClass("jrResultSuccess1Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
        15 == b && this._replayButton.addClass("juniCert");
        var f, g = Lang.Menus;
        e <= a ? (this._certNameLabel.addClass("underCnt"),
        f = 15 != b ? g.jr_popup_prefix_3 : g.jr_popup_suffix_1) : e > a && (this._certNameLabel.removeClass("underCnt"),
        f = g.jr_popup_prefix_4);
        this._usedBlockPrefix.innerHTML = f;
        a = this._nextButton;
        15 === b ? (this._certDiv.ntryShow(),
        a.ntryRemove()) : a.ntryShow();
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        -1 < StudyData.successedStage.indexOf(b) || StudyData.successedStage.push(b);
    }
    ;
    a.fail = function(b, a) {
        var e = ""
          , f = 1
          , e = [Lang.Menus.jr_fail_dont_know, Lang.Menus.jr_fail_dont_go, Lang.Menus.jr_fail_no_pencil, Lang.Menus.jr_fail_forgot_pencil, Lang.Menus.jr_fail_need_repeat, "\ub108\ubb34\ub9ce\uc740 \ube14\ub85d\uc744 \uc0ac\uc6a9\ud588\uc5b4, \ub2e4\uc2dc \ub3c4\uc804\ud574\ubcfc\ub798?"];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            e = e[0];
            f = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            e = e[1];
            f = 3;
            break;
        case Ntry.STATIC.GET_ITEM:
            e = e[2];
            f = 2;
            break;
        case Ntry.STATIC.WITHOUT_ITEM_SUCCESS:
            e = e[3];
            f = 2;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = e[4];
            f = 1;
            break;
        case Ntry.STATIC.OVER_LIMITED_BLOCK:
            e = e[5];
            f = 1;
            break;
        case Ntry.STATIC.NO_ITEM:
            e = e[5];
            f = 1;
            break;
        default:
            e = e[1],
            f = 1;
        }
        this._leftImg.addClass("ntryjrResultFail_" + f);
        this._failCauseString.innerHTML = e;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
}
)(Ntry.StudyMazeJrResult.prototype);
Ntry.StudyMazeResult = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , e = Ntry.createElement("div", a, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", e, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        a = Ntry.createElement("div", a, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", a, null, "ntryResultLeftImg");
        e = Ntry.createElement("div", a, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._limitBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = Ntry.createElement("div", this._successContent, null, "ntryResultCertDiv", "ntryRemove");
        this._certDivLeft = Ntry.createElement("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = Ntry.createElement("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = Ntry.createElement("input", this._certDivLeft, null, "ntryResultContentNameInput");
        this._certNameInput.type = "text";
        this._certNameInput.onkeyup = Ntry.getInputLimitChecker(30);
        this._certLink = Ntry.createElement("div", this._certDiv, null, "ntryResultContentCert", "maze");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = Ntry.createElement("div", e, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", a, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", a, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.goToUrl(b._nextLink);
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
    }
    ;
    a.complete = function(b, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        var f = 5;
        8 < e && (f = 6);
        this._leftImg.removeClasses();
        "ko" == document.cookie.match(/lang=../)[0].split("lang=")[1] ? this._leftImg.addClass("ntryResultLeftImg") : (this._leftImg.addClass("ntryResultLeftImg"),
        this._leftImg.addClass("en"));
        var g = this;
        this._closeButton.bindOnClick(function() {
            $(g._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(g._view).css("display", "none");
        });
        this._nextLink = 6 == f ? "/study/maze#!/" + f + "/" + (e - 7) : "/study/maze#!/" + f + "/" + (e + 1);
        window.mazeuserkey || (window.mazeuserkey = this.randomString(8),
        $.ajax({
            method: "POST",
            url: "/api/maze/user",
            data: {
                key: window.mazeuserkey
            },
            cache: !1
        }));
        this._certNameInput.bindOnClick(function() {
            g._certNameInput.focus();
        });
        this._certLink.bindOnClick(function() {
            var b = g._certNameInput.value;
            "" === b ? (alert(Lang.cparty_insert_name),
            g._certNameInput.focus()) : Entry.Utils.hasSpecialCharacter(b) ? (alert("\uc774\ub984\uc5d0\ub294 \ud2b9\uc218\ubb38\uc790\ub97c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4."),
            g._certNameInput.focus()) : window.location.href = "/study/maze#!/certificate/" + b + "/" + f;
        });
        b ? this.inspectEssential() ? this.success(e) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(e, a);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var a = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === a) {
            return !0;
        }
        var a = a.blocks.slice(0)
          , d = b();
        if (_.isEmpty(d)) {
            return !1;
        }
        d = d.getThreads();
        if (_.isEmpty(d)) {
            return !1;
        }
        for (var e = 0, f = d.length; e < f; e++) {
            var g = d[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    var l = g[h]
                      , k = l.type
                      , k = a.indexOf(k);
                    -1 < k && a.splice(k, 1);
                    if (k = l.statements[0]) {
                        for (var l = k.getBlocks(), m = 0; m < l.length; m++) {
                            k = l[m].type,
                            k = a.indexOf(k),
                            -1 < k && a.splice(k, 1);
                        }
                    }
                    if (0 === a.length) {
                        return !0;
                    }
                }
            }
        }
        return 0 === a.length;
    }
    ;
    a.success = function(a) {
        var d = Ntry.configManager.getConfig("limitBlockCnt")
          , e = Entry.mainWorkspace.getMode()
          , f = 0
          , g = b();
        g && (f = g.getEventMap("start")[0].getThread().countBlock(),
        (g = g.getEventMap("define")) && g[0] && (g = g[0].getThread(),
        f += g.countBlock()));
        e === Entry.Workspace.MODE_VIMBOARD && (d--,
        f--);
        8 >= a ? this._leftImg.addClass("ntryResultSuccess2Img") : this._leftImg.addClass("ntryResultSuccess3Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        8 === a || 14 === a ? this._replayButton.ntryRemove() : this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._usedBlockCnt.innerHTML = f;
        this._limitBlockCnt.innerHTML = d;
        if (f === d) {
            this._usedBlockSuffix.innerHTML = e === Entry.Workspace.MODE_BOARD ? Lang.Menus.succeeded_using_blocks : Lang.Menus.succeeded_using_commands,
            this._usedBlockPrefix.innerHTML = Lang.Menus.perfect,
            this._limitBlockCnt.ntryRemove(),
            this._limitBlockPrefix.ntryRemove(),
            this._limitBlockSuffix.ntryRemove();
        } else {
            if (f < d) {
                this._usedBlockPrefix.innerHTML = Lang.Menus.awesome;
                this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_go_to_next;
                if (8 === a || 14 === a) {
                    this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_and_cert;
                }
                this._limitBlockCnt.ntryRemove();
                this._limitBlockPrefix.ntryRemove();
                this._limitBlockSuffix.ntryRemove();
                this._replayButton.ntryRemove();
            } else {
                this._usedBlockPrefix.innerHTML = Lang.Menus.good,
                e === Entry.Workspace.MODE_BOARD ? (this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
                this._limitBlockSuffix.innerHTML = Lang.Menus.try_again) : (this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_commands,
                this._limitBlockSuffix.innerHTML = Lang.Menus.try_again_commands),
                this._limitBlockPrefix.innerHTML = Lang.Menus.but,
                this._limitBlockCnt.ntryShow("ntryShowInlineBlock"),
                this._limitBlockPrefix.ntryShow("ntryShowInline"),
                this._limitBlockSuffix.ntryShow("ntryShowInline");
            }
        }
        8 === a || 14 === a ? (this._certDiv.ntryShow(),
        this._nextButton.ntryRemove()) : this._nextButton.ntryShow();
        Entry.mainWorkspace && (StudyMazeData.player[a].code = Entry.mainWorkspace.board.code.toJSON());
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        Ntry.dispatchEvent("saveLogs", "finish");
    }
    ;
    a.fail = function(b, a) {
        var e = 2
          , e = 8 >= b ? 2 : 3
          , f = ""
          , g = 1
          , f = [Lang.Menus.cause_msgs_1, Lang.Menus.cause_msgs_2, Lang.Menus.cause_msgs_3, Lang.Menus.cause_msgs_4, Lang.Menus.cause_msgs_5, Lang.Menus.cause_msgs_6];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.JUMP:
            f = f[1];
            g = 1;
            break;
        case Ntry.STATIC.SIMOOROOK:
            g = 4;
            Entry.mainWorkspace.getMode() === Entry.Workspace.MODE_VIMBOARD && g++;
            f = f[g];
            g = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            f = f[0];
            g = 2;
            break;
        case Ntry.STATIC.BEE_ATTACK:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.SLIP:
            f = f[2];
            g = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            f = f[3];
            g = 1;
            this.renderBlocks(b);
            break;
        default:
            f = f[4],
            g = 1;
        }
        this._leftImg.addClass("ntryResultFail_" + e + "_" + g);
        this._failCauseString.innerHTML = f;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var a = 5;
        if (1 === b || 2 === b) {
            a = 1;
        } else {
            if (3 === b) {
                a = 2;
            } else {
                if (4 <= b && 6 >= b) {
                    a = 3;
                } else {
                    if (7 === b || 8 === b) {
                        a = 4;
                    }
                }
            }
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryResultEssentialBlock_" + a);
    }
    ;
}
)(Ntry.StudyMazeResult.prototype);
Ntry.initialize = function(a) {
    this._events = {};
    this.updateTick && clearInterval(this.updateTick);
    this.interfaceManager = new Ntry.InterfaceManager;
    this.entityManager = new Ntry.EntityManager;
    this.systemManager = new Ntry.SystemManager;
    this.configManager = new Ntry.ConfigManager;
    this.registerComponents(a.components);
    this.registerSystems(a.systems);
    this.updateTick = setInterval(Ntry.update, 62.5);
    this.clear();
}
;
Ntry.clearNtry = function() {
    this._events = {};
    this.updateTick && clearInterval(this.updateTick);
    this.interfaceManager && this.interfaceManager.removeDom();
    this.unregisterComponents();
    this.unregisterSystems();
    delete this.interfaceManager;
    delete this.entityManager;
    delete this.systemManager;
    delete this.configManager;
    this.clear();
}
;
Ntry.loadConfig = function(a) {
    this.configManager.loadConfig(a);
    this.systemManager.updateConfig();
    this.systemManager.update();
    this.interfaceManager.updateConfig();
}
;
Ntry.registerComponents = function(a) {
    for (var b in a) {
        this.entityManager.registerComponent(a[b]);
    }
}
;
Ntry.registerSystems = function(a) {
    for (var b in a) {
        this.systemManager.addSystem(a[b]);
    }
}
;
Ntry.unregisterComponents = function() {
    this.entityManager && this.entityManager.unregisterComponents();
}
;
Ntry.unregisterSystems = function(a) {
    this.systemManager && this.systemManager.removeAllSystem();
}
;
window.Ntry = Ntry;
Ntry.clear = function() {
    Ntry.entityManager && Ntry.entityManager.clear();
}
;
Ntry.update = function() {
    Ntry.systemManager.update.call(Ntry.systemManager);
}
;
Ntry.setSkipLevelLimitCheck = function() {
    window.sessionStorage.setItem("skipLevelLimitCheck", "true");
}
;
Ntry.isSkipLevelLimitCheck = function() {
    return window.sessionStorage.getItem("skipLevelLimitCheck");
}
;
Ntry.resetSkipLevelLimitCheck = function() {
    window.sessionStorage.removeItem("skipLevelLimitCheck");
}
;
Ntry.getInputLimitChecker = function(a) {
    return function(b) {
        this.value.length > a && (this.value = this.value.substring(0, a),
        this.blur(),
        alert("\uc774\ub984\uc740 \ucd5c\ub300 " + a + "\uc790\uae4c\uc9c0 \uc785\ub825\ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4."));
    }
    ;
}
;
Ntry.UnitSystem = function() {
    this._unit;
    this._running = !1;
    this.callBackFunc = null;
    Ntry.addEventListener("unitAction", this, this.action);
    Ntry.addEventListener("run", this, function() {
        this._running = !0;
    });
    Ntry.addEventListener("stop", this, function() {
        this._running = !1;
    });
}
;
(function(a) {
    a.FRAMES = {};
    a.update = function() {
        this._unit ? Ntry.entityManager.hasComponent(this._unit.id, Ntry.STATIC.UNIT) || this.findUnit() : this.findUnit();
        if (this._unit) {
            var b = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT)
              , a = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.SPRITE)
              , d = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.POSITION);
            d || (d = {});
            if (b.action != Ntry.STATIC.STOP) {
                var e = this.FRAMES[b.action]
                  , f = {};
                b.direction;
                switch (b.direction) {
                case Ntry.STATIC.NORTH:
                    f = e.north;
                    break;
                case Ntry.STATIC.EAST:
                    f = e.east;
                    break;
                case Ntry.STATIC.SOUTH:
                    f = e.south;
                    break;
                case Ntry.STATIC.WEST:
                    f = e.west;
                }
                Ntry.addVectorByDirection(d, b.direction, this.tileSize * e.movement / f.frame.length);
                a.currentFrameKey = f.key;
                a.currentFrame = f.frame[b.step];
                a.scaleX = f.flip ? -Math.abs(a.scaleX) : Math.abs(a.scaleX);
                b.step++;
                f.frame.length <= b.step && (e.rotation && (b.direction = Ntry.STATIC.DIRECTION_MAP[b.direction + e.rotation]),
                e.next == Ntry.STATIC.FAIL ? (Ntry.dispatchEvent("complete", !1, b.action),
                b.action = Ntry.STATIC.STOP) : b.action = e.next,
                b.step = 0,
                this.callBackFunc && (this.callBackFunc.call(),
                this.callBackFunc = null));
            }
        }
    }
    ;
    a.loadConfig = function() {
        var b = Ntry.configManager;
        this.tileSize = b.getConfig("tileSize");
        b = b.getConfig("playerType") || "entry_bot";
        "soffy" == b && "object" == typeof EBS2015DATA && (this.FRAMES = EBS2015DATA.FRAMES);
        "entry_bot" == b && "object" == typeof NtryData && (this.FRAMES = NtryData.FRAMES);
        "entry_bot" == b && "object" == typeof NtryDataCfest && (this.FRAMES = NtryDataCfest.FRAMES);
        "Cparty_robot" == b && "object" == typeof CPartyData && (this.FRAMES = CPartyData.FRAMES);
        "CpartyCar" == b && "object" == typeof CPartyData && (this.FRAMES = CPartyData.CAR_FRAMES);
        "Cparty_robot" == b && "object" == typeof StudyData && (this.FRAMES = StudyData.FRAMES);
        "CpartyCar" == b && "object" == typeof StudyData && (this.FRAMES = StudyData.CAR_FRAMES);
        "cpartyjr" == b && "object" == typeof CpartyJRData && (this.FRAMES = CpartyJRData.FRAMES);
        "juni" == b && "object" == typeof JRData && (this.FRAMES = JRData.FRAMES);
        "entry_bot" == b && "object" == typeof MazeData && (this.FRAMES = MazeData.FRAMES);
    }
    ;
    a.findUnit = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT), a;
        for (a in b) {
            this._unit = b[a];
        }
    }
    ;
    a.action = function(b, a) {
        if (this._running) {
            var d = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT);
            d.action = b;
            d.step = 0;
            var e = this.FRAMES[b];
            if (e.gridMovement) {
                var f = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.GRID);
                Ntry.addVectorByDirection(f, d.direction, e.gridMovement);
            }
            a && (this.callBackFunc = a);
        }
    }
    ;
}
)(Ntry.UnitSystem.prototype);
Ntry.Vim = function() {
    this._workspaceScript = {};
    this._view = Ntry.interfaceManager.getDom("ntryPlayground");
    this.createDom();
    Ntry.addEventListener("run", this, this.syncScript);
    this.reference = {
        "this": {
            move: 'maze_step_move_step"',
            jump: 'maze_step_jump"',
            left: 'maze_step_rotate"><field name="VALUE">LEFT</field',
            right: 'maze_step_rotate"><field name="VALUE">RIGHT</field'
        },
        console: 'maze_step_move_step"',
        variable: {}
    };
}
;
(function(a) {
    a.createDom = function() {
        var b = this._view
          , a = Ntry.createElement("div", b, null, "ntryRightColTop");
        this._currentBlockNumber = Ntry.createElement("div", a, null, "currentBlockNumber");
        this._goalBlockNumber = Ntry.createElement("div", a, null, "goalBlockNumber");
        this.topbackground = Ntry.createElement("div", a, null, "topbackground");
        b = Ntry.createElement("div", b, null, "ntryPlayground");
        this.codeMirror = CodeMirror(b, {
            lineNumbers: !0,
            value: "this.move();\nthat.move();\nthis.move();\n",
            mode: {
                name: "javascript",
                globalVars: !0
            },
            theme: "default",
            indentUnit: 4,
            styleActiveLine: !0,
            extraKeys: {
                "Ctrl-Space": "autocomplete"
            },
            lint: !0
        });
    }
    ;
    a.syncScript = function() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER), a = null, d;
        for (d in b) {
            a = b[d];
        }
        b = Ntry.entityManager.getComponent(a.id, Ntry.STATIC.SCRIPT_CONTAINER);
        a = this.codeMirror.getValue();
        Entry.Parser.jsToBlock(a);
        a = this.codeToXml(a);
        b.script = a;
    }
    ;
    a.codeToXml = function(b) {
        b = acorn.parse(b).body;
        return '<xml><block type="maze_step_unstart"><next>' + this._codeToXml(b) + "</next></block></xml>";
    }
    ;
    a._codeToXml = function(b) {
        for (var a = "", d = "", e = !1, f = 0; f < b.length; f++) {
            var g = b[f];
            if (g.type) {
                try {
                    var h = this._parseStatement(g);
                } catch (l) {
                    e = !0;
                    break;
                }
                0 === f ? (a += h.front,
                d = h.back + d) : (a += "<next>" + h.front,
                d = "</next>" + h.back + d);
            } else {
                console.error("\uadf8\ub7f0 \uc77c\uc740 \uc788\uc744 \uc218 \uc5c6\uc5b4", g.start, g.end);
            }
        }
        return e ? "" : a + d;
    }
    ;
    a._parseStatement = function(b) {
        try {
            var a = ""
              , d = "";
            switch (b.type) {
            case "WhileStatement":
                console.error("while \ubb38 \uc544\uc9c1 \uc9c0\uc6d0 \uc548\ud568");
                a += '<block type="maze_step_for_true_1"><statement name="STACK">';
                a += this._codeToXml(b.body.body);
                a += "</statement>";
                d = "</block>" + d;
                break;
            case "ForStatement":
                console.error("for \ubb38 \uc544\uc9c1 \uc9c0\uc6d0 \uc548\ud568");
                a += '<block type="maze_step_for"><field name="VALUE">' + this.getRepeatCount(b) + '</field><statement name="DO">';
                a += this._codeToXml(b.body.body);
                a += "</statement>";
                d = "</block>" + d;
                break;
            case "ExpressionStatement":
                if ("CallExpression" === b.expression.type) {
                    var e = b.expression.callee, f;
                    if (f = "MemberExpression" === e.type ? this.reference["ThisExpression" === e.object.type ? "this" : e.object.name][e.property.name] : this.reference[e.name]) {
                        a += '<block type="' + f + ">",
                        d = "</block>" + d;
                    } else {
                        throw console.error("method not exist", b.start, b.end),
                        "method not exist";
                    }
                } else {
                    throw console.error("Not supported expression", b.start, b.end),
                    "Not supported expression";
                }
                break;
            case "VariableDeclaration":
                this.setVar(b);
                return;
            case "IfStatement":
                this.ifGenResult(b);
                break;
            default:
                console.error("Not supported statement", b.start, b.end);
            }
            return {
                front: a,
                back: d
            };
        } catch (g) {
            throw console.log(g),
            b = this.getLineNumber(b.start, b.end),
            b.message = g,
            b.severity = "error",
            this.codeMirror.markText(b.from, b.to, {
                className: "CodeMirror-lint-mark-error",
                __annotation: b,
                clearOnEnter: !0
            }),
            g;
        }
    }
    ;
    a.getLineNumber = function(b, a) {
        var d = this.codeMirror.getValue()
          , e = {
            from: {},
            to: {}
        }
          , f = d.substring(0, b).split(/\n/gi);
        e.from.line = f.length - 1;
        e.from.ch = f[f.length - 1].length;
        d = d.substring(0, a).split(/\n/gi);
        e.to.line = d.length - 1;
        e.to.ch = d[d.length - 1].length;
        return e;
    }
    ;
    a.setVar = function(b) {
        b = b.declarations;
        for (var a = 0; a < b.length; a++) {
            var d = b[a];
            this.reference.variable[d.id.name] = d.init.value;
        }
    }
    ;
    a.getVar = function(b) {
        return this.reference.variable[b];
    }
    ;
    a.getRepeatCount = function(b) {
        var a = b.init.declarations[0].init.value
          , d = b.test
          , e = d.operator
          , d = d.right.value
          , f = 0;
        "++" != b.update.operator && (b = a,
        a = d,
        d = b);
        switch (e) {
        case "<":
            f = d - a;
            break;
        case "<=":
            f = d + 1 - a;
            break;
        case ">":
            f = a - d;
            break;
        case ">=":
            f = a + 1 - d;
        }
        return 0 > f || isNaN(f) ? 0 : f;
    }
    ;
    a.update = function() {}
    ;
    a.loadConfig = function() {}
    ;
    a.setWorkspace = function(b) {}
    ;
}
)(Ntry.Vim.prototype);
Ntry.AiResult_2016 = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement("div", this._view, null, "ntryResultContainer")
          , d = Ntry.createElement("div", a, null, "ntryResultTitle");
        this._closeButton = Ntry.createElement("span", d, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = "\ub2eb\uae30";
        a = Ntry.createElement("div", a, null, "ntryResultContent");
        this._leftImg = Ntry.createElement("div", a, null, "ntryResultLeftImg");
        d = Ntry.createElement("div", a, null, "ntryResultRightDiv");
        this._successContent = Ntry.createElement("div", d, null, "ntryResultRightContent");
        this._usedBlockPrefix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockCnt = Ntry.createElement("span", this._successContent, null, "ntryResultBlockCnt");
        this._usedBlockSuffix = Ntry.createElement("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = Ntry.createElement("div", this._successContent, null, "ntryResultCertDiv_ai", "ntryRemove");
        this._certDivLeft = Ntry.createElement("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = Ntry.createElement("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = Ntry.createElement("input", this._certDivLeft, null, "ntryResultContentNameInput_ai");
        this._certNameInput.type = "text";
        this._certLink = Ntry.createElement("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = Ntry.createElement("div", d, null, "ntryResultRightContent");
        this._failCauseString = Ntry.createElement("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = Ntry.createElement("div", this._failContent, null, "ntryAiResultEssentialBlocks");
        this._replayButton = Ntry.createElement("span", a, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = Ntry.createElement("span", a, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.setSkipLevelLimitCheck();
            window.location.href = b._nextLink;
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", d = 0; d < b; d++) {
            var e = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(e, e + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
        var b = Ntry.configManager.getConfig("certBaseLink");
        b && (this._certBaseLink = b);
    }
    ;
    a.showCert = function(b) {
        this._usedBlockCnt.ntryRemove();
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("ntryResultSuccessAi");
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            $(a._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(a._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var d = a._certNameInput.value;
            if ("" === d) {
                alert(Lang.Users.name_not_empty),
                a._certNameInput.focus();
            } else {
                if (window.cpartyuserkey) {
                    var e = a._certBaseLink || "/codingparty/2015#!/";
                    window.location.href = e + "certificate/" + window.cpartyuserkey + "/" + d + "/" + b;
                }
            }
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
    }
    ;
    a.complete = function(b, a) {
        var d = Ntry.configManager.getConfig("stageId");
        d && (d = Number(d));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var e = this;
        this._closeButton.bindOnClick(function() {
            $(e._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(e._view).css("display", "none");
        });
        this._nextLink = "/we/ai#!/" + (d - 20 + 1);
        if (window.cpartyuserkey) {
            var f = this._certBaseLink ? this._certBaseLink : "/codingparty/2015#!/";
            this._nextLink = f + "5/" + (d - 20 + 1);
        }
        window.aiuserkey || (window.aiuserkey = this.randomString(8),
        $.ajax({
            method: "POST",
            url: "/api/ai/user",
            data: {
                key: window.aiuserkey
            },
            cache: !1
        }));
        this._certLink.rebindOnClick(function() {
            var b = e._certNameInput.value;
            if ("" === b) {
                alert("\uc774\ub984\uc744 \uc785\ub825\ud558\uc138\uc694."),
                e._certNameInput.focus();
            } else {
                if (window.cpartyuserkey) {
                    var a = e._certBaseLink || "/codingparty/2015#!/";
                    window.location.href = a + "certificate/" + window.cpartyuserkey + "/" + b + "/5";
                } else {
                    window.location.href = "/we/ai#!/c/c/" + window.aiuserkey + "/" + b;
                }
            }
        });
        b ? this.inspectEssential() || 30 === d ? this.success(d, this.getScrollX()) : this.fail(d, Ntry.STATIC.ESSENTIAL_REQUIRED) : 30 === d && 0 < this.getScrollX() ? this.success(d, this.getScrollX()) : this.fail(d, a);
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var a = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!a) {
            return !0;
        }
        for (var a = _.filter(a, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), a = _.reduce(a, function(b, a) {
            var c = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(a));
            return b + c;
        }, ""), d = 0, e = 0, f = b.blocks.length; e < f; e++) {
            RegExp(b.blocks[e], "i").test(a) && d++;
        }
        return d >= b.matchCnt;
    }
    ;
    a.getScrollX = function() {
        if (!this._scroll) {
            var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.SCROLL);
            if (b) {
                for (var a in b) {
                    this._scroll = Ntry.entityManager.getComponent(a, Ntry.STATIC.SCROLL);
                }
            } else {
                return 0;
            }
        }
        return Math.floor(this._scroll.scrollX / 100);
    }
    ;
    a.success = function(b, a) {
        this._leftImg.addClass("ntryResultSuccessAi");
        this._replayButton.removeClasses();
        30 === b ? (window.aiuserkey && $.ajax({
            method: "PUT",
            url: "/api/ai/user/finish/" + window.aiuserkey,
            cache: !1
        }),
        95 <= a ? (this._usedBlockCnt.ntryRemove(),
        this._usedBlockPrefix.ntryRemove(),
        this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_1) : (this._usedBlockCnt.innerHTML = a,
        this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_2,
        this._usedBlockSuffix.innerHTML = Lang.Menus.ai_success_msg_3),
        this._replayButton.addClass("ntryResultReplayButtonFailed"),
        this._certDiv.ntryShow(),
        this._nextButton.ntryRemove()) : (this._usedBlockCnt.innerHTML = Ntry.countUsedBlocks(),
        this._usedBlockPrefix.innerHTML = Lang.Menus.ai_success_msg_4,
        this._usedBlockSuffix.innerHTML = Lang.Menus.succeeded_using_blocks,
        this._replayButton.addClass("ntryResultReplayButton"),
        this._nextButton.ntryShow());
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
        window.cpartyuserkey && Ntry.dispatchEvent("saveLogs", "finish");
    }
    ;
    a.fail = function(b, a) {
        var d = ""
          , e = 1
          , f = [Lang.Menus.ai_cause_msg_1, Lang.Menus.ai_cause_msg_2, Lang.Menus.ai_cause_msg_3, Lang.Menus.ai_cause_msg_4];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (a) {
        case Ntry.STATIC.SIMOOROOK:
            d = f[0];
            e = 1;
            break;
        case Ntry.STATIC.COLLISION:
            d = f[1];
            e = 2;
            break;
        case Ntry.STATIC.LOST:
            d = f[2];
            e = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            d = f[3],
            e = 4,
            this.renderBlocks(b);
        }
        this._leftImg.addClass("ntryResultFail_ai_" + e);
        this._failCauseString.innerHTML = d;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
    }
    ;
    a.renderBlocks = function(b) {
        var a = 1;
        23 == b ? a = 1 : 24 == b ? a = 2 : 25 <= b && 30 >= b && (a = 3);
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("ntryAiResultEssentialBlocks");
        this._essentialBlocks.addClass("ntryAiResultEssentialBlocks_" + a);
    }
    ;
}
)(Ntry.AiResult_2016.prototype);
Ntry.CpartyCarResult_2016 = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = a("div", this._view, null, "ntryResultContainer")
          , f = a("div", e, null, "ntryResultTitle");
        this._closeButton = a("span", f, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = Lang.Menus.close;
        e = a("div", e, null, "ntryResultContent");
        this._leftImg = a("div", e, null, "ntryResultLeftImg");
        f = a("div", e, null, "ntryResultRightDiv");
        this._successContent = a("div", f, null, "ntryResultRightContent");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._usedBlockSuffix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._limitBlockSuffix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "cpartyCarResultCertDiv", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel");
        this._certNameLabel.innerHTML = Lang.Menus.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput");
        this._certNameInput.type = "text";
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = Lang.Menus.jr_down_cert;
        this._failContent = a("div", f, null, "ntryResultRightContent");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", e, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = Lang.Menus.replay;
        this._nextButton = a("span", e, null, "ntryResultNextButton");
        this._nextButton.innerHTML = Lang.Menus.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.setSkipLevelLimitCheck();
            window.location.href = b._nextLink;
        });
    }
    ;
    a.update = function() {}
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function(b) {
        this._failContent.ntryRemove();
        this._replayButton.ntryRemove();
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        3 == b ? this._leftImg.addClass("ntryResultSuccess1Img") : 4 == b && this._leftImg.addClass("cpartyCarResultSuccess4Img");
        var a = this;
        this._closeButton.bindOnClick(function() {
            $(a._view).css("display", "none");
            $(a._certDiv).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(a._view).css("display", "none");
        });
        this._certLink.rebindOnClick(function() {
            var e = a._certNameInput.value;
            "" === e ? (alert(Lang.Users.name_not_empty),
            a._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty/2016#!/certificate/" + window.cpartyuserkey + "/" + e + "/" + b);
        });
        $(this._view).css("display", "block");
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.removeClass("codingpartyResultCertReplay");
    }
    ;
    a.complete = function(b, a) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        mode = 3 + parseInt((e - 1) / 10);
        4 == mode && (e -= 10);
        this._nextLink = "/codingparty/2016#!/" + mode + "/" + (e + 1);
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Menus.cparty_insert_name),
            f._certNameInput.focus()) : window.location.href = "/codingparty/2016#!/certificate/" + window.cpartyuserkey + "/" + b + "/" + mode;
        });
        if (3 == mode) {
            if (b) {
                var g = this.inspectEssential();
                g ? (this.success(e),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            } else {
                this.fail(e, a);
            }
        } else {
            if (4 == mode) {
                b ? (g = this.inspectCodeEssential()) ? (this.Codesuccess(e),
                Ntry.dispatchEvent("saveLogs", "finish")) : this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED) : this.fail(e, a);
            } else {
                return;
            }
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectCodeEssential = function() {
        var a = Ntry.configManager.getConfig("essentialBlockInfo");
        if (void 0 === a) {
            return !0;
        }
        var a = a.blocks.slice(0)
          , d = b();
        if (_.isEmpty(d)) {
            return !1;
        }
        d = d.getEventMap("start")[0].getThread();
        if (_.isEmpty(d)) {
            return !1;
        }
        for (var d = d.getBlockList(), e = -1, f = 0; f < d.length; f++) {
            if (e = a.indexOf(d[f].type),
            -1 < e && a.splice(e, 1),
            0 === a.length) {
                return !0;
            }
        }
        return !1;
    }
    ;
    a.getBlockNameInLoop = function(b) {
        b = b._toJSON().values.STATEMENT._data;
        for (var a = [], e = 0; e < b.length; e++) {
            a.push(b[e]._toJSON().type);
        }
        return a;
    }
    ;
    a.inspectEssential = function() {
        var b = Ntry.configManager.getConfig("essentialBlockInfo");
        if (_.isEmpty(b)) {
            return !0;
        }
        var a = Ntry.entityManager
          , e = a.getEntitiesByComponent(Ntry.STATIC.SCRIPT_CONTAINER);
        if (_.isEmpty(e)) {
            return !1;
        }
        if (!a.getComponent(_.first(_.keys(e)), Ntry.STATIC.RESTORE)) {
            return !0;
        }
        a = Blockly.mainWorkspace.getTopBlocks(Blockly.mainWorkspace);
        if (!a) {
            return !0;
        }
        for (var a = _.filter(a, function(b) {
            return -1 < "ai_start ai_start_un maze_step_start maze_step_unstart maze_define_unfunction maze_define_function".split(" ").indexOf(b.type);
        }), a = _.reduce(a, function(b, a) {
            var c = Blockly.Xml.domToText(Blockly.Xml.blockToDom_(a));
            return b + c;
        }, ""), f = e = 0, g = b.blocks.length; f < g; f++) {
            RegExp(b.blocks[f], "i").test(a) && e++;
        }
        return e >= b.matchCnt;
    }
    ;
    a.success = function(b) {
        var a = Ntry.configManager.getConfig("limitBlockCnt"), e;
        (b = Ntry.configManager.getConfig("stageId")) && (b = Number(b));
        10 >= b && (this._leftImg.addClass("ntryResultSuccess1Img"),
        this._leftImg.addClass(Lang.type),
        e = Ntry.countUsedBlocks());
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        10 === b ? (this._replayButton.addClass("codingpartyResultCertReplay"),
        $(this._replayButton).css("bottom", "22px")) : this._replayButton.addClass("ntryResultReplayButtonFailed");
        e === a ? 10 === b ? (this._usedBlockPrefix.innerHTML = "",
        this._usedBlockSuffix.innerHTML = Lang.Menus.cparty_result_success_3) : this._usedBlockPrefix.innerHTML = Lang.Menus.cparty_result_success_1 : e < a ? this._usedBlockPrefix.innerHTML = Lang.Menus.cparty_result_success_1 : (this._usedBlockSuffix.innerHTML = "",
        this._usedBlockPrefix.innerHTML = Lang.Menus.cparty_result_success_2);
        10 === b ? (this._certDiv.ntryShow(),
        $(this._certDiv).show(),
        this._nextButton.ntryRemove()) : this._nextButton.ntryShow();
        a = CPartyData.player[b];
        e = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
        a.userScript = Blockly.Xml.domToText(e);
        this._successContent.ntryShow();
        this._replayButton.ntryShow();
        this._failContent.ntryRemove();
        window.cpartyuserkey && Ntry.dispatchEvent("addActivityLog", b, {
            name: "finish"
        });
    }
    ;
    a.currentUsedBlock = function() {
        var a = b();
        if (a) {
            return a.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.fail = function(a, d) {
        var e = 1;
        (a = Ntry.configManager.getConfig("stageId")) && (a = Number(a));
        10 >= a ? e = 1 : 20 >= a && 10 < a && (e = 4);
        var f = ""
          , g = 1
          , f = [Lang.Menus.cparty_result_fail_1, Lang.Menus.cparty_result_fail_2, Lang.Menus.cparty_result_fail_3, Lang.Menus.cparty_result_fail_4, Lang.Menus.cparty_result_fail_5];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (d) {
        case Ntry.STATIC.SIMOOROOK:
            f = f[3];
            g = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            f = f[0];
            g = 2;
            break;
        case Ntry.STATIC.BEE_ATTACK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ELECTRIC_SHOCK:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.SLIP:
            f = f[1];
            g = 3;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            f = f[2];
            g = 1;
            this.renderBlocks(a, !0);
            break;
        case Ntry.STATIC.GO_SLOW_CRASH:
            f = f[4];
            g = 4;
            this.renderBlocks(a);
            break;
        default:
            f = f[3],
            g = 1;
        }
        this._leftImg.addClass("ntryResultFail_" + e + "_" + g);
        this._failCauseString.innerHTML = f;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
        (a = Ntry.configManager.getConfig("stageId")) && (a = Number(a));
        mode = 3 + parseInt((a - 1) / 10);
        4 == mode && Entry.commander && Entry.commander.report(null, ["fail", ["cause", d], ["code", b().stringify()]]);
    }
    ;
    a.renderBlocks = function(b, a) {
        if (a) {
            if (10 < b) {
                switch (b % 10) {
                case 4:
                    ;
                case 5:
                    type = 7;
                    break;
                case 6:
                    ;
                case 7:
                    type = 8;
                    break;
                case 8:
                    type = 9;
                    break;
                case 9:
                    ;
                case 10:
                    type = 10;
                }
            } else {
                type = 5;
            }
        } else {
            type = 6;
        }
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.addClass("cpartyResultEssentialBlocks");
        this._essentialBlocks.addClass("cpartyResultEssentialBlock_" + type);
        this._essentialBlocks.addClass(Lang.type);
    }
    ;
    a.currentUsedBlock = function() {
        var a = b();
        if (a) {
            return a.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.Codesuccess = function(a) {
        var d = CPartyData.player[10 + a]
          , e = b().stringify();
        d.userCode = e;
        Entry.commander && Entry.commander.report(null, ["success", ["code", e]]);
        Ntry.dispatchEvent("jrActivityStageFinish", a);
        d = Ntry.configManager.getConfig("limitBlockCnt");
        e = this.currentUsedBlock();
        this._leftImg.addClass("cpartyCarResultSuccess4Img");
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        10 === a ? this._replayButton.addClass("codingpartyResultCertReplay") : this._replayButton.addClass("ntryResultReplayButtonFailed");
        var f = this._usedBlockPrefix
          , g = Lang.Menus;
        e <= d ? f.innerHTML = 10 != a ? g.cparty_car_popup_prefix_1 : g.cparty_car_popup_suffix : e > d && (f.innerHTML = g.cparty_car_popup_prefix_2);
        d = this._nextButton;
        10 === a ? (this._certDiv.ntryShow(),
        $(this._certDiv).show(),
        d.ntryRemove(),
        this._replayButton.ntryRemove()) : d.ntryShow();
        this._successContent.ntryShow();
        this._replayButton.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
}
)(Ntry.CpartyCarResult_2016.prototype);
Ntry.CpartyJrResult_2016 = function() {
    this._view = Ntry.interfaceManager.getDom("ntryResultArea");
    this.path = window.location.pathname;
    this.path = "/jr" == this.path ? this.path + "#!/" : "/codingparty/2016" == this.path ? this.path + "#!/2/" : this.path + "/";
    this.createDom();
}
;
(function(a) {
    function b() {
        var b = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
        if (b = b[Object.keys(b)[0]]) {
            return Ntry.entityManager.getComponent(b.id, Ntry.STATIC.CODE).code;
        }
    }
    a.createDom = function() {
        var b = this
          , a = Ntry.createElement
          , e = Lang.Menus
          , f = a("div", this._view, null, "ntryResultContainer")
          , g = a("div", f, null, "ntryResultTitle");
        this._closeButton = a("span", g, null, "ntryResultCloseButton");
        this._closeButton.innerHTML = e.close;
        f = a("div", f, null, "ntryResultContent");
        this._leftImg = a("div", f, null, "ntryResultLeftImg");
        g = a("div", f, null, "ntryResultRightDiv");
        this._successContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._usedBlockPrefix = a("span", this._successContent, null, "ntryResultContentSpan");
        this._certDiv = a("div", this._successContent, null, "ntryResultCertDiv", "juni", "ntryRemove");
        this._certDivLeft = a("div", this._certDiv, null, "ntryResultCertDivLeft");
        this._certNameLabel = a("span", this._certDivLeft, null, "ntryResultContentNameLabel", "juni");
        this._certNameLabel.innerHTML = e.jr_whats_ur_name;
        this._certNameInput = a("input", this._certDivLeft, null, "ntryResultContentNameInput", "juni");
        this._certNameInput.type = "text";
        this._certLink = a("div", this._certDiv, null, "ntryResultContentCert");
        this._certLink.innerHTML = e.jr_down_cert;
        this._failContent = a("div", g, null, "ntryResultRightContent", "juni");
        this._failCauseString = a("span", this._failContent, null, "ntryResultFailCauseSpan");
        this._essentialBlocks = a("div", this._failContent, null, "ntryResultEssentialBlocks");
        this._replayButton = a("span", f, null, "ntryResultReplayButton");
        this._replayButton.innerHTML = e.replay;
        this._nextButton = a("span", f, null, "ntryResultNextButton");
        this._nextButton.innerHTML = e.go_to_next_level;
        this._nextButton.bindOnClick(function() {
            Ntry.setSkipLevelLimitCheck();
            window.location.href = b._nextLink;
        });
    }
    ;
    a.randomString = function(b) {
        for (var a = "", e = 0; e < b; e++) {
            var f = Math.floor(62 * Math.random())
              , a = a + "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".substring(f, f + 1)
        }
        return a;
    }
    ;
    a.loadConfig = function() {
        Ntry.addEventListener("complete", this, this.complete);
        Ntry.addEventListener("showCert", this, this.showCert);
    }
    ;
    a.showCert = function() {
        this._failContent.ntryRemove();
        $(this._replayButton).css("display", "none");
        $(this._view).css("display", "block");
        this._certDiv.ntryShow();
        this._nextButton.ntryRemove();
        this._successContent.ntryShow();
        $(this._certDiv).show();
        $(this._successContent).css("margin-top", "20px");
        this._usedBlockPrefix.innerHTML = "";
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        this._leftImg.addClass("jrResultSuccess1Img");
        var b = this;
        this._closeButton.bindOnClick(function() {
            $(b._view).css("display", "none");
            b._certDiv.ntryRemove();
            $(b._replayButton).css("display", "block");
        });
        this._certLink.rebindOnClick(function() {
            var a = b._certNameInput.value;
            "" === a ? (alert(Lang.Users.name_not_empty),
            b._certNameInput.focus()) : window.cpartyuserkey && (window.location.href = "/codingparty/2016#!/certificate/" + window.cpartyuserkey + "/" + a + "/2");
        });
        $(this._view).css("display", "block");
    }
    ;
    a.currentUsedBlock = function() {
        var a = b();
        if (a) {
            return a.getEventMap("start")[0].getThread().countBlock() - 1;
        }
    }
    ;
    a.complete = function(a, d) {
        var e = Ntry.configManager.getConfig("stageId");
        e && (e = Number(e));
        this._leftImg.removeClasses();
        this._leftImg.addClass("ntryResultLeftImg");
        var f = this;
        this._closeButton.bindOnClick(function() {
            $(f._view).css("display", "none");
        });
        this._replayButton.bindOnClick(function() {
            Ntry.dispatchEvent("replay");
            $(f._view).css("display", "none");
        });
        this._nextLink = this.path + (e + 1);
        this._certLink.rebindOnClick(function() {
            var b = f._certNameInput.value;
            "" === b ? (alert(Lang.Users.name_not_empty),
            f._certNameInput.focus()) : window.location.href = window.cpartyuserkey ? "/codingparty/2016#!/certificate/" + window.cpartyuserkey + "/" + b + "/2" : f.path + "cert/" + b;
        });
        Ntry.configManager.getConfig("limitBlockCnt");
        Ntry.configManager.getConfig("stageMode");
        this.currentUsedBlock();
        if (a) {
            if (this.inspectEssential()) {
                this.success(e);
                var g = b().stringify();
                CpartyJRData.player[e].userCode = g;
                Entry.commander && Entry.commander.report(null, ["success", ["code", g]]);
                Ntry.dispatchEvent("saveLogs", "finish");
            } else {
                this.fail(e, Ntry.STATIC.ESSENTIAL_REQUIRED);
            }
        } else {
            this.fail(e, d);
        }
        $(this._view).css("display", "block");
    }
    ;
    a.inspectEssential = function() {
        if (void 0 === Ntry.configManager.getConfig("essentialBlock")) {
            return !0;
        }
        var a = b();
        if (_.isEmpty(a)) {
            return !1;
        }
        a = a.getThreads();
        if (_.isEmpty(a)) {
            return !1;
        }
        for (var d = !1, e = 0, f = a.length; e < f; e++) {
            var g = a[e]
              , h = g.getFirstBlock();
            if (h && h._schema.event) {
                for (g = g.getBlocks(),
                h = 0; h < g.length; h++) {
                    if ("jr_repeat" == g[h].type) {
                        d = !0;
                        break;
                    }
                }
            }
        }
        return d;
    }
    ;
    a.initState = function() {
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
    }
    ;
    a.success = function(a) {
        Ntry.dispatchEvent("jrActivityStageFinish", a);
        var b = Ntry.configManager.getConfig("limitBlockCnt")
          , e = this.currentUsedBlock();
        this._leftImg.addClass("jrResultSuccess1Img");
        this._leftImg.addClass(Lang.type);
        this._replayButton.removeClass("ntryResultReplayButtonFailed");
        this._replayButton.removeClass("ntryResultFailAndReply");
        this._replayButton.addClass("ntryResultReplayButtonFailed");
        this._certDiv.ntryRemove();
        15 == a && this._replayButton.addClass("juniCert");
        var f, g = Lang.Menus;
        e <= b ? (this._certNameLabel.addClass("underCnt"),
        f = 15 != a ? Lang.Menus.cparty_jr_success_1 : g.cparty_jr_result_2) : e > b && (this._certNameLabel.removeClass("underCnt"),
        f = 15 == a ? g.cparty_jr_result_3 : g.cparty_jr_result_4);
        this._usedBlockPrefix.innerHTML = f;
        b = this._nextButton;
        15 === a ? (this._certDiv.ntryShow(),
        b.ntryRemove()) : b.ntryShow();
        this._successContent.ntryShow();
        this._failContent.ntryRemove();
    }
    ;
    a.fail = function(a, d) {
        var e = ""
          , f = 1
          , e = [Lang.Menus.jr_fail_dont_know, Lang.Menus.jr_fail_dont_go, Lang.Menus.jr_fail_no_pencil, Lang.Menus.jr_fail_forgot_pencil, Lang.Menus.jr_fail_need_repeat, Lang.Menus.jr_fail_much_blocks];
        this._essentialBlocks.removeClasses();
        this._essentialBlocks.ntryRemove();
        switch (d) {
        case Ntry.STATIC.SIMOOROOK:
            e = e[0];
            f = 1;
            break;
        case Ntry.STATIC.WALL_CRASH:
            e = e[1];
            f = 3;
            break;
        case Ntry.STATIC.GET_ITEM:
            e = e[2];
            f = 2;
            break;
        case Ntry.STATIC.WITHOUT_ITEM_SUCCESS:
            e = e[3];
            f = 2;
            break;
        case Ntry.STATIC.ESSENTIAL_REQUIRED:
            e = e[4];
            f = 1;
            break;
        case Ntry.STATIC.OVER_LIMITED_BLOCK:
            e = e[5];
            f = 1;
            break;
        case Ntry.STATIC.NO_ITEM:
            e = e[5];
            f = 1;
            break;
        default:
            e = e[1],
            f = 1;
        }
        this._leftImg.addClass("ntryjrResultFail_" + f);
        this._failCauseString.innerHTML = e;
        this._successContent.ntryRemove();
        this._failContent.ntryShow();
        this._nextButton.ntryRemove();
        this._replayButton.removeClasses();
        this._replayButton.addClass("ntryResultFailAndReply");
        Entry.commander && Entry.commander.report(null, ["fail", ["cause", d], ["code", b().stringify()]]);
    }
    ;
}
)(Ntry.CpartyJrResult_2016.prototype);
