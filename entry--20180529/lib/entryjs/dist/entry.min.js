!function (t) {
    var e = {};

    function n(r) {
        if (e[r]) return e[r].exports;
        var o = e[r] = {i: r, l: !1, exports: {}};
        return t[r].call(o.exports, o, o.exports, n), o.l = !0, o.exports
    }

    n.m = t, n.c = e, n.d = function (t, e, r) {
        n.o(t, e) || Object.defineProperty(t, e, {configurable: !1, enumerable: !0, get: r})
    }, n.r = function (t) {
        Object.defineProperty(t, "__esModule", {value: !0})
    }, n.n = function (t) {
        var e = t && t.__esModule ? function () {
            return t.default
        } : function () {
            return t
        };
        return n.d(e, "a", e), e
    }, n.o = function (t, e) {
        return Object.prototype.hasOwnProperty.call(t, e)
    }, n.p = "/dist/", n(n.s = 50)
}([function (t, e, n) {
    t.exports = {default: n(353), __esModule: !0}
}, function (t, e) {
    var n = t.exports = {version: "2.5.0"};
    "number" == typeof __e && (__e = n)
}, function (t, e, n) {
    var r = n(42)("wks"), o = n(28), a = n(4).Symbol, s = "function" == typeof a;
    (t.exports = function (t) {
        return r[t] || (r[t] = s && a[t] || (s ? a : o)("Symbol." + t))
    }).store = r
}, function (t, e, n) {
    t.exports = {default: n(370), __esModule: !0}
}, function (t, e) {
    var n = t.exports = "undefined" != typeof window && window.Math == Math ? window : "undefined" != typeof self && self.Math == Math ? self : Function("return this")();
    "number" == typeof __g && (__g = n)
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r = s(n(243)), o = s(n(235)),
        a = "function" == typeof o.default && "symbol" == typeof r.default ? function (t) {
            return typeof t
        } : function (t) {
            return t && "function" == typeof o.default && t.constructor === o.default && t !== o.default.prototype ? "symbol" : typeof t
        };

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    e.default = "function" == typeof o.default && "symbol" === a(r.default) ? function (t) {
        return void 0 === t ? "undefined" : a(t)
    } : function (t) {
        return t && "function" == typeof o.default && t.constructor === o.default && t !== o.default.prototype ? "symbol" : void 0 === t ? "undefined" : a(t)
    }
}, function (t, e, n) {
    var r = n(4), o = n(1), a = n(23), s = n(13), i = function (t, e, n) {
        var l, c, u, p = t & i.F, _ = t & i.G, d = t & i.S, y = t & i.P, g = t & i.B, h = t & i.W,
            m = _ ? o : o[e] || (o[e] = {}), b = m.prototype, f = _ ? r : d ? r[e] : (r[e] || {}).prototype;
        for (l in _ && (n = e), n) (c = !p && f && void 0 !== f[l]) && l in m || (u = c ? f[l] : n[l], m[l] = _ && "function" != typeof f[l] ? n[l] : g && c ? a(u, r) : h && f[l] == u ? function (t) {
            var e = function (e, n, r) {
                if (this instanceof t) {
                    switch (arguments.length) {
                        case 0:
                            return new t;
                        case 1:
                            return new t(e);
                        case 2:
                            return new t(e, n)
                    }
                    return new t(e, n, r)
                }
                return t.apply(this, arguments)
            };
            return e.prototype = t.prototype, e
        }(u) : y && "function" == typeof u ? a(Function.call, u) : u, y && ((m.virtual || (m.virtual = {}))[l] = u, t & i.R && b && !b[l] && s(b, l, u)))
    };
    i.F = 1, i.G = 2, i.S = 4, i.P = 8, i.B = 16, i.W = 32, i.U = 64, i.R = 128, t.exports = i
}, function (t, e, n) {
    var r = n(10), o = n(83), a = n(47), s = Object.defineProperty;
    e.f = n(9) ? Object.defineProperty : function (t, e, n) {
        if (r(t), e = a(e, !0), r(n), o) try {
            return s(t, e, n)
        } catch (t) {
        }
        if ("get" in n || "set" in n) throw TypeError("Accessors not supported!");
        return "value" in n && (t[e] = n.value), t
    }
}, function (t, e, n) {
    var r = n(81), o = n(46);
    t.exports = function (t) {
        return r(o(t))
    }
}, function (t, e, n) {
    t.exports = !n(15)(function () {
        return 7 != Object.defineProperty({}, "a", {
            get: function () {
                return 7
            }
        }).a
    })
}, function (t, e, n) {
    var r = n(16);
    t.exports = function (t) {
        if (!r(t)) throw TypeError(t + " is not an object!");
        return t
    }
}, function (t, e) {
    var n = {}.hasOwnProperty;
    t.exports = function (t, e) {
        return n.call(t, e)
    }
}, function (t, e, n) {
    var r = n(82), o = n(41);
    t.exports = Object.keys || function (t) {
        return r(t, o)
    }
}, function (t, e, n) {
    var r = n(7), o = n(22);
    t.exports = n(9) ? function (t, e, n) {
        return r.f(t, e, o(1, n))
    } : function (t, e, n) {
        return t[e] = n, t
    }
}, function (t, e) {
    t.exports = {}
}, function (t, e) {
    t.exports = function (t) {
        try {
            return !!t()
        } catch (t) {
            return !0
        }
    }
}, function (t, e) {
    t.exports = function (t) {
        return "object" == typeof t ? null !== t : "function" == typeof t
    }
}, function (t, e, n) {
    "use strict";
    var r = n(241)(!0);
    n(69)(String, "String", function (t) {
        this._t = String(t), this._i = 0
    }, function () {
        var t, e = this._t, n = this._i;
        return n >= e.length ? {value: void 0, done: !0} : (t = r(e, n), this._i += t.length, {value: t, done: !1})
    })
}, function (t, e) {
    t.exports = function (t) {
        var e = typeof t;
        return null != t && ("object" == e || "function" == e)
    }
}, function (t, e, n) {
    var r = n(46);
    t.exports = function (t) {
        return Object(r(t))
    }
}, function (t, e) {
    e.f = {}.propertyIsEnumerable
}, function (t, e) {
    var n = {}.toString;
    t.exports = function (t) {
        return n.call(t).slice(8, -1)
    }
}, function (t, e) {
    t.exports = function (t, e) {
        return {enumerable: !(1 & t), configurable: !(2 & t), writable: !(4 & t), value: e}
    }
}, function (t, e, n) {
    var r = n(29);
    t.exports = function (t, e, n) {
        if (r(t), void 0 === e) return t;
        switch (n) {
            case 1:
                return function (n) {
                    return t.call(e, n)
                };
            case 2:
                return function (n, r) {
                    return t.call(e, n, r)
                };
            case 3:
                return function (n, r, o) {
                    return t.call(e, n, r, o)
                }
        }
        return function () {
            return t.apply(e, arguments)
        }
    }
}, function (t, e, n) {
    n(238);
    for (var r = n(4), o = n(13), a = n(14), s = n(2)("toStringTag"), i = "CSSRuleList,CSSStyleDeclaration,CSSValueList,ClientRectList,DOMRectList,DOMStringList,DOMTokenList,DataTransferItemList,FileList,HTMLAllCollection,HTMLCollection,HTMLFormElement,HTMLSelectElement,MediaList,MimeTypeArray,NamedNodeMap,NodeList,PaintRequestList,Plugin,PluginArray,SVGLengthList,SVGNumberList,SVGPathSegList,SVGPointList,SVGStringList,SVGTransformList,SourceBufferList,StyleSheetList,TextTrackCueList,TextTrackList,TouchList".split(","), l = 0; l < i.length; l++) {
        var c = i[l], u = r[c], p = u && u.prototype;
        p && !p[s] && o(p, s, c), a[c] = a.Array
    }
}, function (t, e, n) {
    var r = n(7).f, o = n(11), a = n(2)("toStringTag");
    t.exports = function (t, e, n) {
        t && !o(t = n ? t : t.prototype, a) && r(t, a, {configurable: !0, value: e})
    }
}, function (t, e) {
    t.exports = !0
}, function (t, e, n) {
    var r = n(36);
    t.exports = function (t, e) {
        for (var n = t.length; n--;) if (r(t[n][0], e)) return n;
        return -1
    }
}, function (t, e) {
    var n = 0, r = Math.random();
    t.exports = function (t) {
        return "Symbol(".concat(void 0 === t ? "" : t, ")_", (++n + r).toString(36))
    }
}, function (t, e) {
    t.exports = function (t) {
        if ("function" != typeof t) throw TypeError(t + " is not a function!");
        return t
    }
}, function (t, e, n) {
    "use strict";
    var r = n(29);
    t.exports.f = function (t) {
        return new function (t) {
            var e, n;
            this.promise = new t(function (t, r) {
                if (void 0 !== e || void 0 !== n) throw TypeError("Bad Promise constructor");
                e = t, n = r
            }), this.resolve = r(e), this.reject = r(n)
        }(t)
    }
}, function (t, e, n) {
    var r = n(32), o = n(2)("iterator"), a = n(14);
    t.exports = n(1).getIteratorMethod = function (t) {
        if (void 0 != t) return t[o] || t["@@iterator"] || a[r(t)]
    }
}, function (t, e, n) {
    var r = n(21), o = n(2)("toStringTag"), a = "Arguments" == r(function () {
        return arguments
    }());
    t.exports = function (t) {
        var e, n, s;
        return void 0 === t ? "Undefined" : null === t ? "Null" : "string" == typeof(n = function (t, e) {
            try {
                return t[e]
            } catch (t) {
            }
        }(e = Object(t), o)) ? n : a ? r(e) : "Object" == (s = r(e)) && "function" == typeof e.callee ? "Arguments" : s
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a, s, i = c(n(3)), l = c(n(0));

    function c(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.Utils = {}, Entry.TEXT_ALIGN_CENTER = 0, Entry.TEXT_ALIGN_LEFT = 1, Entry.TEXT_ALIGN_RIGHT = 2, Entry.TEXT_ALIGNS = ["center", "left", "right"], Entry.clipboard = null, Entry.loadProject = function (t) {
        if (t || (t = Entry.getStartProject(Entry.mediaFilePath)), "workspace" == this.type && Entry.stateManager.startIgnore(), Entry.projectId = t._id, Entry.variableContainer.setVariables(t.variables), Entry.variableContainer.setMessages(t.messages), Entry.scene.addScenes(t.scenes), Entry.stage.initObjectContainers(), Entry.variableContainer.setFunctions(t.functions), Entry.container.setObjects(t.objects), Entry.FPS = t.speed ? t.speed : 60, createjs.Ticker.setFPS(Entry.FPS), Entry.engine.projectTimer || Entry.variableContainer.generateTimer(), 0 === (0, l.default)(Entry.container.inputValue).length && Entry.variableContainer.generateAnswer(), Entry.start(), this.options.programmingMode) {
            var e = this.options.programmingMode;
            if (Entry.Utils.isNumber(e)) {
                var n = e;
                e = {}, this.mode = e, 0 == n ? (e.boardType = Entry.Workspace.MODE_BOARD, e.textType = -1) : 1 == n ? (e.boardType = Entry.Workspace.MODE_VIMBOARD, e.textType = Entry.Vim.TEXT_TYPE_PY, e.runType = Entry.Vim.WORKSPACE_MODE) : 2 == n && (e.boardType = Entry.Workspace.MODE_VIMBOARD, e.textType = Entry.Vim.TEXT_TYPE_JS, e.runType = Entry.Vim.MAZE_MODE), Entry.getMainWS().setMode(e)
            }
        }
        return Entry.Loader.isLoaded() && Entry.Loader.handleLoad(), "workspace" == this.type && Entry.stateManager.endIgnore(), t.interface && Entry.options.loadInterface && Entry.loadInterfaceState(t.interface), window.parent && window.parent.childIframeLoaded && window.parent.childIframeLoaded(), t
    }, Entry.clearProject = function () {
        Entry.stop(), Entry.projectId = null, "invisible" !== Entry.type && Entry.playground && Entry.playground.changeViewMode("code"), Entry.variableContainer.clear(), Entry.container.clear(), Entry.scene.clear()
    }, Entry.exportProject = function (t) {
        t || (t = {}), Entry.engine.isState("stop") || Entry.engine.toggleStop();
        var e = t.objects = Entry.container.toJSON();
        return t.scenes = Entry.scene.toJSON(), t.variables = Entry.variableContainer.getVariableJSON(), t.messages = Entry.variableContainer.getMessageJSON(), t.functions = Entry.variableContainer.getFunctionJSON(), t.scenes = Entry.scene.toJSON(), t.speed = Entry.FPS, t.interface = Entry.captureInterfaceState(), !(!e || !e.length) && t
    }, Entry.setBlockByText = function (t, e) {
        for (var n = [], r = jQuery.parseXML(e).getElementsByTagName("category"), o = 0; o < r.length; o++) {
            for (var a = r[o], s = {
                category: a.getAttribute("id"),
                blocks: []
            }, i = a.childNodes, l = 0; l < i.length; l++) {
                var c = i[l];
                !c.tagName || "BLOCK" != c.tagName.toUpperCase() && "BTN" != c.tagName.toUpperCase() || s.blocks.push(c.getAttribute("type"))
            }
            n.push(s)
        }
        Entry.playground.setBlockMenu(n)
    }, Entry.setBlock = function (t, e) {
        Entry.playground.setMenuBlock(t, e)
    }, Entry.enableArduino = function () {
    }, Entry.beforeUnload = function (t) {
        if (Entry.hw.closeConnection(), Entry.variableContainer.updateCloudVariables(), "workspace" == Entry.type && (localStorage && Entry.interfaceState && localStorage.setItem("workspace-interface", (0, i.default)(Entry.captureInterfaceState())), !Entry.stateManager.isSaved())) return Lang.Workspace.project_changed
    }, Entry.captureInterfaceState = function () {
        var t = JSON.parse((0, i.default)(Entry.interfaceState)), e = Entry.playground;
        return "workspace" == Entry.type && e && e.object && (t.object = e.object.id), t
    }, Entry.loadInterfaceState = function (t) {
        if ("workspace" == Entry.type) {
            if (t) Entry.container.selectObject(t.object, !0); else if (localStorage && localStorage.getItem("workspace-interface")) {
                var e = localStorage.getItem("workspace-interface");
                t = JSON.parse(e)
            } else t = {menuWidth: 280, canvasWidth: 480};
            this.resizeElement(t)
        }
    }, Entry.getUpTime = function () {
        return (new Date).getTime() - this.startTime
    }, Entry.addActivity = function (t) {
        Entry.stateManager && Entry.stateManager.addActivity(t)
    }, Entry.startActivityLogging = function () {
        Entry.reporter && Entry.reporter.start(Entry.projectId, window.user ? window.user._id : null, Entry.startTime)
    }, Entry.getActivityLog = function () {
        var t = {};
        return Entry.stateManager && (t.activityLog = Entry.stateManager.activityLog_), t
    }, Entry.DRAG_MODE_NONE = 0, Entry.DRAG_MODE_MOUSEDOWN = 1, Entry.DRAG_MODE_DRAG = 2, Entry.cancelObjectEdit = function (t) {
        var e = Entry.playground.object;
        if (e) {
            var n = e.view_, r = t.target, o = 0 !== $(n).find(r).length, a = r.tagName.toUpperCase(), s = t.type;
            !e.isEditing || "INPUT" === a && o || "touchstart" === s || e.editObjectValues(!1)
        }
    }, Entry.generateFunctionSchema = function (t) {
        if (t = "func_" + t, !Entry.block[t]) {
            var e = function () {
            }, n = Entry.block.function_general;
            e.prototype = n, (e = new e).changeEvent = new Entry.Event, e.template = Lang.template.function_general, Entry.block[t] = e
        }
    }, Entry.getMainWS = function () {
        var t;
        return Entry.mainWorkspace ? t = Entry.mainWorkspace : Entry.playground && Entry.playground.mainWorkspace && (t = Entry.playground.mainWorkspace), t
    }, Entry.getDom = function (t) {
        return t ? (t = JSON.parse((0, i.default)(t))).length > 1 ? this[t.shift()].getDom(t) : void 0 : this.view_
    }, Entry.resizeElement = function (t) {
        var e = Entry.getMainWS();
        if (e) {
            if (t || (t = this.interfaceState), "workspace" == Entry.type) {
                var n = this.interfaceState;
                !t.canvasWidth && n.canvasWidth && (t.canvasWidth = n.canvasWidth), !t.menuWidth && this.interfaceState.menuWidth && (t.menuWidth = n.menuWidth), Entry.engine.speedPanelOn && Entry.engine.toggleSpeedPanel();
                var r = t.canvasWidth;
                r ? r < 325 ? r = 325 : r > 720 && (r = 720) : r = 400, t.canvasWidth = r;
                var o = 9 * r / 16;
                Entry.engine.view_.style.width = r + "px", Entry.engine.view_.style.height = o + "px", Entry.engine.view_.style.top = "40px", Entry.stage.canvas.canvas.style.width = r + "px", r >= 400 ? Entry.engine.view_.removeClass("collapsed") : Entry.engine.view_.addClass("collapsed"), Entry.playground.view_.style.left = r + .5 + "px", Entry.propertyPanel.resize(r);
                var a = Entry.engine.view_.getElementsByClassName("entryAddButtonWorkspace_w")[0];
                if (a) {
                    var s = a.style;
                    Entry.objectAddable && (s.top = o + 25 + "px", s.width = .7 * r + "px")
                }
                var i = Entry.engine.view_.getElementsByClassName("entryPauseButtonWorkspace_w")[0];
                if (i) {
                    var l = i.style;
                    Entry.objectAddable && (l.top = o + 25 + "px", l.width = .7 * r + "px")
                }
                var c = Entry.engine.view_.getElementsByClassName("entryRunButtonWorkspace_w")[0];
                if (c) {
                    var u = c.style;
                    Entry.objectAddable ? (u.top = o + 25 + "px", u.left = .7 * r + "px", u.width = .3 * r + "px") : (u.left = "2px", u.top = o + 25 + "px", u.width = r - 4 + "px")
                }
                var p = Entry.engine.view_.getElementsByClassName("entryStopButtonWorkspace_w")[0];
                if (p) {
                    var _ = p.style;
                    Entry.objectAddable ? (_.top = o + 25 + "px", _.left = .7 * r + "px", _.width = .3 * r + "px") : (_.left = "2px", _.top = o + 25 + "px", _.width = r + "px")
                }
                var d = t.menuWidth;
                d ? d < 244 ? d = 244 : d > 400 && (d = 400) : d = 264, t.menuWidth = d;
                var y = e.blockMenu, g = y.hasCategory() ? -64 : 0;
                $(".blockMenuContainer").css({width: d + g + "px"}), $(".blockMenuContainer>svg").css({width: d + g + "px"}), y.setWidth(), $(".entryWorkspaceBoard").css({left: d + "px"}), Entry.playground.resizeHandle_.style.left = d + "px", Entry.playground.variableViewWrapper_.style.width = d + "px", this.interfaceState = t
            }
            Entry.windowResized.notify()
        }
    }, Entry.overridePrototype = function () {
        Number.prototype.mod = function (t) {
            return (this % t + t) % t
        }, String.prototype.repeat || (String.prototype.repeat = function (t) {
            if (null == this) throw new TypeError("can't convert " + this + " to object");
            var e = "" + this;
            if ((t = +t) != t && (t = 0), t < 0) throw new RangeError("repeat count must be non-negative");
            if (t == 1 / 0) throw new RangeError("repeat count must be less than infinity");
            if (t = Math.floor(t), 0 == e.length || 0 == t) return "";
            if (e.length * t >= 1 << 28) throw new RangeError("repeat count must not overflow maximum string size");
            for (var n = ""; 1 == (1 & t) && (n += e), 0 != (t >>>= 1);) e += e;
            return n
        })
    }, Entry.Utils.isNumber = function (t) {
        return "number" == typeof t || !("string" != typeof t || !/^-?\d+\.?\d*$/.test(t))
    }, Entry.Utils.generateId = function () {
        return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4)
    }, Entry.Utils.intersectArray = function (t, e) {
        for (var n = [], r = 0; r < t.length; r++) for (var o = 0; o < e.length; o++) if (t[r] == e[o]) {
            n.push(t[r]);
            break
        }
        return n
    }, Entry.Utils.isPointInMatrix = function (t, e, n) {
        n = void 0 === n ? 0 : n;
        var r = t.offsetX ? t.x + t.offsetX : t.x, o = t.offsetY ? t.y + t.offsety : t.y;
        return r - n <= e.x && r + t.width + n >= e.x && o - n <= e.y && o + t.height + n >= e.y
    }, Entry.Utils.colorDarken = function (t, e) {
        var n, r, o;

        function a(t) {
            return 2 != t.length && (t = "0" + t), t
        }

        return 7 === t.length ? (n = parseInt(t.substr(1, 2), 16), r = parseInt(t.substr(3, 2), 16), o = parseInt(t.substr(5, 2), 16)) : (n = parseInt(t.substr(1, 2), 16), r = parseInt(t.substr(2, 2), 16), o = parseInt(t.substr(3, 2), 16)), e = void 0 === e ? .7 : e, "#" + (n = a(Math.floor(n * e).toString(16))) + (r = a(Math.floor(r * e).toString(16))) + a(Math.floor(o * e).toString(16))
    }, Entry.Utils.colorLighten = function (t, e) {
        e = 0 === e ? 0 : e || 20;
        var n, r = Entry.Utils.hexToHsl(t);
        return r.l += e / 100, r.l = (n = r.l, Math.min(1, Math.max(0, n))), Entry.Utils.hslToHex(r)
    }, Entry.Utils._EmphasizeColorMap = {
        "#3BBD70": "#5BC982",
        "#498DEB": "#62A5F4",
        "#A751E3": "#C08FF7",
        "#EC4466": "#F46487",
        "#FF9E20": "#FFB05A",
        "#A4D01D": "#C4DD31",
        "#00979D": "#09BAB5",
        "#FFD974": "#FCDA90",
        "#E457DC": "#F279F2",
        "#CC7337": "#DD884E",
        "#AEB8FF": "#C0CBFF",
        "#FFCA36": "#F2C670"
    }, Entry.Utils.getEmphasizeColor = function (t) {
        var e = t.toUpperCase();
        return Entry.Utils._EmphasizeColorMap[e] || t
    }, Entry.Utils.bound01 = function (t, e) {
        (function (t) {
            return "string" == typeof t && -1 != t.indexOf(".") && 1 === parseFloat(t)
        })(t) && (t = "100%");
        var n = function (t) {
            return "string" == typeof t && -1 != t.indexOf("%")
        }(t);
        return t = Math.min(e, Math.max(0, parseFloat(t))), n && (t = parseInt(t * e, 10) / 100), Math.abs(t - e) < 1e-6 ? 1 : t % e / parseFloat(e)
    }, Entry.Utils.hexToHsl = function (t) {
        var e, n, r;
        7 === t.length ? (e = parseInt(t.substr(1, 2), 16), n = parseInt(t.substr(3, 2), 16), r = parseInt(t.substr(5, 2), 16)) : (e = parseInt(t.substr(1, 2), 16), n = parseInt(t.substr(2, 2), 16), r = parseInt(t.substr(3, 2), 16)), e = Entry.Utils.bound01(e, 255), n = Entry.Utils.bound01(n, 255), r = Entry.Utils.bound01(r, 255);
        var o, a, s = Math.max(e, n, r), i = Math.min(e, n, r), l = (s + i) / 2;
        if (s == i) o = a = 0; else {
            var c = s - i;
            switch (a = l > .5 ? c / (2 - s - i) : c / (s + i), s) {
                case e:
                    o = (n - r) / c + (n < r ? 6 : 0);
                    break;
                case n:
                    o = (r - e) / c + 2;
                    break;
                case r:
                    o = (e - n) / c + 4
            }
            o /= 6
        }
        var u = {h: o, s: a, l: l};
        return {h: 360 * u.h, s: u.s, l: u.l}
    }, Entry.Utils.hslToHex = function (t) {
        var e, n, r, o = Entry.Utils.bound01(t.h, 360), a = Entry.Utils.bound01(t.s, 1),
            s = Entry.Utils.bound01(t.l, 1);

        function i(t, e, n) {
            return n < 0 && (n += 1), n > 1 && (n -= 1), n < 1 / 6 ? t + 6 * (e - t) * n : n < .5 ? e : n < 2 / 3 ? t + (e - t) * (2 / 3 - n) * 6 : t
        }

        function l(t) {
            return 1 == t.length ? "0" + t : "" + t
        }

        if (0 === a) e = n = r = s; else {
            var c = s < .5 ? s * (1 + a) : s + a - s * a, u = 2 * s - c;
            e = i(u, c, o + 1 / 3), n = i(u, c, o), r = i(u, c, o - 1 / 3)
        }
        var p = {r: 255 * e, g: 255 * n, b: 255 * r};
        return "#" + [l(Math.round(p.r).toString(16)), l(Math.round(p.g).toString(16)), l(Math.round(p.b).toString(16))].join("")
    }, Entry.Utils.setSVGDom = function (t) {
        Entry.Utils.SVGDom = t
    }, Entry.Utils.bindIOSDeviceWatch = function () {
        if (Entry.Utils.mobileAgentParser().apple.device) {
            console.log("APPLE! MOBILE DEVICE");
            var t = window.innerHeight || document.documentElement.clientHeight, e = 0;
            Entry.Utils.SVGDom && (e = Entry.Utils.SVGDom.height()), setInterval(function () {
                var n = window.innerHeight || document.documentElement.clientHeight, r = !1;
                if (Entry.Utils.SVGDom) {
                    var o = Entry.Utils.SVGDom.height();
                    r = e != o, e = o
                }
                (t != n || r) && Entry.windowResized.notify(), t = n
            }, 1e3), $(window).on("orientationchange", function (t) {
                Entry.windowResized.notify()
            })
        }
    }, Entry.Utils.bindGlobalEvent = function (t) {
        var e = $(document);
        void 0 === t && (t = ["resize", "mousedown", "mousemove", "keydown", "keyup", "dispose"]), t.indexOf("resize") > -1 && (Entry.windowReszied && ($(window).off("resize"), Entry.windowReszied.clear()), Entry.windowResized = new Entry.Event(window), $(window).on("resize", function (t) {
            Entry.windowResized.notify(t)
        }), Entry.Utils.bindIOSDeviceWatch()), t.indexOf("mousedown") > -1 && (Entry.documentMousedown && (e.off("mousedown"), Entry.documentMousedown.clear()), Entry.documentMousedown = new Entry.Event(window), e.on("mousedown", function (t) {
            Entry.documentMousedown.notify(t)
        })), t.indexOf("mousemove") > -1 && (Entry.documentMousemove && (e.off("touchmove mousemove"), Entry.documentMousemove.clear()), Entry.mouseCoordinate = {}, Entry.documentMousemove = new Entry.Event(window), e.on("touchmove mousemove", function (t) {
            t.originalEvent && t.originalEvent.touches && (t = t.originalEvent.touches[0]), Entry.documentMousemove.notify(t), Entry.mouseCoordinate.x = t.clientX, Entry.mouseCoordinate.y = t.clientY
        })), t.indexOf("keydown") > -1 && (Entry.keyPressed && (e.off("keydown"), Entry.keyPressed.clear()), Entry.pressedKeys = [], Entry.keyPressed = new Entry.Event(window), e.on("keydown", function (t) {
            var e = t.keyCode;
            Entry.pressedKeys.indexOf(e) < 0 && Entry.pressedKeys.push(e), Entry.keyPressed.notify(t)
        })), t.indexOf("keyup") > -1 && (Entry.keyUpped && (e.off("keyup"), Entry.keyUpped.clear()), Entry.keyUpped = new Entry.Event(window), e.on("keyup", function (t) {
            var e = t.keyCode, n = Entry.pressedKeys.indexOf(e);
            n > -1 && Entry.pressedKeys.splice(n, 1), Entry.keyUpped.notify(t)
        })), t.indexOf("dispose") > -1 && (Entry.disposeEvent && Entry.disposeEvent.clear(), Entry.disposeEvent = new Entry.Event(window), Entry.documentMousedown && Entry.documentMousedown.attach(this, function (t) {
            Entry.disposeEvent.notify(t)
        }))
    }, Entry.Utils.makeActivityReporter = function () {
        return Entry.activityReporter = new Entry.ActivityReporter, Entry.commander && Entry.commander.addReporter(Entry.activityReporter), Entry.activityReporter
    }, Entry.sampleColours = [], Entry.assert = function (t, e) {
        if (!t) throw Error(e || "Assert failed")
    }, Entry.parseTexttoXML = function (t) {
        var e;
        return window.ActiveXObject ? ((e = new ActiveXObject("Microsoft.XMLDOM")).async = "false", e.loadXML(t)) : e = (new DOMParser).parseFromString(t, "text/xml"), e
    }, Entry.createElement = function (t, e) {
        if (t instanceof HTMLElement) n = t; else var n = document.createElement(t);
        return e && (n.id = e), n.hasClass = function (t) {
            return this.className.match(new RegExp("(\\s|^)" + t + "(\\s|$)"))
        }, n.addClass = function (t) {
            for (var e = this.className, n = 0; n < arguments.length; n++) t = arguments[n], this.hasClass(t) || (e += " " + t);
            this.className = e
        }, n.removeClass = function (t) {
            for (var e = this.className, n = 0; n < arguments.length; n++) if (t = arguments[n], this.hasClass(t)) {
                var r = new RegExp("(\\s|^)" + t + "(\\s|$)");
                e = e.replace(r, " ")
            }
            this.className = e
        }, n.bindOnClick = function (t) {
            $(this).on("click tab", function (e) {
                n.disabled || (e.stopImmediatePropagation(), t.call(this, e))
            })
        }, n.unBindOnClick = function (t) {
            $(this).off("click tab")
        }, n
    }, Entry.makeAutolink = function (t) {
        if (t) {
            var e = new RegExp("(http|https|ftp|telnet|news|irc)://([-/.a-zA-Z0-9_~#%$?&=:200-377()][^)\\]}]+)", "gi"),
                n = new RegExp("([xA1-xFEa-z0-9_-]+@[xA1-xFEa-z0-9-]+.[a-z0-9-]+)", "gi");
            return t.replace(e, "<a href='$1://$2' target='_blank'>$1://$2</a>").replace(n, "<a href='mailto:$1'>$1</a>")
        }
        return ""
    }, Entry.generateHash = function () {
        return ("0000" + (Math.random() * Math.pow(36, 4) << 0).toString(36)).substr(-4)
    }, Entry.addEventListener = function (t, e) {
        return this.events_ || (this.events_ = {}), this.events_[t] || (this.events_[t] = []), e instanceof Function && this.events_[t].push(e), !0
    }, Entry.dispatchEvent = function (t, e) {
        if (this.events_) {
            var n = this.events_[t];
            if (n && 0 !== n.length) {
                var r = Array.prototype.slice.call(arguments);
                r.shift(), n.forEach(function (t) {
                    t.apply(window, r)
                })
            }
        } else this.events_ = {}
    }, Entry.removeEventListener = function (t, e) {
        if (this.events_[t]) for (var n = 0, r = this.events_[t].length; n < r; n++) if (this.events_[t][n] === e) {
            this.events_[t].splice(n, 1);
            break
        }
    }, Entry.removeAllEventListener = function (t) {
        this.events_ && this.events_[t] && delete this.events_[t]
    }, Entry.addTwoNumber = function (t, e) {
        if (!Entry.Utils.isNumber(t) || !Entry.Utils.isNumber(e)) return t + e;
        e += "";
        var n = (t += "").indexOf("."), r = e.indexOf("."), o = 0, a = 0;
        return n > 0 && (o = t.length - n - 1), r > 0 && (a = e.length - r - 1), o > 0 || a > 0 ? o >= a ? (parseFloat(t) + parseFloat(e)).toFixed(o) : (parseFloat(t) + parseFloat(e)).toFixed(a) : parseInt(t) + parseInt(e)
    }, Entry.hex2rgb = function (t) {
        var e = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(t);
        return e ? {r: parseInt(e[1], 16), g: parseInt(e[2], 16), b: parseInt(e[3], 16)} : null
    }, Entry.rgb2hex = function (t, e, n) {
        return "#" + ((1 << 24) + (t << 16) + (e << 8) + n).toString(16).slice(1)
    }, Entry.generateRgb = function () {
        return {
            r: Math.floor(256 * Math.random()),
            g: Math.floor(256 * Math.random()),
            b: Math.floor(256 * Math.random())
        }
    }, Entry.adjustValueWithMaxMin = function (t, e, n) {
        return t > n ? n : t < e ? e : t
    }, Entry.isExist = function (t, e, n) {
        for (var r = 0; r < n.length; r++) if (n[r][e] == t) return n[r];
        return !1
    }, Entry.getColourCodes = function () {
        return ["transparent", "#660000", "#663300", "#996633", "#003300", "#003333", "#003399", "#000066", "#330066", "#660066", "#FFFFFF", "#990000", "#993300", "#CC9900", "#006600", "#336666", "#0033FF", "#000099", "#660099", "#990066", "#000000", "#CC0000", "#CC3300", "#FFCC00", "#009900", "#006666", "#0066FF", "#0000CC", "#663399", "#CC0099", "#333333", "#FF0000", "#FF3300", "#FFFF00", "#00CC00", "#009999", "#0099FF", "#0000FF", "#9900CC", "#FF0099", "#666666", "#CC3333", "#FF6600", "#FFFF33", "#00FF00", "#00CCCC", "#00CCFF", "#3366FF", "#9933FF", "#FF00FF", "#999999", "#FF6666", "#FF6633", "#FFFF66", "#66FF66", "#66CCCC", "#00FFFF", "#3399FF", "#9966FF", "#FF66FF", "#BBBBBB", "#FF9999", "#FF9966", "#FFFF99", "#99FF99", "#66FFCC", "#99FFFF", "#66CCff", "#9999FF", "#FF99FF", "#CCCCCC", "#FFCCCC", "#FFCC99", "#FFFFCC", "#CCFFCC", "#99FFCC", "#CCFFFF", "#99CCFF", "#CCCCFF", "#FFCCFF"]
    }, Entry.removeElement = function (t) {
        t && t.parentNode && t.parentNode.removeChild(t)
    }, Entry.getElementsByClassName = function (t) {
        for (var e = [], n = document.getElementsByTagName("*"), r = 0; r < n.length; r++) (" " + n[r].className + " ").indexOf(" " + t + " ") > -1 && e.push(n[r]);
        return e
    }, Entry.parseNumber = function (t) {
        if ("string" == typeof t) {
            if (Entry.Utils.isNumber(t) && "0" === t[0] || "0" === t[0] && "x" === t[1].toLowerCase()) return t;
            if (Entry.Utils.isNumber(t)) return Number(t)
        } else if ("number" == typeof t && Entry.Utils.isNumber(t)) return t;
        return !1
    }, Entry.countStringLength = function (t) {
        var e, n = 0;
        for (e = 0; e < t.length; e++) t.charCodeAt(e) > 255 ? n += 2 : n++;
        return n
    }, Entry.cutStringByLength = function (t, e) {
        var n, r = 0;
        for (n = 0; r < e && n < t.length; n++) t.charCodeAt(n) > 255 ? r += 2 : r++;
        return t.substr(0, n)
    }, Entry.isChild = function (t, e) {
        if (!e) for (; e.parentNode;) if ((e = e.parentNode) == t) return !0;
        return !1
    }, Entry.launchFullScreen = function (t) {
        t.requestFullscreen ? t.requestFullscreen() : t.mozRequestFulScreen ? t.mozRequestFulScreen() : t.webkitRequestFullscreen ? t.webkitRequestFullscreen() : t.msRequestFullScreen && t.msRequestFullScreen()
    }, Entry.exitFullScreen = function () {
        document.exitFullScreen ? document.exitFullScreen() : document.mozCancelFullScreen ? document.mozCancelFullScreen() : document.webkitExitFullscreen && document.webkitExitFullscreen()
    }, Entry.isPhone = function () {
        return !1
    }, Entry.getKeyCodeMap = function () {
        return {
            65: "a",
            66: "b",
            67: "c",
            68: "d",
            69: "e",
            70: "f",
            71: "g",
            72: "h",
            73: "i",
            74: "j",
            75: "k",
            76: "l",
            77: "m",
            78: "n",
            79: "o",
            80: "p",
            81: "q",
            82: "r",
            83: "s",
            84: "t",
            85: "u",
            86: "v",
            87: "w",
            88: "x",
            89: "y",
            90: "z",
            32: Lang.Blocks.START_press_some_key_space,
            37: Lang.Blocks.START_press_some_key_left,
            38: Lang.Blocks.START_press_some_key_up,
            39: Lang.Blocks.START_press_some_key_right,
            40: Lang.Blocks.START_press_some_key_down,
            48: "0",
            49: "1",
            50: "2",
            51: "3",
            52: "4",
            53: "5",
            54: "6",
            55: "7",
            56: "8",
            57: "9",
            13: Lang.Blocks.START_press_some_key_enter,
            27: "esc",
            17: "ctrl",
            18: "alt",
            9: "tab",
            16: "shift",
            8: "backspace"
        }
    }, Entry.checkCollisionRect = function (t, e) {
        return !(t.y + t.height < e.y || t.y > e.y + e.height || t.x + t.width < e.x || t.x > e.x + e.width)
    }, Entry.bindAnimationCallback = function (t, e) {
        t.addEventListener("webkitAnimationEnd", e, !1), t.addEventListener("animationend", e, !1), t.addEventListener("oanimationend", e, !1)
    }, Entry.cloneSimpleObject = function (t) {
        var e = {};
        for (var n in t) e[n] = t[n];
        return e
    }, Entry.nodeListToArray = function (t) {
        for (var e = new Array(t.length), n = -1, r = t.length; ++n !== r; e[n] = t[n]) ;
        return e
    }, Entry.computeInputWidth = (o = {}, function (t) {
        t = t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        var e = o[t];
        if (e) return e;
        (r = r || document.getElementById("entryInputForComputeWidth")) || ((r = document.createElement("span")).setAttribute("id", "entryInputForComputeWidth"), r.className = "elem-element", document.body.appendChild(r)), r.innerHTML = t;
        var n = Number(r.offsetWidth + 10) + "px";
        return window.fontLoaded && (o[t] = n), n
    }), Entry.isArrowOrBackspace = function (t) {
        return !!~[37, 38, 39, 40, 8].indexOf(t)
    }, Entry.hexStringToBin = function (t) {
        for (var e = [], n = 0; n < t.length - 1; n += 2) e.push(parseInt(t.substr(n, 2), 16));
        return String.fromCharCode.apply(String, e)
    }, Entry.findObjsByKey = function (t, e, n) {
        for (var r = [], o = 0; o < t.length; o++) t[o][e] == n && r.push(t[o]);
        return r
    }, Entry.factorials = [], Entry.factorial = function (t) {
        return 0 === t || 1 == t ? 1 : Entry.factorials[t] > 0 ? Entry.factorials[t] : Entry.factorials[t] = Entry.factorial(t - 1) * t
    }, Entry.getListRealIndex = function (t, e) {
        if (!Entry.Utils.isNumber(t)) switch (t) {
            case"FIRST":
                t = 1;
                break;
            case"LAST":
                t = e.array_.length;
                break;
            case"RANDOM":
                t = Math.floor(Math.random() * e.array_.length) + 1
        }
        return t
    }, Entry.toRadian = function (t) {
        return t * Math.PI / 180
    }, Entry.toDegrees = function (t) {
        return 180 * t / Math.PI
    }, Entry.getPicturesJSON = function (t, e) {
        for (var n = [], r = 0, o = t.length; r < o; r++) {
            var a = t[r], s = {};
            s._id = a._id, s.id = e ? Entry.generateHash() : a.id, s.dimension = a.dimension, s.filename = a.filename, s.fileurl = a.fileurl, s.name = a.name, s.scale = a.scale, n.push(s)
        }
        return n
    }, Entry.getSoundsJSON = function (t, e) {
        for (var n = [], r = 0, o = t.length; r < o; r++) {
            var a = t[r], s = {};
            s._id = a._id, s.duration = a.duration, s.ext = a.ext, s.id = e ? Entry.generateHash() : a.id, s.filename = a.filename, s.fileurl = a.fileurl, s.name = a.name, n.push(s)
        }
        return n
    }, Entry.cutDecimal = function (t) {
        return Math.round(100 * t) / 100
    }, Entry.getBrowserType = function () {
        if (Entry.userAgent) return Entry.userAgent;
        var t, e = navigator.userAgent,
            n = e.match(/(opera|chrome|safari|firefox|msie|trident(?=\/))\/?\s*(\d+)/i) || [];
        if (/trident/i.test(n[1])) return "IE " + ((t = /\brv[ :]+(\d+)/g.exec(e) || [])[1] || "");
        if ("Chrome" === n[1] && null != (t = e.match(/\b(OPR|Edge)\/(\d+)/))) return t.slice(1).join(" ").replace("OPR", "Opera");
        n = n[2] ? [n[1], n[2]] : [navigator.appName, navigator.appVersion, "-?"], null != (t = e.match(/version\/(\d+)/i)) && n.splice(1, 1, t[1]);
        var r = n.join(" ");
        return Entry.userAgent = r, r
    }, Entry.setBasicBrush = function (t) {
        var e = new createjs.Graphics;
        if (t.brush) {
            var n = t.brush;
            e.thickness = n.thickness, e.rgb = n.rgb, e.opacity = n.opacity, e.setStrokeStyle(e.thickness), e.beginStroke("rgba(" + e.rgb.r + "," + e.rgb.g + "," + e.rgb.b + "," + (1 - e.opacity / 100) + ")")
        } else e.thickness = 1, e.rgb = Entry.hex2rgb("#ff0000"), e.opacity = 0, e.setStrokeStyle(1), e.beginStroke("rgba(255,0,0,1)");
        e.entity = t;
        var r = new createjs.Shape(e);
        r.entity = t;
        var o = Entry.stage.selectedObjectContainer;
        o.addChildAt(r, o.getChildIndex(t.object)), t.brush && (t.brush = null), t.brush = e, t.shapes.push(r)
    }, Entry.setCloneBrush = function (t, e) {
        var n = new createjs.Graphics;
        n.thickness = e.thickness, n.rgb = e.rgb, n.opacity = e.opacity, n.setStrokeStyle(n.thickness), n.beginStroke("rgba(" + n.rgb.r + "," + n.rgb.g + "," + n.rgb.b + "," + (1 - n.opacity / 100) + ")");
        var r = new createjs.Shape(n);
        r.entity = t;
        var o = Entry.stage.selectedObjectContainer;
        o.addChildAt(r, o.getChildIndex(t.object)), n.stop = e.stop, t.brush && (t.brush = null), t.brush = n, t.shapes.push(r)
    }, Entry.isFloat = function (t) {
        return /\d+\.{1}\d+$/.test(t)
    }, Entry.isInteger = function (t) {
        return isFinite(t) && Math.floor(t) == t
    }, Entry.getStringIndex = function (t) {
        if (!t) return "";
        for (var e = {string: t, index: 1}, n = 0, r = [], o = t.length - 1; o > 0; --o) {
            var a = t.charAt(o);
            if (!Entry.Utils.isNumber(a)) break;
            r.unshift(a), n = o
        }
        return n > 0 && (e.string = t.substring(0, n), e.index = parseInt(r.join("")) + 1), e
    }, Entry.getOrderedName = function (t, e, n) {
        if (!t) return "untitled";
        if (!e || 0 === e.length) return t;
        n || (n = "name");
        var r = Entry.getOrderedNameNumber(t, e, n), o = Entry.getStringIndex(t);
        return r > 0 ? o.string + r : t
    }, Entry.getOrderedNameNumber = function (t, e, n) {
        for (var r = Entry.getStringIndex(t), o = 0, a = 0, s = e.length; a < s; a++) {
            var i = Entry.getStringIndex(e[a][n]);
            r.string === i.string && i.index > o && (o = i.index)
        }
        return o
    }, Entry.changeXmlHashId = function (t) {
        if (/function_field/.test(t.getAttribute("type"))) for (var e = t.getElementsByTagName("mutation"), n = 0, r = e.length; n < r; n++) e[n].setAttribute("hashid", Entry.generateHash());
        return t
    }, Entry.getMaxFloatPoint = function (t) {
        for (var e = 0, n = 0, r = t.length; n < r; n++) {
            var o = String(t[n]), a = o.indexOf(".");
            if (-1 !== a) {
                var s = o.length - (a + 1);
                s > e && (e = s)
            }
        }
        return Math.min(e, 20)
    }, Entry.convertToRoundedDecimals = function (t, e) {
        return Entry.Utils.isNumber(t) && this.isFloat(t) ? Number(Math.round(t + "e" + e) + "e-" + e) : t
    }, Entry.attachEventListener = function (t, e, n) {
        setTimeout(function () {
            t.addEventListener(e, n)
        }, 0)
    }, Entry.deAttachEventListener = function (t, e, n) {
        t.removeEventListener(e, n)
    }, Entry.isEmpty = function (t) {
        if (!t) return !0;
        for (var e in t) if (t.hasOwnProperty(e)) return !1;
        return !0
    }, Entry.Utils.disableContextmenu = function (t) {
        t && $(t).on("contextmenu", this.contextPreventFunction)
    },Entry.Utils.contextPreventFunction = function (t) {
        return t.stopPropagation(), t.preventDefault(), !1
    },Entry.Utils.enableContextmenu = function (t) {
        t && $(t).off("contextmenu", this.contextPreventFunction)
    },Entry.Utils.isRightButton = function (t) {
        return 2 == t.button || t.ctrlKey
    },Entry.Utils.isTouchEvent = function (t) {
        return "mousedown" !== t.type.toLowerCase()
    },Entry.Utils.inherit = function (t, e) {
        function n() {
        }

        return n.prototype = t.prototype, e.prototype = new n, e
    },Entry.bindAnimationCallbackOnce = function (t, e) {
        t.one("webkitAnimationEnd animationendo animationend", e)
    },Entry.Utils.isInInput = function (t) {
        return "textarea" == t.target.type || "text" == t.target.type
    },Entry.Utils.isFunction = function (t) {
        return "function" == typeof t
    },Entry.Utils.addFilters = function (t, e) {
        var n = t.elem("defs"), r = n.elem("filter", {id: "entryTrashcanFilter_" + e});
        r.elem("feGaussianBlur", {in: "SourceAlpha", stdDeviation: 2, result: "blur"}), r.elem("feOffset", {
            in: "blur",
            dx: 1,
            dy: 1,
            result: "offsetBlur"
        });
        var o = r.elem("feMerge");
        o.elem("feMergeNode", {in: "offsetBlur"}), o.elem("feMergeNode", {in: "SourceGraphic"}, o);
        var a = n.elem("filter", {id: "entryBlockShadowFilter_" + e});
        a.elem("feOffset", {
            result: "offOut",
            in: "SourceGraphic",
            dx: 0,
            dy: 1
        }), a.elem("feColorMatrix", {
            result: "matrixOut",
            in: "offOut",
            type: "matrix",
            values: "0.7 0 0 0 0 0 0.7 0 0 0 0 0 0.7 0 0 0 0 0 1 0"
        }), a.elem("feBlend", {in: "SourceGraphic", in1: "offOut", mode: "normal"});
        var s = n.elem("filter", {id: "entryBlockHighlightFilter_" + e});
        s.elem("feOffset", {
            result: "offOut",
            in: "SourceGraphic",
            dx: 0,
            dy: 0
        }), s.elem("feColorMatrix", {
            result: "matrixOut",
            in: "offOut",
            type: "matrix",
            values: "1.3 0 0 0 0 0 1.3 0 0 0 0 0 1.3 0 0 0 0 0 1 0"
        }), n.elem("filter", {id: "entryBlockDarkenFilter_" + e}).elem("feColorMatrix", {
            type: "matrix",
            values: ".45 0 0 0 0 0 .45 0 0 0 0 0 .45 0 0 0 0 0 1 0"
        })
    },Entry.Utils.addBlockPattern = function (t, e) {
        for (var n = t.elem("pattern", {
            id: "blockHoverPattern_" + e,
            class: "blockHoverPattern",
            patternUnits: "userSpaceOnUse",
            patternTransform: "translate(12, 0)",
            x: 0,
            y: 0,
            width: 125,
            height: 33,
            style: "display: none"
        }), r = Entry.mediaFilePath + "block_pattern_(order).png", o = 1; o < 5; o++) n.elem("image", {
            class: "pattern" + o,
            href: r.replace("(order)", o),
            x: 0,
            y: 0,
            width: 125,
            height: 33
        });
        return {pattern: n}
    },Entry.Utils.COLLISION = {
        NONE: 0,
        UP: 1,
        RIGHT: 2,
        LEFT: 3,
        DOWN: 4
    },Entry.Utils.createMouseEvent = function (t, e) {
        var n = document.createEvent("MouseEvent");
        return n.initMouseEvent(t, !0, !0, window, 0, 0, 0, e.clientX, e.clientY, !1, !1, !1, !1, 0, null), n
    },Entry.Utils.xmlToJsonData = function (t) {
        var e = [], n = (t = $.parseXML(t)).childNodes[0].childNodes;
        for (var r in n) {
            var o = n[r];
            if (o.tagName) {
                var a = {category: o.getAttribute("id"), blocks: []}, s = o.childNodes;
                for (var r in s) {
                    var i = s[r];
                    if (i.tagName) {
                        var l = i.getAttribute("type");
                        l && a.blocks.push(l)
                    }
                }
                e.push(a)
            }
        }
        return e
    },Entry.Utils.stopProjectWithToast = function (t, e, n) {
        var r = t.block;
        e = e || "런타임 에러 발생";
        var o = Entry.engine;
        if (o && o.toggleStop(), "workspace" === Entry.type && (t.block && "funcBlock" in t.block ? r = t.block.funcBlock : t.funcExecutor && (r = t.funcExecutor.scope.block, Entry.Func.edit(t.type)), r)) {
            r.getCode().object && r.getCode().object.id && Entry.container.selectObject(r.getCode().object.id, !0);
            var a = r.view;
            a && a.getBoard().activateBlock(r)
        }
        if (Entry.toast && Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.check_runtime_error, !0), n) throw n.message = e + ": " + n.message, n;
        throw new Error(e)
    },Entry.Utils.AsyncError = function (t) {
        this.name = "AsyncError", this.message = t || "비동기 호출 대기"
    },Entry.Utils.AsyncError.prototype = new Error,Entry.Utils.AsyncError.prototype.constructor = Entry.Utils.AsyncError,Entry.Utils.isChrome = function () {
        return /chrom(e|ium)/.test(navigator.userAgent.toLowerCase())
    },Entry.Utils.waitForWebfonts = function (t, e) {
        var n = 0;
        if (!t || !t.length) return e && e(), !0;
        for (var r = 0, o = t.length; r < o; ++r) !function (r) {
            var o = document.createElement("span");
            o.innerHTML = "giItT1WQy@!-/#", o.style.position = "absolute", o.style.left = "-10000px", o.style.top = "-10000px", o.style.fontSize = "300px", o.style.fontFamily = "sans-serif", o.style.fontVariant = "normal", o.style.fontStyle = "normal", o.style.fontWeight = "normal", o.style.letterSpacing = "0", document.body.appendChild(o);
            var a, s = o.offsetWidth;

            function i() {
                if (o && o.offsetWidth != s && (++n, o.parentNode.removeChild(o), o = null), n >= t.length && (a && clearInterval(a), n == t.length)) return e(), !0
            }

            o.style.fontFamily = r, i() || (a = setInterval(i, 50))
        }(t[r])
    },window.requestAnimFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || function (t) {
        window.setTimeout(t, 1e3 / 60)
    },Entry.isMobile = function () {
        if (Entry.device) return "tablet" === Entry.device;
        var t = window.platform;
        return t && t.type && ("tablet" === t.type || "mobile" === t.type) ? (Entry.device = "tablet", !0) : (Entry.device = "desktop", !1)
    },Entry.Utils.mobileAgentParser = function (t) {
        var e = /iPhone/i, n = /iPod/i, r = /iPad/i, o = /(?=.*\bAndroid\b)(?=.*\bMobile\b)/i, a = /Android/i,
            s = /(?=.*\bAndroid\b)(?=.*\bSD4930UR\b)/i,
            i = /(?=.*\bAndroid\b)(?=.*\b(?:KFOT|KFTT|KFJWI|KFJWA|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|KFARWI|KFASWI|KFSAWI|KFSAWA)\b)/i,
            l = /Windows Phone/i, c = /(?=.*\bWindows\b)(?=.*\bARM\b)/i, u = /BlackBerry/i, p = /BB10/i,
            _ = /Opera Mini/i, d = /(CriOS|Chrome)(?=.*\bMobile\b)/i, y = /(?=.*\bFirefox\b)(?=.*\bMobile\b)/i,
            g = new RegExp("(?:Nexus 7|BNTV250|Kindle Fire|Silk|GT-P1000)", "i"), h = function (t, e) {
                return t.test(e)
            }, m = t || navigator.userAgent, b = m.split("[FBAN");
        return void 0 !== b[1] && (m = b[0]), void 0 !== (b = m.split("Twitter"))[1] && (m = b[0]), this.apple = {
            phone: h(e, m),
            ipod: h(n, m),
            tablet: !h(e, m) && h(r, m),
            device: h(e, m) || h(n, m) || h(r, m)
        }, this.amazon = {
            phone: h(s, m),
            tablet: !h(s, m) && h(i, m),
            device: h(s, m) || h(i, m)
        }, this.android = {
            phone: h(s, m) || h(o, m),
            tablet: !h(s, m) && !h(o, m) && (h(i, m) || h(a, m)),
            device: h(s, m) || h(i, m) || h(o, m) || h(a, m)
        }, this.windows = {
            phone: h(l, m),
            tablet: h(c, m),
            device: h(l, m) || h(c, m)
        }, this.other = {
            blackberry: h(u, m),
            blackberry10: h(p, m),
            opera: h(_, m),
            firefox: h(y, m),
            chrome: h(d, m),
            device: h(u, m) || h(p, m) || h(_, m) || h(y, m) || h(d, m)
        }, this.seven_inch = h(g, m), this.any = this.apple.device || this.android.device || this.windows.device || this.other.device || this.seven_inch, this.phone = this.apple.phone || this.android.phone || this.windows.phone, this.tablet = this.apple.tablet || this.android.tablet || this.windows.tablet, this
    },Entry.Utils.convertMouseEvent = function (t) {
        return t.originalEvent && t.originalEvent.touches ? t.originalEvent.touches[0] : t.changedTouches ? t.changedTouches[0] : t
    },Entry.Utils.convertIntToHex = function (t) {
        return t.toString(16).toUpperCase()
    },Entry.Utils.hasSpecialCharacter = function (t) {
        return /!|@|#|\$|%|\^|&|\*|\(|\)|\+|=|-|\[|\]|\\|\'|;|,|\.|\/|{|}|\||\"|:|<|>|\?/g.test(t)
    },Entry.Utils.debounce = function (t, e, n) {
        var r;
        return function () {
            var o = this, a = arguments, s = n && !r;
            return clearTimeout(r), r = setTimeout(function () {
                r = null, n || t.apply(o, a)
            }, e), s && t.apply(o, a), r
        }
    },Entry.Utils.isNewVersion = function () {
        var t = arguments.length > 0 && void 0 !== arguments[0] ? arguments[0] : "",
            e = arguments.length > 1 && void 0 !== arguments[1] ? arguments[1] : "";
        try {
            if ("" === t) return !1;
            t = t.replace("v", ""), e = e.replace("v", "");
            for (var n = t.split("."), r = e.split("."), o = n.length < r.length ? n.length : r.length, a = !1, s = !0, i = 0; i < o; i++) Number(n[i]) < Number(r[i]) ? (a = !0, s = !1) : Number(n[i]) > Number(r[i]) && (s = !1);
            return s && n.length < r.length && (a = !0), a
        } catch (t) {
            return !1
        }
    },Entry.Utils.getBlockCategory = (s = {}, function (t) {
        if (t) {
            if (s[t]) return s[t];
            a || (a = EntryStatic.getAllBlocks());
            for (var e = 0; e < a.length; e++) {
                var n = a[e], r = n.category;
                if (n.blocks.indexOf(t) > -1) return s[t] = r, r
            }
        }
    }),Entry.Utils.getUniqObjectsBlocks = function (t) {
        var e = [];
        return (t = t || Entry.container.objects_).forEach(function (t) {
            var n = t.script;
            n instanceof Entry.Code || (n = new Entry.Code(n)), n.getBlockList().forEach(function (t) {
                e.indexOf(t.type) < 0 && e.push(t.type)
            })
        }), e
    },Entry.Utils.getObjectsBlocks = function (t) {
        var e = [];
        return (t = t || Entry.container.objects_).forEach(function (t) {
            var n = t.script;
            n instanceof Entry.Code || (n = new Entry.Code(n)), n.getBlockList(!0).forEach(function (t) {
                e.push(t.type)
            })
        }), e
    },Entry.Utils.makeCategoryDataByBlocks = function (t) {
        if (t) {
            for (var e = this, n = EntryStatic.getAllBlocks(), r = {}, o = 0; o < n.length; o++) {
                var a = n[o];
                a.blocks = [], r[a.category] = o
            }
            t.forEach(function (t) {
                var o = e.getBlockCategory(t), a = r[o];
                void 0 !== a && n[a].blocks.push(t)
            });
            var s = EntryStatic.getAllBlocks();
            for (o = 0; o < s.length; o++) {
                var i = s[o], l = i.category, c = i.blocks;
                if ("func" !== l) {
                    var u = n[o].blocks, p = [];
                    c.forEach(function (t) {
                        u.indexOf(t) > -1 && p.push(t)
                    }), n[o].blocks = p
                } else s.splice(o, 1)
            }
            return n
        }
    },Entry.Utils.blur = function () {
        var t = document.activeElement;
        t && t.blur && t.blur()
    },Entry.Utils.getWindow = function (t) {
        if (t) for (var e = 0; e < window.frames.length; e++) {
            var n = window.frames[e];
            if (n.Entry && n.Entry.hashId === t) return n
        }
    },Entry.Utils.restrictAction = function (t, e, n) {
        var r = this;
        t = (t = t || []).map(function (t) {
            return t[0]
        });
        var o = function (o) {
            var a = (o = o || window.event).target || o.srcElement;
            if (!r.isRightButton(o)) for (var s = 0; s < t.length; s++) {
                var i = t[s];
                if (i === a || $.contains(i, a)) return void(n ? a.focus && a.focus() : e(o))
            }
            o.preventDefault || (o.returnValue = !1, o.cancelBubble = !0), o.preventDefault(), o.stopPropagation()
        };
        this._restrictHandler = o;
        var a = Entry.getDom();
        Entry.Utils.disableContextmenu(a), a.addEventListener ? (a.addEventListener("click", o, !0), a.addEventListener("mousedown", o, !0), a.addEventListener("mouseup", o, !0), a.addEventListener("touchstart", o, !0)) : (a.attachEvent("onclick", o), a.attachEvent("onmousedown", o), a.attachEvent("onmouseup", o), a.attachEvent("ontouchstart", o))
    },Entry.Utils.allowAction = function () {
        var t = Entry.getDom();
        Entry.Utils.enableContextmenu(t), this._restrictHandler && (t.addEventListener ? (t.removeEventListener("click", this._restrictHandler, !0), t.removeEventListener("mousedown", this._restrictHandler, !0), t.removeEventListener("mouseup", this._restrictHandler, !0), t.removeEventListener("touchstart", this._restrictHandler, !0)) : (t.detachEvent("onclick", this._restrictHandler), t.detachEvent("onmousedown", this._restrictHandler), t.detachEvent("onmouseup", this._restrictHandler), t.detachEvent("ontouchstart", this._restrictHandler)), delete this._restrictHandler)
    },Entry.Utils.glideBlock = function (t, e, n, r) {
        var o = t.getBoundingClientRect(),
            a = Entry.Dom($('<svg id="globalSvg" width="10" height="10"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: $(document.body)});
        (t = $(t.cloneNode(!0))).attr({transform: "translate(8,0)"}), a.append(t), a.css({
            top: o.top,
            left: o.left
        }), a.velocity({top: n, left: e - 8}, {
            duration: 1200, complete: function () {
                setTimeout(function () {
                    a.remove(), r()
                }, 500)
            }, easing: "ease-in-out"
        })
    },Entry.Utils.getScrollPos = function () {
        var t = Entry.getBrowserType().indexOf("IE") > -1 ? document.documentElement : document.body;
        return {left: t.scrollLeft, top: t.scrollTop}
    },Entry.Utils.copy = function (t) {
        return JSON.parse((0, i.default)(t))
    },Entry.Utils.getAllObjectsBlockList = function () {
        return Entry.container.objects_.reduce(function (t, e) {
            return t.concat(e.script.getBlockList())
        }, [])
    },Entry.Utils.toFixed = function (t, e) {
        e = e || 1;
        var n = Math.pow(10, e);
        if (t = Math.round(t * n) / n, Entry.isFloat(t)) return String(t);
        t += ".";
        for (var r = 0; r < e; r++) t += "0";
        return t
    },Entry.Utils.addSoundInstances = function (t) {
        Entry.soundInstances.push(t), t.on("complete", function () {
            var e = Entry.soundInstances.indexOf(t);
            e > -1 && Entry.soundInstances.splice(e, 1)
        })
    },Entry.Utils.pauseSoundInstances = function () {
        Entry.soundInstances.map(function (t) {
            t.paused = !0
        })
    },Entry.Utils.recoverSoundInstances = function () {
        Entry.soundInstances.map(function (t) {
            t.paused = !1
        })
    },Entry.Utils.bindBlockViewHoverEvent = function (t, e) {
        Entry.isMobile() || e.on("mouseenter mouseleave", "path", function (e) {
            if ("blockPath" === this.getAttribute("class")) {
                var n = t.code.findById(this.getAttribute("blockId"));
                if (n) {
                    var r = n.view;
                    r._mouseEnable && r.setHoverBlockView({that: r, blockView: "mouseenter" === e.type ? r : void 0})
                }
            }
        })
    },Entry.Utils.bindBlockExecuteFocusEvents = function () {
        var t = this;
        Entry.addEventListener("blockExecute", function (e) {
            e && t.focusBlockView(e.getBoard(), e)
        }), Entry.addEventListener("blockExecuteEnd", this.focusBlockView)
    },Entry.Utils.focusBlockView = function () {
        var t;

        function e(t) {
            return $(t).find("*:not(g)")
        }

        return function (n, r) {
            var o = n || Entry.getMainWS().board || {}, a = o.svgGroup, s = o.suffix;
            if (a && s && (!t || t !== r)) {
                if (r) {
                    e(a).attr("filter", "url(#entryBlockDarkenFilter_" + s + ")");
                    var i = r._path, l = r.contentSvgGroup;
                    $(i).removeAttr("filter"), $(l).find("*:not(g)").removeAttr("filter")
                } else e(a).removeAttr("filter");
                t = r
            }
        }
    }()
}, function (t, e, n) {
    var r = n(4), o = n(1), a = n(26), s = n(35), i = n(7).f;
    t.exports = function (t) {
        var e = o.Symbol || (o.Symbol = a ? {} : r.Symbol || {});
        "_" == t.charAt(0) || t in e || i(e, t, {value: s.f(t)})
    }
}, function (t, e, n) {
    e.f = n(2)
}, function (t, e) {
    t.exports = function (t, e) {
        return t === e || t != t && e != e
    }
}, function (t, e, n) {
    var r = n(300);
    t.exports = function (t, e, n) {
        "__proto__" == e && r ? r(t, e, {configurable: !0, enumerable: !0, value: n, writable: !0}) : t[e] = n
    }
}, function (t, e, n) {
    t.exports = {default: n(306), __esModule: !0}
}, function (t, e, n) {
    var r = n(6), o = n(1), a = n(15);
    t.exports = function (t, e) {
        var n = (o.Object || {})[t] || Object[t], s = {};
        s[t] = e(n), r(r.S + r.F * a(function () {
            n(1)
        }), "Object", s)
    }
}, function (t, e) {
    e.f = Object.getOwnPropertySymbols
}, function (t, e) {
    t.exports = "constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")
}, function (t, e, n) {
    var r = n(4), o = r["__core-js_shared__"] || (r["__core-js_shared__"] = {});
    t.exports = function (t) {
        return o[t] || (o[t] = {})
    }
}, function (t, e, n) {
    var r = n(42)("keys"), o = n(28);
    t.exports = function (t) {
        return r[t] || (r[t] = o(t))
    }
}, function (t, e) {
    var n = Math.ceil, r = Math.floor;
    t.exports = function (t) {
        return isNaN(t = +t) ? 0 : (t > 0 ? r : n)(t)
    }
}, function (t, e, n) {
    var r = n(44), o = Math.min;
    t.exports = function (t) {
        return t > 0 ? o(r(t), 9007199254740991) : 0
    }
}, function (t, e) {
    t.exports = function (t) {
        if (void 0 == t) throw TypeError("Can't call method on  " + t);
        return t
    }
}, function (t, e, n) {
    var r = n(16);
    t.exports = function (t, e) {
        if (!r(t)) return t;
        var n, o;
        if (e && "function" == typeof(n = t.toString) && !r(o = n.call(t))) return o;
        if ("function" == typeof(n = t.valueOf) && !r(o = n.call(t))) return o;
        if (!e && "function" == typeof(n = t.toString) && !r(o = n.call(t))) return o;
        throw TypeError("Can't convert object to primitive value")
    }
}, function (t, e, n) {
    var r = n(16), o = n(4).document, a = r(o) && r(o.createElement);
    t.exports = function (t) {
        return a ? o.createElement(t) : {}
    }
}, function (t, e) {
    var n;
    n = function () {
        return this
    }();
    try {
        n = n || Function("return this")() || (0, eval)("this")
    } catch (t) {
        "object" == typeof window && (n = window)
    }
    t.exports = n
}, function (t, e, n) {
    "use strict";
    (function (e) {
        var r = {};
        t.exports = r, e.Entry = r, n(383), n(378), n(377), n(376), n(375), n(374), n(373), n(372), n(371), n(244), n(225), n(224), n(223), n(222), n(221), n(220), n(219), n(218), n(217), n(216), n(215), n(214), n(213), n(212), n(211), n(210), n(209), n(208), n(207), n(206), n(205), n(204), n(203), n(199), n(198), n(61), n(197), n(196), n(195), n(194), n(193), n(192), n(191), n(190), n(189), n(188), n(187), n(186), n(185), n(182), n(181), n(180), n(179), n(178), n(170), n(169), n(152), n(151), n(150), n(149), n(148), n(147), n(146), n(145), n(144), n(143), n(142), n(141), n(140), n(139), n(138), n(137), n(136), n(131), n(130), n(129), n(128), n(127), n(126), n(125), n(124), n(85), n(123), n(122), n(121), n(33), n(120), n(119), n(118), n(117), n(116), n(115), n(114), n(113), n(112), n(111), n(110), n(109), n(108),n(107),n(106),n(105),n(104),n(103),n(51),n(102),n(101),n(100),n(99),n(98),n(97),n(96),n(95),n(94),n(93),n(92),n(91),n(90),n(89),n(88),n(87),n(52),n(86),window.Entry = r
    }).call(this, n(49))
}, function (t, e, n) {
    "use strict";
    var r, o, a, s;
    Entry.Field = function () {
    }, (s = Entry.Field.prototype).TEXT_LIMIT_LENGTH = 20, s.destroy = function () {
        var t = this.svgGroup;
        t && (t._isBinded = !1, $(t).off(".fieldBindEvent")), this.destroyOption(!0)
    }, s.command = function (t) {
        this._blockView.isInBlockMenu || void 0 === this._startValue || !t && this._startValue === this.getValue() || (Entry.do("setFieldValue", this.pointer(), this._nextValue || this.getValue(), this._code), delete this._nextValue, delete this._code), delete this._startValue
    }, s.destroyOption = function (t, e) {
        this.documentDownEvent && (this.documentDownEvent.destroy(), delete this.documentDownEvent), this.disposeEvent && (this.disposeEvent.destroy(), delete this.documentDownEvent), this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup), delete this._neighborFields, this.isEditing() && Entry.Utils.blur(), this._isEditing = !1, !0 !== t && this.command(e)
    }, s._attachDisposeEvent = function (t) {
        var e = this;
        t = t || function (t) {
            e.destroyOption(t)
        }, e.disposeEvent = Entry.disposeEvent.attach(e, t)
    }, s.align = function (t, e, n) {
        n = void 0 === n || n;
        var r = this.svgGroup;
        this._position && (this._position.x && (t = this._position.x), this._position.y && (e = this._position.y));
        var o = "translate(" + t + "," + e + ")";
        n ? r.animate({transform: o}, 300, mina.easeinout) : r.attr({transform: o}), this.box.set({x: t, y: e})
    }, s.getAbsolutePosFromBoard = function () {
        var t = this._block.view, e = t.getContentPos(), n = t.getAbsoluteCoordinate();
        return {x: n.x + this.box.x + e.x, y: n.y + this.box.y + e.y}
    }, s.getAbsolutePosFromDocument = function () {
        var t = this._block.view, e = t.getContentPos(), n = t.getAbsoluteCoordinate(),
            r = t.getBoard().svgDom.offset();
        return {x: n.x + this.box.x + e.x + r.left, y: n.y + this.box.y + e.y + r.top - $(window).scrollTop()}
    }, s.getRelativePos = function () {
        var t = this._block.view.getContentPos(), e = this.box;
        return {x: e.x + t.x, y: e.y + t.y}
    }, s.truncate = function () {
        var t = String(this._convert(this.getValue())), e = this.TEXT_LIMIT_LENGTH, n = t.substring(0, e);
        return t.length > e && (n += "..."), n
    }, s.appendSvgOptionGroup = function () {
        return this._block.view.getBoard().svgGroup.elem("g")
    }, s.getValue = function () {
        var t = this._block.params[this._index];
        if (this._contents && this._contents.reference && this._contents.reference.length) {
            var e = this._contents.reference.concat();
            return "%" === e[0][0] && (t = this._block.params[parseInt(e.shift().substr(1)) - 1]), t ? t.getDataByPointer(e) : t
        }
        return t
    }, s.setValue = function (t, e) {
        if (this.value != t) {
            if (this.value = t, this._contents && this._contents.reference && this._contents.reference.length) {
                var n = this._contents.reference.concat(), r = n.pop(), o = this._block.params[this._index];
                n.length && "%" === n[0][0] && (o = this._block.params[parseInt(n.shift().substr(1)) - 1]), n.length && (o = o.getDataByPointer(n)), o.params[r] = t
            } else this._block.params[this._index] = t;
            e && this._blockView.reDraw()
        }
    }, s._isEditable = function () {
        if (Entry.ContextMenu.visible || this._blockView.getBoard().readOnly) return !1;
        if (this._block.view.dragMode == Entry.DRAG_MODE_DRAG) return !1;
        var t = this._block.view, e = t.getBoard();
        if (!0 === e.disableMouseEvent) return !1;
        var n = e.workspace.selectedBlockView;
        if (!n || e != n.getBoard()) return !1;
        var r = t.getSvgRoot();
        return r == n.svgGroup || $(r).has($(t.svgGroup))
    }, s._selectBlockView = function () {
        var t = this._block.view;
        t.getBoard().setSelectedBlock(t)
    }, s._bindRenderOptions = function () {
        if (!this.svgGroup._isBinded) {
            var t = this;
            this.svgGroup._isBinded = !0, $(this.svgGroup).on("mouseup.fieldBindEvent touchend.fieldBindEvent", function (e) {
                t._isEditable() && (t._code = t.getCode(), t.destroyOption(), t._startValue = t.getValue(), t.renderOptions(), t._isEditing = !0)
            })
        }
    }, s.pointer = function (t) {
        return (t = t || []).unshift(this._index), t.unshift(Entry.PARAM), this._block.pointer(t)
    }, s.getFontSize = function (t) {
        return t || this._blockView.getSkeleton().fontSize || 12
    }, s.getContentHeight = function () {
        return Entry.isMobile() ? 22 : 16
    }, s._getRenderMode = function () {
        var t = this._blockView.renderMode;
        return void 0 !== t ? t : Entry.BlockView.RENDER_MODE_BLOCK
    }, s._convert = function (t, e) {
        e = void 0 !== e ? e : this.getValue();
        var n = /&value/gm;
        return n.test(e) ? e.replace(n, "") : this._contents.converter ? this._contents.converter(t, e) : t
    }, s._updateOptions = function () {
        var t = Entry.block[this._blockView.type];
        if (t) {
            var e = t.syntax;
            for (var n in e) {
                var r = e[n];
                if (r && 0 !== r.length) {
                    var o = r[0].textParams;
                    o && (o[this._index].options = this._contents.options)
                }
            }
        }
    }, s._shouldReturnValue = function (t) {
        var e = this._block.getCode().object;
        return "?" === t || !e || e.constructor !== Entry.EntryObject
    }, s.isEditing = function (t) {
        return !!this._isEditing
    }, s.getDom = function (t) {
        return t.length && "option" === t.shift() ? this.optionGroup : this.svgGroup
    }, s.optionDomCreated = function () {
        this._blockView.getBoard().workspace.widgetUpdateEvent.notify()
    }, s.fixNextValue = function (t) {
        this._nextValue = t
    }, s.getFieldRawType = function () {
        return this instanceof Entry.FieldTextInput ? "textInput" : this instanceof Entry.FieldDropdown ? "dropdown" : this instanceof Entry.FieldDropdownDynamic ? "dropdownDynamic" : this instanceof Entry.FieldKeyboard ? "keyboard" : void 0
    }, s.getTextValueByValue = function (t) {
        switch (this.getFieldRawType()) {
            case"keyboard":
                return Entry.getKeyCodeMap()[t];
            case"dropdown":
            case"dropdownDynamic":
                for (var e = this._contents.options, n = 0; n < e.length; n++) {
                    var r = e[n];
                    if (r[1] === t) return r[0]
                }
                break;
            case"textInput":
                return t
        }
    }, s.getBoard = function () {
        var t = this._blockView;
        return t && t.getBoard()
    }, s.getCode = function () {
        var t = this.getBoard();
        return t && t.code
    }, s.getTextValue = function () {
        return this.getValue()
    }, s.getIndex = function () {
        return this._index
    }, s.getTextBBox = (o = {}, a = Entry.Utils.debounce(function () {
        r && $(r).empty()
    }, 500), function () {
        window.fontLoaded && !r && (r = Entry.Dom($('<svg id="invisibleBoard" class="entryBoard" width="1px" height="1px"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: $("body")}));
        var t = this.getTextValue();
        if (!t) return {width: 0, height: 0};
        var e = this._font_size || "", n = t + "&&" + e, s = o[n];
        if (s) return s;
        var i = this.textElement;
        return r && (i = i.cloneNode(!0), r.append(i)), s = i.getBoundingClientRect(), a(), s = {
            width: Math.round(100 * s.width) / 100,
            height: Math.round(100 * s.height) / 100
        }, e && window.fontLoaded && s.width && s.height && (o[n] = s), s
    })
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Console = function () {
        Entry.propertyPanel && (this.createView(), Entry.propertyPanel.addMode("console", this), Entry.console = this, this._isEditing = !1, this._inputData = null)
    }, (r = Entry.Console.prototype).createView = function () {
        this.view = new Entry.Dom("div", {id: "entryConsole"}), this.codeMirror = CodeMirror(this.view[0], {
            lineNumbers: !1,
            lineWrapping: !0,
            value: "",
            mode: {},
            theme: "default",
            styleActiveLine: !1,
            lint: !1
        }), this._doc = this.codeMirror.getDoc(), this.codeMirror.on("beforeChange", function (t, e) {
            this._isEditing ? "+delete" === e.origin && 0 === e.to.ch && e.cancel() : e.cancel()
        }.bind(this)), this.codeMirror.on("keyup", function (t, e) {
            this._isEditing && 13 === e.keyCode && this.endInput()
        }.bind(this)), this.codeMirror.on("cursorActivity", function (t, e) {
            t.execCommand("goDocEnd")
        }), Entry.addEventListener("stop", this.clear.bind(this)), this.clear()
    }, r.getView = function () {
        return this.view
    }, r.clear = function () {
        this.setEditing(!0), this.codeMirror.setValue("Entry Console \n"), this.codeMirror.execCommand("goDocEnd"), this.setEditing(!1)
    }, r.print = function (t, e) {
        if (this.visible) {
            this.setEditing(!0), this.codeMirror.execCommand("goDocEnd");
            var n = this._doc.getCursor(), r = {line: n.line, ch: 0};
            this._doc.replaceRange(t + "\n", r), this._doc.addLineClass(n.line, "text", e), "speak" === e && this.setEditing(!1), this.codeMirror.execCommand("goDocEnd"), "ask" === e && (this._doc.addLineClass(n.line + 1, "text", "answer"), this.codeMirror.focus())
        }
    }, r.endInput = function () {
        var t = this._doc.getCursor(), e = this.codeMirror.lineInfo(t.line);
        if ("answer" === e.textClass) {
            this._inputData = e.text;
            var n = {line: t.line, ch: e.text.length};
            this._doc.replaceRange("\n", n)
        } else this._inputData = this._doc.getLine(t.line - 1);
        Entry.container.setInputValue(this._inputData), this.setEditing(!1)
    }, r.stopInput = function (t) {
        this.setEditing(!1)
    }, r.setEditing = function (t) {
        this._isEditing !== t && (this._isEditing = t)
    }
}, function (t, e, n) {
    var r = n(30);
    t.exports = function (t, e) {
        var n = r.f(t);
        return (0, n.resolve)(e), n.promise
    }
}, function (t, e) {
    t.exports = function (t) {
        try {
            return {e: !1, v: t()}
        } catch (t) {
            return {e: !0, v: t}
        }
    }
}, function (t, e, n) {
    var r, o, a, s = n(23), i = n(158), l = n(66), c = n(48), u = n(4), p = u.process, _ = u.setImmediate,
        d = u.clearImmediate, y = u.MessageChannel, g = u.Dispatch, h = 0, m = {}, b = function () {
            var t = +this;
            if (m.hasOwnProperty(t)) {
                var e = m[t];
                delete m[t], e()
            }
        }, f = function (t) {
            b.call(t.data)
        };
    _ && d || (_ = function (t) {
        for (var e = [], n = 1; arguments.length > n;) e.push(arguments[n++]);
        return m[++h] = function () {
            i("function" == typeof t ? t : Function(t), e)
        }, r(h), h
    }, d = function (t) {
        delete m[t]
    }, "process" == n(21)(p) ? r = function (t) {
        p.nextTick(s(b, t, 1))
    } : g && g.now ? r = function (t) {
        g.now(s(b, t, 1))
    } : y ? (a = (o = new y).port2, o.port1.onmessage = f, r = s(a.postMessage, a, 1)) : u.addEventListener && "function" == typeof postMessage && !u.importScripts ? (r = function (t) {
        u.postMessage(t + "", "*")
    }, u.addEventListener("message", f, !1)) : r = "onreadystatechange" in c("script") ? function (t) {
        l.appendChild(c("script")).onreadystatechange = function () {
            l.removeChild(this), b.call(t)
        }
    } : function (t) {
        setTimeout(s(b, t, 1), 0)
    }), t.exports = {set: _, clear: d}
}, function (t, e, n) {
    var r = n(10), o = n(29), a = n(2)("species");
    t.exports = function (t, e) {
        var n, s = r(t).constructor;
        return void 0 === s || void 0 == (n = r(s)[a]) ? e : o(n)
    }
}, function (t, e, n) {
    var r = n(2)("iterator"), o = !1;
    try {
        var a = [7][r]();
        a.return = function () {
            o = !0
        }, Array.from(a, function () {
            throw 2
        })
    } catch (t) {
    }
    t.exports = function (t, e) {
        if (!e && !o) return !1;
        var n = !1;
        try {
            var a = [7], s = a[r]();
            s.next = function () {
                return {done: n = !0}
            }, a[r] = function () {
                return s
            }, t(a)
        } catch (t) {
        }
        return n
    }
}, function (t, e, n) {
    var r = n(14), o = n(2)("iterator"), a = Array.prototype;
    t.exports = function (t) {
        return void 0 !== t && (r.Array === t || a[o] === t)
    }
}, function (t, e, n) {
    var r = n(10);
    t.exports = function (t, e, n, o) {
        try {
            return o ? e(r(n)[0], n[1]) : e(n)
        } catch (e) {
            var a = t.return;
            throw void 0 !== a && r(a.call(t)), e
        }
    }
}, function (t, e, n) {
    t.exports = {default: n(184), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Extension = function () {
    }, (r = Entry.Extension.prototype).renderView = function () {
    }, r.toggleInformation = function () {
    }
}, function (t, e) {
}, function (t, e, n) {
    var r = n(82), o = n(41).concat("length", "prototype");
    e.f = Object.getOwnPropertyNames || function (t) {
        return r(t, o)
    }
}, function (t, e, n) {
    var r = n(28)("meta"), o = n(16), a = n(11), s = n(7).f, i = 0, l = Object.isExtensible || function () {
        return !0
    }, c = !n(15)(function () {
        return l(Object.preventExtensions({}))
    }), u = function (t) {
        s(t, r, {value: {i: "O" + ++i, w: {}}})
    }, p = t.exports = {
        KEY: r, NEED: !1, fastKey: function (t, e) {
            if (!o(t)) return "symbol" == typeof t ? t : ("string" == typeof t ? "S" : "P") + t;
            if (!a(t, r)) {
                if (!l(t)) return "F";
                if (!e) return "E";
                u(t)
            }
            return t[r].i
        }, getWeak: function (t, e) {
            if (!a(t, r)) {
                if (!l(t)) return !0;
                if (!e) return !1;
                u(t)
            }
            return t[r].w
        }, onFreeze: function (t) {
            return c && p.NEED && l(t) && !a(t, r) && u(t), t
        }
    }
}, function (t, e, n) {
    var r = n(11), o = n(19), a = n(43)("IE_PROTO"), s = Object.prototype;
    t.exports = Object.getPrototypeOf || function (t) {
        return t = o(t), r(t, a) ? t[a] : "function" == typeof t.constructor && t instanceof t.constructor ? t.constructor.prototype : t instanceof Object ? s : null
    }
}, function (t, e, n) {
    var r = n(4).document;
    t.exports = r && r.documentElement
}, function (t, e, n) {
    var r = n(10), o = n(239), a = n(41), s = n(43)("IE_PROTO"), i = function () {
    }, l = function () {
        var t, e = n(48)("iframe"), r = a.length;
        for (e.style.display = "none", n(66).appendChild(e), e.src = "javascript:", (t = e.contentWindow.document).open(), t.write("<script>document.F=Object<\/script>"), t.close(), l = t.F; r--;) delete l.prototype[a[r]];
        return l()
    };
    t.exports = Object.create || function (t, e) {
        var n;
        return null !== t ? (i.prototype = r(t), n = new i, i.prototype = null, n[s] = t) : n = l(), void 0 === e ? n : o(n, e)
    }
}, function (t, e, n) {
    t.exports = n(13)
}, function (t, e, n) {
    "use strict";
    var r = n(26), o = n(6), a = n(68), s = n(13), i = n(11), l = n(14), c = n(240), u = n(25), p = n(65),
        _ = n(2)("iterator"), d = !([].keys && "next" in [].keys()), y = function () {
            return this
        };
    t.exports = function (t, e, n, g, h, m, b) {
        c(n, e, g);
        var f, E, v, k = function (t) {
                if (!d && t in L) return L[t];
                switch (t) {
                    case"keys":
                    case"values":
                        return function () {
                            return new n(this, t)
                        }
                }
                return function () {
                    return new n(this, t)
                }
            }, T = e + " Iterator", w = "values" == h, B = !1, L = t.prototype, R = L[_] || L["@@iterator"] || h && L[h],
            S = R || k(h), C = h ? w ? k("entries") : S : void 0, D = "Array" == e && L.entries || R;
        if (D && (v = p(D.call(new t))) !== Object.prototype && v.next && (u(v, T, !0), r || i(v, _) || s(v, _, y)), w && R && "values" !== R.name && (B = !0, S = function () {
                return R.call(this)
            }), r && !b || !d && !B && L[_] || s(L, _, S), l[e] = S, l[T] = y, h) if (f = {
                values: w ? S : k("values"),
                keys: m ? S : k("keys"),
                entries: C
            }, b) for (E in f) E in L || a(L, E, f[E]); else o(o.P + o.F * (d || B), e, f);
        return f
    }
}, function (t, e) {
    t.exports = function (t) {
        var e = [];
        if (null != t) for (var n in Object(t)) e.push(n);
        return e
    }
}, function (t, e) {
    t.exports = function (t, e) {
        return "__proto__" == e ? void 0 : t[e]
    }
}, function (t, e) {
    t.exports = function (t) {
        return null != t && "object" == typeof t
    }
}, function (t, e) {
    var n = Object.prototype.toString;
    t.exports = function (t) {
        return n.call(t)
    }
}, function (t, e, n) {
    var r = n(73), o = n(18);
    t.exports = function (t) {
        if (!o(t)) return !1;
        var e = r(t);
        return "[object Function]" == e || "[object GeneratorFunction]" == e || "[object AsyncFunction]" == e || "[object Proxy]" == e
    }
}, function (t, e, n) {
    var r = n(273)(Object.getPrototypeOf, Object);
    t.exports = r
}, function (t, e, n) {
    var r = n(280), o = "object" == typeof self && self && self.Object === Object && self,
        a = r || o || Function("return this")();
    t.exports = a
}, function (t, e, n) {
    var r = n(37), o = n(36);
    t.exports = function (t, e, n) {
        (void 0 === n || o(t[e], n)) && (void 0 !== n || e in t) || r(t, e, n)
    }
}, function (t, e) {
    var n = Array.isArray;
    t.exports = n
}, function (t, e, n) {
    var r = n(37), o = n(36), a = Object.prototype.hasOwnProperty;
    t.exports = function (t, e, n) {
        var s = t[e];
        a.call(t, e) && o(s, n) && (void 0 !== n || e in t) || r(t, e, n)
    }
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r, o = (r = n(363)) && r.__esModule ? r : {default: r};
    e.default = o.default || function (t) {
        for (var e = 1; e < arguments.length; e++) {
            var n = arguments[e];
            for (var r in n) Object.prototype.hasOwnProperty.call(n, r) && (t[r] = n[r])
        }
        return t
    }
}, function (t, e, n) {
    var r = n(21);
    t.exports = Object("z").propertyIsEnumerable(0) ? Object : function (t) {
        return "String" == r(t) ? t.split("") : Object(t)
    }
}, function (t, e, n) {
    var r = n(11), o = n(8), a = n(365)(!1), s = n(43)("IE_PROTO");
    t.exports = function (t, e) {
        var n, i = o(t), l = 0, c = [];
        for (n in i) n != s && r(i, n) && c.push(n);
        for (; e.length > l;) r(i, n = e[l++]) && (~a(c, n) || c.push(n));
        return c
    }
}, function (t, e, n) {
    t.exports = !n(9) && !n(15)(function () {
        return 7 != Object.defineProperty(n(48)("div"), "a", {
            get: function () {
                return 7
            }
        }).a
    })
}, function (t, e, n) {
    "use strict";
    var r = a(n(369)), o = a(n(80));

    function a(t) {
        return t && t.__esModule ? t : {default: t}
    }

    n(359), n(358), n(357), n(356), n(355), n(354), n(351), n(350), n(349), n(348), n(347), n(346), n(345), n(344), n(343), n(342), n(341), n(340), n(339), n(338), n(337), n(336), n(335), n(334), n(333), n(332), n(331), n(330), n(329), n(328), n(327), n(326), n(325), n(324), n(323), n(322), n(321), n(320), n(319), n(318), n(317), n(316), n(315), n(314), n(313), n(312), n(311), n(310), n(309), n(308), Entry.HARDWARE_LIST = {
        1.1: Entry.Arduino,
        1.2: Entry.SensorBoard,
        1.3: Entry.CODEino,
        1.4: Entry.joystick,
        1.5: Entry.dplay,
        1.6: Entry.nemoino,
        1.7: Entry.Xbot,
        1.8: Entry.ardublock,
        1.9: Entry.ArduinoExt,
        "1.10": Entry.ArduinoNano,
        "1.A": Entry.Cobl,
        "1.B": Entry.Blacksmith,
        2.4: Entry.Hamster,
        2.5: Entry.Albert,
        2.9: Entry.Turtle,
        "2.FF": Entry.Roboid,
        3.1: Entry.Bitbrick,
        4.2: Entry.Arduino,
        5.1: Entry.Neobot,
        5.2: Entry.NeobotSensorTheme,
        6.1: Entry.mkboard,
        6.2: Entry.memaker,
        7.1: Entry.Robotis_carCont,
        7.2: Entry.Robotis_openCM70,
        8.1: Entry.Arduino,
        9.1: Entry.iboard,
        "A.1": Entry.SmartBoard,
        "B.1": Entry.Codestar,
        "C.1": Entry.DaduBlock,
        "C.2": Entry.DaduBlock_Car,
        "D.1": Entry.robotori,
        "F.1": Entry.byrobot_dronefighter_controller,
        "F.2": Entry.byrobot_dronefighter_drive,
        "F.3": Entry.byrobot_dronefighter_flight,
        "F.4": Entry.byrobot_petrone_v2_controller,
        "F.5": Entry.byrobot_petrone_v2_drive,
        "F.6": Entry.byrobot_petrone_v2_flight,
        10.1: Entry.Roborobo_Roduino,
        10.2: Entry.Roborobo_SchoolKit,
        12.1: Entry.EV3,
        13.1: Entry.rokoboard,
        14.1: Entry.Chocopi,
        15.1: Entry.coconut,
        16.1: Entry.MODI,
        18.1: Entry.Altino,
        19.1: Entry.trueRobot,
        "1A.1": Entry.ArduinoNano,
        "1B.1": Entry.EduMaker,
        "1C.1": Entry.hummingbird,
        "1D.1": Entry.JDKit,
        "1E.1": Entry.playcode,
        "1F.1": Entry.mechatro,
        20.1: Entry.Creamo,
        21.1: Entry.FunBoard,
        22.1: Entry.Microbit
    };
    var s = n(255), i = n(254), l = n(253), c = n(252), u = n(251), p = n(250), _ = n(249), d = n(248), y = n(247),
        g = n(246), h = n(245);
    t.exports = {
        getBlocks: function () {
            var t, e, n = [s, i, l, c, u, p, _, d, y, g, h], a = (0, r.default)(Entry.HARDWARE_LIST);
            return t = n.concat(a), e = {}, t.forEach(function (t) {
                "getBlocks" in t && (0, o.default)(e, t.getBlocks())
            }), e
        }
    }
}, function (t, e, n) {
    "use strict";
    n(50).STATIC = {
        OBJECT: 0,
        ENTITY: 1,
        SPRITE: 2,
        SOUND: 3,
        VARIABLE: 4,
        FUNCTION: 5,
        SCENE: 6,
        MESSAGE: 7,
        BLOCK_MODEL: 8,
        BLOCK_RENDER_MODEL: 9,
        BOX_MODEL: 10,
        THREAD_MODEL: 11,
        DRAG_INSTANCE: 12,
        BLOCK_STATIC: 0,
        BLOCK_MOVE: 1,
        BLOCK_FOLLOW: 2,
        RETURN: 0,
        CONTINUE: 1,
        BREAK: 2,
        PASS: 3,
        COMMAND_TYPES: {
            addThread: 101,
            destroyThread: 102,
            destroyBlock: 103,
            recoverBlock: 104,
            insertBlock: 105,
            separateBlock: 106,
            moveBlock: 107,
            cloneBlock: 108,
            uncloneBlock: 109,
            scrollBoard: 110,
            setFieldValue: 111,
            selectBlockMenu: 112,
            destroyBlockBelow: 113,
            destroyThreads: 114,
            addThreads: 115,
            recoverBlockBelow: 116,
            addThreadFromBlockMenu: 117,
            insertBlockFromBlockMenu: 118,
            moveBlockFromBlockMenu: 119,
            separateBlockForDestroy: 120,
            moveBlockForDestroy: 121,
            insertBlockFromBlockMenuFollowSeparate: 122,
            insertBlockFollowSeparate: 123,
            separateBlockByCommand: 124,
            selectObject: 201,
            objectEditButtonClick: 202,
            objectAddPicture: 203,
            objectRemovePicture: 204,
            objectAddSound: 205,
            objectRemoveSound: 206,
            objectNameEdit: 207,
            do: 301,
            undo: 302,
            redo: 303,
            editPicture: 401,
            uneditPicture: 402,
            processPicture: 403,
            unprocessPicture: 404,
            editText: 405,
            toggleRun: 501,
            toggleStop: 502,
            containerSelectObject: 601,
            playgroundChangeViewMode: 701,
            playgroundClickAddPicture: 702,
            playgroundClickAddSound: 703,
            playgroundClickAddPictureCancel: 704,
            playgroundClickAddSoundCancel: 705,
            variableContainerSelectFilter: 801,
            variableContainerClickVariableAddButton: 802,
            variableContainerAddVariable: 803,
            variableContainerRemoveVariable: 804,
            variableAddSetName: 805,
            sceneAdd: 91,
            sceneEdit: 92,
            sceneChange: 93,
            sceneRemove: 94,
            sceneSort: 95
        },
        RECORDABLE: {SUPPORT: 1, SKIP: 2, ABANDON: 3}
    }
}, function (module, exports, __webpack_require__) {
    "use strict";
    var _typeof2 = __webpack_require__(5), _typeof3 = _interopRequireDefault(_typeof2);

    function _interopRequireDefault(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.TextCodingUtil = {}, function (tu) {
        tu.canUsePythonVariables = function (t) {
            return t.every(function (t) {
                var e = "variable" === t.variableType ? "v" : "l";
                return !Entry.TextCodingUtil.checkName(t.name, e)
            })
        }, tu.canUsePythonFunctions = function (t) {
            var e = this;
            return t.every(function (t) {
                var n = t.content, r = new Entry.Code(n).getEventMap("funcDef")[0];
                if (!(r = r && r.params[0])) return !0;
                if ("function_field_label" !== r.type) return !1;
                var o, a = r.params;
                if (a[1]) {
                    if (e.hasFunctionFieldLabel(a[1])) return !1
                } else if (o = a[0], / /.test(o)) return !1;
                return !0
            })
        }, tu.initQueue = function () {
            var t = new Entry.Queue;
            this._funcParamQ = t;
            var e = new Entry.Queue;
            this._funcNameQ = e
        }, tu.clearQueue = function () {
            this._funcParamQ.clear(), this._funcNameQ.clear()
        }, tu.indent = function (t) {
            var e = "\t", n = t.split("\n");
            return n.pop(), "\t" + (e += n.join("\n\t")).trim()
        }, tu.isNumeric = function (t) {
            return !(!(t = String(Math.abs(t))).match(/^-?\d+$|^-\d+$/) && !t.match(/^-?\d+\.\d+$/))
        }, tu.isBinaryOperator = function (t) {
            return "==" == t || ">" == t || "<" == t || ">=" == t || "<=" == t || "+" == t || "-" == t || "*" == t || "/" == t
        }, tu.logicalExpressionConvert = function (t) {
            var e;
            switch (t) {
                case"&&":
                case"||":
                    e = null;
                    break;
                default:
                    e = t
            }
            return e
        }, tu.dropdownDynamicNameToIdConvertor = function (t, e, n) {
            var r = t, o = Entry.scene.selectedScene;
            if ("scenes" == e) {
                var a = Entry.scene.getScenes();
                for (var s in a) {
                    var i = a[s];
                    if (t == i.name) return i.id
                }
            } else if ("spritesWithMouse" == e || "spritesWithSelf" == e || "collision" == e || "clone" == e) {
                var l = Entry.container.getAllObjects();
                for (var c in l) {
                    var u = l[c];
                    if (u.scene.id == o.id && t == u.name) return u.id
                }
            } else if ("variables" == e) {
                var p = Entry.variableContainer.variables_;
                for (var _ in p) {
                    var d = p[_];
                    if (d.name_ == t) {
                        if (!n) return d.id_;
                        if (n.id == d.object_) return d.id_
                    }
                }
            } else if ("lists" == e) {
                var y = Entry.variableContainer.lists_;
                for (var _ in y) {
                    var g = y[_];
                    if (g.name_ == t) {
                        if (!n) return g.id_;
                        if (n.id == g.object_) return g.id_
                    }
                }
            } else if ("messages" == e) {
                var h = Entry.variableContainer.messages_;
                for (var _ in h) {
                    var m = h[_];
                    if (m.name == t) return m.id
                }
            } else if ("pictures" == e) {
                var b = (n = Entry.playground.object).pictures;
                for (var f in b) {
                    var E = b[f];
                    if (E.name == t) return E.id
                }
            } else if ("sounds" == e) {
                var v = (n = Entry.playground.object).sounds;
                for (var f in v) {
                    var k = v[f];
                    if (k.name == t) return k.id
                }
            }
            return r
        }, tu.dropdownDynamicIdToNameConvertor = function (t, e) {
            var n;
            switch (e) {
                case"variables":
                    var r = Entry.variableContainer.variables_;
                    for (var o in r) {
                        var a = r[o];
                        if (a.id_ == t) {
                            n = a.object_ ? "self." + a.name_ : a.name_;
                            break
                        }
                    }
                    break;
                case"lists":
                    var s = Entry.variableContainer.lists_;
                    for (var o in s) if ((l = s[o]).id_ == t) {
                        n = l.object_ ? "self." + l.name_ : l.name_;
                        break
                    }
                    break;
                case"messages":
                    var i = Entry.variableContainer.messages_;
                    for (var o in i) {
                        var l;
                        if ((l = i[o]).id == t) {
                            n = l.name;
                            break
                        }
                    }
                    break;
                case"pictures":
                    var c = Entry.container.getAllObjects();
                    for (var u in c) {
                        var p = c[u].pictures;
                        for (var _ in p) {
                            var d = p[_];
                            if (d.id == t) return d.name
                        }
                    }
                    break;
                case"sounds":
                    for (var u in c = Entry.container.getAllObjects()) {
                        var y = c[u].sounds;
                        for (var _ in y) {
                            var g = y[_];
                            if (g.id == t) return g.name
                        }
                    }
                    break;
                case"scenes":
                    var h = Entry.scene.getScenes();
                    for (var m in h) {
                        var b = h[m];
                        if (b.id == t) {
                            n = b.name;
                            break
                        }
                    }
                    break;
                case"clone":
                case"textBoxWithSelf":
                    n = "self" == t ? t : (c = Entry.container.objects_.filter(function (e) {
                        return e.id === t
                    }))[0] ? c[0].name : null
            }
            return n
        }, tu.getDynamicIdByNumber = function (t, e) {
            var n = t;
            if (!Entry.getMainWS() || !Entry.getMainWS().vimBoard) return n;
            var r = Entry.getMainWS().vimBoard._currentObject;
            if ("number" == typeof t) {
                if (n = "None", "pictures" == e.menuName) {
                    if (t > 0) {
                        var o = Entry.container.getAllObjects();
                        for (var a in o) if ((i = o[a]).id == r.id) {
                            var s = i.pictures[t - 1];
                            if (s) {
                                n = s.name;
                                break
                            }
                        }
                    }
                } else if ("sounds" == e.menuName && t > 0) for (var a in o = Entry.container.getAllObjects()) {
                    var i;
                    if ((i = o[a]).id == r.id) {
                        var l = i.sounds[t - 1];
                        if (l) {
                            n = l.name;
                            break
                        }
                    }
                }
            } else n = Entry.TextCodingUtil.dropdownDynamicNameToIdConvertor(t, e.menuName);
            return n
        }, tu.isLocalType = function (t, e) {
            if ("variables" == e) {
                var n = Entry.variableContainer.variables_;
                for (var r in n) {
                    var o = n[r];
                    if (o.id_ == t) return !!o.object_
                }
            } else if ("lists" == e) {
                var a = Entry.variableContainer.lists_;
                for (var r in a) {
                    var s = a[r];
                    if (s.id_ == t) return !!s.object_
                }
            }
            return !1
        }, tu.binaryOperatorValueConvertor = function (t) {
            var e;
            switch (t) {
                case'"EQUAL"':
                    e = "==";
                    break;
                case'"GREATER"':
                    e = ">";
                    break;
                case'"LESS"':
                    e = "<";
                    break;
                case'"GREATER_OR_EQUAL"':
                    e = ">=";
                    break;
                case'"LESS_OR_EQUAL"':
                    e = "<=";
                    break;
                case'"그리고"':
                    e = "&&";
                    break;
                case'"또는"':
                    e = "||";
                    break;
                case'"PLUS"':
                    e = "+";
                    break;
                case'"MINUS"':
                    e = "-";
                    break;
                case'"MULTI"':
                    e = "*";
                    break;
                case'"DIVIDE"':
                    e = "/";
                    break;
                default:
                    e = t
            }
            return e
        }, tu.variableListFilter = function (block, index, param) {
            if ("None" == param) return param;
            var result = param, type = block.data.type;
            return "change_variable" == type || "set_variable" == type || "get_variable" == type ? 1 == index && (result = eval(param)) : "length_of_list" == type || "is_included_in_list" == type ? 2 == index && (result = eval(param)) : "value_of_index_from_list" == type ? 2 == index ? result = eval(param) : 4 == index && this.isNumeric(param) && (result = param - 1) : "remove_value_from_list" == type ? 2 == index ? result = eval(param) : 1 == index && this.isNumeric(param) && (result = param - 1) : "insert_value_to_list" == type ? 2 == index ? result = eval(param) : 3 == index && this.isNumeric(param) && (result = param - 1) : "change_value_list_index" == type ? 1 == index ? result = eval(param) : 2 == index && this.isNumeric(param) && (result = param - 1) : "add_value_to_list" == type && 2 == index && (result = eval(param)), result
        }, tu.isGlobalVariableExisted = function (t) {
            var e = Entry.variableContainer.variables_;
            for (var n in e) {
                var r = e[n];
                if (null === r.object_ && r.name_ == t) return !0
            }
            return !1
        }, tu.updateGlobalVariable = function (t, e) {
            var n = Entry.variableContainer.variables_;
            for (var r in n) {
                var o = n[r];
                if (null === o.object_ && o.name_ == t) {
                    var a = o.toJSON();
                    a.name = t, a.value = e, o.syncModel_(a), Entry.variableContainer.updateList();
                    break
                }
            }
        }, tu.createGlobalVariable = function (t, e) {
            if (!this.isGlobalVariableExisted(t)) {
                var n = {name: t, value: e, variableType: "variable"};
                Entry.variableContainer.addVariable(n), Entry.variableContainer.updateList()
            }
        }, tu.isLocalVariableExisted = function (t, e) {
            var n = Entry.variableContainer.variables_;
            for (var r in n) {
                var o = n[r];
                if (o.object_ === e.id && o.name_ == t) return !0
            }
            return !1
        }, tu.updateLocalVariable = function (t, e, n) {
            var r = Entry.variableContainer.variables_;
            for (var o in r) {
                var a = r[o];
                if (a.object_ === n.id && a.name_ == t) {
                    var s = a.toJSON();
                    s.name = t, s.value = e, a.syncModel_(s), Entry.variableContainer.updateList();
                    break
                }
            }
        }, tu.createLocalVariable = function (t, e, n) {
            if (!this.isLocalVariableExisted(t, n)) {
                var r = {name: t, value: e, object: n.id, variableType: "variable"};
                Entry.variableContainer.addVariable(r), Entry.variableContainer.updateList()
            }
        }, tu.isLocalVariable = function (t) {
            var e = Entry.playground.object, n = Entry.variableContainer.variables_;
            for (var r in n) {
                var o = n[r];
                if (o.object_ == e.id && o.id_ == t) return !0
            }
            return !1
        }, tu.isGlobalListExisted = function (t) {
            var e = Entry.variableContainer.lists_;
            for (var n in e) {
                var r = e[n];
                if (null === r.object_ && r.name_ == t) return !0
            }
            return !1
        }, tu.updateGlobalList = function (t, e) {
            var n = Entry.variableContainer.lists_;
            for (var r in n) {
                var o = n[r];
                if (null === o.object_ && o.name_ == t) {
                    var a = {
                        x: o.x_,
                        y: o.y_,
                        id: o.id_,
                        visible: o.visible_,
                        name: t,
                        isCloud: o.isCloud_,
                        width: o.width_,
                        height: o.height_,
                        array: e
                    };
                    o.syncModel_(a), o.updateView(), Entry.variableContainer.updateList();
                    break
                }
            }
        }, tu.createGlobalList = function (t, e) {
            if (!this.isGlobalListExisted(t)) {
                var n = {name: t, array: e, variableType: "list"};
                Entry.variableContainer.addList(n), Entry.variableContainer.updateList()
            }
        }, tu.isLocalListExisted = function (t, e) {
            if (!e) return !1;
            var n = Entry.variableContainer.lists_;
            for (var r in n) {
                var o = n[r];
                if (o.object_ === e.id && o.name_ == t) return !0
            }
            return !1
        }, tu.updateLocalList = function (t, e, n) {
            var r = Entry.variableContainer.lists_;
            for (var o in r) {
                var a = r[o];
                if (a.object_ === n.id && a.name_ == t) {
                    var s = {
                        x: a.x_,
                        y: a.y_,
                        id: a.id_,
                        visible: a.visible_,
                        name: t,
                        isCloud: a.isCloud_,
                        width: a.width_,
                        height: a.height_,
                        array: e
                    };
                    a.syncModel_(s), a.updateView(), Entry.variableContainer.updateList();
                    break
                }
            }
        }, tu.createLocalList = function (t, e, n) {
            if (!this.isLocalListExisted(t, n)) {
                var r = {name: t, array: e, object: n.id, variableType: "list"};
                Entry.variableContainer.addList(r), Entry.variableContainer.updateList()
            }
        }, tu.isLocalList = function (t) {
            var e = Entry.playground.object, n = Entry.variableContainer.lists_;
            for (var r in n) {
                var o = n[r];
                if (o.object_ == e.id && o.id_ == t) return !0
            }
            return !1
        }, tu.createMessage = function (t) {
            var e = Entry.variableContainer.messages_;
            if (!Entry.isExist(t, "name", e)) {
                var n = {name: t};
                Entry.variableContainer.addMessage(n), Entry.variableContainer.updateList()
            }
        }, tu.isEventBlock = function (t) {
            var e = t.data.type;
            return "when_run_button_click" == e || "when_some_key_pressed" == e || "mouse_clicked" == e || "mouse_click_cancled" == e || "when_object_click" == e || "when_object_click_canceled" == e || "when_message_cast" == e || "when_scene_start" == e || "when_clone_start" == e
        }, tu.isEntryEventBlockWithParam = function (t) {
            var e = t.data.type;
            return "when_some_key_pressed" == e || "when_message_cast" == e
        }, tu.isEventBlockByType = function (t) {
            return "when_run_button_click" == t || "when_some_key_pressed" == t || "mouse_clicked" == t || "mouse_click_cancled" == t || "when_object_click" == t || "when_object_click_canceled" == t || "when_message_cast" == t || "when_scene_start" == t || "when_clone_start" == t
        }, tu.makeDefinition = function (t) {
            for (var e = t.data.type, n = /(%.)/im, r = Entry.block[e].syntax.py[0].split(n), o = "", a = 0; a < r.length; a++) {
                var s = r[a];
                n.test(s) ? o += "event" : o += s
            }
            return o
        }, tu.entryEventFilter = function (t) {
            var e = t.indexOf("("), n = t.indexOf(")"), r = t.substring(0, e), o = t.substring(e + 1, n);
            return (o = o.replace(/\"/g, "")) && "None" == (o = isNaN(o) ? o.replace(/ /g, "_space_") : "num" + o) && (o = "none"), r + "(" + o + "):\n"
        }, tu.entryEventFuncFilter = function (t) {
            var e = !1, n = t.split("\n");
            for (var r in n) {
                var o = n[r], a = n[r].trim(), s = "";
                if ((i = a.indexOf(":")) > 0 && (s = a.substring(0, i + 1)), "def when_press_key" == (s = (s = s.split("("))[0]) || "def when_get_signal" == s) {
                    var i, l = "", c = "";
                    if ((i = (o = o.replace(/def /, "")).indexOf(":")) > 0 && (l = o.substring(0, i), c = o.substring(i + 1, o.length)), c) var u = l.concat("\n").concat(c.trim()); else u = l;
                    n[r] = u, e = !0
                } else e && (u = (u = (u = n[r]).replace(/\t/g, "    ")).replace(/    /, ""), n[r] = u)
            }
            return n.join("\n")
        }, tu.eventBlockSyntaxFilter = function (t) {
            var e;
            return "when_start" == t || "when_press_key" == t || "when_click_mouse_on" == t || "when_click_mouse_off" == t || "when_click_object_on" == t || "when_click_object_off" == t || "when_get_signal" == t || "when_start_scene" == t || "when_make_clone" == t ? (e = t = "def " + t, t) : e
        }, tu.isEntryEventFunc = function (t) {
            return "def when_start" == t || "def when_press_key" == t || "def when_click_mouse_on" == t || "def when_click_mouse_off" == t || "def when_click_object_on" == t || "def when_click_object_off" == t || "def when_get_signal" == t || "def when_start_scene" == t || "def when_make_clone" == t
        }, tu.isEntryEventFuncByFullText = function (t) {
            var e = t.indexOf("("), n = t.substring(0, e);
            return "def when_start" == n || "def when_press_key" == n || "def when_click_mouse_on" == n || "def when_click_mouse_off" == n || "def when_click_object_on" == n || "def when_click_object_off" == n || "def when_get_signal" == n || "def when_start_scene" == n || "def when_make_clone" == n || "def entry_event_start" == n || "def entry_event_key" == n || "def entry_event_mouse_down" == n || "def entry_event_mouse_up" == n || "def entry_event_object_down" == n || "def entry_event_object_up" == n || "def entry_event_signal" == n || "def entry_event_scene_start" == n || "def entry_event_clone_create" == n
        }, tu.eventBlockSyntaxFilter = function (t) {
            var e;
            return "when_start" == t || "when_press_key" == t || "when_click_mouse_on" == t || "when_click_mouse_off" == t || "when_click_object_on" == t || "when_click_object_off" == t || "when_get_signal" == t || "when_start_scene" == t || "when_make_clone" == t ? (e = t = "def " + t, t) : "entry_event_start" == t || "entry_event_key" == t || "entry_event_mouse_down" == t || "entry_event_mouse_up" == t || "entry_event_object_down" == t || "entry_event_object_up" == t || "entry_event_signal" == t || "entry_event_scene_start" == t || "entry_event_clone_create" == t ? (e = t = "def " + t, t) : e
        }, tu.isEntryEventFuncName = function (t) {
            return "when_start" == t || "when_press_key" == t || "when_click_mouse_on" == t || "when_click_mouse_off" == t || "when_click_object_on" == t || "when_click_object_off" == t || "when_get_signal" == t || "when_start_scene" == t || "when_make_clone" == t || "entry_event_start" == t || "entry_event_key" == t || "entry_event_mouse_down" == t || "entry_event_mouse_up" == t || "entry_event_object_down" == t || "entry_event_object_up" == t || "entry_event_signal" == t || "entry_event_scene_start" == t || "entry_event_clone_create" == t
        }, tu.isEntryEventFuncByType = function (t) {
            return "when_run_button_click" == t || "when_some_key_pressed" == t || "mouse_clicked" == t || "mouse_click_cancled" == t || "when_object_click" == t || "when_object_click_canceled" == t || "when_message_cast" == t || "when_scene_start" == t || "when_clone_start" == t
        }, tu.isEntryEventFuncNameWithParam = function (t) {
            var e = t.lastIndexOf("_");
            if (e > 0) {
                var n = t.substring(0, e);
                if ("when_press_key" == n || "when_get_signal" == n) return !0
            }
            return !1
        }, tu.searchFuncDefParam = function (t) {
            if ("function_field_label" == t.data.type) {
                var e = t.data.params[0];
                this._funcNameQ.enqueue(e)
            }
            if (t && t.data && t.data.params && t.data.params[1]) {
                if ("function_field_string" == t.data.type || "function_field_boolean" == t.data.type) {
                    var n = t.data.params[0].data.type;
                    this._funcParamQ.enqueue(n)
                }
                return this.searchFuncDefParam(t.data.params[1])
            }
            return t
        }, tu.isEntryEventFuncTypeWithParam = function (t) {
            return "when_some_key_pressed" == t.type || "when_message_cast" == t.type
        }, tu.isEntryEventDesignatedParamName = function (t) {
            var e = !1;
            return "key" == t ? e = !0 : "signal" == t && (e = !0), e
        }, tu.gatherFuncDefParam = function (t) {
            if (t && t.data) {
                if (t.data.params[0]) if (t.data.params[0].data) {
                    var e = t.data.params[0].data.type;
                    "function_field_string" != t.data.type && "function_field_boolean" != t.data.type || this._funcParamQ.enqueue(e)
                } else if ("function_field_label" == t.data.type) {
                    var n = t.data.params[0];
                    this._funcNameQ.enqueue(n)
                }
                if (t.data.params[1]) {
                    var r = this.searchFuncDefParam(t.data.params[1]);
                    r.data.params[0].data && (e = r.data.params[0].data.type, "function_field_string" != r.data.type && "function_field_boolean" != r.data.type || this._funcParamQ.enqueue(e)), r.data.params[1] && r.data.params[1].data.params[0].data && (e = r.data.params[1].data.params[0].data.type, "function_field_string" != r.data.params[1].data.type && "function_field_boolean" != r.data.params[1].data.type || this._funcParamQ.enqueue(e))
                }
            }
            return r
        }, tu.getLastParam = function (t) {
            return t && t.data && t.data.params[1] ? this.getLastParam(t.data.params[1]) : t
        }, tu.isFuncContentsMatch = function (t, e, n, r, o) {
            var a = !0;
            if (e.length != t.length) return !1;
            for (var s = 0; s < t.length && a; s++) {
                a = !1;
                var i = t[s], l = e[s];
                if (i && !l) return !1;
                if (!i && l) return !1;
                if (i._schema && i._schema.template) if (i._schema.template.trim().split(" ")[0] == l.funcName) var c = !0; else c = !1;
                if (l.type != i.data.type && !c) {
                    a = !1;
                    break
                }
                a = !0, o != l.type && (a = !1);
                var u = l.params, p = i.data.params, _ = [];
                if (void 0 != u && null != u || (u = []), void 0 != p && null != p || (p = []), p.map(function (t, e) {
                        t && _.push(t)
                    }), p = _, _ = [], u.map(function (t, e) {
                        t && _.push(t)
                    }), (u = _).length != p.length) {
                    a = !1;
                    break
                }
                a = !0;
                for (var d = 0; d < u.length && a; d++) if (a = !1, "object" !== (0, _typeof3.default)(u[d])) a = u[d] == p[d]; else if (u[d].name) {
                    var y = r[u[d].name];
                    y ? p[d].data.type == y && (a = !0) : u[d].params && p[d].data.params && u[d].params[0] == p[d].data.params[0] && (a = !0)
                } else "True" == u[d].type || "False" == u[d].type ? p[d].data ? u[d].type == p[d].data.type && (a = !0) : u[d].type == p[d].type && (a = !0) : u[d].type && u[d].params && (a = this.isFuncContentsParamsMatch(p[d], u[d], n, r));
                if (a && l.statements && 0 != l.statements.length) for (var g in l.statements) a = this.isFuncContentsMatch(i.data.statements[g]._data, l.statements[g], n, r)
            }
            return a
        }, tu.isFuncContentsParamsMatch = function (t, e, n, r) {
            var o = !1, a = e.type, s = t.data.type;
            if ("text" == a ? a = "literal" : "number" == a ? a = "literal" : e.isParamFromFunc && (a = r[a]), "text" == s ? s = "literal" : "number" == s && (s = "literal"), a == s) {
                var i = e.params, l = t.data.params;
                if (i || l) if (i.length == l.length) for (var c in o = !0, i) {
                    if (!o) break;
                    o = !1;
                    var u = i[c], p = l[c];
                    if (u || p) if ("object" !== (void 0 === u ? "undefined" : (0, _typeof3.default)(u))) u == p && (o = !0); else if (u.name) {
                        var _ = r[u.name];
                        _ ? p.data.type == _ && (o = !0) : u.params[0] == p.data.params[0] && (o = !0)
                    } else "True" == u.type || "False" == u.type ? p.data ? u.type == p.data.type && (o = !0) : u.type == p.type && (o = !0) : u.type && u.params && (o = this.isFuncContentsParamsMatch(p, u, n, r)); else o = !0
                } else o = !1; else o = !0
            } else o = !1;
            return o
        }, tu.isParamBlock = function (t) {
            var e = t.type;
            return "ai_boolean_distance" == e || "ai_distance_value" == e || "ai_boolean_object" == e || "ai_boolean_and" == e
        }, tu.hasBlockInfo = function (t, e) {
            var n = !1;
            for (var r in e) {
                var o = e[r];
                if (r == t.type) for (var a in o) {
                    var s = o[a];
                    if (s.start == t.start && s.end == t.end) {
                        n = !0;
                        break
                    }
                }
            }
            return n
        }, tu.makeFuncParamBlock = function (t, e, n) {
            var r = t.params;
            for (var o in r) {
                var a = r[o];
                if (a && "object" == (void 0 === a ? "undefined" : (0, _typeof3.default)(a))) if (a.type && a.params && 0 != a.params.length) this.makeFuncParamBlock(a, e, n); else if (a.type && a.params && 0 == a.params.length) (s = e[a.type]) && ((i = {}).type = s, i.params = [], t.params[o] = i); else if (a.name) {
                    var s, i;
                    if (s = e[a.name]) (i = {}).type = s, i.params = [], t.params[o] = i; else if ("get_variable" != a.type) {
                        var l = a.name;
                        Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, l, n, Entry.TextCodingError.SUBJECT_CONV_VARIABLE)
                    }
                } else a.object && a.property && (l = a.object.name + "." + a.property.name, Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError.MESSAGE_CONV_NO_VARIABLE, l, n, Entry.TextCodingError.SUBJECT_CONV_VARIABLE))
            }
            var c = t.statements;
            if (c && c[0] && 0 != c[0].length) {
                var u = c[0];
                for (var p in u) {
                    var _ = u[p];
                    this.makeFuncParamBlock(_, e, n)
                }
            }
            if (c && c[1] && 0 != c[1].length) {
                var d = c[1];
                for (var y in d) {
                    var g = d[y];
                    this.makeFuncParamBlock(g, e, n)
                }
            }
        }, tu.updateBlockInfo = function (t, e) {
            var n = e[t.type];
            if (n && Array.isArray(n) && 0 != n.legnth) for (var r in n) {
                var o, a = n[r];
                if (a.start == t.start && a.end == t.end) break;
                (o = {}).start = t.start, o.end = t.end, n.push(o)
            } else e[t.type] = [], (o = {}).start = t.start, o.end = t.end, e[t.type].push(o)
        }, tu.assembleRepeatWhileTrueBlock = function (t, e) {
            var n = "";
            if ("repeat_while_true" == t.data.type) {
                var r = e.split(" "), o = r.length - 1, a = r[o];
                "until" == a ? (r.splice(1, 0, "not"), o += 1, r.splice(o, 1), n = r.join(" ")) : "while" == a ? (r.splice(o, 1), n = r.join(" ")) : n = e
            } else n = e;
            return n
        }, tu.isJudgementBlock = function (t) {
            return "is_clicked" == t || "is_press_some_key" == t || "reach_something" == t || "boolean_basic_operator" == t || "boolean_and" == t || "boolean_or" == t || "boolean_not" == t
        }, tu.isCalculationBlock = function (t) {
            return "calc_basic" == t || "calc_rand" == t || "coordinate_mouse" == t || "coordinate_object" == t || "get_sound_volume" == t || "quotient_and_mod" == t || "calc_operation" == t || "get_project_timer_value" == t || "get_date" == t || "distance_something" == t || "get_sound_duration" == t || "length_of_string" == t || "combine_something" == t || "char_at" == t || "substring" == t || "index_of_string" == t || "replace_string" == t || "change_string_case" == t
        }, tu.isVariableDeclarationBlock = function (t) {
            return "set_variable" == t
        }, tu.isHWParamBlock = function (t) {
            return "hamster_hand_found" == t || "hamster_value" == t || "arduino_get_port_number" == t || "arduino_get_number_sensor_value" == t || "arduino_get_digital_value" == t || "arduino_convert_scale" == t || "arduino_ext_get_analog_value" == t || "arduino_ext_get_analog_value_map" == t || "arduino_ext_get_ultrasonic_value" == t || "arduino_ext_get_digital" == t || "arduino_ext_tone_list" == t || "arduino_ext_octave_list" == t
        }, tu.isMaterialBlock = function (t) {
            return "get_canvas_input_value" == t || "get_variable" == t || "value_of_index_from_list" == t || "length_of_list" == t || "is_included_in_list" == t
        }, tu.jsAdjustSyntax = function (t, e) {
            var n = "";
            if ("ai_boolean_distance" == t.data.type) {
                (a = (o = e.split(" "))[0].split("_"))[1], a[1] = a[1].substring(1, a[1].length - 1), a[1] = a[1].toLowerCase(), a = a.join("_");
                var r = o[1];
                n = a + " " + (r = this.bTojBinaryOperatorConvertor(r)) + " " + o[2]
            } else if ("ai_boolean_object" == t.data.type) (a = (o = e.split(" "))[0].split("_"))[1], a[1] = a[1].substring(1, a[1].length - 1), a[1] = a[1].toLowerCase(), n = (a = a.join("_")) + " " + (r = o[1]) + " " + o[2]; else if ("ai_distance_value" == t.data.type) {
                var o, a;
                (a = (o = e.split(" "))[0].split("_"))[1], a[1] = a[1].substring(1, a[1].length - 1), a[1] = a[1].toLowerCase(), n = a = a.join("_")
            } else n = e;
            return n
        }, tu.bTojBinaryOperatorConvertor = function (t) {
            var e;
            switch (t) {
                case"'BIGGER'":
                    e = ">";
                    break;
                case"'BIGGER_EQUAL'":
                    e = ">=";
                    break;
                case"'EQUAL'":
                    e = "==";
                    break;
                case"'SMALLER'":
                    e = "<";
                    break;
                case"'SMALLER_EQUAL'":
                    e = "<="
            }
            return e
        }, tu.jTobBinaryOperatorConvertor = function (t) {
            var e;
            switch (t) {
                case">":
                    e = "BIGGER";
                    break;
                case">=":
                    e = "BIGGER_EQUAL";
                    break;
                case"==":
                    e = "EQUAL";
                    break;
                case"<":
                    e = "SMALLER";
                    break;
                case"<=":
                    e = "SMALLER_EQUAL"
            }
            return e
        }, tu.radarVariableConvertor = function (t) {
            return t.split("_")[1].toUpperCase()
        }, tu.tTobDropdownValueConvertor = function (t) {
            return "stone" == t ? "OBSTACLE" : "wall" == t ? t.toUpperCase() : "item" == t ? t.toUpperCase() : t
        }, tu.canConvertTextModeForOverlayMode = function (t) {
            var e;
            return Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD && t == Entry.Workspace.MODE_VIMBOARD ? e = Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_EDITOR] : e
        }, tu.isNamesIncludeSpace = function () {
            var t = Entry.variableContainer;
            if (t) {
                for (var e = t.variables_ || [], n = 0; n < e.length; n++) if (u(e[n].name_)) return Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT];
                for (e = t.lists_ || [], n = 0; n < e.length; n++) if (u(e[n].name_)) return Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT];
                var r = Lang.TextCoding, o = Entry.TextCodingError, a = r[o.ALERT_FUNCTION_NAME_DISORDER],
                    s = r[o.ALERT_FUNCTION_NAME_FIELD_MULTI], i = r[o.ALERT_FUNCTION_NAME_EMPTY_TEXT];
                for (n in e = t.functions_ || {}) {
                    var l = e[n].content.getEventMap("funcDef")[0];
                    if (l = l && l.params[0]) {
                        if ("function_field_label" !== l.type) return a;
                        var c = l.params;
                        if (c[1]) {
                            if (this.hasFunctionFieldLabel(c[1])) return s
                        } else if (u(c[0])) return i
                    }
                }
                return !1
            }

            function u(t) {
                return / /.test(t)
            }
        }, tu.isNameIncludeSpace = function (t, e) {
            return !!/ /.test(t) && ("variable" == e ? Lang.TextCoding[Entry.TextCodingError.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE] : "list" == e ? Lang.TextCoding[Entry.TextCodingError.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE] : "function" == e && Lang.TextCoding[Entry.TextCodingError.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE])
        }, tu.isNameIncludeNotValidChar = function () {
            var t = Entry.variableContainer;
            if (t) {
                for (var e = t.variables_ || [], n = 0; n < e.length; n++) if (this.checkName(e[n].name_, "v")) return this.checkName(e[n].name_, "v");
                for (e = t.lists_ || [], n = 0; n < e.length; n++) if (this.checkName(e[n].name_, "l")) return this.checkName(e[n].name_, "l")
            }
        }, tu.hasFunctionFieldLabel = function (t) {
            if (t && t.data) {
                if ("function_field_label" == t.data.type) return !0;
                var e = t.data.params;
                if (e[0]) {
                    if ("function_field_label" == e[0].data.type) return !0;
                    if (e[0].data.params && this.hasFunctionFieldLabel(e[0])) return !0
                }
                if (e[1]) {
                    if ("function_field_label" == e[1].data.type) return !0;
                    if (e[1].data.params && this.hasFunctionFieldLabel(e[1])) return !0
                }
                return !1
            }
        }, tu.makeExpressionStatementForEntryEvent = function (t, e) {
            var n = {}, r = {type: "CallExpression"}, o = {};
            o.name = t, o.type = "Identifier", r.callee = o;
            var a = [], s = {type: "Literal"};
            return s.value = e, a.push(s), r.arguments = a, n.expression = r, n.type = "ExpressionStatement", n
        }, tu.setMathParams = function (t, e) {
            var n;
            return "pow" == t ? (n = "square", e[3] = n) : "sqrt" == t ? (n = "root", e[3] = n) : "sin" == t ? (n = "sin", e[3] = n) : "cos" == t ? (n = "cos", e[3] = n) : "tan" == t ? (n = "tan", e[3] = n) : "asin" == t ? (n = "asin_radian", e[3] = n) : "acos" == t ? (n = "acos_radian", e[3] = n) : "atan" == t ? (n = "atan_radian", e[3] = n) : "log" == t ? (n = "ln", e[3] = n) : "log10" == t ? (n = "log", e[3] = n) : "floor" == t ? (n = "floor", e[3] = n) : "ceil" == t ? (n = "ceil", e[3] = n) : "round" == t ? (n = "round", e[3] = n) : "factorial" == t ? (n = "factorial", e[3] = n) : "fabs" == t && (n = "abs", e[3] = n), n
        }, tu.isMathExpression = function (t) {
            return "Entry.math_operation" == t.split("(")[0]
        }, tu.makeMathExpression = function (t) {
            var e = t, n = t.split("(")[1].split(","), r = n[0], o = n[1];
            return "square" == (o = o.substring(2, o.length - 2).trim()) ? e = "math.pow(" + r + ")" : "root" == o ? e = "math.sqrt(" + r + ")" : "sin" == o ? e = "math.sin(" + r + ")" : "cos" == o ? e = "math.cos(" + r + ")" : "tan" == o ? e = "math.tan(" + r + ")" : "asin_radian" == o ? e = "math.asin(" + r + ")" : "acos_radian" == o ? e = "math.acos(" + r + ")" : "atan_radian" == o ? e = "math.atan(" + r + ")" : "ln" == o ? e = "math.log(" + r + ")" : "log" == o ? e = "math.log10(" + r + ")" : "floor" == o ? e = "math.floor(" + r + ")" : "ceil" == o ? e = "math.ceil(" + r + ")" : "round" == o ? e = "math.round(" + r + ")" : "factorial" == o ? e = "math.factorial(" + r + ")" : "abs" == o && (e = "math.fabs(" + r + ")"), e
        }, tu.checkName = function (t, e) {
            return /^[0-9]$/g.test(t[0]) ? Lang.Menus["textcoding_numberError_" + e] : /[\{\}\[\]\/?.,;:|\)*~`!^\-+<>@\#$%&\\\=\(\'\"]/gi.test(t) ? Lang.Menus["textcoding_specialCharError_" + e] : !!["and", "assert", "break", "class", "continue", "def", "del", "elif", "else", "except", "exec", "finally", "for", "from", "global", "if", "import", "in", "is", "lambda", "not", "or", "pass", "print", "raise", "return", "try", "while", "with", "yield"].includes(t) && Lang.Menus["textcoding_bookedError_1" + e] + t + Lang.Menus["textcoding_bookedError_2" + e]
        }, tu.generateVariablesDeclaration = function () {
            var t = "", e = Entry.playground.object, n = Entry.variableContainer;
            if (n) {
                for (var r = n.variables_ || [], o = r.length - 1; o >= 0; o--) {
                    var a = r[o], s = a.name_, i = a.value_;
                    if (a.object_) {
                        if (a.object_ != e.id) continue;
                        s = "self." + s
                    }
                    "string" == typeof i && (i = '"()"'.replace("()", i)), t += s + " = " + i + "\n"
                }
                return t
            }
        }, tu.generateListsDeclaration = function () {
            var t = "", e = Entry.playground.object, n = Entry.variableContainer;
            if (n) {
                for (var r = n.lists_ || [], o = r.length - 1; o >= 0; o--) {
                    var a = r[o], s = a.name_, i = "", l = a.array_;
                    if (a.object_) {
                        if (a.object_ != e.id) continue;
                        s = "self." + s
                    }
                    for (var c in l) {
                        var u = l[c].data;
                        (isNaN(u) || u.length > 1 && "0" === String(u)[0]) && (u = '"' + u.replace(/"/gi, '\\"') + '"'), ("number" == typeof u || u.trim().length > 0) && (i += u), c != l.length - 1 && (i += ", ")
                    }
                    t += s + " = [" + i + "]\n"
                }
                return t
            }
        }, tu.isVariableNumber = function (t, e) {
            var n = Entry.playground.object, r = Entry.variableContainer.variables_;
            for (var o in r) {
                var a = r[o];
                if ("global" == e) {
                    if (null === a.object_ && a.id_ == t && Entry.Utils.isNumber(a.value_)) return !0
                } else if ("local" == e && a.object_ === n.id && a.id_ == t && Entry.Utils.isNumber(a.value_)) return !0
            }
            return !1
        }, tu.generateForStmtIndex = function (t, e) {
            e = e || "";
            var n = Math.floor(t / 3);
            return e = ["i", "j", "k"][t % 3] + e, n ? this.generateForStmtIndex(n - 1, e) : e
        }, tu.isExpressionLiteral = function (t, e) {
            switch (t.type) {
                case"CallExpression":
                    if ("MemberExpression" === t.callee.type) {
                        var n = t.callee.property.name;
                        if (n = e["%2"][n]) {
                            var r = n.key;
                            return "basic_string_field" === Entry.block[r].skeleton
                        }
                    }
                    break;
                case"Literal":
                    return !0
            }
            return !1
        }, tu.isNameInEntryData = function (t, e) {
            return this.isGlobalVariableExisted(t) || this.isLocalVariableExisted(t, e) || this.isGlobalListExisted(t) || this.isLocalListExisted(t)
        }
    }(Entry.TextCodingUtil)
}, function (t, e, n) {
    "use strict";
    Entry.KeyboardCode = {}, Entry.KeyboardCode.map = {
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pausebreak: 19,
        capslock: 20,
        esc: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        insert: 45,
        delete: 46,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        windows: 91,
        rightclick: 93,
        numpad0: 96,
        numpad1: 97,
        numpad2: 98,
        numpad3: 99,
        numpad4: 100,
        numpad5: 101,
        numpad6: 102,
        numpad7: 103,
        numpad8: 104,
        numpad9: 105,
        "numpad*": 106,
        "numpad+": 107,
        "numpad-": 109,
        "numpad.": 110,
        "numpad/": 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrolllock: 145,
        mycomputer: 182,
        mycalculator: 183,
        ";": 186,
        "=": 187,
        ",": 188,
        "-": 189,
        ".": 190,
        "/": 191,
        "`": 192,
        "[": 219,
        "\\": 220,
        "]": 221,
        "'": 222
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.CodeMap = {}, (r = Entry.CodeMap).Entry = {
        start_neighbor_scene: [{"다음": "next", "이전": "pre"}],
        stop_object: [{
            thisOnly: "self",
            thisThread: "this",
            otherThread: "others",
            self: "thisOnly",
            this: "thisThread",
            others: "otherThread",
            "모든": "all",
            "자신": "thisOnly",
            "이": "thisThread",
            "자신의 다른": "otherThread"
        }],
        change_to_next_shape: [{prev: "pre", pre: "prev", "다음": "next", "이전": "prev"}],
        add_effect_amount: [{"색깔": "color", "밝기": "brightness", "투명도": "transparency"}],
        change_effect_amount: [{"색깔": "color", "밝기": "brightness", "투명도": "transparency"}],
        change_object_index: [{
            front: "FRONT",
            forward: "FORWARD",
            backward: "BACKWARD",
            back: "BACK",
            "맨 앞": "FRONT",
            "앞": "FORWARD",
            "뒤": "BACKWARD",
            "맨 뒤": "BACK"
        }],
        set_color: [{
            red: "#FF0000",
            orange: "#FF9966",
            yellow: "#FFFF66",
            green: "#009900",
            blue: "#3333FF",
            navy: "#000099",
            purple: "#993399",
            black: "#000000",
            white: "#FFFFFF",
            brown: "#990000"
        }],
        reach_something: [null, {
            mouse: "mouse_pointer",
            wall: "edge",
            wall_up: "edge_up",
            wall_down: "edge_down",
            wall_right: "edge_right",
            wall_left: "edge_left",
            mouse_pointer: "mouse",
            edge: "wall",
            edge_up: "wall_up",
            edge_down: "wall_down",
            edge_right: "wall_right",
            edge_left: "wall_left",
            "마우스포인터": "mouse"
        }, null],
        create_clone: [{"자신": "self", self: "self"}],
        text_read: [{"자신": "self", self: "self"}],
        locate: [{mouse: "mouse_pointer", mouse_pointer: "mouse", "마우스포인터": "mouse"}],
        locate_object_time: [null, {mouse: "mouse_pointer", mouse_pointer: "mouse", "마우스포인터": "mouse"}],
        see_angle_object: [{mouse: "mouse_pointer", mouse_pointer: "mouse", "마우스포인터": "mouse"}],
        coordinate_mouse: [null, {X: "x", Y: "y"}, null],
        coordinate_object: [null, {"자신": "self", self: "self"}, null, {
            "크기": "size",
            "방향": "rotation",
            "이동 방향": "direction",
            "모양 번호": "picture_index",
            "모양 이름": "picture_name",
            picture_index: "shape_number",
            picture_name: "shape_name",
            shape_number: "picture_index",
            shape_name: "picture_name"
        }],
        choose_project_timer_action: [null, {start: "START", stop: "STOP", reset: "RESET"}],
        set_visible_project_timer: [null, {show: "SHOW", hide: "HIDE"}],
        get_date: [null, {year: "YEAR", month: "MONTH", day: "DAY", hour: "HOUR", minute: "MINUTE", second: "SECOND"}],
        distance_something: [null, {mouse: "mouse_pointer", mouse_pointer: "mouse", "마우스포인터": "mouse"}],
        set_visible_answer: [{show: "SHOW", hide: "HIDE"}]
    }, r.Arduino = {
        arduino_ext_analog_list: [{a0: "0", a1: "1", a2: "2", a3: "3", a4: "4", a5: "5"}],
        arduino_get_digital_toggle: [{on: "high", off: "low", high: "on", low: "off", HIGH: "on", LOW: "off"}]
    }, r.Hamster = {
        hamster_play_note_for: [{
            4: "hamster.note_c",
            5: "hamster.note_c_sharp",
            6: "hamster.note_d",
            7: "hamster.note_e_flat",
            8: "hamster.note_e",
            9: "hamster.note_f",
            10: "hamster.note_f_sharp",
            11: "hamster.note_g",
            12: "hamster.note_g_sharp",
            13: "hamster.note_a",
            14: "hamster.note_b_flat",
            15: "hamster.note_b",
            "hamster.note_c": 4,
            "hamster.note_c_sharp": 5,
            "hamster.note_d_flat": 5,
            "hamster.note_d": 6,
            "hamster.note_e_flat": 7,
            "hamster.note_d_sharp": 7,
            "hamster.note_e": 8,
            "hamster.note_f": 9,
            "hamster.note_f_sharp": 10,
            "hamster.note_g_flat": 10,
            "hamster.note_g": 11,
            "hamster.note_g_sharp": 12,
            "hamster.note_a_flat": 12,
            "hamster.note_a": 13,
            "hamster.note_b_flat": 14,
            "hamster.note_a_sharp": 14,
            "hamster.note_b": 15
        }, null, null]
    }, r.Turtle = {
        touching_colors: {
            1: "turtle.color_black",
            2: "turtle.color_red",
            3: "turtle.color_orange",
            4: "turtle.color_yellow",
            5: "turtle.color_green",
            6: "turtle.color_cyan",
            7: "turtle.color_blue",
            8: "turtle.color_magenta",
            9: "turtle.color_white",
            "turtle.color_black": 1,
            "turtle.color_red": 2,
            "turtle.color_orange": 3,
            "turtle.color_yellow": 4,
            "turtle.color_green": 5,
            "turtle.color_cyan": 6,
            "turtle.color_sky_blue": 6,
            "turtle.color_blue": 7,
            "turtle.color_magenta": 8,
            "turtle.color_purple": 8,
            "turtle.color_white": 9
        },
        pattern_colors: {
            1: "turtle.color_red",
            3: "turtle.color_yellow",
            4: "turtle.color_green",
            5: "turtle.color_cyan",
            6: "turtle.color_blue",
            7: "turtle.color_magenta",
            "turtle.color_red": 1,
            "turtle.color_yellow": 3,
            "turtle.color_green": 4,
            "turtle.color_cyan": 5,
            "turtle.color_sky_blue": 5,
            "turtle.color_blue": 6,
            "turtle.color_magenta": 7,
            "turtle.color_purple": 7
        },
        units: {
            CM: "turtle.unit_cm",
            DEG: "turtle.unit_deg",
            SEC: "turtle.unit_sec",
            PULSE: "turtle.unit_pulse",
            "turtle.unit_cm": "CM",
            "turtle.unit_deg": "DEG",
            "turtle.unit_sec": "SEC",
            "turtle.unit_pulse": "PULSE"
        },
        head_tail: {HEAD: "turtle.head", TAIL: "turtle.tail", "turtle.head": "HEAD", "turtle.tail": "TAIL"},
        line_colors: {
            10: "turtle.color_black",
            11: "turtle.color_red",
            13: "turtle.color_green",
            15: "turtle.color_blue",
            17: "turtle.color_any",
            "turtle.color_black": 10,
            "turtle.color_red": 11,
            "turtle.color_green": 13,
            "turtle.color_blue": 15,
            "turtle.color_any": 17
        },
        target_colors: {
            61: "turtle.color_red",
            62: "turtle.color_yellow",
            63: "turtle.color_green",
            64: "turtle.color_cyan",
            65: "turtle.color_blue",
            66: "turtle.color_magenta",
            67: "turtle.color_any",
            "turtle.color_red": 61,
            "turtle.color_yellow": 62,
            "turtle.color_green": 63,
            "turtle.color_cyan": 64,
            "turtle.color_sky_blue": 64,
            "turtle.color_blue": 65,
            "turtle.color_magenta": 66,
            "turtle.color_purple": 66,
            "turtle.color_any": 67
        },
        color_lines: {
            71: "turtle.color_red",
            73: "turtle.color_green",
            75: "turtle.color_blue",
            77: "turtle.color_any",
            "turtle.color_red": 71,
            "turtle.color_green": 73,
            "turtle.color_blue": 75,
            "turtle.color_any": 77
        },
        led_colors: {
            RED: "turtle.color_red",
            ORANGE: "turtle.color_orange",
            YELLOW: "turtle.color_yellow",
            GREEN: "turtle.color_green",
            CYAN: "turtle.color_cyan",
            BLUE: "turtle.color_blue",
            VIOLET: "turtle.color_violet",
            MAGENTA: "turtle.color_magenta",
            WHITE: "turtle.color_white",
            "turtle.color_red": "RED",
            "turtle.color_orange": "ORANGE",
            "turtle.color_yellow": "YELLOW",
            "turtle.color_green": "GREEN",
            "turtle.color_cyan": "CYAN",
            "turtle.color_sky_blue": "CYAN",
            "turtle.color_blue": "BLUE",
            "turtle.color_violet": "VIOLET",
            "turtle.color_magenta": "MAGENTA",
            "turtle.color_purple": "MAGENTA",
            "turtle.color_white": "WHITE"
        },
        sounds: {
            1: "turtle.sound_beep",
            2: "turtle.sound_random",
            3: "turtle.sound_siren",
            4: "turtle.sound_engine",
            5: "turtle.sound_robot",
            6: "turtle.sound_march",
            7: "turtle.sound_birthday",
            8: "turtle.sound_dibidibidip",
            9: "turtle.sound_good_job",
            "turtle.sound_beep": 1,
            "turtle.sound_random": 2,
            "turtle.sound_siren": 3,
            "turtle.sound_engine": 4,
            "turtle.sound_robot": 5,
            "turtle.sound_march": 6,
            "turtle.sound_birthday": 7,
            "turtle.sound_dibidibidip": 8,
            "turtle.sound_good_job": 9
        },
        notes: {
            4: "turtle.note_c",
            5: "turtle.note_c_sharp",
            6: "turtle.note_d",
            7: "turtle.note_e_flat",
            8: "turtle.note_e",
            9: "turtle.note_f",
            10: "turtle.note_f_sharp",
            11: "turtle.note_g",
            12: "turtle.note_g_sharp",
            13: "turtle.note_a",
            14: "turtle.note_b_flat",
            15: "turtle.note_b",
            "turtle.note_c": 4,
            "turtle.note_c_sharp": 5,
            "turtle.note_d_flat": 5,
            "turtle.note_d": 6,
            "turtle.note_e_flat": 7,
            "turtle.note_d_sharp": 7,
            "turtle.note_e": 8,
            "turtle.note_f": 9,
            "turtle.note_f_sharp": 10,
            "turtle.note_g_flat": 10,
            "turtle.note_g": 11,
            "turtle.note_g_sharp": 12,
            "turtle.note_a_flat": 12,
            "turtle.note_a": 13,
            "turtle.note_b_flat": 14,
            "turtle.note_a_sharp": 14,
            "turtle.note_b": 15
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.PyHint = function (t) {
        this.setSyntax(t), this.lastHW = null, this._blockMenu = Entry.getMainWS().blockMenu, CodeMirror.registerHelper("hint", "python", this.pythonHint.bind(this));
        var e = function (t) {
            if (Entry.hw.hwModule) {
                var e = Entry.hw.hwModule.name;
                "ArduinoExt" === (e = e[0].toUpperCase() + e.slice(1)) ? this.addScope("Arduino", "Ext") : this.addScope(e), this.lastHW = e
            } else this.removeScope(this.lastHW), this.lastHW = null
        }.bind(this);
        Entry.addEventListener("hwChanged", e), Entry.hw.hwModule && e()
    }, (o = Entry.PyHint.prototype).pythonHint = function (t) {
        for (var e, n = t.getCursor(), r = t.getLineTokens(n.line), o = r.pop(), a = [], s = []; o && n.ch <= o.start;) o = r.pop();
        if (!o) return null;
        var i = o.start, l = this.hintFunc, c = this.syntax;
        switch (o.type) {
            case"builtin":
                e = r[r.length - 2] && "def" === r[r.length - 2].string ? null : o.string;
            case"def":
                if (!e) {
                    var u = r[r.length - 2];
                    u && (e = "def " + o.string, i = u.start)
                }
            case"keyword":
                e || (e = o.string);
            case"variable":
                e || (e = o.string), a = (a = this.fuzzySearch(this.getScope("_global"), e)).map(function (t) {
                    var e, n = c, r = t.split("#")[0];
                    return r = (r = (r = r.split("\n").join(" ")).replace(/%\d+/gi, "")).replace(/\$\d+/gi, ""), t.indexOf(".") > -1 && (t = t.split("."), n = c[t[0]], e = t.shift(), t = t.join(".")), n[t].key && s.push(this.getMenuElement(n[t])), {
                        displayText: r,
                        hint: l,
                        syntax: n[t],
                        localKey: e
                    }
                }, this);
                break;
            case"property":
                var p, _ = r[r.length - 2];
                if (!_) break;
                var d = this.getScope(_.string);
                d.length ? p = this.fuzzySearch(d, o.string) : Entry.variableContainer.getListByName(_.string) ? (p = this.fuzzySearch(this.getScope("%2"), o.string), _.string = "%2") : p = [], a = p.map(function (t) {
                    var e = t.split("#")[0];
                    return {displayText: e = e.split("\n")[0], hint: l, syntax: c[_.string][t]}
                });
                var y = this.syntax[_.string];
                s = p.map(function (t) {
                    return this.getMenuElement(y[t])
                }, this)
        }
        return s.length ? this._blockMenu._setDynamic(s) : this._blockMenu._cancelDynamic(), {
            list: a,
            from: CodeMirror.Pos(n.line, i),
            to: CodeMirror.Pos(n.line, o.end)
        }
    }, o.addScope = function (t, e) {
        if (this.syntax[t] && !this.scope[t]) {
            var n = this.syntax;
            if ("Chocopi" === t) for (var r in this.syntax) n[r].syntax && r.indexOf("%") < 0 && n[r].key.indexOf("function_field") < 0 && "def on" === r.substr(0, 6) && this.scope._global.push(r);
            n = this.syntax[t];
            var o = (0, a.default)(n);
            o = o.filter(function (r) {
                var o = Entry.block[n[r].key];
                return ("Arduino" !== t || "Ext" === e === (o.class && o.class.indexOf("Ext") > 0)) && r.indexOf("#") < 0 && !o.deprecated
            }), this.scope[t] = o, this.scope._global.unshift(t), o = o.map(function (e) {
                return t + "." + e
            }), this.scope._global = this.scope._global.concat(o)
        }
    }, o.removeScope = function (t) {
        if (this.scope[t]) {
            var e = this.syntax[t], n = (0, a.default)(e);
            for (n = (n = n.filter(function (t) {
                return t.indexOf("#") < 0 && !Entry.block[e[t].key].deprecated
            })).map(function (e) {
                return t + "." + e
            }), this.scope._global.splice(this.scope._global.indexOf(t), 1); n.length;) {
                var r = n.pop();
                this.scope._global.splice(this.scope._global.indexOf(r), 1)
            }
            delete this.scope[t]
        }
    }, o.getScope = function (t) {
        return this.scope[t] ? this.scope[t] : []
    }, o.fuzzySearch = function (t, e, n) {
        (n = n || {}).escapeLetter = "#";
        var r = Entry.Utils.fuzzy.filter(e, t, n).slice(0, 20);
        return r.map(function (t) {
            return t.original
        })
    }, o.hintFunc = function (t, e, n) {
        var r, o = n.syntax, a = e.from.ch;
        if (o.syntax ? (r = o.syntax, n.localKey && (r = n.localKey + "." + r), (r = r.split(".")).length > 1 && r.shift(), (r = r.join(".")).indexOf("%") > -1 ? (a += r.indexOf("%"), r = r.replace(/%\d+/gi, "")) : a += r.length, r = r.replace(/\$\d+/gi, "")) : a += (r = n.displayText + ".").length, r.indexOf("\n") > -1 && (r = r.split("\n").join("\n" + "\t".repeat(e.from.ch))), r.indexOf(":") > -1) {
            for (var s = t.getCursor(), i = t.getLineTokens(s.line), l = i.shift(); i.length && "keyword" !== l.type;) l = i.shift();
            a -= e.from.ch - l.start, e.from.ch = l.start
        }
        t.replaceRange(r, e.from, e.to), t.setCursor({line: e.from.line, ch: a}), Entry.helper.renderBlock(n.syntax.key)
    }, o.setSyntax = function (t) {
        for (var e in this.syntax = t, this.scope = {}, this.scope._global = [], this.scope._list = [], t) if (t[e].syntax && e.indexOf("%") < 0 && t[e].key.indexOf("function_field") < 0) {
            if ("def on" === e.substr(0, 6)) continue;
            this.scope._global.push(e)
        } else "if" === e.substr(0, 2) ? this.scope._global.push(e) : "while" === e.substr(0, 5) && this.scope._global.push(e);
        this.addScope("Entry"), this.addScope("random"), this.addScope("math"), this.addScope("%2", "_list"), this.lastHW && this.addScope(this.lastHW)
    }, o.getMenuElement = function (t) {
        var e = t.key;
        if (t.isDefault && Entry.playground.mainWorkspace.blockMenu.getThreadByBlockKey(e)) return e;
        var n = [];
        return t.params && (n = n.concat(t.params)), [t.syntax, {type: e, params: n}]
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(5)) && r.__esModule ? r : {default: r};
    Entry.TextCodingError = {}, function (t) {
        t.TITLE_SYNTAX = "title_syntax", t.TITLE_CONVERTING = "title_converting", t.MESSAGE_SYNTAX_DEFAULT = "message_syntax_default", t.MESSAGE_SYNTAX_UNEXPECTED_TOKEN = "message_syntax_unexpected_token", t.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER = "message_syntax_unexpected_character", t.MESSAGE_SYNTAX_UNEXPECTED_INDENT = "message_syntax_unexpected_indent", t.MESSAGE_SYNTAX_RESERVED_TOKEN = "message_syntax_reserved_token", t.MESSAGE_SYNTAX_RESERVED_TOKEN_LIST = "message_syntax_reserved_token_list", t.MESSAGE_CONV_DEFAULT = "message_conv_default", t.MESSAGE_CONV_NO_SUPPORT = "message_conv_no_support", t.MESSAGE_CONV_NO_VARIABLE = "message_conv_no_variable", t.MESSAGE_CONV_NO_LIST = "message_conv_no_list", t.MESSAGE_CONV_NO_OBJECT = "message_conv_no_object", t.MESSAGE_CONV_NO_FUNCTION = "message_conv_no_function", t.MESSAGE_CONV_NO_ENTRY_EVENT_FUNCTION = "message_conv_no_entry_event_function", t.SUBJECT_SYNTAX_DEFAULT = "subject_syntax_default", t.SUBJECT_SYNTAX_TOKEN = "subject_syntax_token", t.SUBJECT_SYNTAX_CHARACTER = "subject_syntax_character", t.SUBJECT_SYNTAX_INDENT = "subject_syntax_indent", t.SUBJECT_CONV_DEFAULT = "subject_conv_default", t.SUBJECT_CONV_GENERAL = "subject_conv_general", t.SUBJECT_CONV_VARIABLE = "subject_conv_variable", t.SUBJECT_CONV_LIST = "subject_conv_list", t.SUBJECT_CONV_OBJECT = "subject_conv_object", t.SUBJECT_CONV_FUNCTION = "subject_conv_function", t.ALERT_VARIABLE_EMPTY_TEXT_ADD_CHANGE = "alert_variable_empty_text_add_change", t.ALERT_LIST_EMPTY_TEXT_ADD_CHANGE = "alert_list_empty_text_add_change", t.ALERT_FUNCTION_NAME_EMPTY_TEXT_ADD_CHANGE = "alert_function_name_empty_text_add_change", t.ALERT_VARIABLE_EMPTY_TEXT = "alert_variable_empty_text", t.ALERT_LIST_EMPTY_TEXT = "alert_list_empty_text", t.ALERT_FUNCTION_NAME_EMPTY_TEXT = "alert_function_name_empty_text", t.ALERT_FUNCTION_NAME_FIELD_MULTI = "alert_function_name_field_multi", t.ALERT_FUNCTION_NAME_DISORDER = "alert_function_name_disorder", t.ALERT_FUNCTION_EDITOR = "alert_function_editor", t.ALERT_FUNCTION_NO_SUPPORT = "alert_function_no_support", t.ALERT_LIST_NO_SUPPORT = "alert_list_no_support", t.ALERT_VARIABLE_NO_SUPPORT = "alert_variable_no_support", t.ALERT_SIGNAL_NO_SUPPORT = "alert_signal_no_support", t.ALERT_LEGACY_NO_SUPPORT = "alert_legacy_no_support", t.ALERT_NO_SAVE_ON_ERROR = "alert_no_save_on_error";
        var e = {};
        t.error = function (t, n, r, o, a) {
            console.log("error control", t, n, r, o);
            var s = this.getErrorInfo(t, n, r, o, a);
            throw e.title = s.title, e.message = s.message, e.line = o, e
        }, t.getErrorInfo = function (t, e, n, r, a) {
            var s, i = {};
            if (i.title = Lang.TextCoding[t], e = Lang.TextCoding[e], n) var l = "'" + n + "' "; else l = "";
            if (a) var c = Lang.TextCoding[a]; else c = Lang.TextCoding[this.SUBJECT_CONV_GENERAL];
            return "object" === (void 0 === r ? "undefined" : (0, o.default)(r)) && (r = r.start.line + 2), s = "[" + c + "] " + l + " : " + e + " (line " + r + ")", i.message = s, i
        }
    }(Entry.TextCodingError)
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Queue = function () {
        this.head = null, this.tail = null
    }, (r = Entry.Queue.prototype).enqueue = function (t) {
        var e = new function (t) {
            this.data = t, this.next = null
        }(t);
        null === this.head ? (this.head = e, this.tail = e) : (this.tail.next = e, this.tail = e)
    }, r.dequeue = function () {
        var t;
        return null !== this.head && (t = this.head.data, this.head = this.head.next), t
    }, r.clear = function () {
        for (; this.dequeue();) ;
    }, r.toString = function () {
        for (var t = this.head, e = []; t;) e.push(t.data), t = t.next;
        return e.toString()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Map = function () {
        this._map = {repo: {}}
    }, (r = Entry.Map.prototype).getKey = function (t) {
        return t
    }, r.put = function (t, e) {
        var n = this.getKey(t);
        this._map.repo[n] = e
    }, r.contains = function (t) {
        var e = this.getKey(t);
        return !!this._map.repo[e]
    }, r.get = function (t) {
        var e = this.getKey(t);
        return this._map.repo[e] ? this._map.repo[e] : null
    }, r.remove = function (t) {
        var e = this.getKey(t);
        this.contains(t) && (this._map.repo[e] = void 0)
    }, r.clear = function () {
        this._map.repo = {}
    }, r.toString = function () {
        return this._map.repo
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.PyAstGenerator = function () {
    }, (r = Entry.PyAstGenerator.prototype).generate = function (t) {
        var e = filbert.parse;
        try {
            return e(t, {locations: !0, ranges: !0})
        } catch (t) {
            var n, r, o = t.message.split("'"), a = Entry.TextCodingError.TITLE_SYNTAX;
            if (console.log("msgTokens", o), t.expectedType && t.tokType ? (n = "eof" === t.tokType || "newline" === t.tokType ? Lang.TextCoding.message_conv_is_expect1 + this.getTokenLang(t.expectedType) + Lang.TextCoding.message_conv_is_expect2 : Lang.TextCoding.message_conv_instead.replace("%1", this.getTokenLang(t.tokType)).replace("%2", this.getTokenLang(t.expectedType)), r = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN) : t.tokType ? (n = "eof" === t.tokType || "newline" === t.tokType ? Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN : Lang.TextCoding.message_conv_is_wrong1 + this.getTokenLang(t.tokType) + Lang.TextCoding.message_conv_is_wrong2, r = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN) : "Unexpected token" == o[0].trim() ? (n = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_TOKEN, r = Entry.TextCodingError.SUBJECT_SYNTAX_TOKEN) : "Unexpected character" == o[0].trim() ? (n = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, r = Entry.TextCodingError.SUBJECT_SYNTAX_CHARACTER) : "Reserved variable word" == o[0].trim() ? (n = Entry.TextCodingError.MESSAGE_SYNTAX_RESERVED_TOKEN, r = Entry.TextCodingError.SUBJECT_CONV_VARIABLE) : "Reserved list word" == o[0].trim() ? (n = Entry.TextCodingError.MESSAGE_SYNTAX_RESERVED_TOKEN_LIST, r = Entry.TextCodingError.SUBJECT_CONV_LIST) : "Unexpected indent" == o[0].trim() ? (n = Entry.TextCodingError.MESSAGE_SYNTAX_UNEXPECTED_CHARACTER, r = Entry.TextCodingError.SUBJECT_SYNTAX_INDENT) : (n = Entry.TextCodingError.MESSAGE_SYNTAX_DEFAULT, r = Entry.TextCodingError.SUBJECT_SYNTAX_DEFAULT), o[1]) var s = o[1];
            throw t.title = Lang.TextCoding[a] || a, t.message = Lang.TextCoding[n] || n, t.keyword = s || "", t.subject = Lang.TextCoding[r] || r, t
        }
    }, r.getTokenLang = function (t) {
        if (Array.isArray(t)) {
            var e = t.map(this._getTokenLang), n = e.pop();
            return e.join(", ") + Lang.TextCoding.message_conv_or + n
        }
        return this._getTokenLang(t)
    }, r._getTokenLang = function (t) {
        return Lang.TextCoding[t] || '"' + t + '"'
    }
}, function (t, e, n) {
    "use strict";
    Entry.JsAstGenerator = function () {
    }, Entry.JsAstGenerator.prototype.generate = function (t) {
        return arcon.parse(t)
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldTextInput = function (t, e, n) {
        this._blockView = e, this._block = e.block;
        var r = new Entry.BoxModel;
        this.box = r, this.svgGroup = null, this.position = t.position, this._contents = t, this._isClearBG = t.clearBG || !1, this._index = n, this.value = this.getValue() || "", this._CONTENT_HEIGHT = this.getContentHeight(), this._font_size = 12, this._neighborFields = null, this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldTextInput), (r = Entry.FieldTextInput.prototype)._focusNeighbor = function (t) {
        var e = this.getNeighborFields(), n = e.indexOf(this);
        "prev" === t ? n-- : n++;
        var r = e[n];
        r && (this.destroyOption(void 0, !0), r.renderOptions(e))
    }, r.renderStart = function () {
        var t = this._blockView;
        this.svgGroup || (this.svgGroup = t.contentSvgGroup.elem("g")), this.textElement || (this.textElement = this.svgGroup.elem("text", {
            x: 3,
            y: 4,
            fill: this._contents.color || "black",
            "font-size": this._font_size + "px"
        })), this._contents, this.svgGroup.attr({class: "entry-input-field"}), this._setTextValue();
        var e = this.getTextWidth(), n = this.position && this.position.y ? this.position.y : 0,
            r = this._CONTENT_HEIGHT;
        n -= r / 2, this._header ? this._header.setAttribute("width", e) : this._header = this.svgGroup.elem("rect", {
            width: e,
            height: r,
            y: n,
            rx: 3,
            ry: 3,
            fill: "#fff",
            "fill-opacity": this._isClearBG ? 0 : .4
        }), this._isClearBG && $(this._header).css({stroke: "none"}), this.svgGroup.appendChild(this.textElement), this._bindRenderOptions(), this.box.set({
            x: 0,
            y: 0,
            width: e,
            height: r
        })
    }, r.renderOptions = function (t) {
        t && (this._neighborFields = t);
        var e = this;
        this._blockView, this._attachDisposeEvent(function (t) {
            !0 !== t && e.applyValue(), e.destroyOption(t)
        }), this.optionGroup = Entry.Dom("input", {
            class: "entry-widget-input-field",
            parent: $("body")
        }), this.optionGroup.val(this.getValue()), this.optionGroup.on("mousedown", function (t) {
            t.stopPropagation()
        });
        var n = [13, 27];
        this.optionGroup.on("keyup", function (t) {
            var r = t.keyCode || t.which;
            e.applyValue(t), n.indexOf(r) > -1 && e.destroyOption(void 0, !0)
        }), this.optionGroup.on("keydown", function (t) {
            9 === (t.keyCode || t.which) && (t.preventDefault(), e._focusNeighbor(t.shiftKey ? "prev" : "next"))
        });
        var r = this.getAbsolutePosFromDocument();
        r.y -= this.box.height / 2, this.optionGroup.css({
            height: this._CONTENT_HEIGHT,
            left: r.x,
            top: r.y,
            width: e.box.width
        }), this.optionGroup.focus && this.optionGroup.focus();
        var o = this.optionGroup[0];
        o.setSelectionRange(0, o.value.length, "backward"), this.optionDomCreated(), this.optionGroup.one("blur", function () {
            e.isEditing() && e.destroyOption(void 0, !0)
        })
    }, r.applyValue = function (t) {
        var e = this.optionGroup.val();
        this.setValue(e), this._setTextValue(), this.resize()
    }, r.resize = function () {
        var t = this.getTextWidth();
        this._header.attr({width: t}), this.optionGroup.css({width: t}), this.box.set({width: t}), this._blockView.dAlignContent()
    }, r.getTextWidth = function () {
        return this.getTextBBox().width + 6 + 2
    }, r._setTextValue = function () {
        var t = this._convert(this.getValue(), this.getValue());
        this.textElement.textContent !== t && (this.textElement.textContent = t)
    }, r.getNeighborFields = function () {
        if (!this._neighborFields) {
            var t = Entry.FieldTextInput;
            this._neighborFields = this._block.getRootBlock().getThread().view.getFields().filter(function (e) {
                return e instanceof t
            })
        }
        return this._neighborFields
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldText = function (t, e, n) {
        this._block = e.block, this._blockView = e, this._index = n, this.box = new Entry.BoxModel, this._font_size = t.fontSize || e.getSkeleton().fontSize || 12, this._color = t.color || this._block.getSchema().fontColor || e.getSkeleton().color || "white", this._align = t.align || "left", this._text = this.getValue() || t.text, this.setValue(null), this.textElement = null, this.renderStart(e)
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldText), (r = Entry.FieldText.prototype).renderStart = function () {
        var t = this._blockView;
        this.textElement || (this.svgGroup = this.textElement = t.contentSvgGroup.elem("text").attr({
            style: "white-space: pre;",
            "font-size": this._font_size + "px",
            "font-family": "nanumBarunRegular",
            class: "dragNone",
            fill: this._color
        }));
        var e = this.textElement.textContent;
        this._text = this._text.replace(/(\r\n|\n|\r)/gm, " "), e !== this._text && (this.textElement.textContent = this._text);
        var n = 0, r = this.getTextBBox();
        "center" == this._align && (n = -r.width / 2), this.textElement.attr({
            x: n,
            y: .25 * r.height
        }), this.box.set({x: 0, y: 0, width: r.width, height: r.height})
    }, r.getTextValue = function () {
        return this._text
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldStatement = function (t, e, n) {
        Entry.Model(this, !1), this._blockView = e, this.block = e.block, this.view = this, this._index = n, this.acceptType = t.accept, this.svgGroup = null, this.statementSvgGroup = null, this._thread = null, this._position = t.position, this._events = [], this.observe(e, "alignContent", ["height"], !1), this.observe(this, "_updateBG", ["magneting"], !1), this.renderStart(e.getBoard())
    }, (r = Entry.FieldStatement.prototype).schema = {
        x: 0,
        y: 0,
        width: 100,
        height: 31,
        magneting: !1
    }, r.magnet = {next: {x: 0, y: 0}}, r.renderStart = function (t) {
        this.svgGroup = this._blockView.statementSvgGroup.elem("g"), this.statementSvgGroup = this.svgGroup.elem("g"), this._nextGroup = this.statementSvgGroup, this._initThread(t), this._board = t
    }, r._initThread = function (t) {
        var e = this.getValue();
        this._thread = e, e.createView(t), e.view.setParent(this);
        var n = e.getFirstBlock();
        n && (n.view._toLocalCoordinate(this.statementSvgGroup), this.firstBlock = n);
        var r = e.changeEvent, o = r.attach(this, this.calcHeight), a = r.attach(this, this.checkTopBlock);
        this._events.push(o), this._events.push(a), this.calcHeight()
    }, r.align = function (t, e, n) {
        n = void 0 === n || n;
        var r = this.svgGroup;
        this._position && (this._position.x && (t = this._position.x), this._position.y && (e = this._position.y));
        var o = "translate(" + t + "," + e + ")";
        this.x === t && this.y === e || this.set({
            x: t,
            y: e
        }), n ? r.animate({transform: o}, 300, mina.easeinout) : r.attr({transform: o})
    }, r.calcHeight = function () {
        var t = this._thread.view.requestPartHeight(null);
        this.height !== t && this.set({height: t})
    }, r.getValue = function () {
        return this.block.statements[this._index]
    }, r.requestAbsoluteCoordinate = function () {
        var t = this._blockView.getAbsoluteCoordinate();
        return t.x += this.x, t.y += this.y, t
    }, r.dominate = function () {
        this._blockView.dominate()
    }, r.destroy = function () {
        for (; this._events.length;) this._events.pop().destroy()
    }, r._updateBG = function () {
        var t = this._board.dragBlock;
        if (t && t.dragInstance) {
            var e = this.magneting;
            if (this.block, this.svgGroup, e) {
                var n = t.getShadow(), r = this.requestAbsoluteCoordinate(), o = "translate(" + r.x + "," + r.y + ")";
                $(n).attr({
                    transform: o,
                    display: "block"
                }), this._clonedShadow = n, this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground);
                var a = t.getBelowHeight();
                this.statementSvgGroup.attr({transform: "translate(0," + a + ")"}), this.set({height: this.height + a})
            } else this._clonedShadow && (this._clonedShadow.attr({display: "none"}), delete this._clonedShadow), void 0 !== (a = this.originalHeight) && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), delete this.originalHeight), this.statementSvgGroup.attr({transform: "translate(0,0)"}), this.calcHeight();
            var s = this.block.thread.changeEvent;
            s && s.notify()
        }
    }, r.insertTopBlock = function (t) {
        this._posObserver && this._posObserver.destroy();
        var e = this.firstBlock;
        return this.firstBlock = t, t && t.doInsert(this._thread), e
    }, r.getNextBlock = function () {
        return this.firstBlock
    }, r.checkTopBlock = function () {
        var t = this._thread.getFirstBlock();
        t && this.firstBlock !== t ? (this.firstBlock = t, t.view.bindPrev(this), t._updatePos()) : t || (this.firstBlock = null)
    }, r.pointer = function (t) {
        return (t = t || []).unshift(this._index), this.block.pointer(t)
    }, r.isParamBlockType = function () {
        return !1
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldOutput = function (t, e, n, r, o) {
        Entry.Model(this, !1), this._blockView = e, this._block = e.block, this._valueBlock = null, this.box = new Entry.BoxModel, this.changeEvent = new Entry.Event(this), this._index = n, this.contentIndex = o, this._content = t, this.acceptType = t.accept, this.view = this, this.svgGroup = null, this._position = t.position, this.box.observe(e, "dAlignContent", ["width", "height"]), this.observe(this, "_updateBG", ["magneting"], !1), this.renderStart(e.getBoard(), r)
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldOutput), (r = Entry.FieldOutput.prototype).schema = {magneting: !1}, r.renderStart = function (t, e) {
        this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g")), this.view = this, this._nextGroup = this.svgGroup;
        var n = this.getValue();
        n && !n.view && (n.setThread(this), n.createView(t, e)), this._updateValueBlock(n), this._valueBlock && this._valueBlock.view._startContentRender(this.renderMode), this._blockView.getBoard().constructor == Entry.BlockMenu && this._valueBlock && this._valueBlock.view.removeControl()
    }, r.align = function (t, e, n) {
        n = void 0 === n || n;
        var r = this.svgGroup;
        this._position && (this._position.x && (t = this._position.x), this._position.y && (e = this._position.y));
        var o = this._valueBlock;
        o && o.view && (e = -.5 * o.view.height);
        var a = "translate(" + t + "," + e + ")";
        n ? r.animate({transform: a}, 300, mina.easeinout) : r.attr({transform: a}), this.box.set({x: t, y: e})
    }, r.calcWH = function () {
        var t = this._valueBlock, e = t && t.view;
        t && e ? this.box.set({width: e.width, height: e.height}) : this.box.set({width: 0, height: 20})
    }, r.calcHeight = r.calcWH, r.destroy = function () {
        this._valueBlock && this._valueBlock.destroyView()
    }, r._inspectBlock = function () {
    }, r._setValueBlock = function (t) {
        if (t != this._valueBlock || !this._valueBlock) return this._valueBlock = t, this.setValue(t), t && t.setThread(this), this._valueBlock
    }, r.spliceBlock = function () {
        this._updateValueBlock()
    }, r._updateValueBlock = function (t) {
        if (t instanceof Entry.Block || (t = void 0), t && t === this._valueBlock) this.calcWH(); else {
            if (this._sizeObserver && this._sizeObserver.destroy(), this._posObserver && this._posObserver.destroy(), t = this._setValueBlock(t)) {
                var e = t.view;
                e.bindPrev(), this._posObserver = e.observe(this, "_updateValueBlock", ["x", "y"], !1), this._sizeObserver = e.observe(this, "calcWH", ["width", "height"])
            } else this.calcWH();
            this._blockView.dAlignContent()
        }
    }, r.getPrevBlock = function (t) {
        return this._valueBlock === t ? this : null
    }, r.getNextBlock = function () {
        return null
    }, r.requestAbsoluteCoordinate = function (t) {
        var e = (t = this._blockView).contentPos, n = t.getAbsoluteCoordinate();
        return n.x += this.box.x + e.x, n.y += this.box.y + e.y, n
    }, r.dominate = function () {
        this._blockView.dominate()
    }, r.isGlobal = function () {
        return !1
    }, r.separate = function (t) {
        this.getCode().createThread([t]), this._updateValueBlock(null), this.changeEvent.notify()
    }, r.getCode = function () {
        return this._block.thread.getCode()
    }, r.cut = function (t) {
        return this._valueBlock === t ? (delete this._valueBlock, [t]) : null
    }, r._updateBG = function () {
        this.magneting ? this._bg = this.svgGroup.elem("path", {
            d: "m -4,-12 h 3 l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2 h -3 ",
            fill: "#fff",
            stroke: "#fff",
            "fill-opacity": .7,
            transform: "translate(0," + (this._valueBlock ? 12 : 0) + ")"
        }) : this._bg && (this._bg.remove(), delete this._bg)
    }, r.replace = function (t) {
        var e = this._valueBlock;
        e && (e.view._toGlobalCoordinate(), t.getTerminateOutputBlock().view._contents[1].replace(e)), this._updateValueBlock(t), t.view._toLocalCoordinate(this.svgGroup), this.calcWH()
    }, r.setParent = function (t) {
        this._parent = t
    }, r.getParent = function () {
        return this._parent
    }, r.getThread = function () {
        return this
    }, r.getValueBlock = function () {
        return this._valueBlock
    }, r.pointer = function (t) {
        return (t = t || []).unshift(this._index), t.unshift(Entry.PARAM), this._block.pointer(t)
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldLineBreak = function (t, e, n) {
        this._block = e.block, this._blockView = e, this._index = n;
        var r = new Entry.BoxModel;
        this.box = r, this.setValue(null), this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldLineBreak), (r = Entry.FieldLineBreak.prototype).renderStart = function () {
    }, r.align = function (t) {
        var e = this._blockView;
        0 !== e._statements.length && this.box.set({y: (e._statements[t].height || 20) + Math.max(e.contentHeight % 1e3, 30)})
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldKeyboard = function (t, e, n) {
        this._block = e.block, this._blockView = e;
        var r = new Entry.BoxModel;
        this.box = r, this.svgGroup = null, this.position = t.position, this._contents = t, this._index = n, this.setValue(String(this.getValue())), this._CONTENT_HEIGHT = this.getContentHeight(), this._optionVisible = !1, this.renderStart(e)
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldKeyboard), (r = Entry.FieldKeyboard.prototype).renderStart = function () {
        this.svgGroup && $(this.svgGroup).remove();
        var t = this._blockView;
        this._contents, this.svgGroup = t.contentSvgGroup.elem("g", {class: "entry-input-field"}), this.textElement = this.svgGroup.elem("text").attr({
            x: 5,
            y: 4,
            "font-size": "11px"
        }), this._setTextValue();
        var e = this.getTextWidth() + 1, n = this._CONTENT_HEIGHT,
            r = this.position && this.position.y ? this.position.y : 0;
        r -= n / 2, this._header = this.svgGroup.elem("rect", {
            x: 0,
            y: r,
            width: e,
            height: n,
            rx: 3,
            ry: 3,
            fill: "#fff",
            "fill-opacity": .4
        }), this.svgGroup.appendChild(this.textElement), this._bindRenderOptions(), this.box.set({
            x: 0,
            y: 0,
            width: e,
            height: n
        })
    }, r.renderOptions = function () {
        Entry.keyPressed && (this.keyPressed = Entry.keyPressed.attach(this, this._keyboardControl)), this._optionVisible = !0, this._blockView, this._attachDisposeEvent();
        var t = this.getAbsolutePosFromDocument();
        t.x -= 17, t.x += this.box.width / 2, t.y += this.box.height / 2 + 1, this.optionGroup = Entry.Dom("img", {
            class: "entry-widget-keyboard-input",
            parent: $("body")
        }), this.optionGroup.on("load", this.optionDomCreated.bind(this)), this.optionGroup[0].src = Entry.mediaFilePath + "/media/keyboard_workspace_widget.png", this.optionGroup.on("mousedown", function (t) {
            t.stopPropagation()
        }), this.optionGroup.css({left: t.x, top: t.y})
    }, r.destroyOption = function (t) {
        this.disposeEvent && (this.disposeEvent.destroy(), delete this.disposeEvent), this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup), this._optionVisible = !1, this._isEditing = !1, this.command(t), this.keyPressed && (this.keyPressed.destroy(), delete this.keyPressed)
    }, r._keyboardControl = function (t) {
        if (t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), this._optionVisible) {
            var e = t.keyCode, n = Entry.getKeyCodeMap()[e];
            void 0 !== n && this.applyValue(n, e, !0)
        }
    }, r.applyValue = function (t, e, n) {
        this.setValue(String(e)), this._setTextValue(), this.resize(), this.destroyOption(n)
    }, r.resize = function () {
        var t = this.getTextWidth() + 1;
        this._header.attr({width: t}), this.box.set({width: t}), this._blockView.dAlignContent()
    }, r.getTextWidth = function () {
        return this.textElement.getComputedTextLength() + 10
    }, r.destroy = function () {
        this.destroyOption(), Entry.keyPressed && this.keyPressed && this.keyPressed.destroy()
    }, r._setTextValue = function () {
        var t = Entry.getKeyCodeMap()[this.getValue()];
        t = this._convert(t, this.getValue()), this.textElement.textContent = void 0 === t ? Lang.Blocks.no_target : t
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldIndicator = function (t, e, n) {
        this._block = e.block, this._blockView = e;
        var r = new Entry.BoxModel;
        this.box = r, this._size = t.size, t.img ? this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? this._imgUrl = t.img.replace(".png", "_un.png") : this._imgUrl = t.img : t.color && (this._color = t.color), this._boxMultiplier = t.boxMultiplier || 2, this._highlightColor = t.highlightColor || "#F59900", this._position = t.position, this._index = n, this.svgGroup = null, this._imgElement = null, this.setValue(null), this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldIndicator), (r = Entry.FieldIndicator.prototype).renderStart = function () {
        var t;
        this._imgElement || (this.svgGroup = this._imgElement = this._blockView.contentSvgGroup.elem("image")), this._imgUrl && (t = {
            href: Entry.mediaFilePath + this._imgUrl,
            x: this._position ? -1 * this._size : 0,
            y: -1 * this._size,
            width: 2 * this._size,
            height: 2 * this._size
        }, this._imgElement.attr(t), this._block.emphasized && -1 === this._imgUrl.lastIndexOf("_un.png") && (this._imgUrl = this._imgUrl.replace(".png", "_un.png"))), this.box.set({
            width: this._size * this._boxMultiplier + (this._position ? -this._size : 0),
            height: this._size * this._boxMultiplier
        })
    }, r.enableHighlight = function () {
    }
}, function (t, e, n) {
    "use strict";
    Entry.FieldImage = function (t, e, n) {
        this._block = e.block, this._blockView = e, this._content = t;
        var r = new Entry.BoxModel;
        if (this.box = r, Entry.Utils.isNumber(t.size)) this._width = t.size, this._height = t.size; else {
            var o = t.size || {};
            this._width = o.width || 0, this._height = o.height || 0
        }
        this._highlightColor = t.highlightColor || "#F59900", this._position = t.position, this.svgGroup = null, this._path = null, this._imgElement = null, this._index = n, this.setValue(null), this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldImage), Entry.FieldImage.prototype.renderStart = function () {
        this._block;
        var t = this._content.img;
        this._imgUrl = this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN ? t.replace(".png", "_un.png") : t;
        var e = {href: this._imgUrl, x: 0, y: -.5 * this._height, width: this._width, height: this._height};
        this._imgElement ? this._imgElement.attr(e) : this.svgGroup = this._imgElement = this._blockView.contentSvgGroup.elem("image", e), this.box.set({
            x: this._width,
            y: 0,
            width: this._width,
            height: this._height
        })
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldDropdownDynamic = function (t, e, n) {
        this._block = e.block, this._blockView = e;
        var r = new Entry.BoxModel;
        this.box = r, this.svgGroup = null, this._contents = t, this._index = n;
        var o = t.arrowColor;
        (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) && (o = e._fillColor), this._arrowColor = o;
        var a = this._contents.menuName;
        Entry.Utils.isFunction(a) ? this._menuGenerator = a : this._menuName = a, this._CONTENT_HEIGHT = this.getContentHeight(t.dropdownHeight), this._font_size = this.getFontSize(t.fontSize), this._ROUND = t.roundValue || 3, this.renderStart(e), e && e.getBoard() && e.getBoard().workspace && e.getBoard().workspace.changeEvent && e.getBoard().workspace.changeEvent.attach(this, this._updateValue)
    }, Entry.Utils.inherit(Entry.FieldDropdown, Entry.FieldDropdownDynamic), (r = Entry.FieldDropdownDynamic.prototype).constructor = Entry.FieldDropDownDynamic, r._updateValue = function () {
        var t = this._block.getCode().object, e = [];
        Entry.container && (e = this._menuName ? Entry.container.getDropdownList(this._menuName, t) : this._menuGenerator()), this._contents.options = e;
        var n = this.getValue();
        !this._blockView.isInBlockMenu && n && "null" != n || (n = 0 !== e.length ? e[0][1] : null), this._updateOptions(), this.setValue(n)
    }, r.renderOptions = function () {
        var t, e = this;
        this._block.view, this._attachDisposeEvent(), this.optionGroup = Entry.Dom("ul", {
            class: "entry-widget-dropdown",
            parent: $("body")
        }), this.optionGroup.bind("mousedown touchstart", function (t) {
            t.stopPropagation()
        }), t = this._menuName ? Entry.container.getDropdownList(this._contents.menuName) : this._menuGenerator(), this._contents.options = t, this._CONTENT_HEIGHT;
        for (var n = document.createDocumentFragment(), r = 0; r < t.length; r++) {
            var o = t[r], a = o[0] = this._convert(o[0], o[1]), s = o[1], i = Entry.Dom("li", {class: "rect"}),
                l = Entry.Dom("span", {class: "left", parent: i});
            Entry.Dom("span", {
                class: "right",
                parent: i
            }).text(a), this.getValue() == s && l.text("✓"), function (t, n) {
                i.mouseup(function (t) {
                    t.stopPropagation(), e.applyValue(n), e.destroyOption(void 0, !0), e._selectBlockView()
                })
            }(0, s), n.appendChild(i[0])
        }
        this.optionGroup[0].appendChild(n), this._position(), this.optionDomCreated()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldDropdown = function (t, e, n) {
        this._block = e.block, this._blockView = e;
        var r = new Entry.BoxModel;
        this.box = r, this.svgGroup = null, this._contents = t, this._noArrow = t.noArrow;
        var o = t.arrowColor;
        (this._block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this._block.emphasized) && (o = e._fillColor), this._arrowColor = o, this._index = n, this.setValue(this.getValue()), this._CONTENT_HEIGHT = this.getContentHeight(t.dropdownHeight), this._font_size = this.getFontSize(t.fontSize), this._ROUND = t.roundValue || 3, this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldDropdown), (r = Entry.FieldDropdown.prototype).renderStart = function () {
        var t = this._blockView, e = Entry.isMobile(), n = e ? 33 : 20, r = e ? 24 : 10, o = this._CONTENT_HEIGHT,
            a = this.getArrow();
        this.svgGroup || (this.svgGroup = t.contentSvgGroup.elem("g", {class: "entry-field-dropdown"})), this._header || (this._header = this.svgGroup.elem("rect", {
            height: o,
            y: -o / 2,
            rx: this._ROUND,
            ry: this._ROUND,
            fill: "#fff",
            "fill-opacity": .4
        })), this.textElement || (this.textElement = this.svgGroup.elem("text", {
            x: 5,
            style: "white-space: pre;",
            "font-size": +this._font_size + "px"
        })), this._noArrow || this._arrow || (this._arrow = this.svgGroup.elem("polygon", {
            points: a.points,
            fill: a.color,
            stroke: a.color
        })), this instanceof Entry.FieldDropdownDynamic && this._updateValue(), this._setTextValue();
        var s = this.getTextBBox();
        this.textElement.attr({y: .27 * s.height});
        var i = s.width + n;
        this._noArrow && (i -= r), this._header.attr({width: i}), this._noArrow || this._arrow.attr({transform: "translate(" + (i - a.width - 5) + "," + -a.height / 2 + ")"}), this._bindRenderOptions(), this.box.set({
            x: 0,
            y: 0,
            width: i,
            height: o
        })
    }, r.resize = function () {
        var t = Entry.isMobile(), e = t ? 33 : 20, n = t ? 24 : 10,
            r = this.textElement.getBoundingClientRect().width + e;
        if (this._noArrow) r -= n; else {
            var o = this.getArrow();
            this._arrow.attr({transform: "translate(" + (r - o.width - 5) + "," + -o.height / 2 + ")"})
        }
        this._header.attr({width: r}), this.box.set({width: r}), this._block.view.dAlignContent()
    }, r.renderOptions = function () {
        var t = this;
        this._block.view, this._attachDisposeEvent(), this.optionGroup = Entry.Dom("ul", {
            class: "entry-widget-dropdown",
            parent: $("body")
        }), this.optionGroup.bind("mousedown touchstart", function (t) {
            t.stopPropagation()
        });
        for (var e = this._contents.options, n = (this._CONTENT_HEIGHT, document.createDocumentFragment()), r = 0, o = e.length; r < o; r++) {
            var a = e[r], s = a[0] = this._convert(a[0], a[1]), i = a[1], l = Entry.Dom("li", {class: "rect"}),
                c = Entry.Dom("span", {class: "left", parent: l});
            Entry.Dom("span", {
                class: "right",
                parent: l
            }).text(s), this.getValue() == i && c.text("✓"), function (e, n) {
                l.bind("mouseup touchend", function (e) {
                    e.stopPropagation(), t.applyValue(n), t.destroyOption(void 0, !0), t._selectBlockView()
                })
            }(0, i), n.appendChild(l[0])
        }
        this.optionGroup[0].appendChild(n), this._position(), this.optionDomCreated()
    }, r._position = function () {
        var t = this.getAbsolutePosFromDocument();
        t.y += this.box.height / 2;
        var e = $(document).height(), n = this.optionGroup.height(), r = this.optionGroup.width() + 30;
        if (e < t.y + n + 30) {
            var o = this._blockView.getBoard().svgDom.height(), a = this.getAbsolutePosFromBoard();
            this._blockView.y < o / 2 ? (t.x += this.box.width / 2 - r / 2, o -= a.y + 30, this.optionGroup.height(o)) : (t.x += this.box.width + 1, (o -= o - a.y) - 30 < n && (o -= o % 30, this.optionGroup.height(o)), t.y -= this.optionGroup.height())
        } else t.x += this.box.width / 2 - r / 2;
        this.optionGroup.addClass("rendered"), this.optionGroup.css({
            left: t.x,
            top: t.y,
            width: r
        }), this.optionGroup.find(".right").width(r - 20)
    }, r.applyValue = function (t) {
        this.value != t && this.setValue(t), this._setTextValue(), this.resize()
    }, r.getTextByValue = function (t) {
        var e = /&value/gm;
        if (e.test(t)) return t.replace(e, "");
        if (!t && "number" != typeof t || "null" === t) return Lang.Blocks.no_target;
        for (var n = this._contents.options, r = 0, o = n.length; r < o; r++) {
            var a = n[r];
            if (a[1] == t) return a[0]
        }
        return this._shouldReturnValue(t) ? t : Lang.Blocks.no_target
    }, r.getContentHeight = function (t) {
        return t || this._blockView.getSkeleton().dropdownHeight || (Entry.isMobile() ? 22 : 16)
    }, r.getArrow = function () {
        var t = Entry.isMobile();
        return {
            color: this._arrowColor || this._blockView._schema.color,
            points: t ? "0,0 19,0 9.5,13" : "0,0 6.4,0 3.2,4.2",
            height: t ? 13 : 4.2,
            width: t ? 19 : 6.4
        }
    }, r._setTextValue = function () {
        var t = this.getTextByValue(this.getValue()), e = this._convert(t, this.getValue());
        this.getTextValue() !== e && (this.textElement.textContent = e)
    }, r.getTextValue = function () {
        return this.textElement.textContent
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldColor = function (t, e, n) {
        this._block = e.block, this._blockView = e;
        var r = new Entry.BoxModel;
        this.box = r, this.svgGroup = null, this._contents = t, this._index = n, this._position = t.position, this._fontSize = t.fontSize || e.getSkeleton().fontSize || 12, this._color = t.color || this._block.getSchema().fontColor || e.getSkeleton().color || "black", this.key = t.key, this.setValue(this.getValue() || "#FF0000"), this._CONTENT_HEIGHT = this.getContentHeight(), this._CONTENT_WIDTH = this.getContentWidth(), this.renderStart(e)
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldColor), (r = Entry.FieldColor.prototype).renderStart = function () {
        this.svgGroup && $(this.svgGroup).remove();
        var t, e, n, r, o = this._blockView;
        if (this._contents, this.svgGroup = o.contentSvgGroup.elem("g", {class: "entry-field-color"}), this._blockView.renderMode === Entry.BlockView.RENDER_MODE_TEXT) {
            var a = this.svgGroup.elem("rect", {x: 0, rx: 3, ry: 3, fill: "#fff", "fill-opacity": .4});
            this.textElement = this.svgGroup.elem("text").attr({
                style: "white-space: pre;",
                "font-size": this._fontSize + "px",
                "font-family": "nanumBarunRegular",
                class: "dragNone",
                fill: this._color
            }), this.textElement.textContent = this._convert(this.getValue(), this.getValue());
            var s = this.textElement.getBoundingClientRect();
            n = s.width + 12, r = s.height, a.attr({y: -r / 2, width: n, height: r}), this.textElement.attr({
                x: 6,
                y: .25 * s.height
            })
        } else {
            r = this._CONTENT_HEIGHT, n = this._CONTENT_WIDTH;
            var i = this._position;
            i ? (t = i.x || 0, e = i.y || 0) : (t = 0, e = -r / 2), this._header = this.svgGroup.elem("rect", {
                x: t,
                y: e,
                width: n,
                height: r,
                fill: this.getValue()
            })
        }
        this._bindRenderOptions(), this.box.set({x: t, y: e, width: n, height: r})
    }, r.renderOptions = function () {
        var t = this;
        this._block.view, this._attachDisposeEvent();
        var e = Entry.FieldColor.getWidgetColorList();
        this.optionGroup = Entry.Dom("table", {
            class: "entry-widget-color-table",
            parent: $("body")
        }), this.optionGroup.bind("mousedown touchstart", function (t) {
            t.stopPropagation()
        });
        for (var n = document.createDocumentFragment(), r = 0; r < e.length; r++) {
            var o = Entry.Dom("tr", {class: "entry-widget-color-row"});
            n.appendChild(o[0]);
            for (var a = 0; a < e[r].length; a++) {
                var s = Entry.Dom("td", {class: "entry-widget-color-cell", parent: o}), i = e[r][a];
                s.css({"background-color": i}), s.attr({"data-color-value": i}), function (e, n) {
                    s.mouseup(function (e) {
                        t.applyValue(n), t.destroyOption(), t._selectBlockView()
                    })
                }(0, i)
            }
        }
        this.optionGroup[0].appendChild(n);
        var l = this.getAbsolutePosFromDocument();
        l.y += this.box.height / 2 + 1, this.optionGroup.css({left: l.x, top: l.y}), this.optionDomCreated()
    }, r.applyValue = function (t) {
        this.value != t && (this.setValue(t), this._header ? this._header.attr({fill: t}) : this.textElement && (this.textElement.textContent = this._convert(this.getValue(), this.getValue())))
    }, r.getContentWidth = function () {
        return Entry.isMobile() ? 20 : 14.5
    }, Entry.FieldColor.getWidgetColorList = function () {
        return [["#FFFFFF", "#CCCCCC", "#C0C0C0", "#999999", "#666666", "#333333", "#000000"], ["#FFCCCC", "#FF6666", "#FF0000", "#CC0000", "#990000", "#660000", "#330000"], ["#FFCC99", "#FF9966", "#FF9900", "#FF6600", "#CC6600", "#993300", "#663300"], ["#FFFF99", "#FFFF66", "#FFCC66", "#FFCC33", "#CC9933", "#996633", "#663333"], ["#FFFFCC", "#FFFF33", "#FFFF00", "#FFCC00", "#999900", "#666600", "#333300"], ["#99FF99", "#66FF99", "#33FF33", "#33CC00", "#009900", "#006600", "#003300"], ["#99FFFF", "#33FFFF", "#66CCCC", "#00CCCC", "#339999", "#336666", "#003333"], ["#CCFFFF", "#66FFFF", "#33CCFF", "#3366FF", "#3333FF", "#000099", "#000066"], ["#CCCCFF", "#9999FF", "#6666CC", "#6633FF", "#6609CC", "#333399", "#330099"], ["#FFCCFF", "#FF99FF", "#CC66CC", "#CC33CC", "#993399", "#663366", "#330033"]]
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldBlock = function (t, e, n, r, o) {
        Entry.Model(this, !1), this._blockView = e, this._block = e.block, this._valueBlock = null, this._oldPrimitiveValue = null, this.box = new Entry.BoxModel, this.changeEvent = new Entry.Event(this), this._index = n, this.contentIndex = o, this._content = t, this.acceptType = t.accept, this._restoreCurrent = t.restore, this.view = this, this.svgGroup = null, this._position = t.position, this.observe(this, "_updateBG", ["magneting"], !1), this.renderStart(this.getBoard(), r)
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldBlock), (r = Entry.FieldBlock.prototype).schema = {magneting: !1}, r.getBoard = function () {
        var t = this._blockView;
        return t && t.getBoard()
    }, r.renderStart = function (t, e, n, r) {
        this.svgGroup || (this.svgGroup = this._blockView.contentSvgGroup.elem("g")), this.renderMode = void 0 !== e ? e : this._blockView.renderMode, this.view = this, this._nextGroup = this.svgGroup, this.updateValueBlock(this.getValue());
        var o = this._valueBlock.view;
        o.renderByMode(this.renderMode, r), this.getBoard().constructor !== Entry.Board && o.removeControl(), this.box.observe(this._blockView, "dAlignContent", ["width", "height"], !1)
    }, r.align = function (t, e, n) {
        n = void 0 === n || n;
        var r = this.svgGroup;
        this._position && (this._position.x && (t = this._position.x), this._position.y && (e = this._position.y));
        var o = this._valueBlock;
        if (o && o.view && (e = -.5 * o.view.height), t || e) {
            var a = "translate(" + t + "," + e + ")";
            n ? r.animate({transform: a}, 300, mina.easeinout) : r.attr({transform: a})
        } else r.removeAttr("transform");
        t = Math.round(100 * t) / 100, e = Math.round(100 * e) / 100;
        var s = this.box;
        s.x === t && s.y === e || s.set({x: t, y: e})
    }, r.calcWH = function () {
        var t, e, n = this._valueBlock, r = this.box, o = r.width, a = r.height, s = n && n.view;
        s ? (t = s.width, e = s.height) : (t = 15, e = 20), t !== o && r.set({width: t}), e !== a && r.set({height: e})
    }, r.calcHeight = r.calcWH, r.destroy = function () {
        this._valueBlock && this._valueBlock.destroyView()
    }, r.inspectBlock = function () {
        var t = null;
        if (this._originBlock) t = this._originBlock.type, delete this._originBlock; else if (this._content.defaultType) t = this._content.defaultType; else switch (this.acceptType.toLowerCase()) {
            case"boolean":
                t = "True";
                break;
            case"string":
                t = "text";
                break;
            case"param":
                t = "function_field_label"
        }
        return this._createBlockByType(t)
    }, r._setValueBlock = function (t) {
        return this._restoreCurrent && (this._originBlock = this._valueBlock), t || (t = this.inspectBlock()), this._valueBlock = t, this.setValue(t), t.setThread(this), this.view.setParent(this), this._valueBlock
    }, r.getValueBlock = function () {
        return this._valueBlock
    }, r.updateValueBlock = function (t) {
        if (t instanceof Entry.Block || (t = void 0), (t = this._ensureBlock(t)) && t === this._valueBlock) this.calcWH(); else {
            this._destroyObservers();
            var e = this._setValueBlock(t).view;
            e.bindPrev(this), this._blockView.alignContent(), this._posObserver = e.observe(this, "updateValueBlock", ["x", "y"], !1), this._sizeObserver = e.observe(this, "calcWH", ["width", "height"])
        }
    }, r._destroyObservers = function () {
        this._sizeObserver && this._sizeObserver.destroy(), this._posObserver && this._posObserver.destroy()
    }, r.getPrevBlock = function (t) {
        return this._valueBlock === t ? this : null
    }, r.getNextBlock = function () {
        return null
    }, r.requestAbsoluteCoordinate = function (t) {
        var e = (t = this._blockView).contentPos, n = t.getAbsoluteCoordinate();
        return n.x += this.box.x + e.x, n.y += this.box.y + e.y, n
    }, r.requestPartHeight = function (t, e) {
        return t ? t.magnet.next ? t.magnet.next.y : t.height : 0
    }, r.getCount = function () {
        return 0
    }, r.dominate = function () {
        this._blockView.dominate()
    }, r.isGlobal = function () {
        return !1
    }, r.separate = function (t) {
        this.getCode().createThread([t]), this.calcWH(), this.changeEvent.notify()
    }, r.getCode = function () {
        return this._block.thread.getCode()
    }, r.cut = function (t) {
        return this._valueBlock === t ? [t] : null
    }, r.replace = function (t) {
        "string" == typeof t && (t = this._createBlockByType(t));
        var e = this._valueBlock;
        Entry.block[e.type].isPrimitive ? (e.doNotSplice = !0, this._oldPrimitiveValue = e.getParam(0), e.destroy()) : "param" === this.acceptType ? (this._destroyObservers(), e.view._toGlobalCoordinate(), t.getTerminateOutputBlock().view._contents[1].replace(e)) : (this._destroyObservers(), e.view._toGlobalCoordinate(), Entry.do("separateBlockByCommand", e).isPass(!0), e.view.bumpAway(30, 150)), this.updateValueBlock(t), t.view._toLocalCoordinate(this.svgGroup), this.calcWH(), this.changeEvent.notify()
    }, r.setParent = function (t) {
        this._parent = t
    }, r.getParent = function () {
        return this._parent
    }, r._createBlockByType = function (t) {
        this._block.getThread();
        var e, n = this._blockView.getBoard(), r = n.workspace;
        if (r) {
            var o = r.selectedBlockView;
            e = !(!o || !o.dragInstance)
        }
        var a = new Entry.Block({
            type: t,
            params: [e ? void 0 : this._oldPrimitiveValue],
            copyable: "function_field_label" !== t
        }, this);
        return a.createView(n, this.renderMode), delete this._oldPrimitiveValue, a
    }, r.spliceBlock = function () {
        this.updateValueBlock()
    }, r._updateBG = function () {
        this.magneting ? this._bg = this.svgGroup.elem("path", {
            d: "m 8,12 l -4,0 -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2 l 4,0 z",
            fill: "#fff",
            stroke: "#fff",
            "fill-opacity": .7,
            transform: "translate(0,12)"
        }) : this._bg && (this._bg.remove(), delete this._bg)
    }, r.getThread = function () {
        return this
    }, r.pointer = function (t) {
        return (t = t || []).unshift(this._index), t.unshift(Entry.PARAM), this._block.pointer(t)
    }, r.isParamBlockType = function () {
        return !0
    }, r._ensureBlock = function (t) {
        if (t) return t.constructor !== Entry.Block && (t = new Entry.Block(t, this._block.thread)), t.getSchema() ? (t.view || (t.setThread(this), t.createView(this.getBoard(), this.renderMode), this.view.setParent(this)), t) : (this._destroyObservers(), void t.destroy())
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a;
    n(51), Entry.FieldAngle = function (t, e, n) {
        this._block = e.block, this._blockView = e, this.box = new Entry.BoxModel, this.svgGroup = null, this.position = t.position, this._contents = t, this._index = n;
        var r = this.getValue();
        this.setValue(this.modValue(void 0 !== r ? r : 90)), this._CONTENT_HEIGHT = this.getContentHeight(), this.renderStart()
    }, Entry.Utils.inherit(Entry.Field, Entry.FieldAngle), r = Entry.FieldAngle.prototype, o = 47.5, a = "M 0,0 v -47.5 A 47.5,47.5 0 %LARGE 1 %X,%Y z", r.renderStart = function (t, e) {
        this.svgGroup && $(this.svgGroup).remove();
        var n = this._blockView;
        this._contents, this.svgGroup = n.contentSvgGroup.elem("g", {class: "entry-input-field"}), this.textElement = this.svgGroup.elem("text", {
            x: 4,
            y: 4,
            "font-size": "11px"
        }), this._setTextValue();
        var r = this.getTextWidth(), o = this._CONTENT_HEIGHT,
            a = this.position && this.position.y ? this.position.y : 0;
        a -= o / 2, this._header = this.svgGroup.elem("rect", {
            x: 0,
            y: a,
            rx: 3,
            ry: 3,
            width: r,
            height: o,
            fill: "#fff",
            "fill-opacity": .4
        }), this.svgGroup.appendChild(this.textElement), this._bindRenderOptions(), this.box.set({
            x: 0,
            y: 0,
            width: r,
            height: o
        })
    }, r.renderOptions = function () {
        var t, e = this;
        this._block.view, this._attachDisposeEvent(function (t) {
            !0 !== t && e.applyValue(), e.destroyOption(t)
        }), this.optionGroup = Entry.Dom("input", {
            class: "entry-widget-input-field",
            parent: $("body")
        }), this.optionGroup.val(this.value), this.optionGroup.on("mousedown touchstart", function (t) {
            t.stopPropagation()
        }), this.optionGroup.on("keyup", function (t) {
            var n = t.keyCode || t.which;
            e.applyValue(t), [13, 27].indexOf(n) > -1 && e.destroyOption(void 0, !0)
        }), (t = this.getAbsolutePosFromDocument()).y -= this.box.height / 2, this.optionGroup.css({
            height: this._CONTENT_HEIGHT,
            left: t.x,
            top: t.y,
            width: e.box.width
        }), this.angleOptionGroup = this.appendSvgOptionGroup(), this.angleOptionGroup.elem("circle", {
            x: 0,
            y: 0,
            r: 50,
            class: "entry-field-angle-circle"
        });
        for (var n = this.angleOptionGroup.elem("g"), r = 0; r < 360; r += 15) n.elem("line", {
            x1: o,
            y1: 0,
            x2: o - (r % 45 == 0 ? 8.3 : 6),
            y2: 0,
            transform: "rotate(" + r + ", 0, 0)",
            class: "entry-angle-divider"
        });
        (t = this.getAbsolutePosFromBoard()).x = t.x + this.box.width / 2, t.y = t.y + this.box.height / 2 + o + 5, this.angleOptionGroup.attr({
            class: "entry-field-angle",
            transform: "translate(" + t.x + "," + t.y + ")"
        });
        var s = $(this.angleOptionGroup);
        s.bind("mousedown touchstart", function (t) {
            t.stopPropagation(), s.bind("mousemove.fieldAngle touchmove.fieldAngle", function (t) {
                e._updateByCoord(t)
            }), s.bind("mouseup touchend", function () {
                s.unbind(".fieldAngle")
            })
        }), this._fillPath = this.angleOptionGroup.elem("path", {
            d: a.replace("%X", 0).replace("%Y", 0).replace("%LARGE", 1),
            class: "entry-angle-fill-area"
        }), this.angleOptionGroup.elem("circle", {
            cx: 0,
            cy: 0,
            r: "1.5px",
            fill: "#333333"
        }), this._indicator = this.angleOptionGroup.elem("line", {
            x1: 0,
            y1: 0,
            x2: 0,
            y2: 0,
            class: "entry-angle-indicator"
        }), this._indicatorCap = this.angleOptionGroup.elem("circle", {
            cx: 0,
            cy: 0,
            r: "6px",
            fill: "#397dc6"
        }), this.updateGraph(), this.optionGroup.focus(), this.optionGroup.select(), this.optionDomCreated()
    }, r._updateByCoord = function (t) {
        t.originalEvent && t.originalEvent.touches && (t = t.originalEvent.touches[0]);
        var e = [t.clientX, t.clientY], n = this.getAbsolutePosFromDocument(),
            r = [n.x + this.box.width / 2, n.y + this.box.height / 2 + 1];
        this.optionGroup.val(this.modValue(function (t, e) {
            var n = e[0] - t[0], r = e[1] - t[1] - o - 1, a = Math.atan(-r / n);
            return a = 90 - (a = Entry.toDegrees(a)), n < 0 ? a += 180 : r > 0 && (a += 360), 15 * Math.round(a / 15)
        }(r, e))), this.applyValue()
    }, r.updateGraph = function () {
        var t = Entry.toRadian(this.getValue()), e = Math.sin(t), n = Math.cos(t), r = e * o, s = n * -o,
            i = t > Math.PI ? 1 : 0;
        this._fillPath.attr({d: a.replace("%X", r).replace("%Y", s).replace("%LARGE", i)}), this._indicator.attr({
            x1: 0,
            y1: 0,
            x2: r,
            y2: s
        }), r = e * (o - 6), s = -41.5 * n, this._indicatorCap.attr({cx: r, cy: s})
    }, r.applyValue = function () {
        var t = this.optionGroup.val();
        Entry.Utils.isNumber(t) && "" !== t && (t = this.modValue(t), this.setValue(t), this.updateGraph(), this.textElement.textContent = this.getValue(), this.optionGroup && this.optionGroup.val(t), this.resize())
    }, r.resize = function () {
        var t = this.getTextWidth();
        this._header.attr({width: t}), this.optionGroup && this.optionGroup.css({width: t}), this.box.set({width: t}), this._block.view.dAlignContent()
    }, r.getTextWidth = function () {
        return this.textElement ? this.getTextBBox().width + 8 : 8
    }, r.getText = function () {
        var t = this.getValue(), e = /&value/gm;
        return e.test(t) ? t.replace(e, "") : t + "°"
    }, r.modValue = function (t) {
        return /&value/gm.test(t) ? t : t % 360
    }, r.destroyOption = function (t, e) {
        this.disposeEvent && (this.disposeEvent.destroy(), delete this.documentDownEvent), this.optionGroup && (this.optionGroup.remove(), delete this.optionGroup), this.angleOptionGroup && (this.angleOptionGroup.remove(), delete this.angleOptionGroup), this._setTextValue(), !0 !== t && this.command(e)
    }, r._setTextValue = function () {
        this.textElement.textContent = this._convert(this.getText(), this.getValue())
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.ExtSideTag = function (t, e, n) {
        this.blockView = e, this.color = t.color ? t.color : "#EBC576", this.text = t.text ? t.text : "", this.height = t.height ? Number(t.height) : 31 * Number(t.count), this.render(), this.updatePos()
    }, (r = Entry.ExtSideTag.prototype).render = function () {
        this.svgGroup = this.blockView.svgGroup.elem("g"), $(this.svgGroup).bind("mousedown touchstart", function (t) {
            t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault()
        }), this.path = this.svgGroup.elem("path").attr({
            d: "m0,2 h-9 v" + (this.height - 4) + " h9",
            stroke: this.color,
            fill: "transparent",
            "stroke-width": "3"
        }), this.textElement = this.svgGroup.elem("text").attr({
            style: "white-space: pre;",
            "font-size": "10px",
            "font-family": "nanumBarunRegular",
            class: "dragNone",
            fill: "#000000"
        });
        var t = this.text.split("\n");
        this.tspans = t.map(function (t) {
            var e = this.textElement.elem("tspan").attr({dy: "1.2em", x: "0", class: "extension sideTagTspan"});
            return e.textContent = t, e
        }.bind(this))
    }, r.updatePos = function () {
        var t = this.blockView.block.pointer();
        this.positionX = 8 * -(t.length - 2), this.svgGroup.attr("transform", "translate(" + this.positionX + ",0)"), this.textElement.attr({y: this.height / 2 - 12 * (this.tspans.length - 1) - 2});
        var e = this.textElement.getBoundingClientRect();
        this.tspans.map(function (t) {
            t.attr({x: -e.width - 14})
        })
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.ExtGuide = function (t, e, n) {
        this.blockView = e, this.block = e.block, this.model = t.model ? t.model : [], this.render()
    }, (r = Entry.ExtGuide.prototype).render = function () {
        if (this.model) {
            var t = this.blockView.getBoard();
            this.svgGroup = this.blockView.svgGroup.elem("g", {class: "extension guideGroup"}), this.blockView.guideSvgGroup = this.svgGroup, $(this.svgGroup).bind("mousedown touchstart", function (t) {
                t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault()
            });
            var e = this.block.getCode();
            this.model[0].x = -99999, this.model[0].y = -99999;
            var n = e.createThread(this.model);
            !n.view && n.createView(t);
            var r = n.getFirstBlock().view.clone();
            r.removeAttribute("transform"), this.svgGroup.appendChild(r), this.updatePos(), this.block.getThread().view.setHasGuide(!0), n.destroy(!1)
        }
    }, r.updatePos = function () {
        this.svgGroup.attr("transform", this._getTransform())
    }, r._getTransform = function () {
        return "translate(0,%y)".replace("%y", this.blockView.magnet.next.y)
    }
}, function (t, e, n) {
    "use strict";
    Entry.BlockExtension = function (t, e) {
    }, Entry.BlockExtension.prototype
}, function (t, e, n) {
    "use strict";
    var r, o;
    (r = Entry.Command)[(o = Entry.STATIC.COMMAND_TYPES).sceneAdd] = {
        do: function (t) {
            Entry.scene.addScene()
        }, state: function (t) {
            return [t = t]
        }, log: function () {
            return []
        }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "sceneRemove"
    }, r[o.sceneRemove] = {
        do: function (t) {
        }, state: function (t) {
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "sceneAdd"
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    r = Entry.Command, o = Entry.STATIC.COMMAND_TYPES, r[o.variableContainerSelectFilter] = {
        do: function (t, e) {
            Entry.variableContainer.selectFilter(t)
        },
        state: function (t, e) {
            return [e, t]
        },
        log: function (t, e) {
            return [["newType", t], ["oldType", e = e || "all"]]
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: "variableContainerSelectFilter",
        dom: ["variableContainer", "filter", "&0"]
    }, r[o.variableContainerClickVariableAddButton] = {
        do: function () {
            Entry.variableContainer.clickVariableAddButton()
        },
        state: function () {
            return []
        },
        log: function () {
            return []
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: "variableContainerClickVariableAddButton",
        dom: ["variableContainer", "variableAddButton"]
    }, r[o.variableContainerAddVariable] = {
        do: function (t) {
            var e = r[o.variableContainerAddVariable], n = e.hashId;
            n && (t.id_ = n, delete e.hashId), Entry.variableContainer.addVariable(t)
        },
        state: function (t) {
            t instanceof Entry.Variable && (t = t.toJSON());
            var e = r[o.variableContainerAddVariable].hashId;
            return e && (t.id = e), [t]
        },
        log: function (t) {
            return t instanceof Entry.Variable && (t = t.toJSON()), [["variable", t]]
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: !1,
        undo: "variableContainerRemoveVariable",
        restrict: function (t, e, n) {
            Entry.variableContainer.clickVariableAddButton(!0, !0), $(".entryVariableAddSpaceInputWorkspace").val(t.content[1][1].name), this.hashId = t.content[1][1].id;
            var r = new Entry.Tooltip([{title: t.tooltip.title, content: t.tooltip.content, target: e}], {
                restrict: !0,
                dimmed: !0,
                callBack: n
            });
            return n(), r
        },
        dom: ["variableContainer", "variableAddConfirmButton"]
    }, r[o.variableAddSetName] = {
        do: function (t) {
            var e = r[o.variableAddSetName], n = $(".entryVariableAddSpaceInputWorkspace");
            n[0].blurred = !0, n.blur(), t = e._nextValue || t, n.val(t), delete e._nextValue
        },
        state: function (t) {
            return [""]
        },
        log: function (t) {
            return [["value", r[o.variableAddSetName]._nextValue || t]]
        },
        restrict: function (t, e, n) {
            return Entry.variableContainer.clickVariableAddButton(!0), this._nextValue = t.content[1][1], $(".entryVariableAddSpaceInputWorkspace")[0].enterKeyDisabled = !0, new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {restrict: !0, noDispose: !0, dimmed: !0, callBack: n})
        },
        validate: !1,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: "variableAddSetName",
        dom: ["variableContainer", "variableAddInput"]
    }, r[o.variableContainerRemoveVariable] = {
        do: function (t) {
            Entry.variableContainer.removeVariable(t)
        },
        state: function (t) {
            return t instanceof Entry.Variable && (t = t.toJSON()), [t]
        },
        log: function (t) {
            return t instanceof Entry.Variable && (t = t.toJSON()), [["variable", t]]
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: !1,
        undo: "variableContainerAddVariable",
        dom: ["variableContainer", "variableAddConfirmButton"]
    }
}, function (t, e, n) {
    "use strict";
    Entry.Command[Entry.STATIC.COMMAND_TYPES.editText] = {
        do: function (t, e) {
            Entry.playground.object.setText(t), Entry.playground.object.entity.setText(t), Entry.dispatchEvent("textEdited")
        }, state: function (t, e) {
            return [e, t]
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "editText"
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    (r = Entry.Command)[(o = Entry.STATIC.COMMAND_TYPES).playgroundChangeViewMode] = {
        do: function (t, e) {
            Entry.playground.changeViewMode(t)
        },
        state: function (t, e) {
            return [e, t]
        },
        log: function (t, e) {
            return [["newType", t], ["oldType", e = e || "code"]]
        },
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        undo: "playgroundChangeViewMode",
        dom: ["playground", "tabViewElements", "&0"]
    }, r[o.playgroundClickAddPicture] = {
        do: function () {
            Entry.dispatchEvent("openPictureManager")
        }, state: function () {
            return []
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, restrict: function (t, e, n, r) {
            return Entry.dispatchEvent("dismissModal"), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {restrict: !0, dimmed: !0, callBack: n})
        }, undo: "playgroundClickAddPictureCancel", dom: ["playground", "pictureAddButton"]
    }, r[o.playgroundClickAddPictureCancel] = {
        do: function () {
            Entry.dispatchEvent("dismissModal")
        }, state: function () {
            return []
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "", dom: ["playground", "pictureAddButton"]
    }, r[o.playgroundClickAddSound] = {
        do: function () {
            Entry.dispatchEvent("openSoundManager")
        }, state: function () {
            return []
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, restrict: function (t, e, n, r) {
            return Entry.dispatchEvent("dismissModal"), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {restrict: !0, dimmed: !0, callBack: n})
        }, undo: "playgroundClickAddSoundCancel", dom: ["playground", "soundAddButton"]
    }, r[o.playgroundClickAddSoundCancel] = {
        do: function () {
            Entry.dispatchEvent("dismissModal")
        }, state: function () {
            return []
        }, log: function () {
            return []
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "", dom: ["playground", "soundAddButton"]
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    (r = Entry.Command)[(o = Entry.STATIC.COMMAND_TYPES).editPicture] = {
        do: function (t, e) {
            Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo()
        }, state: function (t) {
        }, log: function (t) {
            return [t]
        }, recordable: Entry.STATIC.RECORDABLE.SKIP, undo: "uneditPicture"
    }, r[o.uneditPicture] = {
        type: Entry.STATIC.COMMAND_TYPES.uneditPicture, do: function (t, e) {
            Entry.playground.painter.lc.undo()
        }, state: function (t) {
        }, log: function (t) {
            return [t]
        }, recordable: Entry.STATIC.RECORDABLE.SKIP, undo: "editPicture"
    }, r[o.processPicture] = {
        do: function (t, e) {
            Entry.playground.painter.lc.canRedo() && Entry.playground.painter.lc.redo()
        }, state: function (t) {
        }, log: function (t) {
            return [t]
        }, recordable: Entry.STATIC.RECORDABLE.SKIP, undo: "unprocessPicture", isPass: !0
    }, r[o.unprocessPicture] = {
        do: function (t, e) {
            Entry.playground.painter.lc.undo()
        }, state: function (t) {
        }, log: function (t) {
            return [t]
        }, recordable: Entry.STATIC.RECORDABLE.SKIP, undo: "processPicture", isPass: !0
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    r = Entry.Command, o = Entry.STATIC.COMMAND_TYPES, r[o.selectObject] = {
        do: function (t) {
            return Entry.container.selectObject(t)
        }, state: function (t) {
            var e = Entry.playground;
            if (e && e.object) return [e.object.id]
        }, log: function (t) {
            return [t]
        }, undo: "selectObject"
    }, r[o.objectEditButtonClick] = {
        do: function (t) {
            Entry.container.getObject(t).toggleEditObject()
        },
        state: function (t) {
            return []
        },
        log: function (t) {
            return [["objectId", t], ["objectIndex", Entry.container.getObjectIndex(t)]]
        },
        skipUndoStack: !0,
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ["container", "objectIndex", "&1", "editButton"],
        undo: "selectObject"
    }, r[o.objectAddPicture] = {
        do: function (t, e) {
            var n = r[o.objectAddPicture].hashId;
            n && (e.id = n, delete r[o.objectAddPicture].hashId), Entry.container.getObject(t).addPicture(e), Entry.playground.injectPicture(), Entry.playground.selectPicture(e), Entry.dispatchEvent("dismissModal")
        }, state: function (t, e) {
            return [t, e]
        }, log: function (t, e) {
            var n = {};
            return n._id = e._id, n.id = e.id, n.dimension = e.dimension, n.filename = e.filename, n.fileurl = e.fileurl, n.name = e.name, n.scale = e.scale, [["objectId", t], ["picture", n]]
        }, dom: [".btn_confirm_modal"], restrict: function (t, e, n) {
            this.hashId = t.content[2][1].id;
            var r = new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: ".btn_confirm_modal"
            }], {restrict: !0, dimmed: !0, render: !1, callBack: n}), o = Entry.getMainWS().widgetUpdateEvent;
            return t.skip || Entry.dispatchEvent("openPictureManager", t.content[2][1]._id, o.notify.bind(o)), r
        }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, validate: !1, undo: "objectRemovePicture"
    }, r[o.objectRemovePicture] = {
        do: function (t, e) {
            Entry.container.getObject(t).removePicture(e.id)
        }, state: function (t, e) {
            return [t, e]
        }, log: function (t, e) {
            return [["objectId", t], ["pictureId", e._id]]
        }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, validate: !1, undo: "objectAddPicture"
    }, r[o.objectAddSound] = {
        do: function (t, e) {
            var n = r[o.objectAddSound].hashId;
            n && (e.id = n, delete r[o.objectAddSound].hashId), Entry.container.getObject(t).addSound(e), Entry.dispatchEvent("dismissModal")
        }, state: function (t, e) {
            return [t, e]
        }, log: function (t, e) {
            var n = {};
            return n._id = e._id, n.duration = e.duration, n.ext = e.ext, n.id = e.id, n.filename = e.filename, n.fileurl = e.fileurl, n.name = e.name, [["objectId", t], ["sound", n]]
        }, dom: [".btn_confirm_modal"], restrict: function (t, e, n) {
            this.hashId = t.content[2][1].id;
            var r = new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: ".btn_confirm_modal"
            }], {callBack: n, dimmed: !0, restrict: !0, render: !1}), o = Entry.getMainWS().widgetUpdateEvent;
            return t.skip || Entry.dispatchEvent("openSoundManager", t.content[2][1]._id, o.notify.bind(o)), r
        }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, validate: !1, undo: "objectRemoveSound"
    }, r[o.objectRemoveSound] = {
        do: function (t, e) {
            return Entry.container.getObject(t).removeSound(e.id)
        },
        state: function (t, e) {
            return [t, e]
        },
        log: function (t, e) {
            return [["objectId", t], ["soundId", e._id]]
        },
        dom: [".btn_confirm_modal"],
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        validate: !1,
        undo: "objectAddSound"
    }, r[o.objectNameEdit] = {
        do: function (t, e) {
            return Entry.container.getObject(t).setName(e)
        }, state: function (t, e) {
            return [t, Entry.container.getObject(t).getName(), e]
        }, log: function (t, e) {
            return [["objectId", t], ["newName", e], ["oldName", Entry.container.getObject(t).getName()]]
        }, dom: [], recordable: Entry.STATIC.RECORDABLE.SKIP, validate: !1, undo: "objectNameEdit"
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    (r = Entry.Command)[(o = Entry.STATIC.COMMAND_TYPES).toggleRun] = {
        do: function (t) {
            Entry.engine.toggleRun()
        }, state: function () {
            return []
        }, log: function (t) {
            return [["callerName", t]]
        }, restrict: function (t, e, n, r) {
            var o = Entry.engine;
            return o.isState("stop") || o.toggleStop(), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {
                dimmed: !0, restrict: !0, callBack: function (t) {
                }
            })
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "toggleStop", dom: ["engine", "&0"]
    }, r[o.toggleStop] = {
        do: function (t) {
            Entry.engine.toggleStop()
        }, state: function () {
            return []
        }, log: function (t) {
            return [["callerName", t]]
        }, restrict: function (t, e, n, r) {
            var o = Entry.engine;
            return Entry.engine.popup && Entry.engine.closeFullScreen(), o.isState("run") || o.toggleRun(!1), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {
                dimmed: !0, restrict: !0, callBack: function (t) {
                    n()
                }
            })
        }, validate: !1, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "toggleRun", dom: ["engine", "&0"]
    }
}, function (t, e, n) {
    "use strict";
    Entry.Command[Entry.STATIC.COMMAND_TYPES.containerSelectObject] = {
        do: function (t) {
            Entry.container.selectObject(t)
        },
        state: function (t) {
            return [Entry.playground.object.id, t]
        },
        log: function (t) {
            return [["objectId", t], ["objectIndex", Entry.container.getObjectIndex(t)]]
        },
        restrict: function (t, e, n, r) {
            return Entry.container.scrollToObject(t.content[1][1]), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {
                dimmed: !0, restrict: !0, callBack: function () {
                    n()
                }
            })
        },
        undo: "containerSelectObject",
        recordable: Entry.STATIC.RECORDABLE.SUPPORT,
        dom: ["container", "objectIndex", "&1"]
    }
}, function (t, e, n) {
    "use strict";
    !function (t) {
        var e, n = Entry.STATIC.COMMAND_TYPES;

        function r(e, n, r) {
            return t[e] = Entry.cloneSimpleObject(t[n]), r && r instanceof Array && r.forEach(function (n) {
                t[e][n[0]] = n[1]
            }), t[e]
        }

        t[n.addThread] = {
            do: function (t, e) {
                return this.editor.board.code.createThread(t, e)
            },
            state: function (t, e) {
                return void 0 !== e && null !== e || (e = this.editor.board.code.getThreadCount()), [e]
            },
            log: function (t, e) {
                return t instanceof Entry.Thread && (t = t.toJSON()), [["blocks", t], ["index", e]]
            },
            undo: "destroyThread",
            recordable: Entry.STATIC.RECORDABLE.SUPPORT,
            validate: !1,
            dom: ["playground", "blockMenu", "&0"]
        }, (e = Entry.cloneSimpleObject(t[n.addThread])).showMe = function (t) {
            if (!t.isTooltipFaded()) {
                t.fadeOutTooltip();
                var e, r = Entry.getDom(t.processDomQuery(this.dom)), o = t.requestNextData().content;
                e = o[0] === n.moveBlockFromBlockMenu ? ["playground", "board", "coord", "&1", "&2"] : ["playground", "board", "&1", "magnet", "next", 0];
                var a = Entry.getDom(t.processDomQuery(e, o)).getBoundingClientRect();
                Entry.Utils.glideBlock(r, a.left, a.top, function () {
                    t.fadeInTooltip()
                })
            }
        }, e.followCmd = !0, e.restrict = function (t, e, n, r) {
            var o = r.requestNextData().content;
            return o[0] === Entry.STATIC.COMMAND_TYPES.insertBlockFromBlockMenu && Entry.Command.editor.board.scrollToPointer(o[2][1]), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {dimmed: !0, restrict: !0, callBack: n})
        }, t[n.addThreadFromBlockMenu] = e, t[n.destroyThread] = {
            do: function (t) {
                t instanceof Entry.Thread || (t = this.editor.board.code.getThread(t)), t.getFirstBlock().destroy(!0, !0)
            }, state: function (t) {
                t instanceof Entry.Thread || (t = this.editor.board.code.getThread(t));
                var e = this.editor.board.code.getThreadIndex(t);
                return [t.toJSON(), e]
            }, log: function (t) {
                return t instanceof Entry.Thread && (t = this.editor.board.code.getThreadIndex(t)), [["index", t]]
            }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, restrict: function (t, e, n) {
                n()
            }, validate: !1, undo: "addThread"
        }, t[n.destroyBlock] = {
            do: function (t) {
                (t = this.editor.board.findBlock(t)).doDestroy()
            }, state: function (t) {
                var e = !1, n = (t = this.editor.board.findBlock(t)).targetPointer(), r = t.toJSON();
                return 3 === n.length && (1 === t.thread.getCount() ? e = !0 : n.push(-1)), "output" === t.getBlockType() && (r.params[1] = void 0), [r, n, e]
            }, log: function (t) {
                return [["block", (t = this.editor.board.findBlock(t)).pointer ? t.pointer() : t]]
            }, undo: "recoverBlock"
        }, t[n.recoverBlock] = {
            do: function (t, e, n) {
                if (n) return this.editor.board.code.createThread([t], e[2]);
                var r = this.editor.board.code.createThread([t]).getFirstBlock();
                this.editor.board.insert(r, e)
            }, state: function (t) {
                return "string" != typeof t && (t = t.id), [t]
            }, log: function (t, e) {
                return [["block", t = this.editor.board.findBlock(t.id)], ["pointer", e]]
            }, undo: "destroyBlock"
        }, t[n.insertBlock] = {
            do: function (t, e, n) {
                t = this.editor.board.findBlock(t), this.editor.board.insert(t, e, n)
            }, state: function (t, e, n) {
                var r = [t = this.editor.board.findBlock(t), t.targetPointer()];
                return "string" != typeof t && "basic" === t.getBlockType() ? r.push(t.thread.getCount(t)) : "string" != typeof t && "output" === t.getBlockType() && r.push(n || t.getOutputBlockCount() + 1), r
            }, log: function (t, e, n) {
                t = this.editor.board.findBlock(t), e instanceof Array || (e = e.pointer());
                var r = [["block", t ? t.pointer() : ""], ["targetPointer", e]];
                return n && r.push(["count", n || null]), r
            }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "insertBlock", restrict: function (t, e, n, r) {
                var o, a = Entry.Command.editor.board, s = a.code.getByPointer(t.content[1][1]);
                a.scrollToPointer(t.content[1][1]), r.toolTipRender && (r.toolTipRender.titleIndex = 0, r.toolTipRender.contentIndex = 0);
                var i = t.tooltip.isDefault, l = !1, c = new Entry.Tooltip([{
                    title: t.tooltip.title,
                    content: t.tooltip.content,
                    target: e
                }], {
                    dimmed: !0, restrict: !0, callBack: function (e) {
                        if (!l && e) {
                            l = !0, n();
                            var u = a.scrollToPointer(t.content[2][1]);
                            if (s && (o = s.view), o && (o = o.getSvgRoot().blockView) && u && o.moveBy(-u[0], -u[1]), r.toolTipRender.titleIndex = 1, r.toolTipRender) if (i) {
                                var p = Entry.Command.editor.board.code.getTargetByPointer(t.content[2][1]);
                                p && p.isParamBlockType() ? r.toolTipRender.contentIndex = 2 : r.toolTipRender.contentIndex = 1
                            } else r.toolTipRender.contentIndex = 1;
                            var _ = r.processDomQuery(["playground", "board", "&1", "magnet"]);
                            c.init([{title: t.tooltip.title, content: t.tooltip.content, target: _}], {
                                indicator: !0,
                                callBack: function () {
                                }
                            })
                        }
                    }
                });
                return c
            }, showMe: function (t) {
                if (!t.isTooltipFaded()) {
                    t.fadeOutTooltip();
                    var e = Entry.getDom(t.processDomQuery(this.dom)),
                        n = Entry.getDom(t.processDomQuery(["playground", "board", "&1", "magnet", "next", 0])).getBoundingClientRect();
                    Entry.Utils.glideBlock(e, n.left, n.top, function () {
                        t.fadeInTooltip()
                    })
                }
            }, dom: ["playground", "board", "&0"]
        }, (e = Entry.cloneSimpleObject(t[n.insertBlock])).followCmd = !0, t[n.insertBlockFollowSeparate] = e, (e = Entry.cloneSimpleObject(t[n.insertBlock])).restrict = function (t, e, n, r) {
            if (r.toolTipRender && r.toolTipRender) {
                var o = Entry.Command.editor.board.code.getByPointer(t.content[2][1]);
                !o || o.isParamBlockType() ? r.toolTipRender.contentIndex = 1 : r.toolTipRender.contentIndex = 0
            }
            return n(), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {
                indicator: !0, callBack: function () {
                }
            })
        }, e.dom = ["playground", "board", "&1", "magnet"], t[n.insertBlockFromBlockMenu] = e, (e = Entry.cloneSimpleObject(t[n.insertBlockFromBlockMenu])).followCmd = !0, t[n.insertBlockFromBlockMenuFollowSeparate] = e, t[n.separateBlock] = {
            do: function (t, e, n) {
                t = this.editor.board.findBlock(t), "number" == typeof n && (t.view._moveTo(e, n), e = void 0), e = void 0 === e ? Entry.DRAG_MODE_DRAG : e, t.view && t.view._toGlobalCoordinate(e), t.doSeparate()
            }, state: function (t) {
                var e = [t = this.editor.board.findBlock(t)], n = t.targetPointer();
                return e.push(n), "basic" === t.getBlockType() && e.push(t.thread.getCount(t)), e
            }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, log: function (t) {
                var e = (t = this.editor.board.findBlock(t)).pointer();
                return t.view && (t = t.view), [["block", e], ["x", t.x], ["y", t.y]]
            }, restrict: function (t, e, n, r) {
                Entry.Command.editor.board.scrollToPointer(t.content[1][1]);
                var o = !1;
                r.toolTipRender && (r.toolTipRender.titleIndex = 0, r.toolTipRender.contentIndex = 0);
                var a = new Entry.Tooltip([{
                    title: t.tooltip.title,
                    content: t.tooltip.content,
                    target: e
                }], {
                    dimmed: !0, restrict: !0, callBack: function (e) {
                        !o && e && (r.toolTipRender && (r.toolTipRender.titleIndex = 1, r.toolTipRender.contentIndex = 1), n(), o = !0, a.init([{
                            title: t.tooltip.title,
                            content: t.tooltip.content,
                            target: r.processDomQuery(["playground", "board", "coord", "&1", "&2"])
                        }], {
                            indicator: !0, callBack: function () {
                                n()
                            }
                        }))
                    }
                });
                return a
            }, undo: "insertBlock", dom: ["playground", "board", "&0"]
        }, (e = Entry.cloneSimpleObject(t[n.separateBlock])).restrict = function (t, e, n, r) {
            Entry.Command.editor.board.scrollToPointer(t.content[1][1]);
            var o = !1;
            r.toolTipRender && (r.toolTipRender.titleIndex = 0, r.toolTipRender.contentIndex = 0);
            var a = new Entry.Tooltip([{title: t.tooltip.title, content: t.tooltip.content, target: e}], {
                dimmed: !0,
                restrict: !0,
                callBack: function (e) {
                    !o && e && (n(), r.toolTipRender && (r.toolTipRender.titleIndex = 1, r.toolTipRender.contentIndex = 1), o = !0, a.init([{
                        title: t.tooltip.title,
                        content: t.tooltip.content,
                        target: ["playground", "board", "trashcan"]
                    }], {
                        indicator: !0, callBack: function () {
                            n()
                        }
                    }))
                }
            });
            return a
        }, e.showMe = function (t) {
            if (!t.isTooltipFaded()) {
                t.fadeOutTooltip();
                var e = Entry.getDom(t.processDomQuery(this.dom)),
                    n = Entry.getDom(["playground", "board", "trashcan"]).getBoundingClientRect();
                Entry.Utils.glideBlock(e, n.left, n.top, function () {
                    t.fadeInTooltip()
                })
            }
        }, e.followCmd = !0, t[n.separateBlockForDestroy] = e, t[n.moveBlock] = {
            do: function (t, e, n) {
                void 0 !== e ? (t = this.editor.board.findBlock(t)).moveTo(e, n) : t._updatePos()
            }, state: function (t) {
                return [t = this.editor.board.findBlock(t), t.x, t.y]
            }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, restrict: function (t, e, n, r) {
                var o = !1, a = new Entry.Tooltip([{
                    title: t.tooltip.title,
                    content: t.tooltip.content,
                    target: e
                }], {
                    dimmed: !0, restrict: !0, callBack: function (e) {
                        !o && e && (o = !0, n(), a.init([{
                            title: t.tooltip.title,
                            content: t.tooltip.content,
                            target: r.processDomQuery(["playground", "board", "coord", "&1", "&2"])
                        }], {
                            indicator: !0, callBack: function () {
                            }
                        }))
                    }
                });
                return a
            }, validate: !1, log: function (t, e, n) {
                return [["block", (t = this.editor.board.findBlock(t)).pointer()], ["x", t.view.x], ["y", t.view.y]]
            }, undo: "moveBlock", dom: ["playground", "board", "&0"]
        }, (e = Entry.cloneSimpleObject(t[n.moveBlock])).followCmd = !0, e.restrict = function (t, e, n, r) {
            Entry.Command.editor.board.scrollToPointer(t.content[1][1]);
            var o = !1;
            r.toolTipRender && (r.toolTipRender.titleIndex = 0, r.toolTipRender.contentIndex = 0);
            var a = new Entry.Tooltip([{title: t.tooltip.title, content: t.tooltip.content, target: e}], {
                dimmed: !0,
                restrict: !0,
                callBack: function (e) {
                    !o && e && (o = !0, n(), r.toolTipRender && (r.toolTipRender.titleIndex = 1, r.toolTipRender.contentIndex = 1), a.init([{
                        title: t.tooltip.title,
                        content: t.tooltip.content,
                        target: ["playground", "board", "trashcan"]
                    }], {
                        indicator: !0, callBack: function () {
                            n()
                        }
                    }))
                }
            });
            return a
        }, t[n.moveBlockForDestroy] = e, (e = Entry.cloneSimpleObject(t[n.moveBlock])).restrict = function (t, e, n) {
            return n(), new Entry.Tooltip([{
                title: t.tooltip.title,
                content: t.tooltip.content,
                target: e
            }], {
                callBack: function () {
                }
            })
        }, e.dom = ["playground", "board", "coord", "&1", "&2"], t[n.moveBlockFromBlockMenu] = e, r(n.cloneBlock, n.addThread, [["undo", "uncloneBlock"], ["dom", void 0]]), r(n.uncloneBlock, n.destroyThread, [["undo", "cloneBlock"]]), t[n.scrollBoard] = {
            do: function (t, e, n) {
                n || this.editor.board.scroller._scroll(t, e), delete this.editor.board.scroller._diffs
            }, state: function (t, e) {
                return [-t, -e]
            }, log: function (t, e) {
                return [["dx", t], ["dy", e]]
            }, recordable: Entry.STATIC.RECORDABLE.SKIP, undo: "scrollBoard"
        }, t[n.setFieldValue] = {
            do: function (t, e, n) {
                var r;
                (r = n ? n.getByPointer(t) : this.editor.board.findBlock(t)).setValue(e, !0), Entry.disposeEvent.notify(!0), r._blockView.disableMouseEvent = !1
            },
            state: function (t, e, n) {
                var r;
                return [t, (r = n ? n.getByPointer(t) : this.editor.board.findBlock(t))._startValue || r.getValue()]
            },
            log: function (t, e) {
                return [["pointer", t], ["value", e]]
            },
            restrict: function (t, e, n, r) {
                var o = !1, a = t.tooltip.isDefault;
                Entry.Command.editor.board.scrollToPointer(t.content[1][1]);
                var s = Entry.Command.editor.board.findBlock(t.content[1][1]), i = s._blockView;
                i.disableMouseEvent = !0;
                var l = s.getFieldRawType();
                if (r.toolTipRender) if (a) switch (l) {
                    case"textInput":
                        r.toolTipRender.contentIndex = 0;
                        break;
                    case"dropdown":
                    case"dropdownDynamic":
                        r.toolTipRender.contentIndex = 1;
                        break;
                    case"keyboard":
                        r.toolTipRender.contentIndex = 2
                } else r.toolTipRender.contentIndex = 0;
                var c = t.content[2][1];
                s instanceof Entry.FieldTextInput && s.fixNextValue(c);
                var u = new Entry.Tooltip([{
                    title: t.tooltip.title,
                    content: t.tooltip.content,
                    direction: "left",
                    target: e
                }], {
                    dimmed: !0, restrict: !0, callBack: function (e) {
                        if (!o && e) {
                            if (o = !0, n(), n(), r.toolTipRender.replaceContent(/&value&/gi, s.getTextValueByValue(c)), r.toolTipRender) if (a) switch (l) {
                                case"textInput":
                                    r.toolTipRender.contentIndex = 3;
                                    break;
                                case"dropdown":
                                case"dropdownDynamic":
                                    r.toolTipRender.contentIndex = 4;
                                    break;
                                case"keyboard":
                                    r.toolTipRender.contentIndex = 5
                            } else r.toolTipRender.titleIndex = 1, r.toolTipRender.contentIndex = 1;
                            u.init([{
                                title: t.tooltip.title,
                                content: t.tooltip.content,
                                target: r.processDomQuery(["playground", "board", "&0", "option"])
                            }], {
                                dimmed: !0, restrict: !0, callBack: function () {
                                    i.disableMouseEvent = !1
                                }
                            })
                        }
                    }
                });
                return u
            },
            disableMouseUpDispose: !0,
            recordable: Entry.STATIC.RECORDABLE.SUPPORT,
            dom: ["playground", "board", "&0"],
            undo: "setFieldValue"
        }, t[n.selectBlockMenu] = {
            do: function (t, e, n) {
                var r = Entry.getMainWS().blockMenu;
                r.selectMenu(t, e, n), r.align()
            },
            state: function (t, e, n) {
                return [Entry.getMainWS().blockMenu.lastSelector, e, n]
            },
            log: function (t, e, n) {
                return [["selector", t]]
            },
            skipUndoStack: !0,
            recordable: Entry.STATIC.RECORDABLE.SUPPORT,
            dom: ["playground", "blockMenu", "category", "&0"],
            undo: "selectBlockMenu"
        }, t[n.destroyThreads] = {
            do: function () {
                this.editor.board.code.getThreads().filter(function (t) {
                    return t.getFirstBlock().isDeletable()
                }).forEach(function (t) {
                    t.destroy()
                })
            }, state: function () {
                return [this.editor.board.code.getThreads().filter(function (t) {
                    return t.getFirstBlock().isDeletable()
                }).map(function (t) {
                    return t.toJSON()
                })]
            }, log: function () {
                return []
            }, undo: "addThreads"
        }, t[n.addThreads] = {
            do: function (t) {
                var e = this.editor.board.code;
                t.forEach(function (t) {
                    e.createThread(t)
                })
            }, state: function () {
                return []
            }, log: function () {
                return []
            }, undo: "destroyThreads"
        }, t[n.destroyBlockBelow] = {
            do: function (t) {
                (t = this.editor.board.findBlock(t)).doDestroyBelow(!0)
            }, state: function (t) {
                var e = (t = this.editor.board.findBlock(t)).thread;
                return [e instanceof Entry.Thread ? e.toJSON(!1, t) : [t.toJSON()], t.targetPointer()]
            }, log: function (t) {
                return []
            }, recordable: Entry.STATIC.RECORDABLE.SUPPORT, undo: "recoverBlockBelow"
        }, t[n.recoverBlockBelow] = {
            do: function (t, e) {
                var n = this.editor.board;
                t = n.code.createThread(t), n.insert(t.getFirstBlock(), e)
            }, state: function (t, e) {
                return [t[0]]
            }, log: function (t, e) {
                return []
            }, undo: "destroyBlockBelow"
        }, r(n.separateBlockByCommand, n.separateBlock)
    }(Entry.Command)
}, function (t, e, n) {
    "use strict";
    Entry.Youtube = function (t) {
        this.generateView(t)
    };
    var r = Entry.Youtube.prototype;
    r.init = function (t) {
        this.youtubeHash = t, this.generateView()
    }, r.generateView = function (t) {
        var e = Entry.createElement("div");
        e.addClass("entryContainerMovieWorkspace"), e.addClass("entryRemove"), this.movieContainer = e, this.movieContainer;
        var n = Entry.createElement("iframe");
        n.setAttribute("id", "youtubeIframe"), n.setAttribute("allowfullscreen", ""), n.setAttribute("frameborder", 0), n.setAttribute("src", "https://www.youtube.com/embed/" + t), this.movieFrame = n, this.movieContainer.appendChild(n)
    }, r.getView = function () {
        return this.movieContainer
    }, r.resize = function () {
        var t = document.getElementsByClassName("propertyContent")[0], e = document.getElementById("youtubeIframe"),
            n = t.offsetWidth;
        e.width = n + "px", e.height = 9 * n / 16 + "px"
    }
}, function (t, e, n) {
    "use strict";
    Entry.TvCast = function (t) {
        this.generateView(t)
    };
    var r = Entry.TvCast.prototype;
    r.init = function (t) {
        this.tvCastHash = t
    }, r.generateView = function (t) {
        (e = Entry.createElement("div")).addClass("entryContainerMovieWorkspace"), e.addClass("entryRemove"), this.movieContainer = e, this.movieContainer;
        var e = this.movieContainer, n = Entry.createElement("iframe");
        n.setAttribute("id", "tvCastIframe"), n.setAttribute("allowfullscreen", ""), n.setAttribute("frameborder", 0), n.setAttribute("src", t), this.movieFrame = n, this.movieContainer.appendChild(this.movieFrame)
    }, r.getView = function () {
        return this.movieContainer
    }, r.resize = function () {
        document.getElementById("entryContainerWorkspaceId");
        var t = document.getElementById("tvCastIframe"), e = this.movieContainer.offsetWidth;
        t.width = e + "px", t.height = 9 * e / 16 + "px"
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Tooltip = function (t, e) {
        this.init(t, e)
    }, (r = Entry.Tooltip.prototype).usedClasses = "up down left right edge_up edge_down edge_left edge_right", r.init = function (t, e) {
        this._rendered && this.dispose(), this.data = t instanceof Array ? t : [t], this.opts = e || this.opts || {
            dimmed: !0,
            restirct: !1
        }, this._rendered = !1, this._noDispose = !!this.opts.noDispose, this._faded = !1, this._tooltips = [], this._indicators = [], (t.length > 1 || e.indicator) && (this.isIndicator = !0), !1 !== e.render && this.render(), this._resizeEventFunc = Entry.Utils.debounce(function () {
            this.alignTooltips()
        }.bind(this), 200), Entry.addEventListener("windowResized", this._resizeEventFunc)
    }, r.render = function () {
        if (!this._rendered) {
            this.fadeIn(), this._convertDoms(), this.opts.dimmed && this.renderBG();
            var t = this.data[0].targetDom;
            t && "string" != typeof t && t.length && (this.opts.restrict && this.opts.dimmed && Entry.Curtain.show(t.get(0)), this.renderTooltips(), this._rendered = !0, this.opts.restrict && this.restrictAction())
        }
    }, r._convertDoms = function () {
        this.data.map(function (t) {
            var e = t.target;
            t.target instanceof Array && (e = Entry.getDom(t.target));
            var n = $(e);
            n.length && (t.targetDom = n)
        })
    }, r.renderBG = function () {
        this.opts.restrict ? this._bg = Entry.Dom("div", {
            classes: [],
            parent: $(document.body)
        }) : (this._bg = Entry.Dom("div", {
            classes: ["entryDimmed", "entryTooltipBG"],
            parent: $(document.body)
        }), this._bg.bindOnClick(this.dispose.bind(this)))
    }, r.renderTooltips = function () {
        this.data.map(this._renderTooltip.bind(this))
    }, r.alignTooltips = function () {
        this._rendered && (this.data.map(this._alignTooltip.bind(this)), this.opts.dimmed && Entry.Curtain.align())
    }, r._renderTooltip = function (t) {
        if (t.content) {
            var e = Entry.Dom("div", {classes: ["entryTooltipWrapper"], parent: $(document.body)}),
                n = Entry.Dom("div", {classes: ["entryTooltip", t.direction, t.style], parent: e});
            this.isIndicator && (t.indicator = this.renderIndicator()), n.bind("mousedown", function (t) {
                t.stopPropagation()
            }), n.html(t.content), this._tooltips.push(e), t.wrapper = e, t.dom = n, this._alignTooltip(t)
        }
    }, r._alignTooltip = function (t) {
        var e;
        e = t.targetDom instanceof $ ? t.targetDom.get(0).getBoundingClientRect() : t.targetDom.getBoundingClientRect();
        var n = t.dom[0].getBoundingClientRect(), r = document.body.clientWidth, o = document.body.clientHeight;
        this.isIndicator && t.indicator.css({
            left: e.left + e.width / 2,
            top: e.top + e.height / 2
        }), n.width > 450 ? t.dom.addClass("shrink") : t.dom.removeClass("shrink");
        var a = t.direction;
        if (!a) {
            var s = e.left - n.width, i = r - e.left - e.width - n.width;
            a = "left", s < i && (s = i, a = "right"), s < (i = e.top - n.height) && (s = i, a = "up"), s < (i = o - e.top - e.height - n.height) && (s = i, a = "down")
        }
        t.dom.removeClass(this.usedClasses).addClass(a);
        var l, c = {top: e.top, left: e.left};
        switch (a) {
            case"down":
                c.top += e.height;
            case"up":
                c.left += e.width / 2, c.left < n.width / 2 && (l = "edge_left"), r - c.left < n.width / 2 && (l = "edge_right");
                break;
            case"right":
                c.left += e.width;
            case"left":
                c.top += e.height / 2, c.top < n.height / 2 && (l = "edge_up"), o - c.top < n.height / 2 && (l = "edge_down")
        }
        l && t.dom.addClass(l), t.wrapper.css(c)
    }, r.renderIndicator = function (t, e) {
        var n = Entry.Dom("div", {classes: ["entryTooltipIndicator"], parent: $(document.body)});
        return n.html("<div></div><div></div><div></div>"), this._indicators.push(n), n
    }, r.dispose = function (t) {
        for (this._bg && this._bg.remove(), this.opts.restrict && (Entry.Utils.allowAction(), this.opts.dimmed && Entry.Curtain.hide()); this._tooltips.length;) this._tooltips.pop().remove();
        for (; this._indicators.length;) this._indicators.pop().remove();
        this.opts.callBack && this.opts.callBack.call(this, t), Entry.removeEventListener("windowResized", this._resizeEventFunc)
    }, r.restrictAction = function () {
        var t = this.data.map(function (t) {
            return t.targetDom
        });
        this._noDispose && this.opts.callBack && this.opts.callBack.call(this), Entry.Utils.restrictAction(t, this.dispose.bind(this), this._noDispose)
    }, r.fadeOut = function () {
        $(document.body).addClass("hideTooltip"), this._faded = !0
    }, r.fadeIn = function () {
        $(document.body).removeClass("hideTooltip"), this._faded = !1
    }, r.isFaded = function () {
        return this._faded
    }
}, function (t, e, n) {
    "use strict"
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Restrictor = function (t) {
        this._controller = t, this.startEvent = new Entry.Event(this), this.endEvent = new Entry.Event(this), Entry.Curtain.init(t && t.isRestrictorCloseable), this.currentTooltip = null
    }, (r = Entry.Restrictor.prototype).restrict = function (t, e) {
        this._data = t, this.toolTipRender = e, this.end();
        var n = t.content.concat().shift(), r = Entry.Command[n], o = r.dom;
        if (this.startEvent.notify(), o instanceof Array && (o = this.processDomQuery(o)), t.tooltip || (t.tooltip = {
                title: "액션",
                content: "지시 사항을 따르시오"
            }), !r.restrict) return this.currentTooltip = new Entry.Tooltip([{
            title: t.tooltip.title,
            content: t.tooltip.content,
            target: o
        }], {
            restrict: !0,
            dimmed: !0,
            callBack: this.restrictEnd.bind(this)
        }), window.setTimeout(this.align.bind(this)), t.skip ? this.end() : void 0;
        this.currentTooltip = r.restrict(t, o, this.restrictEnd.bind(this), this)
    }, r.end = function () {
        this.currentTooltip && (this.currentTooltip.dispose(), this.currentTooltip = null)
    }, r.restrictEnd = function () {
        this.endEvent.notify()
    }, r.align = function () {
        this.currentTooltip && this.currentTooltip.alignTooltips()
    }, r.processDomQuery = function (t, e) {
        return (e = (e = e || this._data.content).concat()).shift(), t instanceof Array && (t = t.map(function (t) {
            return "&" === t[0] ? e[Number(t.substr(1))][1] : t
        })), t
    }, r.renderTooltip = function () {
        this.currentTooltip && this.currentTooltip.render()
    }, r.fadeOutTooltip = function () {
        this.currentTooltip && this.currentTooltip.fadeOut()
    }, r.fadeInTooltip = function () {
        this.currentTooltip && this.currentTooltip.fadeIn()
    }, r.isTooltipFaded = function () {
        return !!this.currentTooltip && this.currentTooltip.isFaded()
    }, r.requestNextData = function () {
        if (this._controller) return this._controller.requestNextData()
    }
}, function (t, e, n) {
    "use strict"
}, function (t, e, n) {
    "use strict";
    Entry.Loader = {queueCount: 0, totalCount: 0, loaded: !1}, Entry.Loader.addQueue = function (t) {
        this.queueCount || Entry.dispatchEvent("loadStart"), this.queueCount++, this.totalCount++
    }, Entry.Loader.removeQueue = function (t) {
        this.queueCount--, this.queueCount || (this.totalCount = 0, this.handleLoad())
    }, Entry.Loader.getLoadedPercent = function () {
        return 0 === this.totalCount ? 1 : this.queueCount / this.totalCount
    }, Entry.Loader.isLoaded = function () {
        return !this.queueCount && !this.totalCount
    }, Entry.Loader.handleLoad = function () {
        this.loaded || (this.loaded = !0, Entry.dispatchEvent("loadComplete"))
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(5)) && r.__esModule ? r : {default: r};
    n(33), Entry.init = function (t, e) {
        Entry.assert("object" === (void 0 === e ? "undefined" : (0, o.default)(e)), "Init option is not object"), this.events_ = {}, this.interfaceState = {menuWidth: 264}, Entry.Utils.bindGlobalEvent(["resize", "mousedown", "mousemove", "keydown", "keyup", "dispose"]), this.options = e, this.parseOptions(e), this.mediaFilePath = (e.libDir ? e.libDir : "/lib") + "/entryjs/images/", this.defaultPath = e.defaultDir || "", this.blockInjectPath = e.blockInjectDir || "", "workspace" == this.type && this.isPhone() && (this.type = "phone"), this.initialize_(), this.view_ = t, $(this.view_).addClass("entry"), "minimize" === this.type && $(this.view_).addClass(this.type), "tablet" === this.device && $(this.view_).addClass("tablet"), Entry.initFonts(e.fonts), this.createDom(t, this.type), this.loadInterfaceState(), this.overridePrototype(), this.maxCloneLimit = 360, this.cloudSavable = !0, this.startTime = (new Date).getTime(), document.onkeydown = function (t) {
            Entry.dispatchEvent("keyPressed", t)
        }, document.onkeyup = function (t) {
            Entry.dispatchEvent("keyUpped", t)
        }, window.onresize = function (t) {
            Entry.dispatchEvent("windowResized", t)
        }, window.onbeforeunload = this.beforeUnload, Entry.addEventListener("saveWorkspace", function (t) {
            Entry.addActivity("save")
        }), Entry.addEventListener("showBlockHelper", function (t) {
            Entry.propertyPanel.select("helper")
        }), "IE" != Entry.getBrowserType().substr(0, 2) || window.flashaudio ? createjs.Sound.registerPlugins([createjs.WebAudioPlugin, createjs.HTMLAudioPlugin]) : (createjs.FlashAudioPlugin.swfPath = this.mediaFilePath + "media/", createjs.Sound.registerPlugins([createjs.FlashAudioPlugin]), window.flashaudio = !0), Entry.soundQueue = new createjs.LoadQueue, Entry.soundQueue.installPlugin(createjs.Sound), Entry.soundInstances = [], Entry.loadAudio_([Entry.mediaFilePath + "sounds/click.mp3", Entry.mediaFilePath + "sounds/click.wav", Entry.mediaFilePath + "sounds/click.ogg"], "entryMagneting"), Entry.loadAudio_([Entry.mediaFilePath + "sounds/delete.mp3", Entry.mediaFilePath + "sounds/delete.ogg", Entry.mediaFilePath + "sounds/delete.wav"], "entryDelete"), createjs.Sound.stop(), BigNumber.config({ERRORS: !1})
    }, Entry.changeContainer = function (t) {
        t.appendChild(this.view_)
    }, Entry.loadAudio_ = function (t, e) {
        if (window.Audio && t.length) for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r.match(/\/([^.]+)./)[1], Entry.soundQueue.loadFile({id: e, src: r, type: createjs.LoadQueue.SOUND});
            break
        }
    }, Entry.initialize_ = function () {
        this.stage = new Entry.Stage, Entry.engine && Entry.engine.projectTimer && Entry.engine.clearTimer(), this.engine = new Entry.Engine, "minimize" !== this.type && (this.propertyPanel = new Entry.PropertyPanel), this.container = new Entry.Container, this.helper = new Entry.Helper, this.youtube = new Entry.Youtube, this.variableContainer = new Entry.VariableContainer, this.commander = new Entry.Commander(this.type, this.doNotSkipAny), this.scene = new Entry.Scene, this.playground = new Entry.Playground, this.toast = new Entry.Toast, this.hw && this.hw.closeConnection(), this.hw = new Entry.HW, Entry.enableActivityLogging ? this.reporter = new Entry.Reporter(!1) : "workspace" != this.type && "phone" != this.type || (this.reporter = new Entry.Reporter(!0))
    }, Entry.createDom = function (t, e) {
        if (e && "workspace" != e) if ("minimize" == e) {
            (a = Entry.createElement("canvas")).className = "entryCanvasWorkspace minimize", a.id = "entryCanvas", a.width = 640, a.height = 360;
            var n = Entry.createElement("div", "entryCanvasWrapper");
            n.appendChild(a), t.appendChild(n), this.canvas_ = a, this.stage.initStage(this.canvas_), s = Entry.createElement("div"), t.appendChild(s), this.engineView = s, this.engine.generateView(this.engineView, e)
        } else "phone" == e && (o = Entry.createElement("div"), this.stateManagerView = o, this.stateManager.generateView(this.stateManagerView, e), s = Entry.createElement("div"), t.appendChild(s), this.engineView = s, this.engine.generateView(this.engineView, e), (a = Entry.createElement("canvas")).addClass("entryCanvasPhone"), a.id = "entryCanvas", a.width = 640, a.height = 360, s.insertBefore(a, this.engine.footerView_), this.canvas_ = a, this.stage.initStage(this.canvas_), i = Entry.createElement("div"), t.appendChild(i), this.containerView = i, this.container.generateView(this.containerView, e), l = Entry.createElement("div"), t.appendChild(l), this.playgroundView = l, this.playground.generateView(this.playgroundView, e)); else {
            Entry.documentMousedown.attach(this, this.cancelObjectEdit);
            var r = Entry.createElement("div");
            t.appendChild(r), this.sceneView = r, this.scene.generateView(this.sceneView, e);
            var o = Entry.createElement("div");
            this.sceneView.appendChild(o), this.stateManagerView = o, this.stateManager.generateView(this.stateManagerView, e);
            var a, s = Entry.createElement("div");
            t.appendChild(s), this.engineView = s, this.engine.generateView(this.engineView, e), (a = Entry.createElement("canvas")).addClass("entryCanvasWorkspace"), a.id = "entryCanvas", a.width = 640, a.height = 360, s.insertBefore(a, this.engine.addButton), a.addEventListener("mousewheel", function (t) {
                for (var e = Entry.stage.mouseCoordinate, n = Entry.variableContainer.getListById(e), r = t.wheelDelta > 0, o = 0; o < n.length; o++) {
                    var a = n[o];
                    r ? a.scrollButton_.y >= 46 ? a.scrollButton_.y -= 23 : a.scrollButton_.y = 23 : a.scrollButton_.y += 23, a.updateView()
                }
            }), this.canvas_ = a, this.stage.initStage(this.canvas_);
            var i = Entry.createElement("div");
            this.propertyPanel.generateView(t, e), this.containerView = i, this.container.generateView(this.containerView, e), this.propertyPanel.addMode("object", this.container), this.helper.generateView(this.containerView, e), this.propertyPanel.addMode("helper", this.helper);
            var l = Entry.createElement("div");
            t.appendChild(l), this.playgroundView = l, this.playground.generateView(this.playgroundView, e), this.propertyPanel.select("object"), this.helper.bindWorkspace(this.playground.mainWorkspace)
        }
    }, Entry.start = function (t) {
        "invisible" !== Entry.type && (this.FPS || (this.FPS = 60), Entry.assert("number" == typeof this.FPS, "FPS must be number"), Entry.engine.start(this.FPS))
    }, Entry.stop = function () {
        "invisible" !== Entry.type && (this.FPS = null, Entry.engine.stop())
    }, Entry.parseOptions = function (t) {
        this.type = t.type || this.type, this.hashId = t.hashId || this.hasId, t.device && (this.device = t.device), this.projectSaveable = t.projectsaveable, void 0 === this.projectSaveable && (this.projectSaveable = !0), this.objectAddable = t.objectaddable, void 0 === this.objectAddable && (this.objectAddable = !0), this.objectEditable = t.objectEditable, void 0 === this.objectEditable && (this.objectEditable = !0), this.objectEditable || (this.objectAddable = !1), this.objectDeletable = t.objectdeletable, void 0 === this.objectDeletable && (this.objectDeletable = !0), this.soundEditable = t.soundeditable, void 0 === this.soundEditable && (this.soundEditable = !0), this.pictureEditable = t.pictureeditable, void 0 === this.pictureEditable && (this.pictureEditable = !0), this.sceneEditable = t.sceneEditable, void 0 === this.sceneEditable && (this.sceneEditable = !0), this.functionEnable = t.functionEnable, void 0 === this.functionEnable && (this.functionEnable = !0), this.messageEnable = t.messageEnable, void 0 === this.messageEnable && (this.messageEnable = !0), this.variableEnable = t.variableEnable, void 0 === this.variableEnable && (this.variableEnable = !0), this.listEnable = t.listEnable, void 0 === this.listEnable && (this.listEnable = !0), this.doCommandAll = t.doCommandAll, void 0 === this.doCommandAll && (this.doCommandAll = !1), this.hasVariableManager = t.hasvariablemanager, this.variableEnable || this.messageEnable || this.listEnable || this.functionEnable ? void 0 === this.hasVariableManager && (this.hasVariableManager = !0) : this.hasVariableManager = !1, this.readOnly = t.readOnly || !1, this.readOnly && (this.soundEditable = this.sceneEditable = this.objectAddable = !1), t.isForLecture && (this.isForLecture = t.isForLecture), t.textCodingEnable && (this.textCodingEnable = t.textCodingEnable)
    }, Entry.initFonts = function (t) {
        this.fonts = t, t || (this.fonts = [])
    }, Entry.reloadOption = function (t) {
        this.options = t, this.parseOptions(t), this.playground.applyTabOption(), this.variableContainer.applyOption(), this.engine.applyOption(), this.commander.applyOption()
    }, Entry.Utils.initEntryEvent_ = function () {
        Entry.events_ || (Entry.events_ = [])
    }, Entry.initSound = function (t) {
        t && t.duration && 0 != t.duration && (t.path = t.fileurl || Entry.defaultPath + "/uploads/" + t.filename.substring(0, 2) + "/" + t.filename.substring(2, 4) + "/" + t.filename + t.ext, Entry.soundQueue.loadFile({
            id: t.id,
            src: t.path,
            type: createjs.LoadQueue.SOUND
        }))
    }
}, function (t, e, n) {
    "use strict";
    var r;
    r = {}, Entry.Utils.fuzzy = r, r.simpleFilter = function (t, e) {
        return e.filter(function (e) {
            return r.test(t, e)
        })
    }, r.test = function (t, e) {
        return null !== r.match(t, e)
    }, r.match = function (t, e, n) {
        n = n || {};
        var r, o = 0, a = [], s = e.length, i = 0, l = 0, c = n.pre || "", u = n.post || "",
            p = n.caseSensitive && e || e.toLowerCase();
        t = n.caseSensitive && t || t.toLowerCase();
        for (var _ = 0; _ < s && (r = e[_], p[_] !== n.escapeLetter); _++) p[_] === t[o] ? (r = c + r + u, o += 1, l += 1 + l) : l = 0, i += l, a[a.length] = r;
        return o === t.length ? {rendered: a.join(""), score: i} : null
    }, r.filter = function (t, e, n) {
        return n = n || {}, e.reduce(function (e, o, a, s) {
            var i = o;
            n.extract && (i = n.extract(o));
            var l = r.match(t, i, n);
            return null != l && (e[e.length] = {string: l.rendered, score: l.score, index: a, original: o}), e
        }, []).sort(function (t, e) {
            return e.score - t.score || t.index - e.index
        })
    }
}, function (t, e, n) {
    "use strict";
    Entry.Curtain = {}, function () {
        this._visible = !1, this._doms = null, this._targetDom = null, this.init = function (t) {
            this._createDom(t)
        }, this._createDom = function (t) {
            var e = $("body"), n = {parent: e, class: "entryCurtainElem entryRemove"};
            for (var r in this._doms = {
                top: Entry.Dom("div", n),
                right: Entry.Dom("div", n),
                bottom: Entry.Dom("div", n),
                left: Entry.Dom("div", n)
            }, t && (this._closeBtn = Entry.Dom("button", {
                parent: e,
                class: "entryCurtainCloseBtn entryRemove"
            }), this._closeBtn.on("click", function () {
                this._closeBtn.off("click"), entrylms.emit("ExitStudy")
            }.bind(this))), this._doms) {
                var o = this._doms[r];
                o.addClass(r), o.bind("mousedown", function (t) {
                    t.stopPropagation()
                })
            }
        }, this.show = function (t) {
            for (var e in!this._doms && this._createDom(), t instanceof Array && (t = Entry.getDom(t)), t = $(t), this._targetDom = t, this.align(), this._doms) this._doms[e].removeClass("entryRemove");
            this._closeBtn && this._closeBtn.removeClass("entryRemove"), this._visible = !0
        }, this.align = function () {
            var t = this._targetDom;
            if (t) {
                var e = $(window), n = $("body")[0].getBoundingClientRect(), r = n.width, o = n.height, a = e.width(),
                    s = e.height();
                a < Math.round(r) && (r = a), s < Math.round(o) && (o = s);
                var i = this._doms;
                if (t.get(0)) {
                    var l = t.get(0).getBoundingClientRect(), c = Math.round(l.top), u = Math.round(l.right),
                        p = Math.round(l.bottom);
                    i.top.css({height: c}), i.left.css({top: c, right: r - u + l.width, bottom: Math.round(o - p)});
                    var _ = i.left[0].getBoundingClientRect(), d = i.top[0].getBoundingClientRect().height + _.height;
                    i.bottom.css({top: d || p, right: r - u}), i.right.css({
                        top: c,
                        left: i.bottom[0].getBoundingClientRect().width || u
                    })
                }
            }
        }, this.hide = function () {
            if (this._doms) {
                for (var t in this._doms) this._doms[t].addClass("entryRemove");
                this._closeBtn && this._closeBtn.addClass("entryRemove"), this._visible = !1, this._targetDom = null
            }
        }, this.isVisible = function () {
            return this._visible
        }, this.setVisible = function (t) {
            this._visible = t
        }
    }.bind(Entry.Curtain)()
}, function (t, e, n) {
    "use strict";
    Entry.ContextMenu = {}, function (t) {
        var e = "data-option-index";
        t.visible = !1, t._hideEvent = null, t.createDom = function () {
            this.dom = Entry.Dom("ul", {id: "entry-contextmenu", parent: $("body")}), function () {
                var t = this;
                this.dom.on("mousedown touchstart", function (t) {
                    t.stopPropagation()
                }), this.dom.on("mousedown touchstart", "li", function (n) {
                    n.stopPropagation();
                    var r = t._options;
                    if (_.isEmpty(r)) return t.hide();
                    var o = r[this.getAttribute(e)], a = o.enable, s = o.callback;
                    a && s && (n.preventDefault(), t.hide(), s(n))
                }), Entry.Utils.disableContextmenu(this.dom)
            }.call(this)
        }, t.show = function (t, n, r) {
            if (this._options = t, this.dom || this.createDom(), t.length) {
                this._hideEvent && this._hideEvent.destroy(), this._hideEvent = Entry.documentMousedown.attach(this, this.hide), void 0 !== n && (this._className = n, this.dom.addClass(n));
                var o = this.dom;
                o.empty();
                var a = document.createDocumentFragment();
                t.forEach(function (t, r) {
                    var o = t.text, s = t.enable, i = t.divider;
                    s = !1 !== t.enable, t.enable = s;
                    var l = Entry.Dom("li").attr(e, r);
                    a.appendChild(l.get(0)), i ? n = "divider" : (n = s ? "menuAble" : "menuDisable", Entry.Dom("span", {parent: l}).text(o)), l.addClass(n)
                }), o.get(0).appendChild(a), o.removeClass("entryRemove"), this.visible = !0, this.position(r || Entry.mouseCoordinate)
            }
        }, t.position = function (t) {
            var e = this.dom;
            e.css({left: 0, top: 0});
            var n = e.width(), r = e.height(), o = $(window), a = o.width(), s = o.height();
            t.x + n > a && (t.x -= n + 3), t.y + r > s && (t.y -= r), e.css({left: t.x, top: t.y})
        }, t.hide = function () {
            this.visible = !1;
            var t = this.dom;
            t.empty().addClass("entryRemove"), this._className && (t.removeClass(this._className), delete this._className), this._hideEvent && (this._hideEvent.destroy(), this._hideEvent = null)
        }, t.onContextmenu = function (t, e) {
            t.on("touchstart mousemove mouseup contextmenu", function (t) {
                switch (t.type) {
                    case"touchstart":
                        var n = Entry.Utils.convertMouseEvent(t);
                        this.coordi = {x: n.clientX, y: n.clientY}, this.longTouchEvent = setTimeout(function () {
                            e(this.coordi), this.longTouchEvent = void 0
                        }.bind(this), 900);
                        break;
                    case"mousemove":
                        if (!this.coordi) return;
                        Math.sqrt(Math.pow(t.pageX - this.coordi.x, 2) + Math.pow(t.pageY - this.coordi.y, 2)) > 5 && this.longTouchEvent && (clearTimeout(this.longTouchEvent), this.longTouchEvent = void 0);
                        break;
                    case"mouseup":
                        this.longTouchEvent && (clearTimeout(this.longTouchEvent), this.longTouchEvent = null);
                        break;
                    case"contextmenu":
                        clearTimeout(this.longTouchEvent), this.longTouchEvent = void 0, "contextmenu" === t.type && e(this.coordi)
                }
            })
        }
    }(Entry.ContextMenu)
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.BlockDriver = function () {
    }, (o = Entry.BlockDriver.prototype).convert = function () {
        var t = new Date;
        for (var e in Entry.block) "function" == typeof Entry.block[e] && this._convertBlock(e);
        console.log((new Date).getTime() - t.getTime())
    }, o._convertBlock = function (t) {
        var e, n, r = Blockly.Blocks[t], o = EntryStatic.blockInfo[t];
        if (o) {
            e = o.class, n = o.isNotFor;
            var a = o.xml;
            if (a) var s = function t(e) {
                var n = {type: e.getAttribute("type"), index: {}}, r = $(e).children();
                if (!r) return n;
                for (var o = 0; o < r.length; o++) {
                    var a = r[o], s = a.tagName, i = $(a).children()[0], l = a.getAttribute("name");
                    "value" === s ? "block" == i.nodeName && (n.params || (n.params = []), n.params.push(t(i)), n.index[l] = n.params.length - 1) : "field" === s && (n.params || (n.params = []), n.params.push(a.textContent), n.index[l] = n.params.length - 1)
                }
                return n
            }((a = $.parseXML(a)).childNodes[0])
        }
        var i = new Entry.BlockMockup(r, s, t).toJSON();
        i.class = e, i.isNotFor = n, _.isEmpty(i.paramsKeyMap) && delete i.paramsKeyMap, _.isEmpty(i.statementsKeyMap) && delete i.statementsKeyMap, i.func = Entry.block[t], ["NUMBER", "TRUE", "FALSE", "TEXT", "FUNCTION_PARAM_BOOLEAN", "FUNCTION_PARAM_STRING", "TRUE_UN"].indexOf(t.toUpperCase()) > -1 && (i.isPrimitive = !0), Entry.block[t] = i
    }, Entry.BlockMockup = function (t, e, n) {
        this.templates = [], this.params = [], this.statements = [], this.color = "", this.isPrev = !1, this.isNext = !1, this.output = !1, this.fieldCount = 0, this.events = {}, this.def = e || {}, this.paramsKeyMap = {}, this.statementsKeyMap = {}, this.definition = {
            params: [],
            type: this.def.type
        }, this.simulate(t), this.def = this.definition
    }, function (t) {
        t.simulate = function (t) {
            t.sensorList && (this.sensorList = t.sensorList), t.portList && (this.portList = t.portList), t.init.call(this), t.whenAdd && (this.events.blockViewAdd || (this.events.blockViewAdd = []), this.events.blockViewAdd.push(t.whenAdd)), t.whenRemove && (this.events.blockViewDestroy || (this.events.blockViewDestroy = []), this.events.blockViewDestroy.push(t.whenRemove))
        }, t.toJSON = function () {
            var t = "";
            this.output ? t = "Boolean" === this.output ? "basic_boolean_field" : "basic_string_field" : !this.isPrev && this.isNext ? t = "basic_event" : 1 == this.statements.length ? t = "basic_loop" : 2 == this.statements.length ? t = "basic_double_loop" : this.isPrev && this.isNext ? t = "basic" : this.isPrev && !this.isNext && (t = "basic_without_next"), function t(e) {
                if (e) {
                    var n = e.params;
                    if (n) for (var r = 0; r < n.length; r++) {
                        var o = n[r];
                        o && (delete o.index, t(o))
                    }
                }
            }(this.def);
            var e = /dummy_/im;
            for (var n in this.paramsKeyMap) e.test(n) && delete this.paramsKeyMap[n];
            for (n in this.statementsKeyMap) e.test(n) && delete this.statementsKeyMap[n];
            return {
                color: this.color,
                skeleton: t,
                statements: this.statements,
                template: this.templates.filter(function (t) {
                    return "string" == typeof t
                }).join(" "),
                params: this.params,
                events: this.events,
                def: this.def,
                paramsKeyMap: this.paramsKeyMap,
                statementsKeyMap: this.statementsKeyMap
            }
        }, t.appendDummyInput = function () {
            return this
        }, t.appendValueInput = function (t) {
            return this.def && this.def.index && (void 0 !== this.def.index[t] ? this.definition.params.push(this.def.params[this.def.index[t]]) : this.definition.params.push(null)), this.params.push({
                type: "Block",
                accept: "string"
            }), this._addToParamsKeyMap(t), this.templates.push(this.getFieldCount()), this
        }, t.appendStatementInput = function (t) {
            this._addToStatementsKeyMap(t), this.statements.push({accept: "basic"})
        }, t.setCheck = function (t) {
            var e = this.params;
            "Boolean" === t && (e[e.length - 1].accept = "boolean")
        }, t.appendField = function (t, e) {
            return t ? ("string" == typeof t && t.length > 0 ? e ? (t = {
                type: "Text",
                text: t,
                color: e
            }, this.params.push(t), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[e] ? this.definition.params.push(this.def.params[this.def.index[e]]) : this.definition.params.push(void 0)) : this.templates.push(t) : t.constructor == Blockly.FieldIcon ? ("start" === t.type ? this.params.push({
                type: "Indicator",
                img: t.src_,
                size: 17,
                position: {x: 0, y: -2}
            }) : this.params.push({
                type: "Indicator",
                img: t.src_,
                size: 12
            }), this._addToParamsKeyMap(), this.templates.push(this.getFieldCount()), this.definition && this.definition.params.push(null)) : t.constructor == Blockly.FieldDropdown ? (this.params.push({
                type: "Dropdown",
                options: t.menuGenerator_,
                value: t.menuGenerator_[0][1],
                fontSize: 11
            }), this._addToParamsKeyMap(e), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[e] ? this.definition.params.push(this.def.params[this.def.index[e]]) : this.definition.params.push(void 0)) : t.constructor == Blockly.FieldDropdownDynamic ? (this.params.push({
                type: "DropdownDynamic",
                value: null,
                menuName: t.menuName_,
                fontSize: 11
            }), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[e] ? this.definition.params.push(this.def.params[this.def.index[e]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(e)) : t.constructor == Blockly.FieldTextInput ? (this.params.push({
                type: "TextInput",
                value: 10
            }), this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(e)) : t.constructor == Blockly.FieldAngle ? (this.params.push({type: "Angle"}), this.templates.push(this.getFieldCount()), this.def && this.def.index && void 0 !== this.def.index[e] ? this.definition.params.push(this.def.params[this.def.index[e]]) : this.definition.params.push(null), this._addToParamsKeyMap(e)) : t.constructor == Blockly.FieldKeydownInput ? (this.params.push({
                type: "Keyboard",
                value: 81
            }), this.templates.push(this.getFieldCount()), void 0 !== this.def.index[e] ? this.definition.params.push(this.def.params[this.def.index[e]]) : this.definition.params.push(void 0), this._addToParamsKeyMap(e)) : t.constructor == Blockly.FieldColour ? (this.params.push({type: "Color"}), this.templates.push(this.getFieldCount()), this._addToParamsKeyMap(e)) : console.log("else", t), this) : this
        }, t.setColour = function (t) {
            this.color = t
        }, t.setInputsInline = function () {
        }, t.setOutput = function (t, e) {
            t && (this.output = e)
        }, t.setPreviousStatement = function (t) {
            this.isPrev = t
        }, t.setNextStatement = function (t) {
            this.isNext = t
        }, t.setEditable = function (t) {
        }, t.getFieldCount = function () {
            return this.fieldCount++, "%" + this.fieldCount
        }, t._addToParamsKeyMap = function (t) {
            t = t || "dummy_" + Entry.Utils.generateId();
            var e = this.paramsKeyMap;
            e[t] = (0, a.default)(e).length
        }, t._addToStatementsKeyMap = function (t) {
            t = t || "dummy_" + Entry.Utils.generateId();
            var e = this.statementsKeyMap;
            e[t] = (0, a.default)(e).length
        }
    }(Entry.BlockMockup.prototype)
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.BlockToJsParser = function (t, e) {
        this._type = "BlockToJsParser", this.syntax = t, this._parentParser = e, this._iterVariableCount = 0, this._iterVariableChunk = ["i", "j", "k"]
    }, (r = Entry.BlockToJsParser.prototype).Code = function (t, e) {
        if (this._parseMode = e, t instanceof Entry.Block) return this.Block(t);
        for (var n = "", r = t._data, o = 0; o < r.length; o++) {
            var a = r[o];
            n += this.Thread(a)
        }
        return n.trim()
    }, r.Thread = function (t) {
        if (t instanceof Entry.Block) return this.Block(t);
        for (var e = "", n = t.getBlocks(), r = 0; r < n.length; r++) {
            var o = n[r];
            r != n.length - 1 ? (o = this.Block(o), this._parseMode == Entry.Parser.PARSE_GENERAL ? e += o + "\n" : this._parseMode == Entry.Parser.PARSE_SYNTAX && (e = o + "\n")) : (o = this.Block(o), this._parseMode == Entry.Parser.PARSE_GENERAL ? e += o : this._parseMode == Entry.Parser.PARSE_SYNTAX && (e = o))
        }
        return e + "\n"
    }, r.Block = function (t) {
        if (t._schema.syntax.js) var e = t._schema.syntax.js; else e = t._schema.syntax;
        return e ? t = this[e[0]](t) : ""
    }, r.Program = function (t) {
        return ""
    }, r.Scope = function (t) {
        var e = !1, n = "", r = /(%.)/im;
        if (t._schema.syntax.js) {
            var o = t._schema.syntax.js.concat();
            e = !0
        } else o = t._schema.syntax.concat();
        o.shift();
        for (var a = o[0].split(r), s = t._schema.params, i = t.data.params, l = 0; l < a.length; l++) {
            var c = a[l];
            if (0 !== c.length && "Scope" !== c) if ("Judge" !== c) if (r.test(c)) {
                var u = c.split("%")[1], p = parseInt(u) - 1;
                s[p] && ("Image" == s[p].type ? p++ : "Block" == s[p].type ? n += this.Block(i[p]) : n += this[s[p].type](i[p], s[p]))
            } else n += c; else e = !0
        }
        return "#" == n.charAt(n.length - 1) && (e = !0, n = (n = n.substring(0, n.length - 1)).trim()), e || (n += "();"), Entry.TextCodingUtil.jsAdjustSyntax(t, n)
    }, r.BasicFunction = function (t) {
        var e = this.Thread(t.statements[0]);
        return "function promise() {\n" + this.indent(e).trim() + "}"
    }, r.BasicIteration = function (t) {
        var e = t.params[0], n = this.publishIterateVariable(), r = this.Thread(t.statements[0]);
        return this.unpublishIterateVariable(), "for (var " + n + " = 0; " + n + " < " + e + "; " + n + "++) {\n" + this.indent(r) + "}"
    }, r.BasicIf = function (t) {
        var e;
        if (2 == t.data.statements.length) {
            var n = this.Thread(t.statements[0]), r = this.Thread(t.statements[1]), o = t._schema.syntax.concat();
            if ((s = t.data.params[0]) && "True" == s.data.type) var a = o[1]; else a = void 0 === s ? o[1] : this.Block(s);
            e = "if (" + a + ") {\n" + this.indent(n) + "}\nelse {\n" + this.indent(r) + "}\n"
        } else {
            var s;
            n = this.Thread(t.statements[0]), o = t._schema.syntax.concat(), e = "if (" + (a = (s = t.data.params[0]) && "True" == s.data.type ? o[1] : void 0 === s ? o[1] : this.Block(s)) + ") {\n" + this.indent(n) + "}\n"
        }
        return e
    }, r.BasicWhile = function (t) {
        var e = this.Thread(t.statements[0]);
        return "while (" + t._schema.syntax.concat()[1] + ") {\n" + this.indent(e) + "}\n"
    }, r.indent = function (t) {
        var e = "", n = t.split("\n");
        for (var r in n) {
            var o = n[r];
            0 != o.length && (e += "\t" + o + "\n")
        }
        return e
    }, r.publishIterateVariable = function () {
        var t = "", e = this._iterVariableCount;
        do {
            t = this._iterVariableChunk[e % 3] + t, 0 == (e = parseInt(e / 3) - 1) && (t = this._iterVariableChunk[0] + t)
        } while (e > 0);
        return this._iterVariableCount++, t
    }, r.unpublishIterateVariable = function () {
        this._iterVariableCount && this._iterVariableCount--
    }, r.Dropdown = function (t) {
        var e = t;
        return "OBSTACLE" == e ? e = "stone" : "ITEM" == e ? e = e.toLowerCase() : "WALL" == e && (e = e.toLowerCase()), "'" + e + "'"
    }, r.TextInput = function (t) {
        return t
    }, r.DropdownDynamic = function (t, e) {
        return Entry.playground.object, "null" == t ? "none" : Entry.TextCodingUtil.dropdownDynamicValueConvertor(t, e)
    }, r.searchSyntax = function (t) {
        return t instanceof Entry.BlockView && (t = t.block), this._parentParser.parse(t, Entry.Parser.PARSE_SYNTAX)
    }, r.getAssistScope = function () {
        if (this._assist) return this._assist;
        var t = {};
        for (var e in this.syntax.Scope) e.indexOf("%") < 0 && (t[e + "();\n"] = this.syntax.Scope[e]);
        return this._assist = t, t
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(5)) && r.__esModule ? r : {default: r};
    Entry.BlockToPyParser = function () {
        this._type = "BlockToPyParser";
        var t = new Entry.Map;
        this._funcParamMap = t, this._funcDefMap = {}, this._variableDeclaration = null, this._listDeclaration = null, this._forIdCharIndex = 0
    }, (o = Entry.BlockToPyParser.prototype).Code = function (t, e) {
        if (this._parseMode = e, t) {
            if (t instanceof Entry.Thread) return this.Thread(t);
            if (t instanceof Entry.Block) return this.Block(t);
            for (var n = "", r = t.getThreads(), o = 0; o < r.length; o++) {
                this._forIdCharIndex = 0;
                var a = r[o];
                n += this.Thread(a) + "\n"
            }
            return n.trim()
        }
    }, o.Thread = function (t) {
        if (t instanceof Entry.Block) return this.Block(t);
        for (var e = "", n = t.getBlocks(), r = !1, o = "", a = "", s = 0; s < n.length; s++) {
            var i = n[s];
            this._parseMode == Entry.Parser.PARSE_GENERAL ? 0 == s ? (r = Entry.TextCodingUtil.isEventBlock(i)) ? o = this.Block(i) + "\n" : a += this.Block(i) + "\n" : 0 != s && (a += this.Block(i) + "\n") : this._parseMode == Entry.Parser.PARSE_SYNTAX && (e = (r = Entry.TextCodingUtil.isEventBlock(i)) ? "" : this.Block(i) + "\n")
        }
        return this._parseMode == Entry.Parser.PARSE_GENERAL && (e = r ? o + (a = Entry.TextCodingUtil.indent(a)) + "\n" : o + a + "\n"), e.trim() + "\n"
    }, o.Block = function (t, e) {
        if (!(t && t instanceof Entry.Block)) return "";
        !t._schema && t.loadSchema();
        var n, r, o = "";
        if ((n = this.searchSyntax(t)) && (r = n.syntax, n.textParams && (v = n.textParams)), this.isFunc(t)) {
            if (this._hasRootFunc || (this._rootFuncId = t.data.type, this._funcDefMap[t.data.type] = this.makeFuncDef(t, this._hasRootFunc), this._hasRootFunc = !1), this.isRegisteredFunc(t) && (r = this.makeFuncSyntax(t)), this._parseMode == Entry.Parser.PARSE_SYNTAX) return r
        } else this.isFuncStmtParam(t) && (o += t.data.type);
        if (!r && !this.isFuncStmtParam(t)) {
            var a = new Error;
            throw a.block = t, a
        }
        for (var s = /(%.)/im, i = /(\$.)/im, l = r.split(s), c = t._schema.params, u = t.data.params, p = t, _ = (p._schema.skeleton, p._schema.paramsKeyMap, 0); _ < l.length; _++) {
            var d = l[_];
            if (0 !== d.length) if ("% " != d) if (s.test(d)) {
                var y = d.split("%")[1];
                if (c[B = Number(y) - 1]) if ("Indicator" == c[B].type) B++; else if ("Block" == c[B].type) {
                    var g = this.Block(u[B]).trim();
                    if (n.textParams && n.textParams[B]) var h = n.textParams[B];
                    var m = this._funcParamMap.get(g);
                    if (m) g = m; else {
                        var b = g.split("_"), f = b[0];
                        2 == b.length && ("stringParam" == f ? g = "string_param" : "booleanParam" == f && (g = "boolean_param"))
                    }
                    if (h && "index" == h.paramType) if (Entry.Utils.isNumber(g)) g -= 1; else {
                        var E = g.split("+");
                        " 1)" == E[E.length - 1] ? (delete E[E.length - 1], g = (g = E.join("+")).substring(1, g.length - 2)) : g += " - 1"
                    }
                    h && "integer" == h.paramType && Entry.Utils.isNumber(g) && Entry.isFloat(g) && (o = o.replace("randint", "uniform")), o += g
                } else {
                    if (n.textParams) var v = n.textParams; else v = [];
                    o += g = this["Field" + c[B].type](u[B], v[B]), n && "repeat_while_true" == n.key && (o = Entry.TextCodingUtil.assembleRepeatWhileTrueBlock(p, o))
                }
            } else if (i.test(d)) for (var k = d.split(i), T = 0; T < k.length; T++) {
                var w = k[T];
                if (0 !== w.length) if (i.test(w)) {
                    var B = Number(w.split("$")[1]) - 1;
                    o += Entry.TextCodingUtil.indent(this.Thread(t.statements[B]))
                } else o += w
            } else {
                if (n && "repeat_basic" == n.key && 0 == _) {
                    var L = d.split(" ");
                    L[1] = Entry.TextCodingUtil.generateForStmtIndex(this._forIdCharIndex++), d = L.join(" ")
                }
                n && "substring" == n.key && 2 == _ && Entry.Utils.isNumber(o) && (o = '"' + o + '"'), o += d
            } else o += d
        }
        return o
    }, o.searchSyntax = function (t) {
        var e, n;
        if (t instanceof Entry.BlockView ? (e = t.block._schema, n = t.block.data.params) : t instanceof Entry.Block ? (e = t._schema, n = t.params) : e = t, e && e.syntax) for (var r = e.syntax.py.concat(); r.length;) {
            var o = !1, a = r.shift();
            if ("string" == typeof a) return {syntax: a, template: a};
            if (a.params) for (var s = 0; s < a.params.length; s++) if (a.params[s] && a.params[s] !== n[s]) {
                o = !0;
                break
            }
            if (a.template || (a.template = a.syntax), !o) return a
        }
        return null
    }, o.FieldAngle = function (t, e) {
        return e && e.converter && (t = e.converter(t)), t
    }, o.FieldColor = function (t, e) {
        return e && e.converter && (t = e.converter(null, t)), t
    }, o.FieldDropdown = function (t, e) {
        if ("object" == (void 0 === t ? "undefined" : (0, a.default)(t))) return "None".replace(/\"/gm, "");
        if (e && e.converter && e.options) {
            var n = e.options;
            for (var r in n) {
                var o = n[r][0], s = n[r][1];
                if (t == s) return e.converter(o, s)
            }
            t = e.converter(t, t)
        }
        return t
    }, o.FieldDropdownDynamic = function (t, e) {
        if ("object" == (void 0 === t ? "undefined" : (0, a.default)(t))) return "None".replace(/\"/gm, "");
        if (e && e.converter && e.options) {
            var n = e.options;
            for (var r in n) {
                var o, s = n[r][0];
                if (t == (o = n[r][1])) {
                    var i = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(o, e.menuName);
                    return i && (s = i), e.converter(s, o)
                }
            }
            t = (o = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(t, e.menuName)) ? e.converter(o, o) : e.converter(t, t), /None/.test(t) && (t = t.replace(/\"/gm, ""))
        }
        return t
    }, o.FieldImage = function (t, e) {
        return e && e.converter && (t = e.converter(null, t)), t
    }, o.FieldIndicator = function (t, e) {
        return t
    }, o.FieldKeyboard = function (t, e) {
        if (/None/.test(t)) return t.replace(/\"/gm, "");
        var n = Entry.KeyboardCode.map;
        for (var r in n) if (n[r] == t) {
            t = r;
            break
        }
        return e && e.converter && (t = e.converter(t, null)), t.toLowerCase()
    }, o.FieldOutput = function (t, e) {
        return t
    }, o.FieldText = function (t, e) {
        return e && e.converter && (t = e.converter(null, t)), t
    }, o.FieldTextInput = function (t, e) {
        if ("number" != typeof t) {
            var n = (t = t.replace("\t", "    ")).split(/ /);
            t.length == n.length - 1 && (t = '"()"'.replace("()", t))
        }
        return e && e.converter && (t = e.converter(null, t)), t
    }, o.FieldNumber = function (t, e) {
        return e && e.converter && (t = e.converter(null, t)), t
    }, o.isFunc = function (t) {
        if (!t || !t.data || !t.data.type) return !1;
        var e = t.data.type.split("_"), n = e[0];
        return e[1], "func" == n
    }, o.isRegisteredFunc = function (t) {
        var e = t.data.type.split("_"), n = (e[0], e[1]);
        return !!Entry.variableContainer.functions_[n]
    }, o.isFuncStmtParam = function (t) {
        if (!t || !t.data || !t.data.type) return !1;
        var e = t.data.type.split("_")[0];
        return "stringParam" == e || "booleanParam" == e
    }, o.makeFuncSyntax = function (t) {
        if (t && t._schema) if (t._schema.template) var e = t._schema.template.trim(); else if (t._schema.params) var n = t._schema.params; else if (t && !t._schema && this._hasRootFunc) {
            var r = Entry.block[this._rootFuncId];
            n = r.block.params, e = r.block.template
        }
        var o = /(%.)/im;
        if (e) var a = e.trim().split(o);
        var s = "", i = "";
        for (var l in a) {
            var c = a[l].trim();
            if (o.test(c)) {
                var u = c.split("%")[1];
                if (1 == u) continue;
                var p = (u -= 1) - 1;
                if (n && n[p] && "Indicator" == n[p].type) continue;
                i += "%".concat(u).concat(", ")
            } else s += c.split(" ").join("__")
        }
        return p = i.lastIndexOf(","), i = i.substring(0, p), s.trim().concat("(").concat(i.trim()).concat(")")
    }, o.makeFuncDef = function (t, e) {
        if (this.isRegisteredFunc(t)) {
            var n = "", r = this.getFuncInfo(t);
            if (r) {
                n += r.name;
                var o = "";
                if (r.params && 0 != r.params.length) {
                    for (var a in r.params) o += r.params[a], a != r.params.length - 1 && (o = o.concat(", "));
                    o = o.trim()
                }
                if (n = n.concat("(").concat(o).concat(")"), e) return n;
                if (n = "def " + n, this._hasRootFunc = !0, n = n.concat(":\n"), r.statements && r.statements.length) {
                    var s = "";
                    for (var i in r.statements) {
                        var l = r.statements[i];
                        this.getFuncInfo(l) ? s += this.makeFuncDef(l, !0).concat("\n") : s += this.Block(l).concat("\n")
                    }
                    n += Entry.TextCodingUtil.indent(s).concat("\n")
                }
                return n.trim()
            }
        }
    }, o.getFuncInfo = function (t) {
        var e = {}, n = t.getFuncId(), r = n && Entry.variableContainer.getFunction(n);
        if (!r) return null;
        var o = r.block.template.split(/%\d/)[0].trim().split(" ").join("__");
        Entry.TextCodingUtil.initQueue();
        var a = r.content.getEventMap("funcDef")[0].getThread().getBlocks(), s = a.shift();
        Entry.TextCodingUtil.gatherFuncDefParam(s.getParam(0));
        var i = this, l = [];
        if (this._hasRootFunc) t.params.filter(function (t) {
            return t instanceof Entry.Block
        }).forEach(function (t) {
            var e = i.Block(t);
            e && (e = i._funcParamMap.get(e) || e, l.push(e))
        }); else {
            for (var c, u = []; c = Entry.TextCodingUtil._funcParamQ.dequeue();) u.push(c);
            u.forEach(function (t, e) {
                if (/(string|boolean)Param/.test(t)) {
                    var n = "param" + ++e;
                    l.push(n), i._funcParamMap.put(t, n)
                }
            })
        }
        return Entry.TextCodingUtil.clearQueue(), o && (e.name = o), 0 !== l.length && (e.params = l), 0 !== a.length && (e.statements = a), e
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(60)) && r.__esModule ? r : {default: r};
    Entry.JsToBlockParser = function (t, e) {
        this._type = "JsToBlockParser", this.syntax = t, this.scopeChain = [], this.scope = null, this._blockCount = 0, this._blockInfo = {}, this._parentParser = e
    }, (o = Entry.JsToBlockParser.prototype).Program = function (t) {
        var e = [], n = [];
        for (var r in n.push({type: this.syntax.Program}), t) {
            var o = t[r];
            if ("Program" != o.type) return;
            this.initScope(o);
            var a = this.BlockStatement(o);
            for (var s in a) {
                var i = a[s];
                n.push(i)
            }
            this.unloadScope(), 0 != n.length && e.push(n)
        }
        return e
    }, o.Identifier = function (t) {
        return t.name
    }, o.Literal = function (t, e) {
        return !0 === t.value ? {type: "True"} : !1 === t.value ? {type: "False"} : "ai_distance_value" == e ? t.value : "ai_boolean_object" == e ? t.value : {
            type: "text",
            params: [t.value]
        }
    }, o.ExpressionStatement = function (t) {
        var e = t.expression;
        return this[e.type](e)
    }, o.ForStatement = function (t) {
        var e = t.init, n = t.test, r = t.update, o = t.body;
        if (this.syntax.ForStatement) throw{message: "지원하지 않는 표현식 입니다.", node: t};
        o = this[o.type](o);
        var a = e.declarations[0].init.value, s = (n = n).operator, i = n.right.value, l = 0;
        if ("++" != r.operator) {
            var c = a;
            a = i, i = c
        }
        switch (s) {
            case"<":
                l = i - a;
                break;
            case"<=":
                l = i + 1 - a;
                break;
            case">":
                l = a - i;
                break;
            case">=":
                l = a + 1 - i
        }
        return this.BasicIteration(t, l, o)
    }, o.BlockStatement = function (t) {
        for (var e = [], n = t.body, r = 0; r < n.length; r++) {
            var o = n[r], a = this[o.type](o);
            if (Entry.TextCodingUtil.hasBlockInfo(o, this._blockInfo) || this._blockCount++, Entry.TextCodingUtil.updateBlockInfo(o, this._blockInfo), a) {
                if (void 0 === a.type) throw{
                    title: "블록변환 오류",
                    message: "지원하지 않는 블록입니다.",
                    node: o,
                    blockCount: this._blockCount
                };
                Entry.TextCodingUtil.isParamBlock(a) || a && e.push(a)
            }
        }
        return e
    }, o.EmptyStatement = function (t) {
        throw{message: "empty는 지원하지 않는 표현식 입니다.", node: t}
    }, o.DebuggerStatement = function (t) {
        throw{message: "debugger는 지원하지 않는 표현식 입니다.", node: t}
    }, o.WithStatement = function (t) {
        throw t.object, t.body, {message: "with는 지원하지 않는 표현식 입니다.", node: t}
    }, o.ReturnStaement = function (t) {
        throw t.arguments, {message: "return은 지원하지 않는 표현식 입니다.", node: t}
    }, o.LabeledStatement = function (t) {
        throw t.label, t.body, {message: "label은 지원하지 않는 표현식 입니다.", node: t}
    }, o.BreakStatement = function (t) {
        throw t.label, {message: "break는 지원하지 않는 표현식 입니다.", node: t}
    }, o.ContinueStatement = function (t) {
        throw t.label, {message: "continue는 지원하지 않는 표현식 입니다.", node: t}
    }, o.IfStatement = function (t) {
        if (t.test, t.consequent, t.alternate, this.syntax.BasicIf) return this.BasicIf(t);
        throw{message: "if는 지원하지 않는 표현식 입니다.", node: t}
    }, o.SwitchStatement = function (t) {
        throw t.discriminant, t.cases, {message: "switch는 지원하지 않는 표현식 입니다.", node: t}
    }, o.SwitchCase = function (t) {
        throw t.test, t.consequent, {message: "switch ~ case는 지원하지 않는 표현식 입니다.", node: t}
    }, o.ThrowStatement = function (t) {
        throw t.arguments, {message: "throw는 지원하지 않는 표현식 입니다.", node: t}
    }, o.TryStatement = function (t) {
        throw t.block, t.handler, t.finalizer, {message: "try는 지원하지 않는 표현식 입니다.", node: t}
    }, o.CatchClause = function (t) {
        throw t.param, t.body, {message: "catch는 지원하지 않는 표현식 입니다.", node: t}
    }, o.WhileStatement = function (t) {
        t.test;
        var e = t.body, n = this.syntax.WhileStatement;
        if (e = this[e.type](e), n) throw{message: "while은 지원하지 않는 표현식 입니다.", node: t};
        return this.BasicWhile(t, e)
    }, o.DoWhileStatement = function (t) {
        throw t.body, t.test, {message: "do ~ while은 지원하지 않는 표현식 입니다.", node: t}
    }, o.ForInStatement = function (t) {
        throw t.left, t.right, t.body, {message: "for ~ in은 지원하지 않는 표현식 입니다.", node: t}
    }, o.FunctionDeclaration = function (t) {
        if (t.id, this.syntax.FunctionDeclaration) throw{message: "function은 지원하지 않는 표현식 입니다.", node: t};
        return null
    }, o.VariableDeclaration = function (t) {
        throw t.declarations, t.kind, {message: "var은 지원하지 않는 표현식 입니다.", node: t}
    }, o.ThisExpression = function (t) {
        return this.scope.this
    }, o.ArrayExpression = function (t) {
        throw t.elements, {message: "array는 지원하지 않는 표현식 입니다.", node: t}
    }, o.ObjectExpression = function (t) {
        throw t.property, {message: "object는 지원하지 않는 표현식 입니다.", node: t}
    }, o.Property = function (t) {
        throw t.key, t.value, t.kind, {message: "init, get, set은 지원하지 않는 표현식 입니다.", node: t}
    }, o.FunctionExpression = function (t) {
        throw{message: "function은 지원하지 않는 표현식 입니다.", node: t}
    }, o.UnaryExpression = function (t) {
        var e = t.operator;
        throw t.prefix, t.argument, {message: e + "은(는) 지원하지 않는 명령어 입니다.", node: t}
    }, o.UnaryOperator = function () {
        return ["-", "+", "!", "~", "typeof", "void", "delete"]
    }, o.updateOperator = function () {
        return ["++", "--"]
    }, o.BinaryOperator = function () {
        return ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", ",", "^", "&", "in", "instanceof"]
    }, o.AssignmentExpression = function (t) {
        var e = t.operator;
        throw t.left, t.right, {message: e + "은(는) 지원하지 않는 명령어 입니다.", node: t}
    }, o.AssignmentOperator = function () {
        return ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", ",=", "^=", "&="]
    }, o.BinaryExpression = function (t) {
        var e = {}, n = {}, r = String(t.operator), o = t.left.name;
        switch (r) {
            case"==":
                if ("object_up" == o || "object_right" == o || "object_down" == o) var a = "ai_boolean_object"; else a = "radar_up" == o || "radar_right" == o || "radar_down" == o ? "ai_boolean_distance" : null;
                break;
            case"<":
            case"<=":
            case">":
            case">=":
                a = "ai_boolean_distance";
                break;
            default:
                r = r
        }
        if (!a) throw{message: "지원하지 않는 표현식 입니다.", node: t.test};
        var s = [], i = t.left;
        if ("Literal" == i.type || "Identifier" == i.type) {
            (y = []).push(i);
            var l = Entry.block[a].params;
            for (var c in l) if ("Indicator" == (g = l[c].type)) {
                var u = {raw: null, type: "Literal", value: null};
                c < y.length && y.splice(c, 0, u)
            } else "Text" == g && (u = {raw: "", type: "Literal", value: ""}, c < y.length && y.splice(c, 0, u));
            for (var p in y) {
                var _ = this[(h = y[p]).type](h);
                (_ = Entry.TextCodingUtil.radarVariableConvertor(_)) && null != _ && s.push(_)
            }
        } else _ = this[i.type](i), (_ = Entry.TextCodingUtil.radarVariableConvertor(_)) && s.push(_);
        (r = String(t.operator)) && ((_ = r = Entry.TextCodingUtil.jTobBinaryOperatorConvertor(r)) && s.push(_), n.operator = r);
        var d = t.right;
        if ("Literal" == d.type || "Identifier" == d.type) {
            var y;
            for (var c in(y = []).push(d), l = Entry.block[a].params) {
                var g;
                "Indicator" == (g = l[c].type) ? (u = {
                    raw: null,
                    type: "Literal",
                    value: null
                }, c < y.length && y.splice(c, 0, u)) : "Text" == g && (u = {
                    raw: "",
                    type: "Literal",
                    value: ""
                }, c < y.length && y.splice(c, 0, u))
            }
            for (var p in y) {
                var h;
                if ("string" == typeof(_ = this[(h = y[p]).type](h))) {
                    var m = _.split("_");
                    "radar" == m[0] && ((e = {
                        type: "ai_distance_value",
                        params: []
                    }).params.push(m[1].toUpperCase()), _ = e)
                }
                if (_ && null != _ && ("ai_boolean_object" == a && (_ = _.params[0], s.splice(1, 1)), _ = Entry.TextCodingUtil.tTobDropdownValueConvertor(_), s.push(_), s[2] && "text" != s[2].type && "ai_distance_value" != s[2].type)) throw{
                    message: "지원하지 않는 표현식 입니다.",
                    node: t.test
                }
            }
        } else _ = this[d.type](d), "ai_boolean_object" == a && (_ = _.params[0], s.splice(1, 1)), _ && s.push(_);
        return n.type = a, n.params = s, n
    }, o.LogicalExpression = function (t) {
        var e = {}, n = String(t.operator);
        switch (n) {
            case"&&":
            default:
                var r = "ai_boolean_and"
        }
        var o = [], a = t.left;
        if ("Literal" == a.type || "Identifier" == a.type) {
            (p = []).push(a);
            var s = Entry.block[r].params;
            for (var i in s) if ("Indicator" == (_ = s[i].type)) {
                var l = {raw: null, type: "Literal", value: null};
                i < p.length && p.splice(i, 0, l)
            } else "Text" == _ && (l = {raw: "", type: "Literal", value: ""}, i < p.length && p.splice(i, 0, l));
            for (var c in p) (y = this[(d = p[c]).type](d)) && null != y && o.push(y)
        } else (y = this[a.type](a)) && o.push(y);
        (n = String(t.operator)) && (y = n = Entry.TextCodingUtil.logicalExpressionConvert(n), o.push(y));
        var u = t.right;
        if ("Literal" == u.type || "Identifier" == u.type) {
            var p;
            for (var i in(p = []).push(u), s = Entry.block[r].params) {
                var _;
                "Indicator" == (_ = s[i].type) ? (l = {
                    raw: null,
                    type: "Literal",
                    value: null
                }, i < p.length && p.splice(i, 0, l)) : "Text" == _ && (l = {
                    raw: "",
                    type: "Literal",
                    value: ""
                }, i < p.length && p.splice(i, 0, l))
            }
            for (var c in p) {
                var d, y;
                (y = this[(d = p[c]).type](d)) && null != y && o.push(y)
            }
            if ("True" != o[0].type && "ai_boolean_distance" != o[0].type && "ai_boolean_object" != o[0].type && "ai_boolean_and" != o[0].type && "ai_distance_value" != o[0].type) throw{
                message: "지원하지 않는 명렁어 입니다.",
                node: t
            };
            if ("True" != o[2].type && "ai_boolean_distance" != o[2].type && "ai_boolean_object" != o[2].type && "ai_boolean_and" != o[2].type && "ai_distance_value" != o[2].type) throw{
                message: "지원하지 않는 명렁어 입니다.",
                node: t
            }
        } else (y = this[u.type](u)) && o.push(y);
        return e.type = r, e.params = o, e
    }, o.LogicalOperator = function () {
        return ["||", "&&"]
    }, o.MemberExpression = function (t) {
        var e = t.object, n = t.property;
        if (t.computed, e = this[e.type](e), n = this[n.type](n, e), Object(e) !== e || (0, a.default)(e) !== Object.prototype) throw{
            message: e + "은(는) 잘못된 멤버 변수입니다.",
            node: t
        };
        var r = n;
        if (!r) throw{message: n + "이(가) 존재하지 않습니다.", node: t};
        return r
    }, o.ConditionalExpression = function (t) {
        throw t.test, t.alternate, t.consequent, {message: "지원하지 않는 표현식 입니다.", node: t}
    }, o.UpdateExpression = function (t) {
        var e = t.operator;
        throw t.argument, t.prefix, {message: e + "은(는) 지원하지 않는 명렁어 입니다.", node: t}
    }, o.CallExpression = function (t) {
        for (var e = t.callee, n = t.arguments, r = [], o = this[e.type](e), a = this.syntax.Scope[o], s = Entry.block[a].params, i = 0; i < n.length; i++) {
            var l = n[i], c = this[l.type](l, a), u = s[i].type;
            if ("Dropdown" == u) r.push(c); else if ("Block" === u) {
                var p;
                p = "string" == typeof c ? {type: "text", params: [c]} : "number" == typeof c ? {
                    type: "number",
                    params: [c]
                } : c, r.push(p)
            } else r.push(c);
            if (c.type !== u && this._parentParser) {
                var _ = Lang.Msgs.warn, d = this._parentParser.getLineNumber(t.start, t.end).from.line + 1,
                    y = Lang.TextCoding.warn_unnecessary_arguments;
                y = y.replace("&(calleeName)", e.name).replace("&(lineNumber)", d), Entry.toast.warning(_, y)
            }
        }
        return {type: a, params: r}
    }, o.NewExpression = function (t) {
        throw{message: "new는 지원하지 않는 표현식 입니다.", node: t}
    }, o.SequenceExpression = function (t) {
        throw t.expressions, {message: "SequenceExpression 지원하지 않는 표현식 입니다.", node: t}
    }, o.initScope = function (t) {
        var e;
        return null === this.scope ? ((e = function () {
        }).prototype = this.syntax.Scope, this.scope = new e) : ((e = function () {
        }).prototype = this.scope, this.scope = new e), this.scopeChain.push(this.scope), this.scanDefinition(t)
    }, o.unloadScope = function () {
        this.scopeChain.pop(), this.scopeChain.length ? this.scope = this.scopeChain[this.scopeChain.length - 1] : this.scope = null
    }, o.scanDefinition = function (t) {
        for (var e = t.body, n = [], r = 0; r < e.length; r++) {
            var o = e[r];
            if ("FunctionDeclaration" === o.type && (this.scope[o.id.name] = this.scope.promise, this.syntax.BasicFunction)) {
                var a = o.body;
                n.push([{type: this.syntax.BasicFunction, statements: [this[a.type](a)]}])
            }
        }
        return n
    }, o.BasicFunction = function (t, e) {
        return null
    }, o.BasicIteration = function (t, e, n) {
        if (e > 10) throw{message: "반복 숫자값이 10을 넘으면 안됩니다.", node: t.test};
        var r = this.syntax.BasicIteration;
        if (!r) throw{message: "지원하지 않는 표현식 입니다.", node: t};
        return {params: [e], type: r, statements: [n]}
    }, o.BasicWhile = function (t, e) {
        var n = t.test.raw;
        if (this.syntax.BasicWhile[n]) return {type: this.syntax.BasicWhile[n], statements: [e]};
        throw{message: "지원하지 않는 표현식 입니다.", node: t.test}
    }, o.BasicIf = function (t) {
        var e, n = {params: [], statements: []}, r = [], o = [], a = [], s = t.consequent;
        if (s) var i = this[s.type](s);
        var l = t.alternate;
        if (l) var c = this[l.type](l);
        try {
            var u = "";
            if (t.test.operator) var p = "===" === t.test.operator ? "==" : t.test.operator; else p = null;
            if (t.test.left && t.test.right) var _ = t.test.left.name + t.test.right.value; else _ = null;
            if ("frontwall" == _ && "==" == p) u = "front == 'wall'", e = this.syntax.BasicIf[u]; else if ("fronthump" == _ && "==" == p) u = "front == 'hump'", e = this.syntax.BasicIf[u]; else if ("frontstone" == _ && "==" == p) u = "front == 'stone'", e = this.syntax.BasicIf[u]; else if ("frontbee" == _ && "==" == p) u = "front == 'bee'", e = this.syntax.BasicIf[u]; else {
                if (!(t.test.value || t.test.left && t.test.right)) throw{message: "지원하지 않는 표현식 입니다.", node: t.test};
                e = "ai_if_else";
                var d = this[t.test.type](t.test, this.syntax.Scope);
                d.params[2], a.push(d)
            }
            return e ? (i && 0 != i.length && (r = i, n.statements.push(r)), c && 0 != c.length && (o = c, n.statements.push(o)), e && (n.type = e), a && 0 != a.length && (n.params = a), n) : (i && 0 != i.length && (r = i), c && 0 != c.length && (o = c), e && (n.type = e), a && 0 != a.length && (n.params = a), n.statements = [r, o], n)
        } catch (e) {
            throw{message: "지원하지 않는 표현식 입니다.", node: t.test}
        }
    }, o.searchSyntax = function (t) {
        return null
    }
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(3)), a = s(n(5));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.PyToBlockParser = function (t) {
        this._type = "PyToBlockParser", this.dic = t["#dic"], this.blockSyntax = t, this._funcParamMap = {}, this._funcMap = {}, this._isInFuncDef = !1
    }, (r = Entry.PyToBlockParser.prototype).util = Entry.TextCodingUtil, r.binaryOperator = {
        "==": "EQUAL",
        ">": "GREATER",
        "<": "LESS",
        ">=": "GREATER_OR_EQUAL",
        "<=": "LESS_OR_EQUAL"
    }, r.arithmeticOperator = {
        "+": "PLUS",
        "-": "MINUS",
        "*": "MULTI",
        "/": "DIVIDE"
    }, r.divideOperator = {"//": "QUOTIENT", "%": "MOD"}, r.logicalOperator = {
        "&&": "AND",
        "||": "OR"
    }, r.Programs = function (t) {
        try {
            return this.processPrograms(t)
        } catch (t) {
            var e = {};
            throw e.title = t.title, e.message = t.message, e.line = t.line, e
        }
    }, r.processPrograms = function (t) {
        this.createFunctionMap(), this._funcParamMap = {}, this._isInFuncDef = !1;
        var e, n = Entry.playground.mainWorkspace;
        if (n && !n.board.code) return [];
        if (this.object = n ? n.board.code.object : Entry.playground.object, !t[0]) return [];
        var r = t[0].body;
        if (r && r[0] && "ExpressionStatement" === r[0].type && "AssignmentExpression" === r[0].expression.type) {
            var o = this.getVariables(t[0]);
            t.splice(0, 1);
            var a = t.map(this.Node, this);
            e = o.concat(a)
        } else e = t.map(this.Node, this);
        return e.filter(function (t) {
            return t.length > 0
        })
    }, r.Program = function (t) {
        var e = t.body.map(function (t) {
            var e = this.Node(t);
            return this.assert("object" === (void 0 === e ? "undefined" : (0, a.default)(e)), "", t, "NO_SUPPORT", "GENERAL"), e
        }, this);
        return e[0].constructor == Array ? e[0] : e
    }, r.ExpressionStatement = function (t) {
        return this.Node(t.expression)
    }, r.CallExpression = function (t) {
        var e = t.callee, n = t.arguments, r = this.Node(e);
        if (r.type && "Identifier" === t.callee.type && (r = e.name), "string" == typeof r && "MemberExpression" === e.type && this[r]) return this[r](t);
        if ("Identifier" === e.type) if (this._funcMap[r]) r = {type: "func_" + this._funcMap[r][n.length]}; else {
            if (this[r]) return this[r](t);
            var o = this.blockSyntax[r];
            this.assert(o && o.key, "", e, "NO_FUNCTION", "GENERAL"), r = this.Block({}, o)
        }
        return r.preParams && (t.arguments = r.preParams.concat(t.arguments), delete r.preParams), t.arguments && (r.params = this.Arguments(r.type, t.arguments, r.params)), "is_press_some_key" == r.type && (r.params = [Entry.KeyboardCode.map[t.arguments[0].value] + ""]), r
    }, r.Identifier = function (t) {
        var e = t.name;
        if (this._isInFuncDef && this._funcParamMap[e]) return {type: "stringParam_" + this._funcParamMap[e]};
        var n = Entry.variableContainer.getVariableByName(e);
        if (n) return {type: "get_variable", params: [n.id_]};
        var r = Entry.variableContainer.getListByName(e);
        return r ? {type: "get_list", params: [r.id_]} : e
    }, r.VariableDeclaration = function (t) {
        return t.declarations.map(this.Node, this)
    }, r.VariableDeclarator = function (t) {
        return t.init && t.init.arguments ? t.init.arguments.map(this.Node, this) : []
    }, r.AssignmentExpression = function (t) {
        var e = Array.isArray(t.left) ? t.left : [t.left], n = [];
        for (var r in e) {
            var o, a = {params: []}, s = e[r];
            switch (s.type) {
                case"MemberExpression":
                    a.type = "change_value_list_index";
                    var i = s.object.name;
                    "self" === i ? (a.type = "set_variable", (o = Entry.variableContainer.getVariableByName(s.property.name, !0, this.object.id)) || (Entry.variableContainer.addVariable({
                        variableType: "variable",
                        name: s.property.name,
                        visible: !0,
                        object: this.object.id,
                        value: 0
                    }), o = Entry.variableContainer.getVariableByName(s.property.name, !0, this.object.id)), a.params.push(o.id_)) : (o = Entry.variableContainer.getListByName(i), this.assert(o, i, s.object, "NO_LIST", "LIST"), a.params.push(o.id_), a.params.push(this.ListIndex(this.Node(s.property.arguments[1]))));
                    break;
                case"Identifier":
                    a.type = "set_variable", (o = Entry.variableContainer.getVariableByName(s.name, !1)) || (Entry.variableContainer.addVariable({
                        variableType: "variable",
                        name: s.name,
                        visible: !0,
                        value: 0
                    }), o = Entry.variableContainer.getVariableByName(s.name, !1)), a.params.push(o.id_);
                    break;
                default:
                    this.assert(!1, "error", s, "NO_SUPPORT", "GENERAL")
            }
            var l = this.Node(t.right);
            switch (t.operator) {
                case"=":
                    break;
                case"+=":
                    if ("set_variable" === a.type) {
                        a.type = "change_variable";
                        break
                    }
                case"-=":
                case"/=":
                case"*=":
                default:
                    var c = this.arithmeticOperator[t.operator[0]];
                    c && (l = {
                        type: "calc_basic",
                        params: ["set_variable" === a.type ? {
                            type: "get_variable",
                            params: [o.id_]
                        } : {
                            type: "value_of_index_from_list",
                            params: [void 0, o.id_, void 0, this.ListIndex(this.Node(t.left.property.arguments[1]))]
                        }, c, l]
                    })
            }
            a.params.push(l), n.push(a)
        }
        return n
    }, r.Literal = function (t, e, n) {
        var r = t.value;
        switch (void 0 === r ? "undefined" : (0, a.default)(r)) {
            case"boolean":
                return {type: r ? "True" : "False"}
        }
        switch (e ? e.type : "Block") {
            case"DropdownDynamic":
                return this.DropdownDynamic(r, e);
            case"Block":
                return n && n.type ? {type: n.type, params: this.Arguments(n.type, [t])} : {
                    type: "number",
                    params: [this.getValue(t)]
                };
            default:
                return this.getValue(t)
        }
    }, r.MemberExpression = function (t) {
        var e, n = {};
        if ("self" === t.object.name) {
            var r = Entry.variableContainer.getVariableByName(t.property.name, !0, this.object.id);
            if (r) return {type: "get_variable", params: [r.id_]};
            if (r = Entry.variableContainer.getListByName(t.property.name, !0, this.object.id)) return {
                type: "get_list",
                params: [r.id_]
            };
            this.assert(r, "variable not exist", t)
        } else "Literal" === t.object.type ? (e = "%2", n.preParams = [t.object]) : e = this.Node(t.object);
        "object" === (void 0 === e ? "undefined" : (0, a.default)(e)) && ("get_list" === e.type ? n.preParams = [e.params[0]] : n.preParams = [t.object], e = "%2");
        var o, s = t.property;
        if ("CallExpression" === s.type) return this.SubscriptIndex(t);
        if ("_pySlice" === s.name) o = this.blockSyntax["%2[%4:%6]"]; else {
            var i = e + "." + s.name;
            if (!this.blockSyntax[e] || !this.blockSyntax[e][s.name]) return i;
            if (this[i]) return i;
            o = this.blockSyntax[e][s.name]
        }
        return this.Block(n, o), n
    }, r.WhileStatement = function (t) {
        var e = t.body.body, n = {statements: [this.setParams(e)]}, r = t.test;
        return "True" === r.raw ? n.type = "repeat_inf" : (n.type = "repeat_while_true", "UnaryExpression" === r.type && "!" === r.operator ? n.params = [this.Node(t.test.argument), "until"] : n.params = [this.Node(t.test), "while"]), n
    }, r.BlockStatement = function (t) {
        var e = t.body.map(this.Node, this);
        return e.constructor == Array && e[0].length && (e.length > 0 && e[e.length - 1][0].params.push(e[0][0][0]), e = e[e.length - 1][0]), e
    }, r.IfStatement = function (t) {
        var e, n, r = t.alternate,
            o = r && r.body && r.body[0] && "type" in r.body[0] && "ForInStatement" === r.body[0].type;
        return t.consequent, o ? (e = t.alternate.body.map(this.Node, this), t.consequent.body[0].body.body.shift(), n = t.consequent.body[0].body.body, e[0].statements.push(this.setParams(n))) : e = "alternate" in t && t.alternate ? {
            type: "if_else",
            statements: [t.consequent ? t.consequent.body.map(this.Node, this).map(function (t) {
                return Array.isArray(t) ? t[0] : t
            }) : [], t.alternate ? t.alternate.body.map(this.Node, this).map(function (t) {
                return Array.isArray(t) ? t[0] : t
            }) : []],
            params: [this.Node(t.test)]
        } : {type: "_if", statements: [this.setParams(t.consequent.body)], params: [this.Node(t.test)]}, e
    }, r.ForStatement = function (t) {
        var e = t.body.body;
        return this.Node(e[e.length - 1])
    }, r.ForInStatement = function (t) {
        return {type: "repeat_basic", params: [], statements: []}
    }, r.BreakStatement = function (t) {
        return {type: this.blockSyntax.break.key}
    }, r.UnaryExpression = function (t) {
        switch (t.operator) {
            case"!":
                return {type: "boolean_not", params: [void 0, this.Node(t.argument)]};
            case"-":
            case"+":
                var e = this.Node(t.argument);
                return "number" === e.type ? (e.params = [t.operator + e.params[0]], e) : {
                    type: "calc_basic",
                    params: [{type: "number", params: [t.operator + "1"]}, "MULTI", e]
                };
            default:
                throw new Error("Unary operator " + t.operator + " is not supported")
        }
    }, r.LogicalExpression = function (t) {
        return {
            type: "boolean_and_or",
            params: [this.Node(t.left), this.logicalOperator[t.operator], this.Node(t.right)]
        }
    }, r.BinaryExpression = function (t) {
        var e, n = t.operator;
        if (this.binaryOperator[n]) e = "boolean_basic_operator", n = this.binaryOperator[n]; else {
            if (!this.arithmeticOperator[n]) {
                if (this.divideOperator[n]) return {
                    type: "quotient_and_mod",
                    params: [void 0, this.Node(t.left), void 0, this.Node(t.right), void 0, this.divideOperator[n]]
                };
                if ("**" === n) return this.assert(2 === t.right.value, t.right.value, t, "DEFAULT", "DEFAULT"), {
                    type: "calc_operation",
                    params: [void 0, this.Node(t.left), void 0, "square"]
                };
                throw new Error("Not supported operator " + t.operator)
            }
            e = "calc_basic", n = this.arithmeticOperator[n]
        }
        return {type: e, params: [this.Node(t.left), n, this.Node(t.right)]}
    }, r.FunctionDeclaration = function (t) {
        var e = t.id.name;
        this.assert(!this._isInFuncDef, e, t, "NO_ENTRY_EVENT_FUNCTION", "FUNCTION"), this._isInFuncDef = !0;
        var n = {};
        this.assert(t.body.body[0], e, t, "NO_OBJECT", "OBJECT");
        var r = t.body.body[0].argument.callee.object.body.body;
        if ("when_press_key" === e) if (t.arguments && t.arguments[0]) {
            var o = t.arguments[0].name;
            n.params = [null, Entry.KeyboardCode.map[o] + ""]
        } else n.params = [null, null];
        "when_get_signal" === e && (t.arguments && t.arguments[0] ? (o = t.arguments[0].name, n.params = [null, this.getMessage(o)]) : n.params = [null, null]);
        var a = this.blockSyntax["def " + e];
        if (a) {
            n.type = a.key;
            var s = this.setParams(r);
            return s.unshift(n), this._isInFuncDef = !1, s
        }
        return this.createFunction(t, e, r), this._isInFuncDef = !1, []
    }, r.FunctionExpression = function (t) {
        return this.Node(t.body)
    }, r.ReturnStatement = function (t) {
        return t.argument.arguments.map(this.Node, this)
    }, r.NewExpression = function (t) {
        var e = t.callee;
        return t.arguments, this.Node(e)
    }, r.SubscriptIndex = function (t) {
        var e;
        e = "get_list" === this.Node(t.object).type ? this.blockSyntax["%2[%4]"] : this.blockSyntax["%2[%4]#char_at"];
        var n = this.Block({}, e);
        return n.params = this.Arguments(n.type, t.property.arguments), n
    }, r.Arguments = function (t, e, n) {
        var r, o, a;
        if (a = Entry.block[t], t && "func_" === t.substr(0, 5) || !a) o = e; else {
            var s = this.PySyntax(a, n).match(/%\d+/g, "");
            if (!s) return n || [];
            o = n || new Array;
            for (var i = 0; i < s.length; i++) o[parseInt(s[i].substring(1)) - 1] = e[i];
            r = a.def && a.def.params ? a.def.params : void 0
        }
        var l = o.map(function (t, e) {
            if (t && t.type) {
                var n = a ? a.params[e] : null,
                    o = this.Node(t, "Literal" === t.type ? n : void 0, "Literal" === t.type && r ? r[e] : void 0);
                return this.assert(!("string" == typeof o && "Identifier" === t.type), o, t, "NO_VARIABLE", "VARIABLE"), n ? "Block" !== n.type && o && o.params ? o = o.params[0] : "Block" === n.type && n.isListIndex && (o = this.ListIndex(o)) : o = o, o
            }
            return t
        }, this), c = this.CodeMap(t);
        return c && (l = l.map(function (t, e) {
            return c[e] && t && c[e][this.toLowerCase(t)] || t
        }, this)), l
    }, r.getValue = function (t) {
        var e;
        if ("Literal" === t.type) {
            if ("None" === (e = t.raw)) return;
            return t.value ? t.value.constructor === String ? e = t.raw.includes('"') || t.raw.includes("'") ? t.raw.substr(1, t.raw.length - 2) : t.raw : t.value.constructor === Number && (e = t.value) : e = 0, e
        }
        return (e = this.Node(t)).params && e.params[0] ? e.params[0] : null
    }, r.getMessage = function (t) {
        if (t) {
            t = t.replace(/_space_/gi, " ");
            var e = Entry.variableContainer.messages_.filter(function (e) {
                return e.name === t
            });
            return e.length <= 0 && (Entry.variableContainer.addMessage({name: t}), e = Entry.variableContainer.messages_.filter(function (e) {
                return e.name === t
            })), e && e.length > 0 ? e[0].id : t
        }
    }, r.DropdownDynamic = function (t, e) {
        switch (e.menuName) {
            case"sprites":
            case"spritesWithMouse":
                return (l = Entry.container.objects_.filter(function (e) {
                    return e.name === t
                })) && l.length > 0 ? l[0].id : t;
            case"spritesWithSelf":
                return t ? "self" == t ? t : (l = Entry.container.objects_.filter(function (e) {
                    return e.name === t
                }))[0].id : "None";
            case"collision":
                return (l = Entry.container.objects_.filter(function (e) {
                    return e.name === t
                })) && l.length > 0 ? l[0].id : t;
            case"pictures":
                var n = this.object.getPicture(t);
                return n ? n.id : void 0;
            case"messages":
                return this.getMessage(t);
            case"variables":
                if (!t) return;
                var r;
                return (r = (t = t.split(".")).length > 1 ? Entry.variableContainer.getVariableByName(t[1], !0, this.object.id) : Entry.variableContainer.getVariableByName(t[0], !1, this.object.id)) ? r.id_ : void 0;
            case"lists":
                if (!t) return;
                var o;
                return (o = (t = t.split(".")).length > 1 ? Entry.variableContainer.getListByName(t[1], !0, this.object.id) : Entry.variableContainer.getListByName(t[0], !1, this.object.id)) ? o.id_ : void 0;
            case"scenes":
                var a = Entry.scene.scenes_.filter(function (e) {
                    return e.name === t
                });
                return a[0] ? a[0].id : void 0;
            case"sounds":
                if (t) var s = this.object.getSound(t);
                return s ? s.id : void 0;
            case"clone":
            case"textBoxWithSelf":
                var i;
                if (t) if ("self" == t) i = t; else {
                    var l;
                    i = (l = Entry.container.objects_.filter(function (e) {
                        return e.name === t
                    }))[0] ? l[0].id : null
                } else i = null;
                return i
        }
    }, r.Node = function (t, e) {
        var n = !1;
        "string" == typeof t && t !== e.type ? this.assert(!1, e.name || e.value || e.operator, e, "NO_SUPPORT", "GENERAL") : "string" == typeof t && (n = !0);
        var r = Array.prototype.slice.call(arguments);
        if (n && r.shift(), !this[(e = r[0]).type]) throw new Error(e.type + " is not supported");
        return this[e.type].apply(this, r)
    }, r.PySyntax = function (t, e) {
        if (e) {
            var n = t.syntax.py.filter(function (t) {
                if (!t.params) return !1;
                var n = !0;
                return t.params.map(function (t, r) {
                    t != e[r] && (n = !1)
                }), n
            });
            if (n.length) return n[0].syntax
        }
        var r = t.syntax.py[0];
        return r.syntax || r
    }, r.CodeMap = function (t) {
        for (var e in Entry.CodeMap) if (Entry.CodeMap[e] && Entry.CodeMap[e][t]) return Entry.CodeMap[e][t]
    }, r.Block = function (t, e) {
        return t.type = e.key, e.params && (t.params = e.params.concat()), t
    }, r.ListIndex = function (t) {
        return this.isParamPrimitive(t) ? t.params = [Number(t.params[0]) + 1] : t = "calc_basic" === t.type && "MINUS" === t.params[1] && this.isParamPrimitive(t.params[2]) && t.params[2].params[0] + "" == "1" ? t.params[0] : {
            type: "calc_basic",
            params: [t, "PLUS", {type: "text", params: ["1"]}]
        }, t
    }, r.isParamPrimitive = function (t) {
        return t && ("number" === t.type || "text" === t.type)
    }, r.assert = function (t, e, n, r, o) {
        t || Entry.TextCodingError.error(Entry.TextCodingError.TITLE_CONVERTING, Entry.TextCodingError["MESSAGE_CONV_" + (r || "NO_SUPPORT")], e, n.loc, Entry.TextCodingError["SUBJECT_CONV_" + (o || "GENERAL")])
    }, r.setParams = function (t) {
        for (var e = t.length ? t.map(function (t) {
            var e = this.Node(t);
            return this.assert("object" === (void 0 === e ? "undefined" : (0, a.default)(e)), "", t, "NO_SUPPORT", "GENERAL"), e
        }, this) : [], n = [], r = 0; r < e.length; r++) {
            var o = e[r];
            Array.isArray(o) ? n = n.concat(o) : n.push(o)
        }
        return n.filter(function (t) {
            return t.constructor === Object
        })
    }, r.getVariables = function (t) {
        return t.body.map(function (t) {
            var e, n, r, o = (t = t.expression).left, a = t.right, s = "variables_";
            if (Entry.generateHash(), "=" == t.operator) {
                if ("NewExpression" === a.type && "list" == a.callee.property.name) {
                    s = "lists_";
                    var i = a.arguments.map(this.Node, this);
                    r = i = i.map(function (t) {
                        return t.constructor === Object && "params" in t ? {data: "string" == typeof t.params[0] ? t.params[0].replace(/\\\"/gi, '"') : t.params[0]} : {data: t}
                    })
                } else n = this.getValue(a);
                var l = "add" + s[0].toUpperCase() + s.slice(1, s.length - 2);
                for (var c in Array.isArray(o) || (o = [o]), o) {
                    var u = !1, p = o[c], _ = {variableType: "variable", name: "", visible: !0, object: {}, value: ""};
                    r && (_.array = r), n && (_.value = n), "name" in p ? e = p.name : (u = this.object, e = p.property.name, u = u.id);
                    var d = this.variableExist(e, s);
                    if (d) return "lists_" == s ? void(d.array_ = _.array) : void(d.value_ = this.getValue(a));
                    _.variableType = s.slice(0, length - 2), _.name = e, _.object = u, Entry.variableContainer[l](_)
                }
            }
        }, this), []
    }, r.variableExist = function (t, e) {
        var n = Entry.variableContainer[e];
        return (n = n.map(function (t) {
            return t.name_
        })).indexOf(t) > -1 && Entry.variableContainer[e][n.indexOf(t)]
    }, r.len = function (t) {
        var e = this.Node(t.arguments[0]);
        return this.assert(!("string" == typeof e && "Identifier" === t.arguments[0].type), e, t.arguments[0], "NO_VARIABLE", "VARIABLE"), "get_list" === e.type ? {
            type: "length_of_list",
            params: [void 0, e.params[0]]
        } : {type: "length_of_string", params: [void 0, e]}
    }, r["Hamster.note"] = function (t) {
        var e;
        t.arguments.length > 2 ? e = this.blockSyntax.Hamster.note : (e = this.blockSyntax.Hamster["note#0"], t.arguments.shift());
        var n = this.Block({}, e);
        return n.params = this.Arguments(e.key, t.arguments), t.arguments.length > 2 && (n.params[0] = Entry.CodeMap.Hamster.hamster_play_note_for[0][this.toLowerCase(n.params[0])]), n
    }, r["Hamster.line_tracer_mode"] = function (t) {
        return this.Special(t, "Hamster", "line_tracer_mode")
    }, r["Hamster.io_mode_a"] = function (t) {
        return this.Special(t, "Hamster", "io_mode_a")
    }, r["Hamster.io_mode_b"] = function (t) {
        return this.Special(t, "Hamster", "io_mode_b")
    }, r["Hamster.io_modes"] = function (t) {
        return this.Special(t, "Hamster", "io_modes")
    }, r["Hamster.leds"] = function (t) {
        return this.Special(t, "Hamster", "leds")
    }, r["Hamster.left_led"] = function (t) {
        return this.Special(t, "Hamster", "left_led")
    }, r["Hamster.right_led"] = function (t) {
        return this.Special(t, "Hamster", "right_led")
    }, r["__pythonRuntime.ops.in"] = function (t) {
        return {type: "is_included_in_list", params: this.Arguments("is_included_in_list", t.arguments)}
    }, r.Special = function (t, e, n) {
        var r = {}, o = this.Node(t.arguments[0]);
        this.isParamPrimitive(o) && (o = o.params[0]);
        var a = this.blockSyntax[e][n + "(" + o + ")"];
        return this.Block(r, a), r
    }, r.createFunctionMap = function () {
        this._funcMap = {};
        var t = Entry.variableContainer.functions_;
        for (var e in t) {
            var n = Entry.block["func_" + e], r = n.template.trim().split(" ")[0].trim();
            this._funcMap[r] || (this._funcMap[r] = {}), this._funcMap[r][n.params.length - 1] = e
        }
    }, r.createFunction = function (t, e, n) {
        var r = t.arguments ? t.arguments.map(this.Node, this) : [], a = Entry.variableContainer.functions_,
            s = Entry.generateHash();
        for (var i in a) {
            var l = Entry.block["func_" + i];
            if (l.params.length === r.length + 1 && l.template.trim().split(" ")[0].trim() === e) {
                s = i;
                break
            }
        }
        var c = {type: "function_field_label", params: [e]},
            u = {id: s, content: [[{type: "function_create", params: [c]}]]};
        for (this._funcMap[e] || (this._funcMap[e] = {}), this._funcMap[e][r.length] = u.id; r.length;) {
            var p = r.shift(), _ = Entry.Func.requestParamBlock("string"),
                d = {type: "function_field_string", params: [{type: _}]};
            _ = _.split("_")[1], this._funcParamMap[p] = _, c.params.push(d), c = d
        }
        var y = this.setParams(n);
        if (this._funcParamMap = {}, u.content[0] = u.content[0].concat(y), u.content = (0, o.default)(u.content), a[s]) {
            var g = a[s];
            g.content = new Entry.Code(u.content), g.generateBlock(!0), Entry.Func.generateWsBlock(g)
        } else Entry.variableContainer.setFunctions([u])
    }, r.ClassDeclaration = function (t) {
        var e = this.Node(t.id);
        this.assert(!1, e, t, "NO_OBJECT", "OBJECT")
    }, r.searchSyntax = function (t) {
        var e, n, r = !1;
        if (t instanceof Entry.BlockView ? (e = t.block._schema, n = t.block.data.params) : t instanceof Entry.Block ? (e = t._schema, n = t.params) : (e = t, r = !0), e && e.syntax) for (var o = e.syntax.py.concat(); o.length;) {
            var a = !1, s = o.shift();
            if ("string" == typeof s) return {syntax: s, template: s};
            if (s.params) for (var i = 0; i < s.params.length; i++) if (!0 !== r && s.params[i] && s.params[i] !== n[i]) {
                a = !0;
                break
            }
            if (s.template || (s.template = s.syntax), !a) return s
        }
        return null
    }, r.toLowerCase = function (t) {
        return t && t.toLowerCase ? t.toLowerCase() : t
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a, s = (r = n(0)) && r.__esModule ? r : {default: r};
    n(52), n(135), n(134), n(133), n(132), Entry.Parser = function (t, e, n, r) {
        if (this._mode = t, this.syntax = {}, this.codeMirror = n, this._lang = r, this._type = e, this.availableCode = [], this._syntax_cache = {}, this._pyThreadCount = 1, this._pyBlockCount = {}, Entry.Parser.PARSE_GENERAL = 1, Entry.Parser.PARSE_SYNTAX = 2, Entry.Parser.PARSE_VARIABLE = 3, Entry.Parser.PARSE_BLOCK = 4, this._onError = !1, this._onRunError = !1, "workspace" === Entry.type) {
            this._console = new Entry.Console;
            var o = function () {
                var t = this._mode;
                null !== t && (this.setAvailableCode(), delete this._syntax_cache[t], this.syntax = this.mappingSyntax(t), this._pyHinter && this._pyHinter.setSyntax(this.syntax))
            }.bind(this);
            Entry.addEventListener("hwCodeGenerated", o)
        }
    }, o = Entry.Parser.prototype, a = {
        "Hamster.LINE_TRACER_MODE_OFF": "0",
        "Hamster.LINE_TRACER_MODE_BLACK_LEFT_SENSOR": "1",
        "Hamster.LINE_TRACER_MODE_BLACK_RIGHT_SENSOR": "2",
        "Hamster.LINE_TRACER_MODE_BLACK_BOTH_SENSORS": "3",
        "Hamster.LINE_TRACER_MODE_BLACK_TURN_LEFT": "4",
        "Hamster.LINE_TRACER_MODE_BLACK_TURN_RIGHT": "5",
        "Hamster.LINE_TRACER_MODE_BLACK_MOVE_FORWARD": "6",
        "Hamster.LINE_TRACER_MODE_BLACK_UTURN": "7",
        "Hamster.LINE_TRACER_MODE_WHITE_LEFT_SENSOR": "8",
        "Hamster.LINE_TRACER_MODE_WHITE_RIGHT_SENSOR": "9",
        "Hamster.LINE_TRACER_MODE_WHITE_BOTH_SENSORS": "10",
        "Hamster.LINE_TRACER_MODE_WHITE_TURN_LEFT": "11",
        "Hamster.LINE_TRACER_MODE_WHITE_TURN_RIGHT": "12",
        "Hamster.LINE_TRACER_MODE_WHITE_MOVE_FORWARD": "13",
        "Hamster.LINE_TRACER_MODE_WHITE_UTURN": "14",
        "Hamster.LED_OFF": "0",
        "Hamster.LED_BLUE": "1",
        "Hamster.LED_GREEN": "2",
        "Hamster.LED_CYAN": "3",
        "Hamster.LED_RED": "4",
        "Hamster.LED_MAGENTA": "5",
        "Hamster.LED_YELLOW": "6",
        "Hamster.LED_WHITE": "7",
        "Hamster.IO_MODE_ANALOG_INPUT": "0",
        "Hamster.IO_MODE_DIGITAL_INPUT": "1",
        "Hamster.IO_MODE_SERVO_OUTPUT": "8",
        "Hamster.IO_MODE_PWM_OUTPUT": "9",
        "Hamster.IO_MODE_DIGITAL_OUTPUT": "10"
    }, o.setParser = function (t, e, n) {
        if (this._mode !== t || this._type !== e) switch (this._mode = t, this._type = e, this._cm = n, this.syntax = this.mappingSyntax(t), e) {
            case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
                this._execParser = new Entry.JsToBlockParser(this.syntax, this), this._execParserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK;
                break;
            case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
                this._execParser = new Entry.PyToBlockParser(this.syntax), this._execParserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK;
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
                this._execParser = new Entry.BlockToJsParser(this.syntax, this), this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS;
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
                this._execParser = new Entry.BlockToPyParser(this.syntax), n && n.setOption("mode", {
                    name: "python",
                    globalVars: !0
                }), this._execParserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY
        }
    }, o.parse = function (t, e) {
        var n = "";
        switch (this._type) {
            case Entry.Vim.PARSER_TYPE_JS_TO_BLOCK:
                try {
                    (p = []).push(t);
                    var r = [];
                    for (var o in p) {
                        d = (d = p[o]).trim();
                        var a = acorn.parse(d);
                        r.push(a)
                    }
                    n = this._execParser.Program(r)
                } catch (t) {
                    if (this.codeMirror) {
                        var i, l;
                        t instanceof SyntaxError ? (y = {
                            from: {line: t.loc.line - 1, ch: 0},
                            to: {line: t.loc.line - 1, ch: t.loc.column}
                        }, t.message = "문법(Syntax) 오류입니다.", t.type = 1) : ((y = this.getLineNumber(t.node.start, t.node.end)).message = t.message, y.severity = "converting error", t.type = 2), this.codeMirror.markText(y.from, y.to, {
                            className: "CodeMirror-lint-mark-error",
                            __annotation: y,
                            clearOnEnter: !0
                        }), i = t.title ? t.title : "문법 오류", 2 == t.type && t.message ? l = t.message : 2 != t.type || t.message ? 1 == t.type && (l = "자바스크립트 문법을 확인해주세요.") : l = "자바스크립트 코드를 확인해주세요.", Entry.toast.alert(i, l);
                        var c = {};
                        throw c.boardType = Entry.Workspace.MODE_BOARD, c.textType = Entry.Vim.TEXT_TYPE_JS, c.runType = Entry.Vim.MAZE_MODE, Ntry.dispatchEvent("textError", c), t
                    }
                    n = []
                }
                break;
            case Entry.Vim.PARSER_TYPE_PY_TO_BLOCK:
                try {
                    this._pyBlockCount = {}, this._pyThreadCount = 1;
                    var u = new Entry.PyAstGenerator, p = this.makeThreads(t), _ = (r = [], 0);
                    for (o = 0; o < p.length; o++) {
                        var d;
                        0 !== (d = p[o]).length && (d = d.replace(/\t/gm, "    "), (a = u.generate(d)) && (this._pyThreadCount = _++, this._pyBlockCount[_] = d.split("\n").length - 1, 0 !== a.body.length && r.push(a)))
                    }
                    n = this._execParser.Programs(r), this._onError = !1;
                    break
                } catch (t) {
                    if (this._onError = !0, n = [], this.codeMirror) {
                        if (t instanceof SyntaxError) {
                            var y = {
                                from: {line: (g = this.findSyntaxError(t)).from.line - 1, ch: g.from.ch},
                                to: {line: g.to.line - 1, ch: g.to.ch}
                            };
                            t.type = "syntax"
                        } else {
                            var g;
                            y = {
                                from: {line: (g = t.line).start.line + 1, ch: g.start.column},
                                to: {line: g.end.line + 1, ch: g.end.column}
                            }, t.type = "converting"
                        }
                        var h = {
                            className: "CodeMirror-lint-mark-error",
                            __annotation: y,
                            clearOnEnter: !0,
                            inclusiveLeft: !0,
                            inclusiveRigth: !0,
                            clearWhenEmpty: !1
                        };
                        if (this._marker = this.codeMirror.markText(y.from, y.to, h), "syntax" == t.type) var m = t.title,
                            b = this.makeSyntaxErrorDisplay(t.subject, t.keyword, t.message, g.from.line); else "converting" == t.type && (m = t.title, b = t.message);
                        throw Entry.toast.alert(m, b), t
                    }
                }
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_JS:
                n = E = this._execParser.Code(t, e);
                break;
            case Entry.Vim.PARSER_TYPE_BLOCK_TO_PY:
                try {
                    if (Entry.getMainWS().blockMenu.renderText(), n = "", e === Entry.Parser.PARSE_BLOCK && "func_" === t.type.substr(0, 5)) var f = (0, s.default)(this._execParser._funcDefMap);
                    var E = this._execParser.Code(t, e);
                    if (this._pyHinter || (this._pyHinter = new Entry.PyHint(this.syntax)), this._hasDeclaration || this.initDeclaration(), e == Entry.Parser.PARSE_GENERAL) {
                        this.py_variableDeclaration && (n += this.py_variableDeclaration), this.py_listDeclaration && (n += this.py_listDeclaration), (this.py_variableDeclaration || this.py_listDeclaration) && (n += "\n");
                        var v = this._execParser._funcDefMap, k = "";
                        for (var T in v) k += v[T] + "\n\n";
                        n += k
                    } else e === Entry.Parser.PARSE_BLOCK && f && f.indexOf(t.type) < 0 && (n += this._execParser._funcDefMap[t.type] + "\n\n");
                    E && (n += E.trim()), n = n.replace(/\t/g, "    "), this._hasDeclaration && this.removeDeclaration()
                } catch (t) {
                    throw t.block && Entry.toast.alert(Lang.TextCoding.title_converting, Lang.TextCoding.alert_legacy_no_support), t
                }
        }
        return n
    }, o.getLineNumber = function (t, e) {
        var n = this.codeMirror.getValue(), r = {from: {}, to: {}}, o = n.substring(0, t).split(/\n/gi);
        r.from.line = o.length - 1, r.from.ch = o[o.length - 1].length;
        var a = n.substring(0, e).split(/\n/gi);
        return r.to.line = a.length - 1, r.to.ch = a[a.length - 1].length, r
    }, o.mappingSyntax = function (t) {
        var e = this;
        if (this._syntax_cache[t]) return this._syntax_cache[t];
        var n = (0, s.default)(Entry.block), r = this.setAvailableCode(), o = {};
        t === Entry.Vim.WORKSPACE_MODE && (o["#dic"] = {});
        for (var a = 0; a < n.length; a++) {
            var i = n[a];
            if (!(t === Entry.Vim.MAZE_MODE && r && r.indexOf(i) < 0)) {
                var l = Entry.block[i];
                if (t === Entry.Vim.MAZE_MODE) {
                    var c = l.syntax;
                    if (!c) continue;
                    if (l.syntax.py) continue;
                    for (var u = o, p = 0; p < c.length; p++) {
                        var _ = c[p];
                        if (p === c.length - 2 && "function" == typeof c[p + 1]) {
                            u[_] = c[p + 1];
                            break
                        }
                        u[_] || (u[_] = {}), p === c.length - 1 ? u[_] = i : u = u[_]
                    }
                } else if (t === Entry.Vim.WORKSPACE_MODE) {
                    _ = i;
                    var d = l.syntax && l.syntax.py;
                    if (!d) continue;
                    d.map(function (t, n) {
                        var r, a;
                        "string" == typeof t ? (a = t, (r = {}).key = _, r.syntax = t, r.template = t) : (r = t, a = t.syntax, t.key = _, t.template || (r.template = t.syntax), t.dic && (o["#dic"][t.dic] = _)), 0 === n && (r.isDefault = !0), a = a.split("("), a = (a = /%/.test(a[1]) && a[0].length ? a[0] : a.join("(")).replace(/\(\):?/, ""), t.keyOption && (a += "#" + t.keyOption), a = a.split(".");
                        var s = [];
                        s.push(a.shift());
                        var i = a.join(".");
                        "" !== i && s.push(i), a = s;
                        var l = o;
                        for (n = 0; n < a.length; n++) {
                            var c = a[n];
                            if (n === a.length - 1) {
                                l[c] = r;
                                var u = e._getAnotherSyntaxKey(c);
                                u && (l[u] = r);
                                break
                            }
                            l[c] || (l[c] = {}), l = l[c]
                        }
                    })
                }
            }
        }
        return this._syntax_cache[t] = o, o
    }, o.setAvailableCode = function () {
        var t = Entry.getMainWS();
        if (t) {
            var e = t.blockMenu, n = t.board, r = Entry.conatainer, o = [];
            return e && e.code && (o = o.concat(e.code.getBlockList())), r ? o = o.concat(r.getBlockList()) : !r && n && n.code && (o = o.concat(n.code.getBlockList())), o = (o = o.map(function (t) {
                return t.type
            })).filter(function (t, e) {
                return o.indexOf(t) === e
            }), this.availableCode = o, o
        }
    }, o.findSyntaxError = function (t, e) {
        var n = t.loc;
        return n.line = n.line + 2, {from: {line: n.line, ch: n.column}, to: {line: n.line, ch: n.column + t.tokLen}}
    }, o.makeThreads = function (t) {
        for (var e = t.split("\n"), n = [], r = "", o = !1, a = 0, s = 3; s < e.length; s++) {
            var i = e[s] + "\n";
            Entry.TextCodingUtil.isEntryEventFuncByFullText(i) ? (i = this.entryEventParamConverter(i), 0 !== r.length && (n.push(l(r)), a = s - 2), r = "", r += i, o = !0) : (Entry.TextCodingUtil.isEntryEventFuncByFullText(i.trim()) && (i = this.entryEventParamConverter(i)), 1 != i.length || o ? 1 != i.length && " " != i.charAt(0) && o && (n.push(l(r)), a = s - 2, r = "", o = !1) : (n.push(l(r)), a = s - 2, r = ""), r += i)
        }

        function l(t) {
            return new Array(a + 1).join("\n") + t
        }

        return n.push(l(r)), n
    }, o.entryEventParamConverter = function (t) {
        return t
    }, o.makeSyntaxErrorDisplay = function (t, e, n, r) {
        return "[" + t + "] " + (e ? "'" + e + "' " : "") + " : " + n + " (line " + r + ")"
    }, o.initDeclaration = function () {
        this.py_variableDeclaration = Entry.TextCodingUtil.generateVariablesDeclaration(), this.py_listDeclaration = Entry.TextCodingUtil.generateListsDeclaration(), this._hasDeclaration = !0
    }, o.removeDeclaration = function () {
        this.py_variableDeclaration = null, this.py_listDeclaration = null
    }, o._getAnotherSyntaxKey = function (t) {
        var e = !1;
        for (var n in a) t.indexOf(n) > -1 && (e = !0, t = t.replace(new RegExp(n, "gm"), a[n]));
        if (e) return t
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Workspace = function (t) {
        Entry.Model(this, !1), this.dSetMode = Entry.Utils.debounce(this.setMode, 200), this.dReDraw = Entry.Utils.debounce(this.reDraw, 150), this.observe(this, "_handleChangeBoard", ["selectedBoard"], !1), this.trashcan = new Entry.FieldTrashcan, this.readOnly = void 0 !== t.readOnly && t.readOnly, this.blockViewMouseUpEvent = new Entry.Event(this), this.widgetUpdateEvent = new Entry.Event(this), this._blockViewMouseUpEvent = null, this.widgetUpdateEveryTime = !1, this._hoverBlockView = null;
        var e = t.blockMenu;
        e && (this.blockMenu = new Entry.BlockMenu(e.dom, e.align, e.categoryData, e.scroll, this.readOnly), this.blockMenu.workspace = this, this.blockMenu.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1)), (e = t.board) && (e.workspace = this, e.readOnly = this.readOnly, this.board = new Entry.Board(e), this.board.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1), this.set({selectedBoard: this.board})), (e = t.vimBoard) && (this.vimBoard = new Entry.Vim(e.dom), this.vimBoard.workspace = this), this.board && this.vimBoard && this.vimBoard.hide(), Entry.GlobalSvg.createDom(), this.mode = Entry.Workspace.MODE_BOARD, this.attachKeyboardCapture(), this.changeEvent = new Entry.Event(this), Entry.commander.setCurrentEditor("board", this.board), void 0 !== t.textType ? this.textType = t.textType : this.textType = Entry.Vim.TEXT_TYPE_PY, this.oldMode = Entry.Workspace.MODE_BOARD, this.mode = Entry.Workspace.MODE_BOARD
    }, Entry.Workspace.MODE_BOARD = 0, Entry.Workspace.MODE_VIMBOARD = 1, Entry.Workspace.MODE_OVERLAYBOARD = 2, (r = Entry.Workspace.prototype).schema = {
        selectedBlockView: null,
        selectedBoard: null
    }, r.getBoard = function () {
        return this.board
    }, r.getSelectedBoard = function () {
        return this.selectedBoard
    }, r.getBlockMenu = function () {
        return this.blockMenu
    }, r.getVimBoard = function () {
        return this.vimBoard
    }, r.getMode = function () {
        return this.mode
    }, r.setMode = function (t, e, n) {
        if (!Entry.options || Entry.options.textCodingEnable || Entry.Workspace.MODE_VIMBOARD !== t.boardType) {
            Entry.disposeEvent.notify();
            var r = Entry.playground;
            if (!n && !function (t, e) {
                    return !("workspace" === Entry.type && !t && (entrylms.alert(Lang.Workspace.object_not_exist_error), 1))
                }(r && r.object)) return !1;
            if (Entry.Utils.isNumber(t) ? this.mode = t : (this.mode = t.boardType, this.runType = t.runType, this.textType = t.textType), this.mode = Number(this.mode), this.oldMode !== this.mode) {
                var o = Entry.Vim, a = Entry.Workspace, s = this.blockMenu, i = Entry.TextCodingUtil;
                switch (this.mode) {
                    case a.MODE_VIMBOARD:
                        var l;
                        if (l = i.isNamesIncludeSpace()) {
                            entrylms.alert(l), (t = {}).boardType = a.MODE_BOARD, t.textType = -1, Entry.getMainWS().setMode(t);
                            break
                        }
                        if (l = i.isNameIncludeNotValidChar()) return entrylms.alert(l), (t = {}).boardType = a.MODE_BOARD, t.textType = -1, void Entry.getMainWS().setMode(t);
                        if (l = i.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD)) return void entrylms.alert(l);
                        try {
                            this.board && this.board.hide(), this.overlayBoard && this.overlayBoard.hide(), this.set({selectedBoard: this.vimBoard}), this.vimBoard.show(), s.banClass("functionInit", !0), this.codeToText(this.board.code, t), this.oldTextType = this.textType, this.board.clear()
                        } catch (e) {
                            this.vimBoard.hide(), this.board.show(), s.unbanClass("functionInit"), this.set({selectedBoard: this.board}), this.mode = a.MODE_BOARD, t.boardType = a.MODE_BOARD, this.oldTextType == o.TEXT_TYPE_JS ? t.runType = o.MAZE_MODE : this.oldTextType == o.TEXT_TYPE_PY && (t.runType = o.WORKSPACE_MODE), e.block && Entry.getMainWS() && Entry.getMainWS().board.activateBlock(e.block)
                        }
                        break;
                    case a.MODE_BOARD:
                        try {
                            this.board.show(), s.unbanClass("functionInit", !0), this.set({selectedBoard: this.board}), this.textToCode(this.oldMode, this.oldTextType), this.overlayBoard && this.overlayBoard.hide(), this.oldTextType = this.textType, this.vimBoard && this.vimBoard.hide()
                        } catch (e) {
                            this.board && this.board.code && this.board.code.clear(), this.board && this.board.hide(), this.set({selectedBoard: this.vimBoard}), s.banClass("functionInit"), this.mode = a.MODE_VIMBOARD, this.oldTextType == o.TEXT_TYPE_JS ? (t.boardType = a.MODE_VIMBOARD, t.textType = o.TEXT_TYPE_JS, t.runType = o.MAZE_MODE, this.oldTextType = o.TEXT_TYPE_JS) : this.oldTextType == o.TEXT_TYPE_PY && (t.boardType = a.MODE_VIMBOARD, t.textType = o.TEXT_TYPE_PY, t.runType = o.WORKSPACE_MODE, this.oldTextType = o.TEXT_TYPE_PY)
                        }
                        Entry.commander.setCurrentEditor("board", this.board);
                        break;
                    case a.MODE_OVERLAYBOARD:
                        this.oldMode == a.MODE_VIMBOARD ? this.overlayModefrom = a.MODE_VIMBOARD : this.oldMode == a.MODE_BOARD && (this.overlayModefrom = a.MODE_BOARD), this.overlayBoard || this.initOverlayBoard(), this.overlayBoard.show(), this.set({selectedBoard: this.overlayBoard}), Entry.commander.setCurrentEditor("board", this.overlayBoard)
                }
                this.oldMode = this.mode, Entry.isTextMode = this.mode == a.MODE_VIMBOARD, s.align(), Entry.dispatchEvent("workspaceChangeMode"), this.changeEvent.notify(e), Entry.dispatchEvent("cancelBlockMenuDynamic")
            }
        }
    }, r.changeBoardCode = function (t, e) {
        this._syncTextCode();
        var n = this.mode === Entry.Workspace.MODE_VIMBOARD;
        if (this.board.changeCode(t, n, e), n) {
            var r = {};
            r.textType = this.textType, r.boardType = this.boardType, r.runType = this.runType, this.codeToText(this.board.code, r)
        }
    }, r.changeOverlayBoardCode = function (t) {
        this.overlayBoard && this.overlayBoard.changeCode(t)
    }, r.changeBlockMenuCode = function (t) {
        this.blockMenu.changeCode(t)
    }, r.textToCode = function (t, e) {
        if (this.vimBoard && t === Entry.Workspace.MODE_VIMBOARD) {
            var n = this.vimBoard.textToCode(e), r = this.board.code;
            r && (r.load(n), this.changeBoardCode(r), setTimeout(function () {
                r.view && (r.view.reDraw(), this.board.alignThreads())
            }.bind(this), 0))
        }
    }, r.codeToText = function (t, e) {
        if (this.vimBoard) return t = t || this.board.code, e = e || {
            textType: this.textType,
            boardType: this.boardType,
            runType: this.runType
        }, this.vimBoard.codeToText(t, e)
    }, r.getCodeToText = function (t) {
        if (this.vimBoard) return this.vimBoard.getCodeToText(t)
    }, r._setSelectedBlockView = function () {
        var t = "selectedBlockView",
            e = this.board[t] || this.blockMenu[t] || (this.overlayBoard ? this.overlayBoard[t] : null);
        if (this._unbindBlockViewMouseUpEvent(), this.set({selectedBlockView: e}), e) {
            this.setHoverBlockView();
            var n = this;
            this._blockViewMouseUpEvent = e.mouseUpEvent.attach(this, function () {
                n.blockViewMouseUpEvent.notify(e)
            })
        }
    }, r.initOverlayBoard = function () {
        this.overlayBoard = new Entry.Board({
            dom: this.board.view,
            workspace: this,
            isOverlay: !0
        }), this.overlayBoard.changeCode(new Entry.Code([])), this.overlayBoard.workspace = this, this.overlayBoard.observe(this, "_setSelectedBlockView", ["selectedBlockView"], !1)
    }, r._keyboardControl = function (t, e) {
        if (!Entry.Loader || Entry.Loader.isLoaded()) {
            var n = t.keyCode || t.which, r = t.ctrlKey, o = t.shiftKey, a = t.altKey, s = Entry.playground,
                i = s && s.object ? s.object : void 0;
            if (!Entry.Utils.isInInput(t) || e) {
                var l, c = this._isVimMode(), u = this.selectedBlockView, p = this.selectedBoard, _ = p.readOnly;
                if (r) {
                    if ([219, 221].indexOf(n) > -1 && !y(i)) return;
                    switch (n) {
                        case 86:
                            !_ && p && p instanceof Entry.Board && Entry.clipboard && Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard();
                            break;
                        case 219:
                            if (!Entry.options.textCodingEnable) return;
                            if (Entry.getMainWS().oldMode == Entry.Workspace.MODE_OVERLAYBOARD) return;
                            if (d = Entry.TextCodingUtil.isNamesIncludeSpace()) return void entrylms.alert(d);
                            this.dSetMode({boardType: Entry.Workspace.MODE_BOARD, textType: -1}), t.preventDefault();
                            break;
                        case 221:
                            if (!Entry.options.textCodingEnable) return;
                            var d;
                            if (d = Entry.TextCodingUtil.canConvertTextModeForOverlayMode(Entry.Workspace.MODE_VIMBOARD)) return void entrylms.alert(d);
                            if (d = Entry.TextCodingUtil.isNamesIncludeSpace()) return void entrylms.alert(d);
                            this.dSetMode({
                                boardType: Entry.Workspace.MODE_VIMBOARD,
                                textType: Entry.Vim.TEXT_TYPE_PY,
                                runType: Entry.Vim.WORKSPACE_MODE
                            }), t.preventDefault();
                            break;
                        case 67:
                            u && !u.isInBlockMenu && u.block.isDeletable() && u.block.isCopyable() && u.block.copyToClipboard();
                            break;
                        case 88:
                            !_ && u && !u.isInBlockMenu && u.block.isDeletable() && ((l = u.block).copyToClipboard(), l.destroy(!0, !0), u.getBoard().setSelectedBlock(null))
                    }
                } else if (a) {
                    if ([49, 50, 51, 52, 219, 221].indexOf(n) > -1 && !y(i)) return;
                    switch (n) {
                        case 49:
                            s.changeViewMode("code"), t.preventDefault();
                            break;
                        case 50:
                            s.changeViewMode("picture"), t.preventDefault();
                            break;
                        case 51:
                            s.changeViewMode("sound"), t.preventDefault();
                            break;
                        case 52:
                            s.toggleOnVariableView(), s.changeViewMode("variable"), t.preventDefault();
                            break;
                        case 219:
                            Entry.container && (t.preventDefault(), Entry.container.selectNeighborObject("prev"));
                            break;
                        case 221:
                            Entry.container && (t.preventDefault(), Entry.container.selectNeighborObject("next"))
                    }
                } else if (o) switch (n) {
                    case 9:
                        c && (CodeMirror.commands.indentLess(this.vimBoard.codeMirror), t.preventDefault())
                } else switch (n) {
                    case 9:
                        c && (CodeMirror.commands.indentMore(this.vimBoard.codeMirror), t.preventDefault());
                        break;
                    case 8:
                    case 46:
                        _ || !u || u.isInBlockMenu || !u.block.isDeletable() || u.isFieldEditing() || (Entry.do("destroyBlock", u.block), this.board.set({selectedBlockView: null}), t.preventDefault())
                }
                setTimeout(function () {
                    Entry.disposeEvent && Entry.disposeEvent.notify(t)
                }, 0)
            }
        }

        function y(t, e) {
            return !!t || (e = e || "오브젝트가 존재하지 않습니다. 오브젝트를 추가한 후 시도해주세요.", entrylms.alert(e), !1)
        }
    }, r._handleChangeBoard = function () {
        var t = this.selectedBoard;
        t && t.constructor === Entry.Board && this.trashcan.setBoard(t)
    }, r._syncTextCode = function () {
        if (!(this.mode !== Entry.Workspace.MODE_VIMBOARD || Entry.engine && Entry.engine.isState("run"))) {
            var t = this.vimBoard.textToCode(this.textType), e = this.board.code;
            e && e.load(t);
            var n = Entry.creationChangedEvent;
            n && n.notify(!0)
        }
    }, r.addVimBoard = function (t) {
        this.vimBoard || (this.vimBoard = new Entry.Vim(t), this.vimBoard.workspace = this, this.vimBoard.hide())
    }, r.getParserType = function () {
        return this.vimBoard._parserType
    }, r.getBlockViewRenderMode = function () {
        switch (this.mode) {
            case Entry.Workspace.MODE_BOARD:
            case Entry.Workspace.MODE_OVERLAYBOARD:
                return Entry.BlockView.RENDER_MODE_BLOCK;
            case Entry.Workspace.MODE_VIMBOARD:
                return Entry.BlockView.RENDER_MODE_TEXT
        }
    }, r._isVimMode = function () {
        return this.oldMode === Entry.Workspace.MODE_VIMBOARD
    }, r.isVimMode = r._isVimMode, r.attachKeyboardCapture = function () {
        Entry.keyPressed && (this._keyboardEvent && this.detachKeyboardCapture(), this._keyboardEvent = Entry.keyPressed.attach(this, this._keyboardControl))
    }, r.detachKeyboardCapture = function () {
        Entry.keyPressed && this._keyboardEvent && (this._keyboardEvent.destroy(), delete this._keyboardEvent)
    }, r._unbindBlockViewMouseUpEvent = function () {
        this._blockViewMouseUpEvent && (this.selectedBlockView, this._blockViewMouseUpEvent.destroy(), this._blockViewMouseUpEvent = null)
    }, r.setWidgetUpdateEveryTime = function (t) {
        this.widgetUpdateEveryTime = !!t
    }, r.syncCode = function () {
        switch (this.mode) {
            case Entry.Workspace.MODE_VIMBOARD:
                this._syncTextCode()
        }
    }, r.setHoverBlockView = function (t) {
        var e = this._hoverBlockView;
        e && e.resetBackgroundPath(), this._hoverBlockView = t, t && t.setBackgroundPath()
    }, r.reDraw = function () {
        var t = this.blockMenu, e = this.board;
        t && t.reDraw(), e && e.reDraw()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Vim = function (t, e) {
        if ("DIV" !== (t = "string" == typeof t ? $("#" + t) : $(t)).prop("tagName")) return console.error("Dom is not div element");
        this._parentView = t, this.createDom(t), this._parser = new Entry.Parser(null, null, this.codeMirror), Entry.addEventListener("hwChanged", function (t) {
            if (Entry.hw.hwModule) {
                var e = Entry.hw.hwModule.name;
                "ArduinoExt" == (e = e[0].toUpperCase() + e.slice(1)) && (e = "Arduino"), Entry.Vim.PYTHON_IMPORT_HW = "\nimport " + e + "\n", Entry.Vim.INEDITABLE_LINE_PY = 4
            } else Entry.Vim.PYTHON_IMPORT_HW = "", Entry.Vim.INEDITABLE_LINE_PY = 3
        })
    }, Entry.Vim.MAZE_MODE = 1, Entry.Vim.WORKSPACE_MODE = 2, Entry.Vim.TEXT_TYPE_JS = 0, Entry.Vim.TEXT_TYPE_PY = 1, Entry.Vim.PARSER_TYPE_JS_TO_BLOCK = 0, Entry.Vim.PARSER_TYPE_PY_TO_BLOCK = 1, Entry.Vim.PARSER_TYPE_BLOCK_TO_JS = 2, Entry.Vim.PARSER_TYPE_BLOCK_TO_PY = 3, Entry.Vim.INEDITABLE_LINE_PY = 3, Entry.Vim.PYTHON_IMPORT_ENTRY = "import Entry", Entry.Vim.PYTHON_IMPORT_HW = "", (r = Entry.Vim.prototype).createDom = function (t) {
        var e, n, r;
        e = t, this.view = Entry.Dom("div", {
            parent: e,
            class: "entryVimBoard"
        }), this.codeMirror = CodeMirror(this.view[0], {
            lineNumbers: !0,
            value: "",
            mode: {name: "javascript", globalVars: !0},
            theme: "default",
            indentUnit: 4,
            indentWithTabs: !0,
            styleActiveLine: !0,
            extraKeys: {
                "Ctrl-Space": "autocomplete", Tab: function (t) {
                    var e = Array(t.getOption("indentUnit") + 1).join(" ");
                    t.replaceSelection(e)
                }
            },
            lint: !0,
            viewportMargin: 10
        });
        var o = Entry.Utils.debounce(function () {
            Entry.isTextMode && this.codeMirror.showHint({completeSingle: !1, globalScope: this._getAssistScope()})
        }.bind(this), 250);
        this.codeMirror.on("keydown", function (t, e) {
            Entry && Entry.keyPressed && Entry.keyPressed.notify(e, !0), 1 === e.key.length && o()
        }.bind(this));
        var a = Entry.Utils.debounce(function () {
            var t = this.codeMirror.display && this.codeMirror.display.input ? this.codeMirror.display.input : void 0;
            t && t.composing && (t.poll(), t.composing.range.clear(), t.composing = null)
        }.bind(this), 250);

        function s(t) {
            var e = t.block;
            if (e) {
                var r = n.codeMirror, o = n.getCodeToText(e, Entry.Parser.PARSE_BLOCK);
                r.display.dragFunctions.leave(t), r.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent("mousedown", t));
                var a = o.split("\n"), s = a.length - 1, i = n.doc.getCursor().line;
                a.forEach(function (t, e) {
                    e != s && (t += "\n"), r.replaceSelection(t)
                }), e.statements && e.statements.length && (i++, r.setCursor(i), r.getLine(i) && (r.replaceSelection("\n"), r.setCursor(i)), CodeMirror.commands.indentAuto(r)), r.display.scroller.dispatchEvent(Entry.Utils.createMouseEvent("mouseup", t))
            }
        }

        function i(t) {
            n.codeMirror.display.dragFunctions.over(t)
        }

        this.codeMirror.on("keyup", function (t, e) {
            a(), "Backspace" === e.key && o()
        }.bind(this)), this.doc = this.codeMirror.getDoc(), n = this, (r = this.view[0]).removeEventListener("dragEnd", s), r.removeEventListener("dragOver", i), r.addEventListener("dragEnd", s), r.addEventListener("dragOver", i)
    }, r.hide = function () {
        this.view.addClass("entryRemove"), this.view.remove()
    }, r.show = function () {
        this.view.removeClass("entryRemove"), this._parentView.append(this.view)
    }, r.clearText = function () {
        this.codeMirror.setValue("")
    }, r.textToCode = function (t) {
        var e = t;
        e === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_JS_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : e === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_PY_TO_BLOCK, this._parser.setParser(this._mode, this._parserType, this.codeMirror));
        var n = this.codeMirror.getValue(), r = this.doc.getCursor();
        return n = n.replace(/\t/gm, "    "), this.codeMirror.setValue(n), this.doc.setCursor(r), this._parser.parse(n)
    }, r.codeToText = function (t, e) {
        var n;
        e && (this._mode = e.runType);
        var r = e.textType;
        if (this._oldParserType = e.textType, r === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType) : r === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._oldParserType != this._parserType && this._parser.setParser(this._mode, this._parserType, this.codeMirror), this._oldParserType = this._parserType), Entry.playground && (this._currentObject = Entry.playground.object), this._parser._hasDeclaration = !1, r == Entry.Vim.TEXT_TYPE_PY) if (this._currentObject) {
            n = "# " + this._currentObject.name + Lang.TextCoding.python_code;
            var o = this._parser.parse(t, Entry.Parser.PARSE_GENERAL);
            r === Entry.Vim.TEXT_TYPE_PY && (o = n.concat("\n\n").concat(Entry.Vim.PYTHON_IMPORT_ENTRY).concat(Entry.Vim.PYTHON_IMPORT_HW).concat("\n\n").concat(o)), this.codeMirror.setValue(o), r == Entry.Vim.TEXT_TYPE_PY && this.codeMirror.getDoc().markText({
                line: 0,
                ch: 0
            }, {line: Entry.Vim.INEDITABLE_LINE_PY, ch: 0}, {
                readOnly: !0,
                inclusiveLeft: !0
            }), (a = this.codeMirror.getDoc()).setCursor({line: a.lastLine() - 1})
        } else this.clearText(); else if (r == Entry.Vim.TEXT_TYPE_JS) {
            var a;
            o = this._parser.parse(t, Entry.Parser.PARSE_GENERAL), this.codeMirror.setValue(o), (a = this.codeMirror.getDoc()).setCursor({line: a.lastLine() - 1})
        }
        Entry.isTextMode && (this._parser._onRunError = !1)
    }, r.getCodeToText = function (t, e) {
        var n = this.workspace.oldTextType;
        return n === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : n === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror)), e ? this._parser.parse(t, e) : this._parser.parse(t, Entry.Parser.PARSE_SYNTAX)
    }, r.setParserAvailableCode = function (t, e) {
        this._parser.setAvailableCode(t, e)
    }, r.getBlockSyntax = function (t) {
        var e = null, n = this.workspace.oldTextType;
        return n === Entry.Vim.TEXT_TYPE_JS ? (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_JS, this._parser.setParser(this._mode, this._parserType, this.codeMirror)) : n === Entry.Vim.TEXT_TYPE_PY && (this._parserType = Entry.Vim.PARSER_TYPE_BLOCK_TO_PY, this._parser.setParser(this._mode, this._parserType, this.codeMirror)), this._parser._execParser && (e = this._parser._execParser.searchSyntax(t)), e
    }, r._getAssistScope = function () {
        var t = this._parser._execParser;
        if (t && t.getAssistScope) return t.getAssistScope()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.FieldTrashcan = function (t) {
        t && this.setBoard(t), this.dragBlock = null, this.dragBlockObserver = null, this.isOver = !1, Entry.windowResized && Entry.windowResized.attach(this, this.setPosition)
    }, (r = Entry.FieldTrashcan.prototype)._generateView = function () {
        this.svgGroup = this.board.svg.elem("g"), this.renderStart(), this._addControl()
    }, r.renderStart = function () {
        var t = Entry.mediaFilePath + "delete_";
        this.trashcanTop = this.svgGroup.elem("image", {
            href: t + "cover.png",
            width: 60,
            height: 20
        }), this.svgGroup.elem("image", {href: t + "body.png", y: 20, width: 60, height: 60})
    }, r._addControl = function () {
        $(this.svgGroup).bind("mousedown", function (t) {
            Entry.Utils.isRightButton(t) && (t.stopPropagation(), $("#entryWorkspaceBoard").css("background", "white"))
        })
    }, r.updateDragBlock = function () {
        var t = this.board.dragBlock, e = this.dragBlockObserver;
        e && (e.destroy(), this.dragBlockObserver = null), t ? this.dragBlockObserver = t.observe(this, "checkBlock", ["x", "y"]) : (this.isOver && this.dragBlock && (this.dragBlock.block.getPrevBlock() || (Entry.do("destroyThread", this.dragBlock.block.thread, "trashcan").isPass(!0, !0), createjs.Sound.play("entryDelete"))), this.tAnimation(!1)), this.dragBlock = t
    }, r.checkBlock = function () {
        var t = this.dragBlock;
        if (t && t.block.isDeletable()) {
            var e, n, r = this.board.offset(), o = this.getPosition(), a = o.x + r.left, s = o.y + r.top,
                i = t.dragInstance;
            i && (e = i.offsetX, n = i.offsetY);
            var l = e >= a && n >= s;
            this.tAnimation(l)
        }
    }, r.align = function () {
        var t = this.getPosition(), e = "translate(" + t.x + "," + t.y + ")";
        this.svgGroup.attr({transform: e})
    }, r.setPosition = function () {
        if (this.board) {
            var t = this.board.svgDom;
            this._x = t.width() - 110, this._y = t.height() - 110, this.align()
        }
    }, r.getPosition = function () {
        return {x: this._x, y: this._y}
    }, r.tAnimation = function (t) {
        if (t !== this.isOver) {
            var e;
            t = void 0 === t || t;
            var n = this.trashcanTop;
            e = t ? {translateX: 15, translateY: -25, rotateZ: 30} : {
                translateX: 0,
                translateY: 0,
                rotateZ: 0
            }, $(n).velocity(e, {duration: 50}), this.isOver = t
        }
    }, r.setBoard = function (t) {
        this._dragBlockObserver && this._dragBlockObserver.destroy(), this.board = t, this.svgGroup || this._generateView();
        var e = t.svg, n = e.firstChild;
        n ? e.insertBefore(this.svgGroup, n) : e.appendChild(this.svgGroup), this._dragBlockObserver = t.observe(this, "updateDragBlock", ["dragBlock"]), this.svgGroup.attr({filter: "url(#entryTrashcanFilter_" + t.suffix + ")"}), this.setPosition()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.ThreadView = function (t, e) {
        Entry.Model(this, !1), this.thread = t, this.svgGroup = e.svgThreadGroup.elem("g"), this.board = e, this.parent = e, this._hasGuide = !1
    }, (r = Entry.ThreadView.prototype).schema = {height: 0, zIndex: 0}, r.destroy = function () {
        this.svgGroup.remove()
    }, r.setParent = function (t) {
        this.parent = t
    }, r.getParent = function () {
        return this.parent
    }, r.renderText = function () {
        for (var t = this.thread.getBlocks(), e = 0; e < t.length; e++) t[e].view.renderText()
    }, r.renderBlock = function () {
        for (var t = this.thread.getBlocks(), e = 0; e < t.length; e++) t[e].view.renderBlock()
    }, r.requestAbsoluteCoordinate = function (t) {
        var e = this.thread.getBlocks(), n = e.shift(), r = {x: 0, y: 0}, o = this.parent;
        for (o instanceof Entry.Board || o instanceof Entry.BlockMenu || !o.requestAbsoluteCoordinate || (r = o.requestAbsoluteCoordinate()); n && n.view !== t && n.view;) {
            var a = n.view;
            r.x += a.x + a.magnet.next.x, r.y += a.y + a.magnet.next.y, n = e.shift()
        }
        return r
    }, r.requestPartHeight = function (t, e) {
        for (var n = this.thread.getBlocks(), r = n.pop(), o = t ? t.magnet.next ? t.magnet.next.y : t.height : 0; r && r.view !== t && r.view;) {
            var a = r.view;
            a.magnet.next ? o += a.magnet.next.y : o += a.height, a.dragMode === Entry.DRAG_MODE_DRAG && (o = 0), r = n.pop()
        }
        return o
    }, r.getMagnet = function (t) {
        return {
            getBoundingClientRect: function () {
                var t = this.parent.requestAbsoluteCoordinate(), e = this.board.relativeOffset;
                return {top: t.y + e.top - 20, left: t.x + e.left - 20, width: 40, height: 40}
            }.bind(this)
        }
    }, r.dominate = function () {
        !this._hasGuide && this.parent.dominate(this.thread)
    }, r.isGlobal = function () {
        return this.parent instanceof Entry.Board
    }, r.reDraw = function () {
        for (var t = this.thread._data, e = t.length - 1; e >= 0; e--) {
            var n = t[e];
            n.view ? n.view.reDraw() : n.createView(this.thread._code.view.board)
        }
    }, r.setZIndex = function (t) {
        this.set({zIndex: t})
    }, r.setHasGuide = function (t) {
        this._hasGuide = t
    }, r.getFields = function () {
        var t = Entry.Block;
        return this.thread.getBlocks().reduce(function (e, n) {
            return n instanceof t ? e.concat(n.view.getFields()) : e
        }, [])
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Thread = function (t, e, n) {
        this._data = new Entry.Collection, this._code = e, this.changeEvent = new Entry.Event(this), this.changeEvent.attach(this, this.handleChange), this._event = null, this.parent = n || e, this.load(t)
    }, (o = Entry.Thread.prototype).load = function (t, e) {
        if (void 0 !== t && null !== t || (t = []), !(t instanceof Array)) return console.error("thread must be array");
        for (var n = 0; n < t.length; n++) {
            var r = t[n];
            r instanceof Entry.Block || r.isDummy ? (r.setThread(this), this._data.push(r)) : this._data.push(new Entry.Block(r, this))
        }
        var o = this._code.view;
        o && this.createView(o.board, e)
    }, o.registerEvent = function (t, e) {
        this._event = e, this._code.registerEvent(t, e)
    }, o.unregisterEvent = function (t, e) {
        this._code.unregisterEvent(t, e)
    }, o.createView = function (t, e) {
        this.view || (this.view = new Entry.ThreadView(this, t)), this._data.getAll().forEach(function (n) {
            n.createView(t, e)
        })
    }, o.destroyView = function () {
        this.view = null, this._data.map(function (t) {
            t.destroyView()
        })
    }, o.separate = function (t, e, n) {
        if (this._data.has(t.id)) {
            var r = this._data.splice(this._data.indexOf(t), e);
            this._code.createThread(r, n), this.changeEvent.notify()
        }
    }, o.cut = function (t) {
        var e = this._data.indexOf(t), n = this._data.splice(e);
        return this.changeEvent.notify(), n
    }, o.insertByBlock = function (t, e) {
        for (var n = t ? this._data.indexOf(t) : -1, r = 0; r < e.length; r++) e[r].setThread(this);
        this._data.splice.apply(this._data, [n + 1, 0].concat(e)), this.changeEvent.notify()
    }, o.insertToTop = function (t) {
        t.setThread(this), this._data.unshift.apply(this._data, [t]), this.changeEvent.notify()
    }, o.clone = function (t, e) {
        t = t || this._code;
        for (var n = new Entry.Thread([], t), r = this._data, o = [], a = 0, s = r.length; a < s; a++) r[a], o.push(r[a].clone(n));
        return n.load(o, e), n
    }, o.toJSON = function (t, e, n, r) {
        var o = [];
        void 0 === e ? e = 0 : e instanceof Entry.Block && (e = this.indexOf(e));
        for (var a = this._data; e < a.length; e++) {
            var s = a[e];
            s instanceof Entry.Block && o.push(s.toJSON(t, n, r))
        }
        return o
    }, o.destroy = function (t, e) {
        this.view && this.view.destroy(t);
        for (var n = this._data, r = n.length - 1; r >= 0; r--) n[r].destroy(t, null, e);
        !n.length && this._code.destroyThread(this, !1)
    }, o.getBlock = function (t) {
        return this._data[t]
    }, o.getBlocks = function () {
        return this._data.map(function (t) {
            return t
        })
    }, o.countBlock = function () {
        for (var t = 0, e = 0; e < this._data.length; e++) {
            var n = this._data[e];
            if (n.type) {
                t++;
                var r = n.statements;
                if (r) for (var o = 0; o < r.length; o++) t += r[o].countBlock()
            }
        }
        return t
    }, o.handleChange = function () {
        0 === this._data.length && this.destroy()
    }, o.getCode = function () {
        return this._code
    }, o.setCode = function (t) {
        this._code = t
    }, o.spliceBlock = function (t) {
        this._data.remove(t), this.changeEvent.notify()
    }, o.getFirstBlock = function () {
        return this._data[0]
    }, o.getPrevBlock = function (t) {
        var e = this._data.indexOf(t);
        return this._data.at(e - 1)
    }, o.getNextBlock = function (t) {
        var e = this._data.indexOf(t);
        return this._data.at(e + 1)
    }, o.getLastBlock = function () {
        return this._data.at(this._data.length - 1)
    }, o.getRootBlock = function () {
        return this._data.at(0)
    }, o.hasBlockType = function (t) {
        for (var e = 0; e < this._data.length; e++) if (n(this._data[e])) return !0;
        return !1;

        function n(e) {
            if (t == e.type) return !0;
            for (var r = e.params, o = 0; o < r.length; o++) {
                var a = r[o];
                if (a && a.constructor == Entry.Block && n(a)) return !0
            }
            var s = e.statements;
            if (s) for (var i = 0; i < s.length; i++) if (s[i].hasBlockType(t)) return !0;
            return !1
        }
    }, o.getCount = function (t) {
        var e = this._data.length;
        return t && (e -= this._data.indexOf(t)), e
    }, o.indexOf = function (t) {
        return this._data.indexOf(t)
    }, o.pointer = function (t, e) {
        t = t || [], e && t.unshift(this.indexOf(e));
        var n = this.parent;
        if (n instanceof Entry.Block && t.unshift(n.indexOfStatements(this)), this._code === n) {
            t.unshift(this._code.indexOf(this));
            var r = this._data[0];
            return t.unshift(r.y), t.unshift(r.x), t
        }
        return n.pointer(t)
    }, o.getBlockList = function (t, e) {
        for (var n = [], r = 0; r < this._data.length; r++) {
            var o = this._data[r];
            o.constructor === Entry.Block && (n = n.concat(o.getBlockList(t, e)))
        }
        return n
    }, o.stringify = function (t) {
        return (0, a.default)(this.toJSON(void 0, void 0, t))
    }, o.isInOrigin = function () {
        var t = this.getFirstBlock();
        return t && t.isInOrigin()
    }, o.getDom = function (t) {
        return t.length > 0 ? "magnet" === t.shift() ? this.view.getMagnet("next") : void 0 : this.view.svgGroup
    }, o.isParamBlockType = function () {
        return !1
    }, o.isGlobal = function () {
        return this._code === this.parent
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.skinContainer = {_skins: {}}, (r = Entry.skinContainer).skinSchema = {
        type: "",
        condition: []
    }, r.loadSkins = function (t) {
        t.map(this.addSkin.bind(this))
    }, r.addSkin = function (t) {
        var e = function () {
        }, n = Entry.block[t.type];
        for (var r in e.prototype = n, e = new e, t) e[r] = t[r];
        this._skins[t.type] || (this._skins[t.type] = []), this._skins[t.type].push(e)
    }, r.getSkin = function (t) {
        if (this._skins[t.type]) for (var e = this._skins[t.type], n = 0; n < e.length; n++) {
            var r = e[n];
            if (!r.conditions || !r.conditions.length) return r;
            for (var o = 0; o < r.conditions.length; o++) {
                var a = r.conditions[o];
                if (t.getDataByPointer(a.pointer) !== a.value) break;
                if (o === r.conditions.length - 1) return r
            }
        }
        return Entry.block[t.type]
    }
}, function (t, e, n) {
    "use strict";
    Entry.skeleton = function () {
    }, Entry.skeleton.basic = {
        executable: !0, path: function (t) {
            var e = t.contentWidth, n = t.contentHeight, r = (n = Math.max(30, n + 2)) / 2;
            return "m -8,0 l 8,8 8,-8 h " + (e = Math.max(0, e + 9 - n / 2)) + " a " + r + "," + r + " 0 0,1 0," + n + " h -" + e + " l -8,8 -8,-8 v -" + n + " z"
        }, box: function (t) {
            var e = t ? t.contentWidth : 150, n = t ? t.contentHeight : 28;
            return {offsetX: -8, offsetY: 0, width: e + 30, height: Math.max(30, n + 2), marginBottom: 0}
        }, magnets: function (t) {
            return {previous: {x: 0, y: 0}, next: {x: 0, y: (t ? Math.max(t.height, 30) : 30) + 1 + t.offsetY}}
        }, contentPos: function (t) {
            return {x: 14, y: Math.max(t.contentHeight, 28) / 2 + 1}
        }
    }, Entry.skeleton.basic_create = {
        executable: !0, path: function (t) {
            var e = t.contentWidth, n = t.contentHeight;
            return n = Math.max(30, n + 2), e = Math.max(0, e + 9 - n / 2), "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh h -%w l -8,8 -8,-8 v -%wh z".replace(/%wh/gi, n).replace(/%w/gi, e).replace(/%h/gi, n / 2)
        }, box: function (t) {
            var e = t ? t.contentWidth : 150, n = t ? t.contentHeight : 28;
            return {offsetX: -8, offsetY: 0, width: e + 30, height: Math.max(30, n + 2), marginBottom: 0}
        }, magnets: function (t) {
            return {next: {x: 0, y: (t ? Math.max(t.height, 30) : 30) + 1 + t.offsetY}}
        }, contentPos: function (t) {
            return {x: 14, y: Math.max(t.contentHeight, 28) / 2 + 1}
        }
    }, Entry.skeleton.basic_event = {
        executable: !0, path: function (t) {
            var e = t.contentWidth;
            return e = Math.max(0, e), "m -8,0 m 0,-5 a 19.5,19.5 0, 0,1 16,0 c 10,5 15,5 20,5 h " + (e -= 30) + " a 15,15 0 0,1 0,30 H 8 l -8,8 -8,-8 l 0,0.5 a 19.5,19.5 0, 0,1 0,-35 z"
        }, box: function (t) {
            return {offsetX: -19, offsetY: -7, width: t.contentWidth + 30, height: 30, marginBottom: 0}
        }, magnets: function (t) {
            return {next: {x: 0, y: (t ? Math.max(t.height + t.offsetY + 7, 30) : 30) + 1}}
        }, contentPos: function (t) {
            return {x: 1, y: 15}
        }
    }, Entry.skeleton.basic_loop = {
        executable: !0, path: function (t) {
            var e = t.contentWidth, n = t.contentHeight;
            n = Math.max(30, n + 2), e = Math.max(0, e + 9 - n / 2);
            var r = t._statements[0] ? t._statements[0].height : 20, o = n / 2;
            return "m -8,0 l 8,8 8,-8 h " + e + " a " + o + "," + o + " 0 0,1 0," + n + " H 24 l -8,8 -8,-8 h -0.4 v " + (r = Math.max(r, 20) + 1) + " h 0.4 l 8,8 8,-8 h " + (e - 8) + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z"
        }, magnets: function (t) {
            var e = Math.max(t.contentHeight + 2, 30), n = t._statements[0] ? t._statements[0].height : 20;
            return {previous: {x: 0, y: 0}, next: {x: 0, y: (n = Math.max(n, 20)) + e + 18 + t.offsetY}}
        }, box: function (t) {
            var e = t.contentWidth, n = Math.max(t.contentHeight + 2, 30),
                r = t._statements[0] ? t._statements[0].height : 20;
            return {offsetX: -8, offsetY: 0, width: e + 30, height: n + (r = Math.max(r, 20)) + 17, marginBottom: 0}
        }, statementPos: function (t) {
            return [{x: 16, y: Math.max(30, t.contentHeight + 2) + 1}]
        }, contentPos: function (t) {
            return {x: 14, y: Math.max(t.contentHeight, 28) / 2 + 1}
        }
    }, Entry.skeleton.basic_define = {
        executable: !0, path: function (t) {
            var e = t.contentWidth, n = t.contentHeight;
            n = Math.max(30, n + 2), e = Math.max(0, e + 9 - n / 2);
            var r = t._statements[0] ? t._statements[0].height : 30;
            return r = Math.max(r, 20), "m -8,0 l 16,0 h %w a %h,%h 0 0,1 0,%wh H 24 l -8,8 -8,-8 h -0.4 v %sh h 0.4 l 8,8 8,-8 h %bw a 8,8 0 0,1 0,16 H -8 z".replace(/%wh/gi, n).replace(/%w/gi, e).replace(/%h/gi, n / 2).replace(/%bw/gi, e - 8).replace(/%sh/gi, r + 1)
        }, magnets: function () {
            return {}
        }, box: function (t) {
            return {
                offsetX: 0,
                offsetY: 0,
                width: t.contentWidth,
                height: Math.max(t.contentHeight, 25) + 46,
                marginBottom: 0
            }
        }, statementPos: function (t) {
            return [{x: 16, y: Math.max(30, t.contentHeight + 2)}]
        }, contentPos: function () {
            return {x: 14, y: 15}
        }
    }, Entry.skeleton.pebble_event = {
        executable: !0, path: function (t) {
            return t.contentWidth, "m 0,0 a 25,25 0 0,1 9,48.3 a 9,9 0 0,1 -18,0 a 25,25 0 0,1 9,-48.3 z"
        }, box: function (t) {
            return {offsetX: -25, offsetY: 0, width: 50, height: 48.3, marginBottom: 0}
        }, magnets: function (t) {
            return {next: {x: 0, y: (t ? Math.max(t.height, 49.3) : 49.3) + t.offsetY}}
        }, contentPos: function () {
            return {x: 0, y: 25}
        }
    }, Entry.skeleton.pebble_loop = {
        executable: !0, fontSize: 16, dropdownHeight: 23, path: function (t) {
            Math.max(t.contentHeight, 50);
            var e = Math.max(t._statements[0] ? t._statements[0].height : 50, 50);
            return "M 0,9 a 9,9 0 0,0 9,-9 h %cw q 25,0 25,25 v %ch q 0,25 -25,25 h -%cw a 9,9 0 0,1 -18,0 h -%cw q -25,0 -25,-25 v -%ch q 0,-25 25,-25 h %cw a 9,9 0 0,0 9,9 M 0,49 a 9,9 0 0,1 -9,-9 h -28 a 25,25 0 0,0 -25,25 v %cih a 25,25 0 0,0 25,25 h 28 a 9,9 0 0,0 18,0 h 28 a 25,25 0 0,0 25,-25 v -%cih a 25,25 0 0,0 -25,-25 h -28 a 9,9 0 0,1 -9,9 z".replace(/%cw/gi, 41).replace(/%ch/gi, e + 4).replace(/%cih/gi, e - 50)
        }, magnets: function (t) {
            var e = Math.max(t.contentHeight + 2, 41), n = t._statements[0] ? t._statements[0].height : 20;
            return {previous: {x: 0, y: 0}, next: {x: 0, y: (n = Math.max(n, 51)) + e + 13 + t.offsetY}}
        }, box: function (t) {
            var e = t.contentWidth, n = Math.max(t.contentHeight + 2, 41),
                r = t._statements[0] ? t._statements[0].height : 20;
            return {
                offsetX: -(e / 2 + 13),
                offsetY: 0,
                width: e + 30,
                height: n + (r = Math.max(r, 51)) + 13,
                marginBottom: 0
            }
        }, statementPos: function (t) {
            return [{x: 0, y: Math.max(39, t.contentHeight + 2) + 1.5}]
        }, contentPos: function () {
            return {x: -46, y: 25}
        }
    }, Entry.skeleton.pebble_basic = {
        executable: !0, fontSize: 15, morph: ["prev", "next"], path: function (t) {
            return "m 0,9 a 9,9 0 0,0 9,-9 h 28 q 25,0 25,25q 0,25 -25,25h -28 a 9,9 0 0,1 -18,0 h -28 q -25,0 -25,-25q 0,-25 25,-25h 28 a 9,9 0 0,0 9,9 z"
        }, magnets: function (t) {
            return {previous: {x: 0, y: 0}, next: {x: 0, y: (t ? Math.max(t.height, 51) : 51) + t.offsetY}}
        }, box: function () {
            return {offsetX: -62, offsetY: 0, width: 124, height: 50, marginBottom: 0}
        }, contentPos: function () {
            return {x: -46, y: 25}
        }
    }, Entry.skeleton.basic_string_field = {
        path: function (t) {
            var e = t.contentWidth, n = t.contentHeight, r = (n = Math.max(18, n + 2)) / 2;
            return "m " + r + ",0 h " + (e = Math.max(0, e - n + 12)) + " a " + r + "," + r + " 0 1,1 0," + n + " H " + r + " A " + r + "," + r + " 0 1,1 " + r + ",0 z"
        }, color: "#000", outerLine: "#768dce", box: function (t) {
            var e = t ? t.contentWidth : 5, n = t ? t.contentHeight : 18;
            return {offsetX: 0, offsetY: 0, width: e + 12, height: Math.max(n + 2, 18), marginBottom: 0}
        }, magnets: function () {
            return {string: {}}
        }, contentPos: function (t) {
            return {x: 6, y: Math.max(t.contentHeight, 16) / 2 + 1}
        }
    }, Entry.skeleton.basic_boolean_field = {
        path: function (t) {
            var e = t.contentWidth, n = t.contentHeight, r = (n = Math.max(18, n + 2)) / 2;
            return "m " + r + ",0 h " + (e = Math.max(0, e - n + 19)) + " l " + r + "," + r + " -" + r + "," + r + " H " + r + " l -" + r + ",-" + r + " " + r + ",-" + r + " z"
        }, color: "#000", outerLine: "#768dce", box: function (t) {
            var e = t ? t.contentWidth : 5, n = t ? t.contentHeight : 18;
            return {offsetX: 0, offsetY: 0, width: e + 19, height: Math.max(n + 2, 18), marginBottom: 0}
        }, magnets: function () {
            return {boolean: {}}
        }, contentPos: function (t) {
            return {x: 10, y: Math.max(t.contentHeight, 16) / 2 + 1}
        }
    }, Entry.skeleton.basic_param = {
        path: function (t) {
            var e = t.contentWidth, n = t._contents[t._contents.length - 1];
            return n && (e -= n.box.width + Entry.BlockView.PARAM_SPACE - 2), e = Math.max(0, e), "m 4,0 h 10 h %w l 2,2 0,3 3,0 1,1 0,12 -1,1 -3,0 0,3 -2,2h -%w h -10 l -2,-2 0,-3 3,0 1,-1 0,-12 -1,-1 -3,0 0,-3 2,-2".replace(/%w/gi, e)
        }, outerLine: "#768dce", box: function (t) {
            return {offsetX: 0, offsetY: 0, width: (t ? t.contentWidth : 5) + 11, height: 24, marginBottom: 0}
        }, magnets: function () {
            return {param: {}}
        }, contentPos: function (t) {
            return {x: 11, y: 12}
        }
    }, Entry.skeleton.basic_button = {
        path: function () {
            return "m -64,0 h 128 a 6,6 0, 0,1 6,6 v 18 a 6,6 0, 0,1 -6,6 h -128 a 6,6 0, 0,1 -6,-6 v -18 a 6,6 0, 0,1 6,-6 z"
        }, box: function () {
            return {offsetX: -80, offsetY: 0, width: 140, height: 30}
        }, contentPos: function () {
            return {x: 0, y: 15}
        }, movable: !1, readOnly: !0, nextShadow: !0, classes: ["basicButtonView"]
    }, Entry.skeleton.basic_without_next = {
        executable: !0,
        box: Entry.skeleton.basic.box,
        contentPos: Entry.skeleton.basic.contentPos,
        path: function (t) {
            var e = t.contentWidth, n = t.contentHeight, r = (n = Math.max(30, n + 2)) / 2;
            return "m -8,0 l 8,8 8,-8 h " + (e = Math.max(0, e + 9 - n / 2)) + " a " + r + "," + r + " 0 0,1 0, " + n + " H -8 z"
        },
        magnets: function (t) {
            return t && Math.max(t.height, 30), {previous: {x: 0, y: 0}}
        }
    }, Entry.skeleton.basic_double_loop = {
        executable: !0, path: function (t) {
            var e = t.contentWidth, n = t.contentHeight % 1e6, r = Math.floor(t.contentHeight / 1e6);
            n = Math.max(30, n + 2), r = Math.max(30, r + 2), e = Math.max(0, e + 5 - n / 2);
            var o = t._statements, a = o[0] ? o[0].height : 20, s = o[1] ? o[1].height : 20, i = e - 8, l = n / 2,
                c = r / 2;
            return "m -8,0 l 8,8 8,-8 h " + e + " a " + l + "," + l + " 0 0,1 0," + n + " H 24 l -8,8 -8,-8 h -0.4 v " + (a = Math.max(a, 20) + 1) + " h 0.4 l 8,8 8,-8 h " + i + " a " + c + "," + c + " 0 0,1 0," + r + " H 24 l -8,8 -8,-8 h -0.4 v " + (s = Math.max(s, 20) + 1) + " h 0.4 l 8,8 8,-8 h " + i + " a 8,8 0 0,1 0,16 H 8 l -8,8 -8,-8 z"
        }, magnets: function (t) {
            var e = Math.max(t.contentHeight % 1e6 + 2, 30), n = Math.max(Math.floor(t.contentHeight / 1e6) + 2, 30),
                r = t._statements[0] ? t._statements[0].height : 20,
                o = t._statements[1] ? t._statements[1].height : 20;
            return {
                previous: {x: 0, y: 0},
                next: {x: 0, y: (r = Math.max(r, 20)) + (o = Math.max(o, 20)) + e + n + 19 + t.offsetY}
            }
        }, box: function (t) {
            var e = t.contentWidth, n = Math.max(Math.floor(t.contentHeight / 1e6) + 2, 30),
                r = Math.max(t.contentHeight % 1e6 + 2, 30), o = t._statements[0] ? t._statements[0].height % 1e6 : 20,
                a = t._statements[1] ? t._statements[1].height : 20;
            return {
                offsetX: -8,
                offsetY: 0,
                width: e + 30,
                height: n + r + (o = Math.max(o, 20)) + (a = Math.max(a, 20)) + 17,
                marginBottom: 0
            }
        }, statementPos: function (t) {
            var e = t._statements[0] ? t._statements[0].height % 1e6 : 20,
                n = Math.max(30, t.contentHeight % 1e6 + 2) + 1;
            return [{x: 16, y: n}, {
                x: 16,
                y: n + Math.max(e, 20) + Math.max(Math.floor(t.contentHeight / 1e6) + 2, 30) + 1
            }]
        }, contentPos: function (t) {
            return {x: 14, y: Math.max(t.contentHeight % 1e6, 28) / 2 + 1}
        }
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Scroller = function (t, e, n) {
        this._horizontal = void 0 === e || e, this._vertical = void 0 === n || n, this.board = t, this.svgGroup = null, this.hWidth = 0, this.hX = 0, this.hRatio = 0, this.vWidth = 0, this.vY = 0, this.vRatio = 0, this._visible = !0, this._opacity = -1, this.createScrollBar(), this.setOpacity(0), this._bindEvent(), this._scrollCommand = Entry.Utils.debounce(Entry.do, 200)
    }, Entry.Scroller.RADIUS = 7, (r = Entry.Scroller.prototype).createScrollBar = function () {
        var t = Entry.Scroller.RADIUS, e = this;
        this.svgGroup = this.board.svg.elem("g").attr({class: "boardScrollbar"}), this._horizontal && (this.hScrollbar = this.svgGroup.elem("rect", {
            height: 2 * t,
            rx: t,
            ry: t
        }), this.hScrollbar.mousedown = function (t) {
            if (0 === t.button || t instanceof Touch) {
                Entry.documentMousedown && Entry.documentMousedown.notify(t);
                var n = $(document);
                n.bind("mousemove.scroll", r), n.bind("mouseup.scroll", o), n.bind("touchmove.scroll", r), n.bind("touchend.scroll", o), e.dragInstance = new Entry.DragInstance({
                    startX: t.pageX,
                    startY: t.pageY,
                    offsetX: t.pageX,
                    offsetY: t.pageY
                })
            }

            function r(t) {
                t.stopPropagation(), t.preventDefault(), t.originalEvent.touches && (t = t.originalEvent.touches[0]);
                var n = e.dragInstance;
                e.scroll((t.pageX - n.offsetX) / e.hRatio, 0), n.set({offsetX: t.pageX, offsetY: t.pageY})
            }

            function o(t) {
                $(document).unbind(".scroll"), delete e.dragInstance
            }

            t.stopPropagation()
        }), this._vertical && (this.vScrollbar = this.svgGroup.elem("rect", {
            width: 2 * t,
            rx: t,
            ry: t
        }), this.vScrollbar.mousedown = function (t) {
            if (0 === t.button || t instanceof Touch) {
                Entry.documentMousedown && Entry.documentMousedown.notify(t);
                var n = $(document);
                n.bind("mousemove.scroll", r), n.bind("mouseup.scroll", o), n.bind("touchmove.scroll", r), n.bind("touchend.scroll", o), e.dragInstance = new Entry.DragInstance({
                    startX: t.pageX,
                    startY: t.pageY,
                    offsetX: t.pageX,
                    offsetY: t.pageY
                })
            }

            function r(t) {
                t.stopPropagation(), t.preventDefault(), t.originalEvent.touches && (t = t.originalEvent.touches[0]);
                var n = e.dragInstance;
                e.scroll(0, (t.pageY - n.offsetY) / e.vRatio), n.set({offsetX: t.pageX, offsetY: t.pageY})
            }

            function o(t) {
                $(document).unbind(".scroll"), delete e.dragInstance
            }

            t.stopPropagation()
        })
    }, r.updateScrollBar = function (t, e) {
        this._horizontal && (this.hX += t * this.hRatio, this.hScrollbar.attr({x: this.hX})), this._vertical && (this.vY += e * this.vRatio, this.vScrollbar.attr({y: this.vY}))
    }, r.scroll = function (t, e, n) {
        if (this.board.code) {
            var r = this.board, o = r.getSvgDomRect(), a = r.svgBlockGroup.getBoundingClientRect(),
                s = a.left - this.board.offset().left, i = a.top - this.board.offset().top, l = a.width, c = a.height;
            t = Math.max(-l + Entry.BOARD_PADDING - s, t), e = Math.max(-c + Entry.BOARD_PADDING - i, e), e = Math.min(o.height - Entry.BOARD_PADDING - i, e), this._scroll(t, e), !0 !== n && (this._diffs || (this._diffs = [0, 0]), this._diffs[0] += t, this._diffs[1] += e, this._scrollCommand("scrollBoard", this._diffs[0], this._diffs[1], !0))
        }
    }, r._scroll = function (t, e) {
        this.board.code.moveBy(t, e), this.updateScrollBar(t, e)
    }, r.setVisible = function (t) {
        t != this.isVisible() && (this._visible = t, this.svgGroup.attr({display: !0 === t ? "block" : "none"}))
    }, r.isVisible = function () {
        return this._visible
    }, r.setOpacity = function (t) {
        this._opacity != t && (this.hScrollbar.attr({opacity: t}), this.vScrollbar.attr({opacity: t}), this._opacity = t)
    }, r.resizeScrollBar = function () {
        if (this._visible) {
            var t = this.board, e = t.offset(), n = (t.svgDom, t.getSvgDomRect()),
                r = t.svgBlockGroup.getBoundingClientRect(), o = n.width, a = n.height, s = r.left - e.left,
                i = r.top - e.top, l = r.width, c = r.height;
            if (this._horizontal) {
                var u = -l + Entry.BOARD_PADDING, p = o - Entry.BOARD_PADDING,
                    _ = (o + 2 * Entry.Scroller.RADIUS) * l / (p - u + l);
                Entry.Utils.isNumber(_) || (_ = 0), this.hX = (s - u) / (p - u) * (o - _ - 2 * Entry.Scroller.RADIUS), this.hScrollbar.attr({
                    width: _,
                    x: this.hX,
                    y: a - 2 * Entry.Scroller.RADIUS
                }), this.hRatio = (o - _ - 2 * Entry.Scroller.RADIUS) / (p - u)
            }
            if (this._vertical) {
                var d = -c + Entry.BOARD_PADDING, y = a - Entry.BOARD_PADDING,
                    g = (a + 2 * Entry.Scroller.RADIUS) * c / (y - d + c);
                this.vY = (i - d) / (y - d) * (a - g - 2 * Entry.Scroller.RADIUS), this.vScrollbar.attr({
                    height: g,
                    y: this.vY,
                    x: o - 2 * Entry.Scroller.RADIUS
                }), this.vRatio = (a - g - 2 * Entry.Scroller.RADIUS) / (y - d)
            }
        }
    }, r._bindEvent = function () {
        var t = Entry.Utils.debounce(this.resizeScrollBar, 250);
        this.board.changeEvent.attach(this, t), Entry.windowResized && Entry.windowResized.attach(this, t)
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.RenderView = function (t, e, n, r) {
        if (this._align = e || "CENTER", "DIV" !== (t = "string" == typeof t ? $("#" + t) : $(t)).prop("tagName")) return console.error("Dom is not div element");
        this.view = t, this.viewOnly = !0, this.suffix = "renderView", this._scale = void 0 === n ? 1 : n, this._parserType = r, this.visible = !0, this.disableMouseEvent = !0, this._svgId = "renderView_" + (new Date).getTime(), this._generateView(), this.offset = this.svgDom.offset(), this._minBlockOffsetX = 0, this._setSize(), this.svg = Entry.SVG(this._svgId, this.svgDom[0]), Entry.Utils.addFilters(this.svg, this.suffix), this.svg && (this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this)
    }, (r = Entry.RenderView.prototype).schema = {
        code: null,
        dragBlock: null,
        closeBlock: null,
        selectedBlockView: null
    }, r._generateView = function () {
        var t = this.view;
        this.renderViewContainer = Entry.Dom("div", {
            class: "renderViewContainer",
            parent: t
        }), this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="renderView" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: this.renderViewContainer})
    }, r.changeCode = function (t, e) {
        if (!(t instanceof Entry.Code)) return console.error("You must inject code instance");
        this.code = t, this.svg || (this.svg = Entry.SVG(this._svgId, this.svgDom[0]), this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this), t.createView(this), this.align(), this.resize(e)
    }, r.align = function () {
        var t = this.code.getThreads();
        if (t && 0 !== t.length) {
            for (var e = 0, n = this._getHorizontalPadding(), r = 0, o = t.length; r < o; r++) {
                var a = t[r].getFirstBlock(), s = a.view, i = s.svgGroup.getBBox().height,
                    l = (Entry.block[a.type].class, 0), c = $(s.svgGroup).find(".extension");
                if (c) for (var u = 0; u < c.length; u++) {
                    var p = c[u], _ = parseFloat(p.getAttribute("x"));
                    l = Math.min(l, _)
                }
                this._minBlockOffsetX = Math.min(this._minBlockOffsetX, s.offsetX), s._moveTo(n - l - s.offsetX, e - s.offsetY, !1), e += i + 15
            }
            this._setSize()
        }
    }, r.hide = function () {
        this.view.addClass("entryRemove")
    }, r.show = function () {
        this.view.removeClass("entryRemove")
    }, r._setSize = function () {
        this.svgDom && (this._svgWidth = this.svgDom.width(), this.offset = this.svgDom.offset()), this.svgGroup && (this._bBox = this.svgGroup.getBBox())
    }, r.bindCodeView = function (t) {
        this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), this.svgBlockGroup = t.svgBlockGroup, this.svgThreadGroup = t.svgThreadGroup, this.svgGroup.appendChild(this.svgThreadGroup), this.svgGroup.appendChild(this.svgBlockGroup)
    }, r.resize = function (t) {
        function e() {
            this._setSize();
            var t = Math.round(this._bBox.width), e = Math.round(this._bBox.height);
            0 !== t && 0 !== e && ($(this.svg).css({
                width: t + this._getHorizontalPadding() - this._minBlockOffsetX,
                height: e + 5
            }), setTimeout(function () {
                var n = this.svgGroup.getBBox();
                Math.round(n.width) === t && Math.round(n.height) === e || this.resize()
            }.bind(this), 1e3))
        }

        this.svg && this._bBox && (t ? e.call(this) : setTimeout(function () {
            e.call(this)
        }.bind(this), 0))
    }, r.setDomSize = function (t) {
        this.svgBlockGroup && this.svgBlockGroup.attr("transform", "scale(1)"), this.code.view.reDraw(), this.align(), this.resize(t), 1 !== this._scale && window.setTimeout(function () {
            this.svgBlockGroup.attr("transform", "scale(%scale)".replace("%scale", this._scale)), this.align(), this.resize()
        }.bind(this), 0)
    }, r._getHorizontalPadding = function () {
        var t = {LEFT: 20, LEFT_MOST: 0}[this._align];
        return void 0 !== t ? t : this.svgDom.width() / 2
    }, r.getBlockSyntax = function (t, e) {
        var n = null;
        return 2 === e && (this._parser || (this._parser = new Entry.Parser(null, null)), this._parser.setParser(1, this._parserType), this._parser._execParser && (n = this._parser._execParser.searchSyntax(t))), n
    }, r.setParserType = function (t) {
        this._parserType = t
    }
}, function (t, e, n) {
    "use strict";
    Entry.Mutator = function () {
    }, Entry.Mutator.mutate = function (t, e, n) {
        var r = Entry.block[t];
        void 0 === r.changeEvent && (r.changeEvent = new Entry.Event), void 0 === r.paramsBackupEvent && (r.paramsBackupEvent = new Entry.Event), void 0 === r.destroyParamsBackupEvent && (r.destroyParamsBackupEvent = new Entry.Event), r.template = e.template, r.params = e.params, r.changeEvent.notify(1, n)
    }, Entry.Mutator.prototype
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.GlobalSvg = {}, (r = Entry.GlobalSvg).DONE = 0, r._inited = !1, r.REMOVE = 1, r.RETURN = 2, r.createDom = function () {
        if (!this.inited) {
            $("#globalSvgSurface").remove(), $("#globalSvg").remove();
            var t = $("body");
            this._container = Entry.Dom("div", {
                classes: ["globalSvgSurface", "entryRemove"],
                id: "globalSvgSurface",
                parent: t
            }), this.svgDom = Entry.Dom($('<svg id="globalSvg" width="10" height="10"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: this._container}), this.svg = Entry.SVG("globalSvg"), this.left = 0, this.top = 0, this._inited = !0
        }
    }, r.setView = function (t, e) {
        if (t != this._view && !t.block.isReadOnly() && t.movable) return this._view = t, this._mode = e, e !== Entry.Workspace.MODE_VIMBOARD && t.set({visible: !1}), this.draw(), this.show(), this.align(), this.position(), !0
    }, r.draw = function () {
        var t = this._view;
        this._svg && this.remove();
        var e = this._mode == Entry.Workspace.MODE_VIMBOARD, n = t.svgGroup.getBBox();
        if (this.svgDom.attr({
                width: Math.round(n.width + 4) + "px",
                height: Math.round(n.height + 4) + "px"
            }), this.svgGroup = Entry.SVG.createElement(t.svgGroup.cloneNode(!0), {opacity: 1}), this.svg.appendChild(this.svgGroup), e) {
            var r = $(this.svgGroup);
            r.find("g").css({filter: "none"}), r.find("path, rect, polygon").velocity({opacity: 0}, {duration: 500}), r.find("text").velocity({fill: "#000000"}, {duration: 530})
        }
    }, r.remove = function () {
        this.svgGroup && (this.svgGroup.remove(), delete this.svgGroup, delete this._view, delete this._offsetX, delete this._offsetY, delete this._startX, delete this._startY, this.hide())
    }, r.align = function () {
        var t = this._view.getSkeleton().box(this._view).offsetX || 0,
            e = this._view.getSkeleton().box(this._view).offsetY || 0;
        t *= -1, t += 1, e *= -1, e += 1, this._offsetX = t, this._offsetY = e;
        var n = "translate(" + t + "," + e + ")";
        this.svgGroup.attr({transform: n})
    }, r.show = function () {
        this._container.removeClass("entryRemove")
    }, r.hide = function () {
        this._container.addClass("entryRemove")
    }, r.position = function () {
        var t = this._view;
        if (t) {
            var e = t.getAbsoluteCoordinate(), n = t.getBoard().offset();
            this.left = e.x + n.left - this._offsetX, this.top = e.y + n.top - this._offsetY, this._applyDomPos(this.left, this.top)
        }
    }, r.adjust = function (t, e) {
        var n = this.left + (t || 0), r = this.top + (e || 0);
        n === this.left && r === this.top || (this.left = n, this.top = r, this._applyDomPos(this.left, this.top))
    }, r._applyDomPos = function (t, e) {
        this.svgDom.css({transform: "translate3d(" + t + "px," + e + "px, 0px)"})
    }, r.terminateDrag = function (t) {
        var e = Entry.mouseCoordinate, n = t.getBoard(), r = n.workspace.blockMenu, o = r.offset().left,
            a = r.offset().top, s = r.visible ? r.svgDom.width() : 0;
        return e.y > n.offset().top - 20 && e.x > o + s ? this.DONE : e.y > a && e.x > o && r.visible && t.block.isDeletable() ? this.REMOVE : this.RETURN
    }, r.addControl = function (t) {
        this.onMouseDown.apply(this, arguments)
    }, r.onMouseDown = function (t) {
        this._startY = t.pageY;
        var e = this;
        t.stopPropagation(), t.preventDefault();
        var n = $(document);

        function r(t) {
            var n = t.pageX, r = t.pageY, o = n - e._startX, a = r - e._startY, s = e.left + o, i = e.top + a;
            e._applyDomPos(s, i), e._startX = n, e._startY = r, e.left = s, e.top = i
        }

        function o(t) {
            $(document).unbind(".block")
        }

        n.bind("mousemove.block", r), n.bind("mouseup.block", o), n.bind("touchmove.block", r), n.bind("touchend.block", o), this._startX = t.pageX, this._startY = t.pageY
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Executor = function (t, e) {
        this.scope = new Entry.Scope(t, this), this.entity = e, this._callStack = [], this.register = {}, this.parentExecutor = null, this.id = Entry.Utils.generateId()
    }, Entry.Executor.MAXIMUM_CALLSTACK = 100, (r = Entry.Executor.prototype).execute = function (t) {
        if (!this.isEnd()) {
            var e = [];
            t && (Entry.callStackLength = 0);
            for (var n = this.entity; ;) {
                var r = null;
                e.push(this.scope.block);
                try {
                    var o = this.scope.block.getSchema();
                    o && Entry.skeleton[o.skeleton].executable && (Entry.dispatchEvent("blockExecute", this.scope.block && this.scope.block.view), r = o.func.call(this.scope, n, this.scope))
                } catch (t) {
                    if ("AsyncError" === t.name) r = Entry.STATIC.BREAK; else {
                        if (this.isFuncExecutor) throw new Error;
                        Entry.Utils.stopProjectWithToast(this.scope, void 0, t)
                    }
                }
                if (this.isEnd()) return e;
                if (void 0 === r || null === r || r === Entry.STATIC.PASS) {
                    if (this.scope = new Entry.Scope(this.scope.block.getNextBlock(), this), null === this.scope.block) {
                        if (!this._callStack.length) break;
                        var a = this.scope;
                        if (this.scope = this._callStack.pop(), this.scope.isLooped !== a.isLooped) break
                    }
                } else if (r === Entry.STATIC.CONTINUE) ; else if (r === Entry.STATIC.BREAK || this.scope === r) break
            }
            return e
        }
    }, r.stepInto = function (t) {
        t instanceof Entry.Thread || console.error("Must step in to thread");
        var e = t.getFirstBlock();
        return e ? (this._callStack.push(this.scope), this.scope = new Entry.Scope(e, this), Entry.STATIC.CONTINUE) : Entry.STATIC.BREAK
    }, r.break = function () {
        return this._callStack.length && (this.scope = this._callStack.pop()), Entry.STATIC.PASS
    }, r.breakLoop = function () {
        for (this._callStack.length && (this.scope = this._callStack.pop()); this._callStack.length && "repeat" !== Entry.block[this.scope.block.type].class;) this.scope = this._callStack.pop();
        return Entry.STATIC.PASS
    }, r.end = function () {
        Entry.dispatchEvent("blockExecuteEnd", this.scope.block && this.scope.block.view), this.scope.block = null
    }, r.isEnd = function () {
        return null === this.scope.block
    }, Entry.Scope = function (t, e) {
        this.block = t, this.type = t ? t.type : null, this.executor = e, this.entity = e.entity
    }, function (t) {
        t.callReturn = function () {
        }, t.getParam = function (t) {
            var e = this.block.params[t], n = new Entry.Scope(e, this.executor);
            return Entry.block[e.type].func.call(n, this.entity, n)
        }, t.getParams = function () {
            var t = this;
            return this.block.params.map(function (e) {
                if (e instanceof Entry.Block) {
                    var n = e, r = new Entry.Scope(n, t.executor);
                    return Entry.block[n.type].func.call(r, t.entity, r)
                }
                return e
            })
        }, t.getValue = function (t, e) {
            var n = this.block.params[this._getParamIndex(t, e)], r = new Entry.Scope(n, this.executor);
            return Entry.block[n.type].func.call(r, this.entity, r)
        }, t.getStringValue = function (t, e) {
            return String(this.getValue(t, e))
        }, t.getNumberValue = function (t, e) {
            return Number(this.getValue(t))
        }, t.getBooleanValue = function (t, e) {
            var n = this.getValue(t);
            return void 0 !== n && (n = Number(n), !!isNaN(n) || n)
        }, t.getField = function (t, e) {
            return this.block.params[this._getParamIndex(t)]
        }, t.getStringField = function (t, e) {
            return String(this.getField(t))
        }, t.getNumberField = function (t) {
            return Number(this.getField(t))
        }, t.getStatement = function (t, e) {
            return this.executor.stepInto(this.block.statements[this._getStatementIndex(t, e)])
        }, t._getParamIndex = function (t) {
            return this._schema || (this._schema = Entry.block[this.type]), this._schema.paramsKeyMap[t]
        }, t._getStatementIndex = function (t) {
            return this._schema || (this._schema = Entry.block[this.type]), this._schema.statementsKeyMap[t]
        }, t.die = function () {
            return this.block = null, Entry.STATIC.BREAK
        }
    }(Entry.Scope.prototype)
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.ConnectionRipple = {}, (r = Entry.ConnectionRipple).createDom = function (t) {
        if (!this.svgDom) {
            var e = t.getBoard().svgGroup;
            this._ripple = e.elem("circle", {cx: 0, cy: 0, r: 0, stroke: "#888", "stroke-width": 10})
        }
    }, r.setView = function (t) {
        this._ripple || this.createDom(t);
        var e = this._ripple, n = t.getBoard().svgGroup;
        e.remove();
        var r = t.getAbsoluteCoordinate();
        return e.attr({cx: r.x, cy: r.y}), n.appendChild(e), e._startTime = new Date, this
    }, r.dispose = function () {
        var t = this, e = this._ripple, n = (new Date - e._startTime) / 150;
        n > 1 ? e.remove() : (e.attr({r: 25 * n, opacity: 1 - n}), window.setTimeout(function () {
            t.dispose()
        }, 10))
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.CodeView = function (t, e) {
        Entry.Model(this, !1), this.code = t, this.set({board: e}), this.svgThreadGroup = e.svgGroup.elem("g"), this.svgThreadGroup.attr({class: "svgThreadGroup"}), this.svgThreadGroup.board = e, this.svgBlockGroup = e.svgGroup.elem("g"), this.svgBlockGroup.attr({class: "svgBlockGroup"}), this.svgBlockGroup.board = e, e.bindCodeView(this), this.code._data.getAll().forEach(function (t) {
            t.createView(e)
        }), t.observe(this, "_setBoard", ["board"])
    }, (r = Entry.CodeView.prototype).schema = {board: null, scrollX: 0, scrollY: 0}, r._setBoard = function () {
        this.set({board: this.code.board})
    }, r.reDraw = function () {
        this.code.map(function (t) {
            t.view ? t.view.reDraw() : t.createView(this.board)
        }.bind(this))
    }, r.destroy = function () {
        this.code.map(function (t) {
            t.destroyView()
        })
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Code = function (t, e) {
        Entry.Model(this, !1), e && (this.object = e), this._data = new Entry.Collection, this._eventMap = {}, this._blockMap = {}, this.executors = [], this.watchEvent = new Entry.Event(this), this.executeEndEvent = new Entry.Event(this), this.changeEvent = new Entry.Event(this), this.changeEvent.attach(this, this._handleChange), this._maxZIndex = 0, this.load(t)
    }, Entry.STATEMENT = 0, Entry.PARAM = -1, (o = Entry.Code.prototype).schema = {
        view: null,
        board: null
    }, o.load = function (t) {
        if (!Entry.engine || !Entry.engine.isState("run")) {
            t instanceof Array || (t = JSON.parse(t)), this.clear();
            for (var e = 0; e < t.length; e++) this._data.push(new Entry.Thread(t[e], this));
            return this
        }
    }, o.clear = function (t) {
        t = void 0 !== t && t;
        for (var e = this._data.length - 1; e >= 0; e--) this._data[e].destroy(!1, t);
        this.clearExecutors()
    }, o.createView = function (t) {
        null === this.view ? this.set({
            view: new Entry.CodeView(this, t),
            board: t
        }) : (this.set({board: t}), t.bindCodeView(this.view))
    }, o.destroyView = function () {
        this.view && (this.view.destroy(), this.set({view: null}))
    }, o.recreateView = function () {
        this.view && (this.destroyView(), this.set({view: new Entry.CodeView(this, this.board), board: this.board}))
    }, o.registerEvent = function (t, e) {
        this._eventMap[e] || (this._eventMap[e] = []), this._eventMap[e].push(t)
    }, o.unregisterEvent = function (t, e) {
        var n = this._eventMap[e];
        if (n && 0 !== n.length) {
            var r = n.indexOf(t);
            r < 0 || n.splice(r, 1)
        }
    }, o.raiseEvent = function (t, e, n) {
        var r = this._eventMap[t], o = [];
        if (void 0 !== r) {
            for (var a = 0; a < r.length; a++) {
                var s = r[a], i = s.pointer();
                if (0 === i[3] && 4 === i.length && (void 0 === n || s.params.indexOf(n) > -1)) {
                    var l = new Entry.Executor(r[a], e);
                    this.executors.push(l), o.push(l)
                }
            }
            return o
        }
    }, o.getEventMap = function (t) {
        return this._eventMap[t]
    }, o.map = function (t) {
        this._data.map(t)
    }, o.tick = function () {
        var t, e = this.executors, n = this.watchEvent, r = n.hasListeners(), o = [];
        e.forEach(function (t) {
        });
        for (var a = _.partial(Entry.dispatchEvent, "blockExecute"), s = _.partial(Entry.dispatchEvent, "blockExecuteEnd"), i = 0; i < e.length; i++) {
            var l = e[i];
            if (l.isEnd()) s(this.board), e.splice(i--, 1), 0 === e.length && this.executeEndEvent.notify(); else {
                var c = l.scope;
                a(c.block && c.block.view), t = l.execute(!0), r && (o = o.concat(t))
            }
        }
        r && n.notify(o)
    }, o.removeExecutor = function (t) {
        var e = this.executors.indexOf(t);
        e > -1 && this.executors.splice(e, 1)
    }, o.clearExecutors = function () {
        this.executors.forEach(function (t) {
            return t.end()
        }), Entry.dispatchEvent("blockExecuteEnd"), this.executors = []
    }, o.clearExecutorsByEntity = function (t) {
        for (var e = this.executors, n = 0; n < e.length; n++) {
            var r = e[n];
            r.entity === t && r.end()
        }
    }, o.addExecutor = function (t) {
        this.executors.push(t)
    }, o.createThread = function (t, e) {
        if (!(t instanceof Array)) return console.error("blocks must be array");
        var n = new Entry.Thread(t, this);
        return void 0 === e || null === e ? this._data.push(n) : this._data.insert(n, e), this.changeEvent.notify(), n
    }, o.getThreadIndex = function (t) {
        return this._data.indexOf(t)
    }, o.getThreadCount = function () {
        return this._data.length
    }, o.cloneThread = function (t, e) {
        var n = t.clone(this, e);
        return this._data.push(n), n
    }, o.destroyThread = function (t, e) {
        var n = this._data, r = n.indexOf(t);
        r < 0 || n.splice(r, 1)
    }, o.doDestroyThread = function (t, e) {
        var n = this._data, r = n.indexOf(t);
        r < 0 || n.splice(r, 1)
    }, o.getThread = function (t) {
        return this._data[t]
    }, o.getThreads = function () {
        return this._data.map(function (t) {
            return t
        })
    }, o.getThreadsByCategory = function (t) {
        for (var e = [], n = 0; n < this._data.length; n++) {
            var r = this._data[n], o = r.getFirstBlock();
            o && o.category === t && e.push(r)
        }
        return e
    }, o.toJSON = function (t, e) {
        for (var n = this.getThreads(), r = [], o = 0, a = n.length; o < a; o++) r.push(n[o].toJSON(!1, void 0, t, e));
        return r
    }, o.countBlock = function () {
        for (var t = this.getThreads(), e = 0, n = 0; n < t.length; n++) e += t[n].countBlock();
        return e
    }, o.moveBy = function (t, e) {
        for (var n = this.getThreads(), r = 0, o = n.length; r < o; r++) {
            var a = n[r].getFirstBlock();
            a && a.view && a.view.display && a.view._moveBy(t, e, !1)
        }
        var s = this.board;
        s instanceof Entry.BlockMenu && s.updateSplitters(e)
    }, o.stringify = function (t) {
        return (0, a.default)(this.toJSON(t))
    }, o.dominate = function (t) {
        t.view.setZIndex(this._maxZIndex++)
    }, o.getMaxZIndex = function () {
        return this._maxZIndex
    }, o.indexOf = function (t) {
        return this._data.indexOf(t)
    }, o._handleChange = function () {
        Entry.creationChangedEvent && this.view && this.view.board.constructor !== Entry.BlockMenu && Entry.creationChangedEvent.notify()
    }, o.hasBlockType = function (t) {
        for (var e = this.getThreads(), n = 0; n < e.length; n++) if (e[n].hasBlockType(t)) return !0;
        return !1
    }, o.findById = function (t) {
        return this._blockMap[t]
    }, o.registerBlock = function (t) {
        this._blockMap[t.id] = t
    }, o.unregisterBlock = function (t) {
        delete this._blockMap[t.id]
    }, o.getByPointer = function (t) {
        (t = t.concat()).splice(0, 2);
        for (var e = this._data[t.shift()].getBlock(t.shift()); t.length;) {
            e instanceof Entry.Block || (e = e.getValueBlock());
            var n = t.shift(), r = t.shift();
            if (n > -1) {
                var o = e.statements[n];
                if (void 0 === r) return o;
                e = o.getBlock(r)
            } else -1 === n && (e = e.view.getParam(r))
        }
        return e
    }, o.getTargetByPointer = function (t) {
        (t = t.concat()).splice(0, 2);
        var e, n = this._data[t.shift()];
        if (1 === t.length) e = n.getBlock(t.shift() - 1); else for (e = n.getBlock(t.shift()); t.length;) {
            e instanceof Entry.Block || (e = e.getValueBlock());
            var r = t.shift(), o = t.shift();
            if (r > -1) {
                var a = e.statements[r];
                e = t.length ? o < 0 ? a : a.getBlock(o) : 0 === o ? a.view.getParent() : void 0 === o ? a : a.getBlock(o - 1)
            } else -1 === r && (e = e.view.getParam(o))
        }
        return e
    }, o.getBlockList = function (t, e) {
        for (var n = this.getThreads(), r = [], o = 0; o < n.length; o++) r = r.concat(n[o].getBlockList(t, e));
        return r
    }, o.removeBlocksByType = function (t) {
        this.getBlockList(!1, t).forEach(function (t) {
            t.doDestroy()
        })
    }, o.isAllThreadsInOrigin = function () {
        for (var t = this.getThreads(), e = t.length - 1; e >= 0; e--) if (!t[e].isInOrigin()) return !1;
        return !0
    }, o.destroy = function () {
        this.clear(), this.destroyView()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Board = function (t) {
        Entry.Model(this, !1), this.readOnly = void 0 !== t.readOnly && t.readOnly, this.changeEvent = new Entry.Event(this), this.createView(t), this.updateOffset(), this.scroller = new Entry.Scroller(this, !0, !0), this._magnetMap = {}, Entry.ANIMATION_DURATION = 200, Entry.BOARD_PADDING = 100, this._initContextOptions(), Entry.Utils.disableContextmenu(this.svgDom), this._addControl(), this._bindEvent(), Entry.addEventListener("fontLoaded", this.reDraw.bind(this)), Entry.Utils.setSVGDom(this.svgDom)
    }, Entry.Board.OPTION_PASTE = 0, Entry.Board.OPTION_ALIGN = 1, Entry.Board.OPTION_CLEAR = 2, Entry.Board.OPTION_DOWNLOAD = 3, Entry.Board.DRAG_RADIUS = 5, (r = Entry.Board.prototype).schema = {
        code: null,
        dragBlock: null,
        magnetedBlockView: null,
        selectedBlockView: null
    }, r.createView = function (t) {
        var e = t.dom;
        if ("DIV" !== (e = "string" == typeof e ? $("#" + e) : $(e)).prop("tagName")) return console.error("Dom is not div element");
        this.view = e, this._svgId = "play" + (new Date).getTime(), this.workspace = t.workspace, this._activatedBlockView = null, this.wrapper = Entry.Dom("div", {
            parent: e,
            class: "entryBoardWrapper"
        }), this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="entryBoard" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: this.wrapper}), this.visible = !0, this.svg = Entry.SVG(this._svgId), $(window).scroll(this.updateOffset.bind(this)), this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this, t.isOverlay ? (this.wrapper.addClass("entryOverlayBoard"), this.generateButtons(), this.suffix = "overlayBoard") : this.suffix = "board", Entry.Utils.addFilters(this.svg, this.suffix), this.pattern = Entry.Utils.addBlockPattern(this.svg, this.suffix).pattern
    }, r.changeCode = function (t, e, n) {
        this.code && this.codeListener && this.codeListener.destroy(), this.set({code: t});
        var r = this;
        t && !e && (this.codeListener = this.code.changeEvent.attach(this, function () {
            r.changeEvent.notify()
        }), this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), t.createView(this), t.isAllThreadsInOrigin() && this.alignThreads(), n && n()), this.scroller.resizeScrollBar()
    }, r.bindCodeView = function (t) {
        this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), this.svgBlockGroup = t.svgBlockGroup, this.svgThreadGroup = t.svgThreadGroup, this.svgGroup.appendChild(this.svgThreadGroup), this.svgGroup.appendChild(this.svgBlockGroup)
    }, r.setMagnetedBlock = function (t, e) {
        this.magnetedBlockView !== t && (this.magnetedBlockView && this.magnetedBlockView.set({magneting: !1}), this.set({magnetedBlockView: t}), t && (t.set({magneting: e}), t.dominate()))
    }, r.getCode = function () {
        return this.code
    }, r.findById = function (t) {
        return this.code.findById(t)
    }, r._addControl = function () {
        var t = this.svgDom, e = this;
        t.mousedown(function () {
            e.onMouseDown.apply(e, arguments)
        }), t.bind("touchstart", function () {
            e.onMouseDown.apply(e, arguments)
        }), t.on("wheel", function () {
            e.mouseWheel.apply(e, arguments)
        });
        var n = e.scroller;
        n && (t.mouseenter(function (t) {
            n.setOpacity(1)
        }), t.mouseleave(function (t) {
            n.setOpacity(0)
        })), Entry.Utils.bindBlockViewHoverEvent(this, t)
    }, r.removeControl = function (t) {
        this.svgDom.off(t)
    }, r.onMouseDown = function (t) {
        if (this.workspace.getMode() != Entry.Workspace.MODE_VIMBOARD) {
            t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault();
            var e = this, n = null;
            if (0 === t.button || t.originalEvent && t.originalEvent.touches) {
                var r = t.type, o = Entry.Utils.convertMouseEvent(t);
                Entry.documentMousedown && Entry.documentMousedown.notify(o);
                var a = $(document);
                this.mouseDownCoordinate = {
                    x: o.pageX,
                    y: o.pageY
                }, a.bind("mousemove.entryBoard", s), a.bind("mouseup.entryBoard", i), a.bind("touchmove.entryBoard", s), a.bind("touchend.entryBoard", i), this.dragInstance = new Entry.DragInstance({
                    startX: o.pageX,
                    startY: o.pageY,
                    offsetX: o.pageX,
                    offsetY: o.pageY
                }), "touchstart" === r && (n = setTimeout(function () {
                    n && (n = null, i(), e._rightClick(t))
                }, 1e3))
            } else Entry.Utils.isRightButton(t) && this._rightClick(t)
        }

        function s(t) {
            t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault();
            var r = Entry.Utils.convertMouseEvent(t), o = e.mouseDownCoordinate, a = r.pageX, s = r.pageY;
            if (!(Math.sqrt(Math.pow(a - o.x, 2) + Math.pow(s - o.y, 2)) < Entry.Board.DRAG_RADIUS)) {
                n && (clearTimeout(n), n = null);
                var i = e.dragInstance;
                e.scroller.scroll(a - i.offsetX, s - i.offsetY), i.set({offsetX: a, offsetY: s})
            }
        }

        function i(t) {
            n && (clearTimeout(n), n = null), $(document).unbind(".entryBoard"), delete e.mouseDownCoordinate, delete e.dragInstance
        }
    }, r.mouseWheel = function (t) {
        (t = t.originalEvent).preventDefault();
        var e = Entry.disposeEvent;
        e && e.notify(t), this.scroller.scroll(t.wheelDeltaX || -t.deltaX, t.wheelDeltaY || -t.deltaY)
    }, r.setSelectedBlock = function (t) {
        var e = this.selectedBlockView;
        e && e.removeSelected(), t instanceof Entry.BlockView ? t.addSelected() : t = null, this.set({selectedBlockView: t})
    }, r.hide = function () {
        this.wrapper.addClass("entryRemove"), this.visible = !1
    }, r.show = function () {
        this.wrapper.removeClass("entryRemove"), this.visible = !0
    }, r.alignThreads = function (t) {
        var e = this.code.getThreads();
        if (e.length) {
            for (var n = 15, r = 0, o = this.svgDom.height() - 30, a = 50, s = 0; s < e.length; s++) {
                var i = e[s], l = i.getFirstBlock();
                if (l) {
                    t && i.view.reDraw();
                    var c = l.view;
                    if (c.movable) {
                        var u = c.svgGroup.getBBox(), p = n + 15;
                        p > o && (a = a + r + 10, r = 0, n = 15), r = Math.max(r, u.width), p = n + 15, c._moveTo(a - u.x, p, !1), n = n + u.height + 15
                    }
                }
            }
            this.scroller.resizeScrollBar()
        }
    }, r.clear = function () {
        this.svgBlockGroup.remove(), this.svgThreadGroup.remove()
    }, r.updateOffset = function () {
        this._offset = this.svg.getBoundingClientRect();
        var t = $(window), e = t.scrollTop(), n = t.scrollLeft(), r = this._offset;
        this.relativeOffset = {top: r.top - e, left: r.left - n};
        var o = this.svgDom;
        o && (this._svgDomRect = {
            width: o.width(),
            height: o.height()
        }), this.btnWrapper && this.btnWrapper.attr({transform: "translate(" + (r.width / 2 - 65) + "," + (r.height - 200) + ")"})
    }, r.generateButtons = function () {
        var t = this.btnWrapper = this.svgGroup.elem("g"),
            e = t.elem("text", {x: 102.5, y: 33, class: "entryFunctionButtonText"});
        e.textContent = Lang.Buttons.save;
        var n = t.elem("text", {x: 27, y: 33, class: "entryFunctionButtonText"});
        n.textContent = Lang.Buttons.cancel;
        var r = t.elem("circle", {cx: 102.5, cy: 27.5, r: 27.5, class: "entryFunctionButton"}),
            o = t.elem("circle", {cx: 27.5, cy: 27.5, r: 27.5, class: "entryFunctionButton"}), a = this.save.bind(this),
            s = this.cancelEdit.bind(this);
        $(r).bind("mousedown touchstart", a), $(e).bind("mousedown touchstart", a), $(o).bind("mousedown touchstart", s), $(n).bind("mousedown touchstart", s)
    }, r.cancelEdit = function () {
        this.workspace.setMode(Entry.Workspace.MODE_BOARD, "cancelEdit")
    }, r.save = function () {
        this.workspace.setMode(Entry.Workspace.MODE_BOARD, "save")
    }, r.generateCodeMagnetMap = function () {
        var t = this.code, e = this.dragBlock;
        if (t && e) for (var n in this._magnetMap = {}, e.magnet) if ("next" !== n || !e.thread || void 0 !== e.block.getLastBlock().view.magnet.next) {
            var r = this._getCodeBlocks(t, n);
            r.sort(function (t, e) {
                return t.point - e.point
            }), r.unshift({point: -Number.MAX_VALUE, blocks: []});
            for (var o = 1; o < r.length; o++) {
                var a = r[o], s = a, i = a.startBlock;
                if (i) {
                    for (var l = a.endPoint, c = o; l > s.point && (s.blocks.push(i), s = r[++c]);) ;
                    delete a.startBlock
                }
                a.endPoint = Number.MAX_VALUE, r[o - 1].endPoint = a.point
            }
            this._magnetMap[n] = r
        }
    }, r._getCodeBlocks = function (t, e) {
        var n, r = t.getThreads(), o = [];
        switch (e) {
            case"previous":
                n = this._getNextMagnets;
                break;
            case"next":
                n = this._getPreviousMagnets;
                break;
            case"string":
            case"boolean":
                n = this._getFieldMagnets;
                break;
            case"param":
                n = this._getOutputMagnets;
                break;
            default:
                return []
        }
        for (var a = 0; a < r.length; a++) {
            var s = r[a];
            o = o.concat(n.call(this, s, s.view.zIndex, null, e))
        }
        return o
    }, r._getNextMagnets = function (t, e, n, r) {
        var o = t.getBlocks(), a = [], s = [];
        n || (n = {x: 0, y: 0});
        for (var i = n.x, l = n.y, c = 0; c < o.length; c++) {
            var u = o[c], p = u.view;
            if (p.zIndex = e, p.dragInstance) break;
            l += p.y, i += p.x;
            var _ = l + 1;
            p.magnet.next && (_ += p.height, s.push({
                point: l,
                endPoint: _,
                startBlock: u,
                blocks: []
            }), s.push({point: _, blocks: []}), p.absX = i), u.statements && (e += .01);
            for (var d = 0; d < u.statements.length; d++) {
                t = u.statements[d];
                var y = u.view._statements[d];
                y.zIndex = e, y.absX = i + y.x, s.push({
                    point: y.y + l - 30,
                    endPoint: y.y + l,
                    startBlock: y,
                    blocks: []
                }), s.push({
                    point: y.y + l + y.height,
                    blocks: []
                }), e += .01, a = a.concat(this._getNextMagnets(t, e, {x: y.x + i, y: y.y + l}, r))
            }
            p.magnet.next && (l += p.magnet.next.y, i += p.magnet.next.x)
        }
        return a.concat(s)
    }, r._getPreviousMagnets = function (t, e, n, r) {
        var o = t.getBlocks(), a = [];
        n || (n = {x: 0, y: 0});
        var s = n.x, i = n.y, l = o[0], c = l.view;
        if (c.zIndex = e, c.dragInstance) return [];
        i += c.y - 15, s += c.x;
        var u = i + 1;
        return c.magnet.previous ? (u += c.height, a.push({
            point: i,
            endPoint: u,
            startBlock: l,
            blocks: []
        }), a.push({point: u, blocks: []}), c.absX = s, a) : []
    }, r._getFieldMagnets = function (t, e, n, r) {
        var o = t.getBlocks(), a = [], s = [];
        n || (n = {x: 0, y: 0});
        for (var i = n.x, l = n.y, c = 0; c < o.length; c++) {
            var u = o[c], p = u.view;
            if (p.dragInstance) break;
            p.zIndex = e, l += p.y, i += p.x, p.magnet.next && p.magnet.next.y, s = s.concat(this._getFieldBlockMetaData(p, i, l, e, r)), u.statements && (e += .01);
            for (var _ = 0; _ < u.statements.length; _++) {
                t = u.statements[_];
                var d = u.view._statements[_];
                a = a.concat(this._getFieldMagnets(t, e, {x: d.x + i, y: d.y + l}, r))
            }
            p.magnet.next && (l += p.magnet.next.y, i += p.magnet.next.x)
        }
        return a.concat(s)
    }, r._getFieldBlockMetaData = function (t, e, n, r, o) {
        var a = t._contents, s = [];
        n += t.contentPos.y;
        for (var i = 0; i < a.length; i++) {
            var l = a[i];
            if (l instanceof Entry.FieldBlock) {
                var c = l._valueBlock;
                if (!c.view.dragInstance && (l.acceptType === o || "boolean" === l.acceptType)) {
                    var u = e + l.box.x, p = n + l.box.y + t.contentHeight % 1e3 * -.5, _ = n + l.box.y + l.box.height;
                    l.acceptType === o && (s.push({point: p, endPoint: _, startBlock: c, blocks: []}), s.push({
                        point: _,
                        blocks: []
                    }));
                    var d = c.view;
                    d.absX = u, d.zIndex = r, s = s.concat(this._getFieldBlockMetaData(d, u + d.contentPos.x, p + d.contentPos.y, r + .01, o))
                }
            }
        }
        return s
    }, r._getOutputMagnets = function (t, e, n, r) {
        var o = t.getBlocks(), a = [], s = [];
        n || (n = {x: 0, y: 0});
        for (var i = n.x, l = n.y, c = 0; c < o.length; c++) {
            var u = o[c], p = u.view;
            if (p.dragInstance) break;
            p.zIndex = e, l += p.y, i += p.x, p.magnet.next && p.magnet.next.y, s = s.concat(this._getOutputMetaData(p, i, l, e, r)), u.statements && (e += .01);
            for (var _ = 0; _ < u.statements.length; _++) {
                t = u.statements[_];
                var d = u.view._statements[_];
                a = a.concat(this._getOutputMagnets(t, e, {x: d.x + i, y: d.y + l}, r))
            }
            p.magnet.next && (l += p.magnet.next.y, i += p.magnet.next.x)
        }
        return a.concat(s)
    }, r._getOutputMetaData = function (t, e, n, r, o) {
        var a = t._contents, s = [];
        e += t.contentPos.x, n += t.contentPos.y;
        for (var i = 0; i < a.length; i++) {
            var l = a[i], c = e + l.box.x, u = n - 24, p = n;
            if (l instanceof Entry.FieldBlock) l.acceptType === o && (s.push({
                point: u,
                endPoint: p,
                startBlock: l,
                blocks: []
            }), s.push({
                point: p,
                blocks: []
            }), l.absX = c, l.zIndex = r, l.width = 20), (_ = l._valueBlock) && (s = s.concat(this._getOutputMetaData(_.view, c, n + l.box.y, r + .01, o))); else if (l instanceof Entry.FieldOutput) {
                if (l.acceptType !== o) continue;
                var _;
                if (s.push({point: u, endPoint: p, startBlock: l, blocks: []}), s.push({
                        point: p,
                        blocks: []
                    }), l.absX = c, l.zIndex = r, l.width = 20, !(_ = l._valueBlock)) continue;
                if (_.view.dragInstance) continue;
                var d = _.view;
                s = s.concat(this._getOutputMetaData(d, e + l.box.x, n + l.box.y, r + .01, o))
            }
        }
        return s
    }, r.getNearestMagnet = function (t, e, n) {
        var r = this._magnetMap[n];
        if (r && 0 !== r.length) {
            for (var o, a, s = 0, i = r.length - 1, l = null, c = "previous" === n ? e - 15 : e, u = ["previous", "next"].indexOf(n) > -1 ? 20 : 0; s <= i;) if (c < (a = r[o = (s + i) / 2 | 0]).point) i = o - 1; else {
                if (!(c > a.endPoint)) {
                    for (var p = a.blocks, _ = 0; _ < p.length; _++) {
                        var d = p[_].view;
                        if (d.absX - u < t && t < d.absX + d.width) {
                            var y = a.blocks[_];
                            (!l || l.view.zIndex < y.view.zIndex) && (l = a.blocks[_])
                        }
                    }
                    return l
                }
                s = o + 1
            }
            return null
        }
    }, r.dominate = function (t) {
        if (t) {
            var e = this.code;
            if ((n = t.view.zIndex) + 1 < (r = e.getMaxZIndex()) || !n || !r) {
                var n, r, o = t.getFirstBlock();
                o && (e.dominate(t), requestAnimationFrame(function () {
                    var t = o && o.view;
                    this.svgBlockGroup && t && this.svgBlockGroup.appendChild(t.svgGroup)
                }.bind(this)))
            }
        }
    }, r.enablePattern = function () {
        this.pattern.removeAttribute("style")
    }, r.disablePattern = function () {
        this.pattern.attr({style: "display: none"})
    }, r._removeActivated = function () {
        this._activatedBlockView && (this._activatedBlockView.removeActivated(), this._activatedBlockView = null)
    }, r.activateBlock = function (t) {
        var e = t.view, n = e.getAbsoluteCoordinate(), r = (this.svgDom, n.x), o = n.y, a = this.getSvgDomRect(),
            s = a.width / 2 - r, i = a.height / 2 - o - 100;
        this.scroller.scroll(s, i), e.addActivated(), this._activatedBlockView = e
    }, r.reDraw = function () {
        this.code && this.code.view && this.code.view.reDraw()
    }, r.separate = function (t, e, n) {
        if ("string" == typeof t && (t = this.findById(t)), t.view && t.view._toGlobalCoordinate(), "output" === t.getBlockType()) {
            if (!e) return;
            for (var r = t.getPrevOutputBlock(), o = t, a = 0; a < e; a++) o = o.getOutputBlock();
            t.separate(e, n), r && o && (o.separate(), o.doInsert(r.view._contents[1]))
        } else {
            var s, i, l = t.getPrevBlock();
            !l && t.thread instanceof Entry.Thread && t.thread.parent instanceof Entry.Code && (s = t.thread.getBlock(t.thread.indexOf(t) + e)) && (i = s.view.getAbsoluteCoordinate()), t.thread, t.separate(e, n), l && l.getNextBlock() ? l.getNextBlock().view.bindPrev() : s && (s.view._toGlobalCoordinate(), s.moveTo(i.x, i.y))
        }
    }, r.insert = function (t, e, n) {
        var r;
        if ("string" == typeof t && (t = this.findById(t)), 3 === e.length) this.separate(t, n, e[2]), t.moveTo(e[0], e[1]); else if (4 === e.length && -1 == e[3]) e[3] = 0, r = this.code.getByPointer(e), this.separate(t, n, e[2]), t = t.getLastBlock(), r.view.bindPrev(t), r.doInsert(t); else {
            var o;
            this.separate(t, n), (o = e instanceof Array ? this.code.getByPointer(e) : e) instanceof Entry.Block ? ("basic" === t.getBlockType() && t.view.bindPrev(o), t.doInsert(o)) : o instanceof Entry.FieldStatement ? (t.view.bindPrev(o), o.insertTopBlock(t)) : o instanceof Entry.Thread ? (o = o.view.getParent(), t.view.bindPrev(o), o.insertTopBlock(t)) : t.doInsert(o)
        }
    }, r.adjustThreadsPosition = function () {
        var t = this.code;
        if (t && t.view) {
            var e = t.getThreads();
            if (e && 0 !== e.length) {
                var n = (e = e.sort(function (t, e) {
                    return t.getFirstBlock().view.x - e.getFirstBlock().view.x
                }))[0].getFirstBlock();
                if (n) {
                    var r = (n = n.view).getAbsoluteCoordinate();
                    this.scroller.scroll(50 - r.x, 30 - r.y, !0)
                }
            }
        }
    }, r._initContextOptions = function () {
        var t = this;
        this._contextOptions = [{
            activated: !0,
            option: {
                text: Lang.Blocks.Paste_blocks,
                enable: !!Entry.clipboard && !this.readOnly,
                callback: function () {
                    Entry.do("addThread", Entry.clipboard).value.getFirstBlock().copyToClipboard()
                }
            }
        }, {
            activated: !0, option: {
                text: Lang.Blocks.tidy_up_block, enable: !this.readOnly, callback: function () {
                    t.alignThreads()
                }
            }
        }, {
            activated: !0, option: {
                text: Lang.Blocks.Clear_all_blocks, enable: !this.readOnly, callback: function () {
                    Entry.do("destroyThreads")
                }
            }
        }, {
            activated: "workspace" === Entry.type && Entry.Utils.isChrome() && !Entry.isMobile(),
            option: {
                text: Lang.Menus.save_as_image_all, enable: !this.readOnly, callback: function () {
                    var e = t.code.getThreads(), n = [];
                    e.forEach(function (t, r) {
                        var o = t.getFirstBlock();
                        o && (console.log("threads.length=", e.length), e.length > 1 && Entry.isOffline ? o.view.getDataUrl().then(function (t) {
                            n.push(t), n.length == e.length && Entry.dispatchEvent("saveBlockImages", {images: n})
                        }) : o.view.downloadAsImage(++r))
                    })
                }
            }
        }]
    }, r.activateContextOption = function (t) {
        this._contextOptions[t].activated = !0
    }, r.deActivateContextOption = function (t) {
        this._contextOptions[t].activated = !1
    }, r._bindEvent = function () {
        var t = Entry.documentMousedown;
        t && (t.attach(this, this.setSelectedBlock), t.attach(this, this._removeActivated)), (t = Entry.windowResized) && t.attach(this, Entry.Utils.debounce(this.updateOffset, 200))
    }, r.offset = function () {
        return !this._offset || 0 === this._offset.top && 0 === this._offset.left ? (this.updateOffset(), this._offset) : this._offset
    }, r._rightClick = function (t) {
        var e = Entry.disposeEvent;
        if (e && e.notify(t), this.visible) {
            var n = [], r = this._contextOptions;
            r[Entry.Board.OPTION_PASTE].option.enable = !!Entry.clipboard, r[Entry.Board.OPTION_DOWNLOAD].option.enable = 0 !== this.code.getThreads().length;
            for (var o = 0; o < this._contextOptions.length; o++) r[o].activated && n.push(r[o].option);
            t = Entry.Utils.convertMouseEvent(t), Entry.ContextMenu.show(n, null, {x: t.clientX, y: t.clientY})
        }
    }, r.getDom = function (t) {
        var e = (t = t.concat()).shift();
        if ("trashcan" === e) return this.workspace.trashcan.svgGroup;
        if ("coord" === e) return {
            getBoundingClientRect: function () {
                var e = this.relativeOffset;
                return {top: t[1] + e.top - 20, left: t[0] + e.left - 20, width: 40, height: 40}
            }.bind(this)
        };
        if (e instanceof Array) {
            var n = this.code.getByPointer(e);
            return n.getDom ? n.getDom(t) : n.svgGroup
        }
    }, r.findBlock = function (t) {
        return "string" == typeof t ? this.findById(t) : t && t.id ? this.findById(t.id) || t : t instanceof Array ? this.code.getByPointer(t) : t
    }, r.scrollToPointer = function (t, e) {
        var n, r = this.code.getByPointer(t);
        r instanceof Entry.Block ? (n = r.view.getAbsoluteCoordinate(), r.view.dominate()) : r instanceof Entry.Thread ? n = r.view.requestAbsoluteCoordinate() : r.getAbsolutePosFromBoard && (n = r.getAbsolutePosFromBoard());
        var o = 0, a = 0, s = this._offset, i = s.width, l = s.height;
        return n.x > i - 200 ? o = i - 200 - n.x : n.x < 100 && (o = 100 - n.x), n.y > l - 200 ? a = l - 200 - n.y : n.y < 100 && (a = 100 - n.y), this.scroller.scroll(o, a, !0), [o, a]
    }, r.getSvgDomRect = function () {
        return this._svgDomRect || this.updateOffset(), this._svgDomRect
    }
}, function (t, e, n) {
    "use strict";
    var r = n(6), o = n(30), a = n(54);
    r(r.S, "Promise", {
        try: function (t) {
            var e = o.f(this), n = a(t);
            return (n.e ? e.reject : e.resolve)(n.v), e.promise
        }
    })
}, function (t, e, n) {
    "use strict";
    var r = n(6), o = n(1), a = n(4), s = n(56), i = n(53);
    r(r.P + r.R, "Promise", {
        finally: function (t) {
            var e = s(this, o.Promise || a.Promise), n = "function" == typeof t;
            return this.then(n ? function (n) {
                return i(e, t()).then(function () {
                    return n
                })
            } : t, n ? function (n) {
                return i(e, t()).then(function () {
                    throw n
                })
            } : t)
        }
    })
}, function (t, e, n) {
    "use strict";
    var r = n(4), o = n(1), a = n(7), s = n(9), i = n(2)("species");
    t.exports = function (t) {
        var e = "function" == typeof o[t] ? o[t] : r[t];
        s && e && !e[i] && a.f(e, i, {
            configurable: !0, get: function () {
                return this
            }
        })
    }
}, function (t, e, n) {
    var r = n(13);
    t.exports = function (t, e, n) {
        for (var o in e) n && t[o] ? t[o] = e[o] : r(t, o, e[o]);
        return t
    }
}, function (t, e, n) {
    var r = n(4), o = n(55).set, a = r.MutationObserver || r.WebKitMutationObserver, s = r.process, i = r.Promise,
        l = "process" == n(21)(s);
    t.exports = function () {
        var t, e, n, c = function () {
            var r, o;
            for (l && (r = s.domain) && r.exit(); t;) {
                o = t.fn, t = t.next;
                try {
                    o()
                } catch (r) {
                    throw t ? n() : e = void 0, r
                }
            }
            e = void 0, r && r.enter()
        };
        if (l) n = function () {
            s.nextTick(c)
        }; else if (a) {
            var u = !0, p = document.createTextNode("");
            new a(c).observe(p, {characterData: !0}), n = function () {
                p.data = u = !u
            }
        } else if (i && i.resolve) {
            var _ = i.resolve();
            n = function () {
                _.then(c)
            }
        } else n = function () {
            o.call(r, c)
        };
        return function (r) {
            var o = {fn: r, next: void 0};
            e && (e.next = o), t || (t = o, n()), e = o
        }
    }
}, function (t, e) {
    t.exports = function (t, e, n) {
        var r = void 0 === n;
        switch (e.length) {
            case 0:
                return r ? t() : t.call(n);
            case 1:
                return r ? t(e[0]) : t.call(n, e[0]);
            case 2:
                return r ? t(e[0], e[1]) : t.call(n, e[0], e[1]);
            case 3:
                return r ? t(e[0], e[1], e[2]) : t.call(n, e[0], e[1], e[2]);
            case 4:
                return r ? t(e[0], e[1], e[2], e[3]) : t.call(n, e[0], e[1], e[2], e[3])
        }
        return t.apply(n, e)
    }
}, function (t, e, n) {
    var r = n(23), o = n(59), a = n(58), s = n(10), i = n(45), l = n(31), c = {}, u = {};
    (e = t.exports = function (t, e, n, p, _) {
        var d, y, g, h, m = _ ? function () {
            return t
        } : l(t), b = r(n, p, e ? 2 : 1), f = 0;
        if ("function" != typeof m) throw TypeError(t + " is not iterable!");
        if (a(m)) {
            for (d = i(t.length); d > f; f++) if ((h = e ? b(s(y = t[f])[0], y[1]) : b(t[f])) === c || h === u) return h
        } else for (g = m.call(t); !(y = g.next()).done;) if ((h = o(g, b, y.value, e)) === c || h === u) return h
    }).BREAK = c, e.RETURN = u
}, function (t, e) {
    t.exports = function (t, e, n, r) {
        if (!(t instanceof e) || void 0 !== r && r in t) throw TypeError(n + ": incorrect invocation!");
        return t
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a, s, i = n(26), l = n(4), c = n(23), u = n(32), p = n(6), _ = n(16), d = n(29), y = n(160), g = n(159),
        h = n(56), m = n(55).set, b = n(157)(), f = n(30), E = n(54), v = n(53), k = l.TypeError, T = l.process,
        w = l.Promise, B = "process" == u(T), L = function () {
        }, R = o = f.f, S = !!function () {
            try {
                var t = w.resolve(1), e = (t.constructor = {})[n(2)("species")] = function (t) {
                    t(L, L)
                };
                return (B || "function" == typeof PromiseRejectionEvent) && t.then(L) instanceof e
            } catch (t) {
            }
        }(), C = i ? function (t, e) {
            return t === e || t === w && e === s
        } : function (t, e) {
            return t === e
        }, D = function (t) {
            var e;
            return !(!_(t) || "function" != typeof(e = t.then)) && e
        }, O = function (t, e) {
            if (!t._n) {
                t._n = !0;
                var n = t._c;
                b(function () {
                    for (var r = t._v, o = 1 == t._s, a = 0, s = function (e) {
                        var n, a, s = o ? e.ok : e.fail, i = e.resolve, l = e.reject, c = e.domain;
                        try {
                            s ? (o || (2 == t._h && M(t), t._h = 1), !0 === s ? n = r : (c && c.enter(), n = s(r), c && c.exit()), n === e.promise ? l(k("Promise-chain cycle")) : (a = D(n)) ? a.call(n, i, l) : i(n)) : l(r)
                        } catch (t) {
                            l(t)
                        }
                    }; n.length > a;) s(n[a++]);
                    t._c = [], t._n = !1, e && !t._h && A(t)
                })
            }
        }, A = function (t) {
            m.call(l, function () {
                var e, n, r, o = t._v, a = x(t);
                if (a && (e = E(function () {
                        B ? T.emit("unhandledRejection", o, t) : (n = l.onunhandledrejection) ? n({
                            promise: t,
                            reason: o
                        }) : (r = l.console) && r.error && r.error("Unhandled promise rejection", o)
                    }), t._h = B || x(t) ? 2 : 1), t._a = void 0, a && e.e) throw e.v
            })
        }, x = function (t) {
            if (1 == t._h) return !1;
            for (var e, n = t._a || t._c, r = 0; n.length > r;) if ((e = n[r++]).fail || !x(e.promise)) return !1;
            return !0
        }, M = function (t) {
            m.call(l, function () {
                var e;
                B ? T.emit("rejectionHandled", t) : (e = l.onrejectionhandled) && e({promise: t, reason: t._v})
            })
        }, I = function (t) {
            var e = this;
            e._d || (e._d = !0, (e = e._w || e)._v = t, e._s = 2, e._a || (e._a = e._c.slice()), O(e, !0))
        }, N = function (t) {
            var e, n = this;
            if (!n._d) {
                n._d = !0, n = n._w || n;
                try {
                    if (n === t) throw k("Promise can't be resolved itself");
                    (e = D(t)) ? b(function () {
                        var r = {_w: n, _d: !1};
                        try {
                            e.call(t, c(N, r, 1), c(I, r, 1))
                        } catch (t) {
                            I.call(r, t)
                        }
                    }) : (n._v = t, n._s = 1, O(n, !1))
                } catch (t) {
                    I.call({_w: n, _d: !1}, t)
                }
            }
        };
    S || (w = function (t) {
        y(this, w, "Promise", "_h"), d(t), r.call(this);
        try {
            t(c(N, this, 1), c(I, this, 1))
        } catch (t) {
            I.call(this, t)
        }
    }, (r = function (t) {
        this._c = [], this._a = void 0, this._s = 0, this._d = !1, this._v = void 0, this._h = 0, this._n = !1
    }).prototype = n(156)(w.prototype, {
        then: function (t, e) {
            var n = R(h(this, w));
            return n.ok = "function" != typeof t || t, n.fail = "function" == typeof e && e, n.domain = B ? T.domain : void 0, this._c.push(n), this._a && this._a.push(n), this._s && O(this, !1), n.promise
        }, catch: function (t) {
            return this.then(void 0, t)
        }
    }), a = function () {
        var t = new r;
        this.promise = t, this.resolve = c(N, t, 1), this.reject = c(I, t, 1)
    }, f.f = R = function (t) {
        return C(w, t) ? new a(t) : o(t)
    }), p(p.G + p.W + p.F * !S, {Promise: w}), n(25)(w, "Promise"), n(155)("Promise"), s = n(1).Promise, p(p.S + p.F * !S, "Promise", {
        reject: function (t) {
            var e = R(this);
            return (0, e.reject)(t), e.promise
        }
    }), p(p.S + p.F * (i || !S), "Promise", {
        resolve: function (t) {
            return t instanceof w && C(t.constructor, this) ? t : v(this, t)
        }
    }), p(p.S + p.F * !(S && n(57)(function (t) {
        w.all(t).catch(L)
    })), "Promise", {
        all: function (t) {
            var e = this, n = R(e), r = n.resolve, o = n.reject, a = E(function () {
                var n = [], a = 0, s = 1;
                g(t, !1, function (t) {
                    var i = a++, l = !1;
                    n.push(void 0), s++, e.resolve(t).then(function (t) {
                        l || (l = !0, n[i] = t, --s || r(n))
                    }, o)
                }), --s || r(n)
            });
            return a.e && o(a.v), n.promise
        }, race: function (t) {
            var e = this, n = R(e), r = n.reject, o = E(function () {
                g(t, !1, function (t) {
                    e.resolve(t).then(n.resolve, r)
                })
            });
            return o.e && r(o.v), n.promise
        }
    })
}, function (t, e, n) {
    n(62), n(17), n(24), n(161), n(154), n(153), t.exports = n(1).Promise
}, function (t, e, n) {
    t.exports = {default: n(162), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    var r = n(7), o = n(22);
    t.exports = function (t, e, n) {
        e in t ? r.f(t, e, o(0, n)) : t[e] = n
    }
}, function (t, e, n) {
    "use strict";
    var r = n(23), o = n(6), a = n(19), s = n(59), i = n(58), l = n(45), c = n(164), u = n(31);
    o(o.S + o.F * !n(57)(function (t) {
        Array.from(t)
    }), "Array", {
        from: function (t) {
            var e, n, o, p, _ = a(t), d = "function" == typeof this ? this : Array, y = arguments.length,
                g = y > 1 ? arguments[1] : void 0, h = void 0 !== g, m = 0, b = u(_);
            if (h && (g = r(g, y > 2 ? arguments[2] : void 0, 2)), void 0 == b || d == Array && i(b)) for (n = new d(e = l(_.length)); e > m; m++) c(n, m, h ? g(_[m], m) : _[m]); else for (p = b.call(_), n = new d; !(o = p.next()).done; m++) c(n, m, h ? s(p, g, [o.value, m], !0) : o.value);
            return n.length = m, n
        }
    })
}, function (t, e, n) {
    n(17), n(165), t.exports = n(1).Array.from
}, function (t, e, n) {
    t.exports = {default: n(166), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r, o = (r = n(167)) && r.__esModule ? r : {default: r};
    e.default = function (t) {
        if (Array.isArray(t)) {
            for (var e = 0, n = Array(t.length); e < t.length; e++) n[e] = t[e];
            return n
        }
        return (0, o.default)(t)
    }
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(168)), a = s(n(163));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.BlockView = function (t, e, n) {
        var r = this;
        if (Entry.Model(this, !1), this.block = t, this._lazyUpdatePos = Entry.Utils.debounce(t._updatePos.bind(t), 200), this.mouseUpEvent = new Entry.Event(this), this.disableMouseEvent = !1, this.dAlignContent = this.alignContent, this._board = e, this._observers = [], this.set(t), this.svgGroup = e.svgBlockGroup.elem("g"), this.svgGroup.blockView = this, this._schema = Entry.skinContainer.getSkin(t), void 0 !== this._schema) {
            if (void 0 === n) {
                var o = this.getBoard().workspace;
                o && o.getBlockViewRenderMode ? this.renderMode = o.getBlockViewRenderMode() : this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK
            } else this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK;
            this._schema.deletable && this.block.setDeletable(this._schema.deletable), this._schema.copyable && this.block.setCopyable(this._schema.copyable), !1 !== this._schema.display && !1 !== t.display || this.set({display: !1});
            var a = this._skeleton = Entry.skeleton[this._schema.skeleton];
            this._contents = [], this._statements = [], this._extensions = [], this.magnet = {}, this._paramMap = {}, a.magnets && a.magnets(this).next && (this.svgGroup.nextMagnet = this.block, this._nextGroup = this.svgGroup.elem("g"), this._observers.push(this.observe(this, "_updateMagnet", ["contentHeight"]))), this.isInBlockMenu = this.getBoard() instanceof Entry.BlockMenu, this.mouseHandler = function () {
                var t = r.block.events;
                t && t.mousedown && t.mousedown.forEach(function (t) {
                    t(r)
                }), r.onMouseDown.apply(r, arguments)
            }, this._startRender(t, n);
            var s = this.block;
            this._observers.push(s.observe(this, "_setMovable", ["movable"])), this._observers.push(s.observe(this, "_setReadOnly", ["movable"])), this._observers.push(s.observe(this, "_setCopyable", ["copyable"])), this._observers.push(s.observe(this, "_updateColor", ["deletable"], !1)), this._observers.push(this.observe(this, "_updateBG", ["magneting"], !1)), this._observers.push(this.observe(this, "_updateOpacity", ["visible"], !1)), this._observers.push(this.observe(this, "_updateDisplay", ["display"])), this._observers.push(this.observe(this, "_updateShadow", ["shadow"])), this._observers.push(this.observe(this, "_updateMagnet", ["offsetY"])), this._observers.push(e.code.observe(this, "_setBoard", ["board"], !1)), this.dragMode = Entry.DRAG_MODE_NONE, Entry.Utils.disableContextmenu(this.svgGroup.node);
            var i = t.events.viewAdd;
            "workspace" == Entry.type && i && this._board instanceof Entry.Board && i.forEach(function (e) {
                Entry.Utils.isFunction(e) && e(t)
            })
        } else this.block.destroy(!1, !1)
    }, Entry.BlockView.PARAM_SPACE = 5, Entry.BlockView.DRAG_RADIUS = 5, Entry.BlockView.pngMap = {}, Entry.BlockView.RENDER_MODE_BLOCK = 1, Entry.BlockView.RENDER_MODE_TEXT = 2, (r = Entry.BlockView.prototype).schema = {
        id: 0,
        type: Entry.STATIC.BLOCK_RENDER_MODEL,
        x: 0,
        y: 0,
        offsetX: 0,
        offsetY: 0,
        width: 0,
        height: 0,
        contentWidth: 0,
        contentHeight: 0,
        magneting: !1,
        visible: !0,
        animating: !1,
        shadow: !0,
        display: !0
    }, r._startRender = function (t, e) {
        var n = this._skeleton, r = {class: "block"};
        !1 === this.display && (r.display = "none");
        var o = this.svgGroup;
        this._schema.css && (r.style = this._schema.css), o.attr(r), (n.classes || []).forEach(function (t) {
            o.addClass(t)
        });
        var a = n.path(this);
        this.pathGroup = o.elem("g"), this._updateMagnet(), this._path = this.pathGroup.elem("path");
        var s = this._schema.color;
        (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) && (s = this._schema.emphasizedColor || Entry.Utils.getEmphasizeColor(s));
        this._fillColor = s;
        var i = {d: a, fill: s, class: "blockPath", blockId: this.id};
        this.magnet.next || this._skeleton.nextShadow ? this.pathGroup.attr({filter: "url(#entryBlockShadowFilter_" + this.getBoard().suffix + ")"}) : (this.magnet.string || this.magnet.boolean) && (i.stroke = n.outerLine), n.outerLine && (i["stroke-width"] = "0.6"), this._path.attr(i), this._moveTo(this.x, this.y, !1), this._startContentRender(e), this._startExtension(e), !0 !== this._board.disableMouseEvent && this._addControl();
        var l = this.guideSvgGroup;
        l && o.insertBefore(l, o.firstChild), this.bindPrev()
    }, r._startContentRender = function (t) {
        t = void 0 === t ? this.renderMode : t, this.contentSvgGroup && this.contentSvgGroup.remove(), this.statementSvgGroup && this.statementSvgGroup.remove(), this.contentSvgGroup = this.svgGroup.elem("g"), this._contents = [];
        var e = this._schema, n = this._schema.statements;
        n && n.length && (this.statementSvgGroup = this.svgGroup.elem("g"));
        var r, o = /(%\d+)/im, a = /%(\d+)/im, s = this._getTemplate(t), i = this._getSchemaParams(t);
        t === Entry.BlockView.RENDER_MODE_TEXT && /(if)+(.|\n)+(else)+/gim.test(s) && !o.test(s) && this.isInBlockMenu && (s = s.replace("else", "%" + i.length + " else"));
        for (var l = s.split(o), c = 0; c < l.length; c++) {
            var u = l[c];
            if (" " === u[0] && (u = u.substring(1)), " " === u[u.length - 1] && (u = u.substring(0, u.length - 1)), 0 !== u.length) if (r = a.exec(u)) {
                var p = r[1] - 1;
                u = i[p];
                var _ = new Entry["Field" + u.type](u, this, p, t || this.renderMode, c);
                this._contents.push(_), this._paramMap[p] = _
            } else this._contents.push(new Entry.FieldText({text: u}, this))
        }
        for (n = e.statements || [], c = 0; c < n.length; c++) this._statements.push(new Entry.FieldStatement(n[c], this, c));
        this.alignContent(!1)
    }, r._startExtension = function (t) {
        this._extensions = this.block.extensions.map(function (e) {
            return new Entry["Ext" + e.type](e, this, t)
        }.bind(this))
    }, r._updateSchema = function () {
        this._startContentRender()
    }, r.changeType = function (t) {
        this._schema = Entry.block[t || this.type], this._updateSchema()
    }, r.alignContent = function (t) {
        !0 !== t && (t = !1);
        for (var e = {x: 0, y: 0, height: 0}, n = 0, r = 0, o = 0, a = 0; a < this._contents.length; a++) {
            var s = this._contents[a];
            s instanceof Entry.FieldLineBreak ? (this._alignStatement(t, n), s.align(n), n++, e.y = s.box.y, e.x = 8) : (s.align(e.x, e.y, t), a === this._contents.length - 1 || s instanceof Entry.FieldText && 0 === s._text.length || (e.x += Entry.BlockView.PARAM_SPACE));
            var i = s.box;
            0 !== n ? o = Math.max(1e6 * Math.round(i.height), o) : e.height = Math.max(i.height, e.height), e.x += i.width, r = Math.max(r, e.x), this.contentWidth === r && this.contentHeight === e.height || this.set({
                contentWidth: r,
                contentHeight: e.height
            })
        }
        o && this.set({contentHeight: e.height + o}), this._statements.length != n && this._alignStatement(t, n);
        var l = this.getContentPos();
        this.contentSvgGroup.attr("transform", "translate(" + l.x + "," + l.y + ")"), this.contentPos = l, this._render(), this._updateMagnet();
        var c = this.getBoard().workspace;
        c && (this.isFieldEditing() || c.widgetUpdateEveryTime) && c.widgetUpdateEvent.notify()
    }, r.isFieldEditing = function () {
        for (var t = this._contents, e = 0; e < t.length; e++) {
            var n = t[e];
            if (n && void 0 !== n.isEditing && n.isEditing()) return !0
        }
        return !1
    }, r._alignStatement = function (t, e) {
        var n = this._skeleton.statementPos ? this._skeleton.statementPos(this) : [], r = this._statements[e];
        if (r) {
            var o = n[e];
            o && r.align(o.x, o.y, t)
        }
    }, r._render = function () {
        this._renderPath(), this.set(this._skeleton.box(this))
    }, r._renderPath = function () {
        var t = this._skeleton.path(this);
        this._path.getAttribute("d") !== t && (this._path.attr({d: t}), !0 === this.animating && this.set({animating: !1}))
    }, r._setPosition = function (t) {
        if (t = void 0 === t || t, this.x || this.y) {
            var e = "translate(" + this.x + "," + this.y + ")";
            t && Entry.ANIMATION_DURATION, this.svgGroup.attr("transform", e)
        } else this.svgGroup.removeAttr("transform")
    }, r._toLocalCoordinate = function (t) {
        this.disableMouseEvent = !1, this._moveTo(0, 0, !1), t.appendChild(this.svgGroup)
    }, r._toGlobalCoordinate = function (t, e) {
        this.disableMouseEvent = !1;
        var n = this.getAbsoluteCoordinate(t);
        this._moveTo(n.x, n.y, !1, e), this.getBoard().svgBlockGroup.appendChild(this.svgGroup)
    }, r._moveTo = function (t, e, n, r) {
        var o = this.x, a = this.y;
        this.display || (t = -99999, e = -99999), o === t && a === e || this.set({
            x: t,
            y: e
        }), !0 !== r && this._lazyUpdatePos(), this.visible && this.display && this._setPosition(n)
    }, r._moveBy = function (t, e, n, r) {
        return this._moveTo(this.x + t, this.y + e, n, r)
    }, r.moveBy = r._moveBy, r._addControl = function () {
        var t = this;
        this._mouseEnable = !0, $(this.svgGroup).bind("mousedown.blockViewMousedown touchstart.blockViewMousedown", t.mouseHandler);
        var e = t.block.events;
        e && e.dblclick && $(this.svgGroup).dblclick(function () {
            t._board.readOnly || e.dblclick.forEach(function (e) {
                e && e(t)
            })
        })
    }, r.removeControl = function () {
        this._mouseEnable = !1, $(this.svgGroup).unbind(".blockViewMousedown")
    }, r.onMouseDown = function (t) {
        t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault();
        var e = null, n = this, o = this.getBoard();
        if (Entry.documentMousedown && Entry.documentMousedown.notify(t), !this.readOnly && !o.viewOnly) {
            if (o.setSelectedBlock(this), (0 === t.button || t.originalEvent && t.originalEvent.touches) && !this._board.readOnly) {
                var a, s = t.type;
                a = t.originalEvent && t.originalEvent.touches ? t.originalEvent.touches[0] : t, this.mouseDownCoordinate = {
                    x: a.pageX,
                    y: a.pageY
                };
                var i = $(document);
                this.disableMouseEvent || i.bind("mousemove.block touchmove.block", l), i.bind("mouseup.block touchend.block", c), this.dragInstance = new Entry.DragInstance({
                    startX: a.pageX,
                    startY: a.pageY,
                    offsetX: a.pageX,
                    offsetY: a.pageY,
                    height: 0,
                    mode: !0
                }), o.set({dragBlock: this}), this.addDragging(), this.dragMode = Entry.DRAG_MODE_MOUSEDOWN, "touchstart" === s && (e = setTimeout(function () {
                    e && (e = null, c(), n._rightClick(t, "longPress"))
                }, 1e3))
            } else Entry.Utils.isRightButton(t) && this._rightClick(t);
            o.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD && t && document.getElementsByClassName("CodeMirror")[0].dispatchEvent(Entry.Utils.createMouseEvent("dragStart", event))
        }

        function l(t) {
            t.stopPropagation();
            var a, s = o.workspace.getMode();
            s === Entry.Workspace.MODE_VIMBOARD && r.vimBoardEvent(t, "dragOver"), a = t.originalEvent && t.originalEvent.touches ? t.originalEvent.touches[0] : t;
            var i = n.mouseDownCoordinate, l = Math.sqrt(Math.pow(a.pageX - i.x, 2) + Math.pow(a.pageY - i.y, 2));
            if (n.dragMode == Entry.DRAG_MODE_DRAG || l > Entry.BlockView.DRAG_RADIUS) {
                if (e && (clearTimeout(e), e = null), !n.movable) return;
                if (n.isInBlockMenu) o.cloneToGlobal(t); else {
                    var c = !1;
                    if (n.dragMode != Entry.DRAG_MODE_DRAG && (n._toGlobalCoordinate(void 0, !0), n.dragMode = Entry.DRAG_MODE_DRAG, n.block.getThread().changeEvent.notify(), Entry.GlobalSvg.setView(n, s), c = !0), this.animating && this.set({animating: !1}), 0 === n.dragInstance.height) {
                        n.block;
                        var u = -1 + n.height;
                        n.dragInstance.set({height: u})
                    }
                    var p = n.dragInstance;
                    n._moveBy(a.pageX - p.offsetX, a.pageY - p.offsetY, !1, !0), p.set({
                        offsetX: a.pageX,
                        offsetY: a.pageY
                    }), Entry.GlobalSvg.position(), n.originPos || (n.originPos = {
                        x: n.x,
                        y: n.y
                    }), c && o.generateCodeMagnetMap(), n._updateCloseBlock()
                }
            }
        }

        function c(t) {
            e && (clearTimeout(e), e = null), $(document).unbind(".block", c), $(document).unbind(".block", l), n.terminateDrag(t), o && o.set({dragBlock: null}), n._setHoverBlockView({that: n}), Entry.GlobalSvg.remove(), n.mouseUpEvent.notify(), delete this.mouseDownCoordinate, delete n.dragInstance
        }
    }, r.vimBoardEvent = function (t, e, n) {
        if (t) {
            var r = Entry.Utils.createMouseEvent(e, t);
            n && (r.block = n), $(".entryVimBoard>.CodeMirror")[0].dispatchEvent(r)
        }
    }, r.terminateDrag = function (t) {
        var e = Entry.GlobalSvg, n = this.getBoard(), r = this.dragMode, o = this.block, a = n.workspace.getMode();
        this.removeDragging(), this.set({visible: !0}), this.dragMode = Entry.DRAG_MODE_NONE;
        var s = e.terminateDrag(this);
        if (a === Entry.Workspace.MODE_VIMBOARD) n instanceof Entry.BlockMenu ? (n.terminateDrag(), s === e.DONE && this.vimBoardEvent(t, "dragEnd", o)) : n.clear(); else {
            var i = this.dragInstance && this.dragInstance.isNew;
            if (r === Entry.DRAG_MODE_DRAG) {
                var l = !1, c = this.block.getPrevBlock(this.block),
                    u = this._board.workspace.trashcan.isOver ? "ForDestroy" : "";
                switch (s) {
                    case e.DONE:
                        var p = n.magnetedBlockView;
                        if (p instanceof Entry.BlockView && (p = p.block), c && !p) Entry.do("separateBlock" + u, o); else if (c || p || i) if (u = i ? "FromBlockMenu" : "", p) {
                            if ("next" === p.view.magneting) {
                                o.getLastBlock(), this.dragMode = r;
                                var _ = p.pointer();
                                _[3] = -1, Entry.do("insertBlock" + u, o, _).isPass(i), Entry.ConnectionRipple.setView(p.view).dispose(), this.dragMode = Entry.DRAG_MODE_NONE
                            } else {
                                if (p.getThread) {
                                    var d = p.getThread(), y = p.type;
                                    y && d instanceof Entry.FieldBlock && !Entry.block[y].isPrimitive && (u += "FollowSeparate")
                                }
                                Entry.do("insertBlock" + u, o, p).isPass(i), l = !0
                            }
                            createjs.Sound.play("entryMagneting")
                        } else Entry.do("moveBlock" + u, o).isPass(i), this.dominate(); else o.getThread().view.isGlobal() ? (Entry.do("moveBlock" + u, o), this.dominate()) : Entry.do("separateBlock" + u, o);
                        break;
                    case e.RETURN:
                        if (o = this.block, i) Entry.do("destroyBlockBelow", this.block).isPass(!0); else if (c) this.set({animating: !1}), createjs.Sound.play("entryMagneting"), this.bindPrev(c), o.insert(c); else {
                            var g = o.getThread().view.getParent();
                            if (g instanceof Entry.Board) {
                                var h = this.originPos;
                                this._moveTo(h.x, h.y, !1), this.dominate()
                            } else createjs.Sound.play("entryMagneting"), Entry.do("insertBlock", o, g)
                        }
                        break;
                    case e.REMOVE:
                        createjs.Sound.play("entryDelete"), Entry.do("destroyBlockBelow", this.block).isPass(i)
                }
                n.setMagnetedBlock(null), l && Entry.ConnectionRipple.setView(o.view).dispose()
            } else s === e.REMOVE && i && r === Entry.DRAG_MODE_MOUSEDOWN && Entry.do("destroyBlockBelow", this.block).isPass(!0)
        }
        this.destroyShadow(), delete this.originPos
    }, r._updateCloseBlock = function () {
        var t, e = this.getBoard();
        if (this._skeleton.magnets) {
            for (var n in this.magnet) if (this.magnet[n], t = "next" === n ? this.getBoard().getNearestMagnet(this.x, this.y + this.getBelowHeight(), n) : this.getBoard().getNearestMagnet(this.x, this.y, n)) return e.setMagnetedBlock(t.view, n);
            e.setMagnetedBlock(null)
        }
    }, r.dominate = function () {
        this.block.getThread().view.dominate()
    }, r.getSvgRoot = function () {
        for (var t = this.getBoard().svgBlockGroup, e = this.svgGroup; e.parentNode !== t;) e = e.parentNode;
        return e
    }, r.getBoard = function () {
        return this._board
    }, r._setBoard = function () {
        this._board = this._board.code.board
    }, r.destroy = function (t) {
        this.block.set({view: null}), $(this.svgGroup).unbind(".blockViewMousedown"), this._destroyObservers();
        var e = this.svgGroup;
        t ? $(e).fadeOut(100, function () {
            e.remove()
        }) : e.remove(), this._contents && this._contents.forEach(function (t) {
            t.destroy()
        }), this._statements && this._statements.forEach(function (t) {
            t.destroy()
        });
        var n = this.block, r = n.events.viewDestroy;
        "workspace" == Entry.type && r && !this.isInBlockMenu && r.forEach(function (t) {
            Entry.Utils.isFunction(t) && t(n)
        })
    }, r.getShadow = function () {
        return this._shadow || (this._shadow = Entry.SVG.createElement(this.svgGroup.cloneNode(!0), {opacity: .5}), this.getBoard().svgGroup.appendChild(this._shadow)), this._shadow
    }, r.destroyShadow = function () {
        this._shadow && (this._shadow.remove(), delete this._shadow)
    }, r._updateMagnet = function () {
        if (this._skeleton.magnets) {
            var t = this._skeleton.magnets(this);
            t.next && this._nextGroup.attr("transform", "translate(" + t.next.x + "," + t.next.y + ")"), this.magnet = t, this.block.getThread().changeEvent.notify()
        }
    }, r._updateBG = function () {
        var t = this._board.dragBlock;
        if (t && t.dragInstance) {
            var e = this.svgGroup;
            if (this.magnet.next || this.magnet.previous) {
                var n = this.magneting;
                if (this.block, n) {
                    var r, o, a = t.getShadow(), s = this.getAbsoluteCoordinate();
                    if ("previous" === n) r = this.magnet.next, o = "translate(" + (s.x + r.x) + "," + (s.y + r.y) + ")"; else if ("next" === n) {
                        r = this.magnet.previous;
                        var i = t.getBelowHeight();
                        o = "translate(" + (s.x + r.x) + "," + (s.y + r.y - i) + ")"
                    }
                    var l = $(a);
                    if (l.attr({transform: o}), l.removeAttr("display"), this._clonedShadow = a, this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), "previous" === n && t.block.thread instanceof Entry.Thread) {
                        var c = t.getBelowHeight() + this.offsetY;
                        this.originalHeight = this.offsetY, this.set({offsetY: c})
                    }
                } else this._clonedShadow && (this._clonedShadow.attr({display: "none"}), delete this._clonedShadow), void 0 !== (c = this.originalHeight) && (this.background && (this.background.remove(), this.nextBackground.remove(), delete this.background, delete this.nextBackground), this.set({offsetY: c}), delete this.originalHeight);
                var u = this.block.thread.changeEvent;
                u && u.notify()
            } else this.magneting ? (e.attr({filter: "url(#entryBlockHighlightFilter_" + this.getBoard().suffix + ")"}), e.addClass("outputHighlight")) : (e.removeClass("outputHighlight"), e.removeAttr("filter"))
        }
    }, r.addDragging = function () {
        this.svgGroup.addClass("dragging")
    }, r.removeDragging = function () {
        this.svgGroup.removeClass("dragging")
    }, r.addSelected = function () {
        this.svgGroup.addClass("selected")
    }, r.removeSelected = function () {
        this.svgGroup.removeClass("selected")
    }, r.getSkeleton = function () {
        return this._skeleton
    }, r.getContentPos = function () {
        return this._skeleton.contentPos(this)
    }, r.renderText = function () {
        this.renderMode = Entry.BlockView.RENDER_MODE_TEXT, this._startContentRender(Entry.BlockView.RENDER_MODE_TEXT)
    }, r.renderBlock = function () {
        this.renderMode = Entry.BlockView.RENDER_MODE_BLOCK, this._startContentRender(Entry.BlockView.RENDER_MODE_BLOCK)
    }, r.renderByMode = function (t, e) {
        this.isRenderMode(t) && !e || (this.renderMode = t, this._startContentRender(t))
    }, r._updateOpacity = function () {
        !1 === this.visible ? this.svgGroup.attr({opacity: 0}) : (this.svgGroup.removeAttr("opacity"), this._setPosition())
    }, r._updateShadow = function () {
        this.shadow && Entry.Utils.colorDarken(this._schema.color, .7)
    }, r._setMovable = function () {
        this.movable = null !== this.block.isMovable() ? this.block.isMovable() : void 0 === this._skeleton.movable || this._skeleton.movable
    }, r._setReadOnly = function () {
        this.readOnly = null !== this.block.isReadOnly() ? this.block.isReadOnly() : void 0 !== this._skeleton.readOnly && this._skeleton.readOnly
    }, r._setCopyable = function () {
        this.copyable = null !== this.block.isCopyable() ? this.block.isCopyable() : void 0 === this._skeleton.copyable || this._skeleton.copyable
    }, r.bumpAway = function (t, e) {
        var n = this;
        if (t = t || 15, e) {
            var r = this.x, o = this.y;
            window.setTimeout(function () {
                r === n.x && o === n.y && n._moveBy(t, t, !1)
            }, e)
        } else n._moveBy(t, t, !1)
    }, r.bindPrev = function (t, e) {
        if (t) {
            if (this._toLocalCoordinate(t.view._nextGroup), (r = t.getNextBlock()) && r && r !== this.block) {
                var n = this.block.getLastBlock();
                e ? r.view._toLocalCoordinate(t.view._nextGroup) : n.view.magnet.next ? r.view._toLocalCoordinate(n.view._nextGroup) : (r.view._toGlobalCoordinate(), r.separate(), r.view.bumpAway(null, 100))
            }
        } else if (t = this.block.getPrevBlock()) {
            var r, o = t.view;
            this._toLocalCoordinate(o._nextGroup), (r = this.block.getNextBlock()) && r.view && r.view._toLocalCoordinate(this._nextGroup)
        }
    }, r.getAbsoluteCoordinate = function (t) {
        if ((t = void 0 !== t ? t : this.dragMode) === Entry.DRAG_MODE_DRAG) return {x: this.x, y: this.y};
        var e = this.block.getThread().view.requestAbsoluteCoordinate(this);
        return e.x += this.x, e.y += this.y, e
    }, r.getBelowHeight = function () {
        return this.block.getThread().view.requestPartHeight(this)
    }, r._updateDisplay = function () {
        this.display ? ($(this.svgGroup).removeAttr("display"), this._setPosition()) : this.svgGroup.attr({display: "none"})
    }, r._updateColor = function () {
        var t = this._schema.color;
        (this.block.deletable === Entry.Block.DELETABLE_FALSE_LIGHTEN || this.block.emphasized) && (t = this._schema.emphasizedColor || Entry.Utils.getEmphasizeColor(t));
        this._fillColor = t, this._path.attr({fill: t}), this._updateContents()
    }, r._updateContents = function (t) {
        this._contents.forEach(function (e) {
            e.renderStart(void 0, void 0, this.renderMode, t)
        }.bind(this)), this.alignContent(!1)
    }, r._destroyObservers = function () {
        for (var t = this._observers; t.length;) t.pop().destroy()
    }, r.addActivated = function () {
        this.svgGroup.addClass("activated")
    }, r.removeActivated = function () {
        this.svgGroup.removeClass("activated")
    }, r.reDraw = function () {
        if (this.visible && this.display) {
            var t = this.block;
            this._updateContents(!0);
            for (var e = t.statements || [], n = 0; n < e.length; n++) e[n].view.reDraw();
            var r = this._extensions || [];
            for (n = 0; n < r.length; n++) {
                var o = r[n];
                o.updatePos && o.updatePos()
            }
        }
    }, r.getParam = function (t) {
        return this._paramMap[t]
    }, r.getDataUrl = function (t, e) {
        var n, r = $.Deferred(),
            o = '<svg version="1.1" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 %W %H">(svgGroup)(defs)</svg>',
            s = this.svgGroup.getBoundingClientRect(), i = t ? this.svgGroup : this.svgGroup.cloneNode(!0),
            l = this._skeleton.box(this), c = e ? 1 : 1.5,
            u = (n = window.platform) && "windows" === n.name.toLowerCase() && "7" === n.version[0] ? .9 : .95;
        this.type.indexOf("func_") > -1 && (u *= .99), i.setAttribute("transform", "scale(%SCALE) translate(%X,%Y)".replace("%X", -l.offsetX).replace("%Y", -l.offsetY).replace("%SCALE", c));
        var p = this.getBoard().svgDom.find("defs"), d = i.getElementsByTagName("image"),
            y = i.getElementsByTagName("text"), g = ["≥", "≤"], h = ["≥", "≤", "-", ">", "<", "=", "+", "-", "x", "/"];
        _.toArray(y).forEach(function (t) {
            t.setAttribute("font-family", "'nanumBarunRegular', 'NanumGothic', '나눔고딕','NanumGothicWeb', '맑은 고딕', 'Malgun Gothic', Dotum");
            var e = parseInt(t.getAttribute("font-size")), n = $(t).text();
            if (_.contains(g, n) && t.setAttribute("font-weight", "500"), "q" == n) {
                var r = parseInt(t.getAttribute("y"));
                t.setAttribute("y", r - 1)
            }
            _.contains(h, n) ? t.setAttribute("font-size", e + "px") : t.setAttribute("font-size", e * u + "px"), t.setAttribute("alignment-baseline", "baseline")
        });
        var m = 0;
        return d.length ? _.toArray(d).forEach(function (t) {
            f(t.getAttribute("href"), t.getAttribute("width"), t.getAttribute("height")).then(function (e) {
                if (t.setAttribute("href", e), ++m == d.length) return b()
            })
        }) : b(), r.promise();

        function b() {
            o = o.replace("(svgGroup)", (new XMLSerializer).serializeToString(i)).replace("%W", s.width * c).replace("%H", s.height * c).replace("(defs)", (new XMLSerializer).serializeToString(p[0])).replace(/>\s+/g, ">").replace(/\s+</g, "<");
            var t = "data:image/svg+xml;base64," + btoa(unescape(encodeURIComponent(o)));
            o = null, e ? (r.resolve({
                src: t,
                width: s.width,
                height: s.height
            }), i = null) : f(t, s.width, s.height, 1.5).then(function (t) {
                i = null, r.resolve({src: t, width: s.width, height: s.height})
            }, function (t) {
                r.reject("error occured")
            }), t = null
        }

        function f(t, e, n) {
            var r = arguments.length > 3 && void 0 !== arguments[3] ? arguments[3] : 1;
            return new a.default(function (o, a) {
                if (void 0 !== Entry.BlockView.pngMap[t]) return o(Entry.BlockView.pngMap[t]);
                e *= r, n *= r, e = Math.ceil(e), n = Math.ceil(n);
                var s = document.createElement("img");
                s.crossOrigin = "Anonymous";
                var i = document.createElement("canvas");
                i.width = e, i.height = n;
                var l = i.getContext("2d");
                s.onload = function () {
                    l.drawImage(s, 0, 0, e, n);
                    var r = i.toDataURL("image/png");
                    return /\.png$/.test(t) && (Entry.BlockView.pngMap[t] = r), o(r)
                }, s.onerror = function () {
                    return a("error occured")
                }, s.src = t
            })
        }
    }, r.downloadAsImage = function (t) {
        this.getDataUrl().then(function (e) {
            var n = document.createElement("a");
            n.href = e.src;
            var r = "엔트리 블록";
            t && (r += t), n.download = r + ".png", n.click()
        })
    }, r._rightClick = function (t, e) {
        var n = Entry.disposeEvent;
        n && n.notify(t);
        var r = this.block;
        if (this.isInBlockMenu && "longPress" === e && r.getFuncId()) return this._schema.events.dblclick[0](this);
        var a = Entry.Utils.convertMouseEvent(t), s = a.clientX, i = a.clientY;
        return Entry.ContextMenu.show(function (t) {
            var e = t._board.readOnly, n = t.block, r = t.isInBlockMenu, a = t.copyable, s = Lang, i = s.Blocks,
                l = i.Duplication_option, c = i.CONTEXT_COPY_option, u = i.Delete_Blocks, p = s.Menus.save_as_image,
                _ = {
                    text: l, enable: a && !e, callback: function () {
                        Entry.do("cloneBlock", n.copy())
                    }
                }, d = {
                    text: c, enable: a && !e, callback: function () {
                        n.copyToClipboard()
                    }
                }, y = {
                    text: u, enable: n.isDeletable() && !e, callback: function () {
                        Entry.do("destroyBlock", n)
                    }
                }, g = {
                    text: p, callback: function () {
                        t.downloadAsImage()
                    }
                }, h = [];
            return Entry.Utils.isChrome() && "workspace" == Entry.type && !Entry.isMobile() && h.push(g), r || (h = [_, d, y].concat((0, o.default)(h))), h
        }(this), null, {x: s, y: i})
    }, r.clone = function () {
        return this.svgGroup.cloneNode(!0)
    }, r.setBackgroundPath = function () {
        var t = this.getBoard();
        if (!t.dragBlock) {
            this.resetBackgroundPath();
            var e = this._path, n = e.cloneNode(!0);
            n.setAttribute("class", "blockBackgroundPath"), n.setAttribute("fill", this._fillColor), this._backgroundPath = n, this.pathGroup.insertBefore(n, e), t.enablePattern(), e.attr({fill: "url(#blockHoverPattern_" + t.suffix + ")"})
        }
    }, r.resetBackgroundPath = function () {
        var t = this.getBoard();
        this._backgroundPath && t && t.disablePattern && (t.disablePattern(), this._backgroundPath && $(this._backgroundPath).remove(), this._backgroundPath = null, this._path.attr({fill: this._fillColor}))
    }, r._getTemplate = function (t) {
        var e, n = this._schema, r = n.template ? n.template : Lang.template[this.block.type], o = this.getBoard();
        if (t === Entry.BlockView.RENDER_MODE_TEXT) {
            var a, s = o.workspace;
            s && s.vimBoard ? a = s.vimBoard.getBlockSyntax(this) : o.getBlockSyntax && (a = o.getBlockSyntax(this, t)), a && (e = "string" == typeof a ? a : a.template)
        }
        return e || r
    }, r._getSchemaParams = function (t) {
        var e = this._schema.params;
        if (t === Entry.BlockView.RENDER_MODE_TEXT) {
            var n = this.getBoard().workspace;
            if (n && n.vimBoard) {
                var r = n.vimBoard.getBlockSyntax(this);
                r && r.textParams && (e = r.textParams)
            }
        }
        return e
    }, r.detach = function () {
        this.svgGroup.remove()
    }, r.attach = function (t) {
        (t || this._board.svgBlockGroup).appendChild(this.svgGroup)
    }, r.getMagnet = function (t) {
        var e = t.shift() || "next", n = t.shift();
        return void 0 === n && (n = 20), {
            getBoundingClientRect: function () {
                var t = this.getAbsoluteCoordinate(), r = this._board.relativeOffset, o = this.magnet[e];
                return {top: t.y + r.top + o.y - n, left: t.x + r.left + o.x - n, width: 2 * n, height: 2 * n}
            }.bind(this)
        }
    }, r.isRenderMode = function (t) {
        return this.renderMode === t
    }, r._setHoverBlockView = function (t) {
        if (t) {
            var e = t.that, n = t.blockView, r = e.getBoard();
            (r = r && r.workspace) && r.setHoverBlockView(n)
        }
    }, r.setHoverBlockView = r._setHoverBlockView, r.getFields = function () {
        if (!this._schema) return [];
        var t = Entry.Thread, e = Entry.FieldBlock, n = Entry.FieldOutput;
        return (this._statements || []).reduce(function (e, n) {
            return (n = n && n._thread) instanceof t ? e.concat(n.view.getFields()) : e
        }, (this._contents || []).reduce(function (t, r) {
            if (!r) return t;
            if (t.push(r), r instanceof e || r instanceof n) {
                var o = r.getValueBlock && r.getValueBlock();
                if (!o) return t;
                t = t.concat(o.view.getFields())
            }
            return t
        }, []))
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.BlockMenuScroller = function (t) {
        var e = this;
        this.board = t, this.board.changeEvent.attach(this, this._reset), this.svgGroup = null, this.hX = 0, this.vWidth = 0, this.vY = 0, this.vRatio = 0, this._visible = !0, this._opacity = -1, this.mouseHandler = function () {
            e.onMouseDown.apply(e, arguments)
        }, this.createScrollBar(), this.setOpacity(0), this._addControl(), this._domHeight = 0, this._dResizeScrollBar = Entry.Utils.debounce(this.resizeScrollBar, 50), Entry.windowResized && Entry.windowResized.attach(this, this._dResizeScrollBar)
    }, Entry.BlockMenuScroller.RADIUS = 7, (r = Entry.BlockMenuScroller.prototype).createScrollBar = function () {
        Entry.Scroller.RADIUS, this.svgGroup = this.board.svgGroup.elem("g", {class: "boardScrollbar"}), this.vScrollbar = this.svgGroup.elem("rect", {
            rx: 4,
            ry: 4
        })
    }, r.resizeScrollBar = function () {
        this._updateRatio();
        var t = this.board.blockMenuContainer, e = t.height();
        if (e !== this._domHeight) return this._domHeight = e, this.board.align();
        this._visible && 0 !== this.vRatio && 0 !== this.vRatio && this.vScrollbar.attr({
            width: 9,
            height: t.height() / this.vRatio,
            x: t.width() - 9
        })
    }, r.updateScrollBar = function (t) {
        this.vY += t, this.vScrollbar.attr({y: this.vY})
    }, r.scroll = function (t) {
        this.isVisible() && 0 != (t = this._adjustValue(t) - this.vY) && (this.board.code.moveBy(0, -t * this.vRatio), this.updateScrollBar(t))
    }, r.scrollByPx = function (t) {
        this.vRatio || this._updateRatio(), this.scroll(t / this.vRatio)
    }, r._adjustValue = function (t) {
        var e = this.board.svgDom.height(), n = e - e / this.vRatio, r = this.vY + t;
        return r = Math.max(0, r), Math.min(n, r)
    }, r.setVisible = function (t) {
        t != this.isVisible() && (this._visible = t, this.svgGroup.attr({display: !0 === t ? "block" : "none"}))
    }, r.setOpacity = function (t) {
        this._opacity != t && (this.vScrollbar.attr({opacity: t}), this._opacity = t)
    }, r.isVisible = function () {
        return this._visible
    }, r._updateRatio = function () {
        var t = this.board, e = t.svgBlockGroup.getBBox(), n = (t.svgDom, t.blockMenuContainer.height()),
            r = (e.height + 20) / n;
        this.vRatio = r, r <= 1 ? this.setVisible(!1) : this.setVisible(!0)
    }, r._reset = function () {
        this.vY = 0, this.vScrollbar.attr({y: this.vY}), this._dResizeScrollBar()
    }, r.onMouseDown = function (t) {
        var e = this;
        if (t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), 0 === t.button || t.originalEvent && t.originalEvent.touches) {
            var n;
            Entry.documentMousedown && Entry.documentMousedown.notify(t), n = t.originalEvent && t.originalEvent.touches ? t.originalEvent.touches[0] : t;
            var r = $(document);
            r.bind("mousemove.scroll", o), r.bind("mouseup.scroll", a), r.bind("touchmove.scroll", o), r.bind("touchend.scroll", a), e.dragInstance = new Entry.DragInstance({
                startY: n.pageY,
                offsetY: n.pageY
            })
        }

        function o(t) {
            var n;
            t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), n = t.originalEvent && t.originalEvent.touches ? t.originalEvent.touches[0] : t;
            var r = e.dragInstance;
            e.scroll(n.pageY - r.offsetY), r.set({offsetY: n.pageY})
        }

        function a(t) {
            $(document).unbind(".scroll"), delete e.dragInstance
        }

        t.stopPropagation()
    }, r._addControl = function () {
        $(this.vScrollbar).bind("mousedown touchstart", this.mouseHandler)
    }
}, function (t, e, n) {
    var r = n(10), o = n(31);
    t.exports = n(1).getIterator = function (t) {
        var e = o(t);
        if ("function" != typeof e) throw TypeError(t + " is not iterable!");
        return r(e.call(t))
    }
}, function (t, e, n) {
    n(24), n(17), t.exports = n(171)
}, function (t, e, n) {
    t.exports = {default: n(172), __esModule: !0}
}, function (t, e, n) {
    var r = n(32), o = n(2)("iterator"), a = n(14);
    t.exports = n(1).isIterable = function (t) {
        var e = Object(t);
        return void 0 !== e[o] || "@@iterator" in e || a.hasOwnProperty(r(e))
    }
}, function (t, e, n) {
    n(24), n(17), t.exports = n(174)
}, function (t, e, n) {
    t.exports = {default: n(175), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r = a(n(176)), o = a(n(173));

    function a(t) {
        return t && t.__esModule ? t : {default: t}
    }

    e.default = function (t, e) {
        if (Array.isArray(t)) return t;
        if ((0, r.default)(Object(t))) return function (t, e) {
            var n = [], r = !0, a = !1, s = void 0;
            try {
                for (var i, l = (0, o.default)(t); !(r = (i = l.next()).done) && (n.push(i.value), !e || n.length !== e); r = !0) ;
            } catch (t) {
                a = !0, s = t
            } finally {
                try {
                    !r && l.return && l.return()
                } finally {
                    if (a) throw s
                }
            }
            return n
        }(t, e);
        throw new TypeError("Invalid attempt to destructure non-iterable instance")
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = i(n(0)), s = i(n(177));

    function i(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.BlockMenu = function (t, e, n, r, o) {
        if (Entry.Model(this, !1), this.reDraw = Entry.Utils.debounce(this.reDraw, 100), this._dAlign = this.align, this._setDynamic = Entry.Utils.debounce(this._setDynamic, 150), this._dSelectMenu = Entry.Utils.debounce(this.selectMenu, 0), this._align = e || "CENTER", this.setAlign(this._align), this._scroll = void 0 !== r && r, this._bannedClass = [], this._categories = [], this.suffix = "blockMenu", this._isSelectingMenu = !1, this._dynamicThreads = [], this._setDynamicTimer = null, this._renderedCategories = {}, this.categoryRendered = !1, this.readOnly = void 0 === o || o, this._threadsMap = {}, "DIV" !== (t = "string" == typeof t ? $("#" + t) : $(t)).prop("tagName")) return console.error("Dom is not div element");
        this.view = t, this.visible = !0, this.hwCodeOutdated = !1, this._svgId = "blockMenu" + (new Date).getTime(), this._clearCategory(), this._categoryData = n, this._generateView(n), this._splitters = [], this.setWidth(), this.svg = Entry.SVG(this._svgId), Entry.Utils.addFilters(this.svg, this.suffix);
        var a = Entry.Utils.addBlockPattern(this.svg, this.suffix);
        if (this.pattern = a.pattern, this.svgGroup = this.svg.elem("g"), this.svgThreadGroup = this.svgGroup.elem("g"), this.svgThreadGroup.board = this, this.svgBlockGroup = this.svgGroup.elem("g"), this.svgBlockGroup.board = this, this.changeEvent = new Entry.Event(this), this.categoryDoneEvent = new Entry.Event(this), this.observe(this, "_handleDragBlock", ["dragBlock"]), this.changeCode(new Entry.Code([])), n && this._generateCategoryCodes(), this._scroll && (this._scroller = new Entry.BlockMenuScroller(this), this._addControl(t)), Entry.documentMousedown && Entry.documentMousedown.attach(this, this.setSelectedBlock), this.code && Entry.keyPressed && Entry.keyPressed.attach(this, this._captureKeyEvent), Entry.windowResized) {
            var s = Entry.Utils.debounce(this.updateOffset, 200);
            Entry.windowResized.attach(this, s)
        }
        Entry.addEventListener("setBlockMenuDynamic", function () {
            this._setDynamicTimer = this._setDynamic.apply(this, arguments)
        }.bind(this)), Entry.addEventListener("cancelBlockMenuDynamic", this._cancelDynamic.bind(this)), Entry.addEventListener("fontLoaded", this.reDraw.bind(this))
    }, r = Entry.BlockMenu.prototype, o = "arduino", r.schema = {
        code: null,
        dragBlock: null,
        closeBlock: null,
        selectedBlockView: null
    }, r._generateView = function (t) {
        var e = this.view, n = this;
        t && this._generateCategoryView(t), this.blockMenuContainer = Entry.Dom("div", {
            class: "blockMenuContainer",
            parent: e
        }), this.svgDom = Entry.Dom($('<svg id="' + this._svgId + '" class="blockMenu" version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'), {parent: this.blockMenuContainer}), this.svgDom.mouseenter(function (t) {
            n._scroller && n._scroller.setOpacity(1);
            var e = n.workspace.selectedBlockView;
            if (!(!Entry.playground || Entry.playground.resizing || e && e.dragMode === Entry.DRAG_MODE_DRAG)) {
                Entry.playground.focusBlockMenu = !0;
                var r = n.svgGroup.getBBox(), o = n.hasCategory() ? 64 : 0, a = r.width + r.x + o,
                    s = Entry.interfaceState.menuWidth;
                a > s && (this.widthBackup = s - o, $(this).stop().animate({width: a - o}, 200))
            }
        }), this.svgDom.mouseleave(function (t) {
            var e = Entry.playground;
            if (e && !e.resizing) {
                n._scroller && n._scroller.setOpacity(0);
                var r = this.widthBackup;
                r && $(this).stop().animate({width: r}, 200), delete this.widthBackup, delete e.focusBlockMenu
            }
        }), Entry.Utils.bindBlockViewHoverEvent(this, this.svgDom), $(window).scroll(this.updateOffset.bind(this))
    }, r.changeCode = function (t, e) {
        if (t instanceof Array && (t = new Entry.Code(t)), !(t instanceof Entry.Code)) return console.error("You must inject code instance");
        this.codeListener && this.codeListener.destroy();
        var n = this;
        this.set({code: t}), this.codeListener = this.code.changeEvent.attach(this, function () {
            n.changeEvent.notify()
        }), t.createView(this), e ? this.align() : this._dAlign()
    }, r.bindCodeView = function (t) {
        this.svgBlockGroup.remove(), this.svgThreadGroup.remove(), this.svgBlockGroup = t.svgBlockGroup, this.svgThreadGroup = t.svgThreadGroup, this.svgGroup.appendChild(this.svgThreadGroup), this.svgGroup.appendChild(this.svgBlockGroup), this._scroller && this.svgGroup.appendChild(this._scroller.svgGroup)
    }, r.align = function () {
        var t = this.code;
        if (this._isOn() && t) {
            this._clearSplitters();
            var e, n = 10, r = "LEFT" == this._align ? 10 : this.svgDom.width() / 2, o = this._getSortedBlocks(),
                a = (0, s.default)(o, 2), i = a[0], l = void 0 === i ? [] : i, c = a[1];
            (void 0 === c ? [] : c).forEach(function (t) {
                var e = t && t.view;
                e && (e.set({display: !1}), e.detach())
            });
            var u = this.lastSelector, p = !this._renderedCategories[u];
            if (l.forEach(function (t) {
                    var o = t && t.view;
                    if (o) {
                        o.attach(), o.set({display: !0}), p && o.reDraw();
                        var a = Entry.block[t.type].class;
                        e && e !== a && (this._createSplitter(n), n += 15), e = a;
                        var s = r - o.offsetX;
                        "CENTER" == this._align && (s -= o.width / 2), n -= o.offsetY, o._moveTo(s, n, !1), n += o.height + 15
                    }
                }.bind(this)), this.updateSplitters(), this.workspace) switch (this.workspace.getMode()) {
                case Entry.Workspace.MODE_BOARD:
                case Entry.Workspace.MODE_OVERLAYBOARD:
                    this.renderBlock(o);
                    break;
                case Entry.Workspace.MODE_VIMBOARD:
                    this.renderText(o);
                    break;
                default:
                    this.renderBlock(o)
            }
            "func" !== u && (this._renderedCategories[u] = !0), this.changeEvent.notify()
        }
    }, r.cloneToGlobal = function (t) {
        var e = this.dragBlock;
        if (!this._boardBlockView && null !== e) {
            var n = Entry.GlobalSvg, r = this.workspace, o = r.getMode(), a = Entry.Workspace, s = this._svgWidth,
                i = r.selectedBoard, l = e.mouseDownCoordinate, c = 0, u = 0;
            if (l && (c = t.pageX - l.x, u = t.pageY - l.y), !i || o !== a.MODE_BOARD && o !== a.MODE_OVERLAYBOARD) n.setView(e, o) && (n.adjust(c, u), n.addControl(t)); else {
                if (!i.code) return Entry.toast && Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg), void(this.selectedBlockView && (this.selectedBlockView.removeSelected(), this.set({
                    selectedBlockView: null,
                    dragBlock: null
                })));
                var p = e.block, _ = (this.code, p.getThread());
                if (p && _) {
                    var d = this.offset().top - i.offset().top - $(window).scrollTop(), y = _.toJSON(!0);
                    y[0].x = y[0].x - s + (c || 0), y[0].y = y[0].y + d + (u || 0);
                    var g = Entry.do("addThreadFromBlockMenu", y).value.getFirstBlock(), h = g && g.view;
                    if (!h) return void(g && g.destroy());
                    this._boardBlockView = h, h.onMouseDown.call(h, t), h.dragInstance.set({isNew: !0}), n.setView(h, o)
                }
            }
        }
    }, r.terminateDrag = function () {
        if (this._boardBlockView) {
            var t = this._boardBlockView;
            if (t) {
                this.code, this.workspace.getBoard().code, this._boardBlockView = null;
                var e = Entry.GlobalSvg.left, n = Entry.GlobalSvg.width / 2;
                return e < t.getBoard().offset().left - n
            }
        }
    }, r.getCode = function (t) {
        return this.code
    }, r.setSelectedBlock = function (t) {
        var e = this.selectedBlockView;
        e && e.removeSelected(), t instanceof Entry.BlockView ? t.addSelected() : t = null, this.set({selectedBlockView: t})
    }, r.hide = function () {
        this.view.addClass("entryRemove")
    }, r.show = function () {
        this.view.removeClass("entryRemove")
    }, r.renderText = function (t) {
        if (this._isOn()) {
            t = t || this._getSortedBlocks();
            var e = Entry.BlockView.RENDER_MODE_TEXT;
            return t[0].forEach(function (t) {
                if (e !== t.view.renderMode) {
                    var n = t.getThread();
                    n.view ? n.view.renderText() : n.createView(this, Entry.BlockView.RENDER_MODE_TEXT)
                }
            }.bind(this)), t
        }
    }, r.renderBlock = function (t) {
        if (this._isOn()) {
            var e = this;
            t = t || this._getSortedBlocks();
            var n = Entry.BlockView.RENDER_MODE_BLOCK;
            return t[0].forEach(function (t) {
                if (n !== t.view.renderMode) {
                    var r = t.getThread();
                    r.view ? r.view.renderBlock() : r.createView(e, Entry.BlockView.RENDER_MODE_BLOCK)
                }
            }), t
        }
    }, r._createSplitter = function (t) {
        this._splitters.push(this.svgBlockGroup.elem("line", {
            x1: 20,
            y1: t,
            x2: this._svgWidth - 20,
            y2: t,
            stroke: "#b5b5b5"
        }))
    }, r.updateSplitters = function (t) {
        t = void 0 === t ? 0 : t;
        var e, n = this._splitters, r = this._svgWidth - 20;
        n.forEach(function (n) {
            e = parseFloat(n.getAttribute("y1")) + t, n.attr({x2: r, y1: e, y2: e})
        })
    }, r._clearSplitters = function () {
        for (var t = this._splitters; t.length;) t.pop().remove()
    }, r.setWidth = function () {
        this._svgWidth = this.blockMenuContainer.width(), this.updateSplitters()
    }, r.setMenu = function (t) {
        if (this.hasCategory()) {
            var e = [[], []];
            this._categoryData.forEach(function (t) {
                var n = t.category, r = t.blocks;
                if ("func" === n) {
                    var o = this.code.getThreadsByCategory("func").map(function (t) {
                        return t.getFirstBlock().type
                    });
                    r = o.length ? o : r
                }
                for (var a = r.length, s = 0; s < r.length; s++) this.checkBanClass(Entry.block[r[s]]) && a--;
                var i = this._categoryElems[n];
                0 === a ? e[1].push(i) : e[0].push(i)
            }.bind(this)), requestAnimationFrame(function () {
                e[0].forEach(function (t) {
                    t.removeClass("entryRemove")
                }), e[1].forEach(function (t) {
                    t.addClass("entryRemove")
                }), this.selectMenu(0, !0, t)
            }.bind(this))
        }
    }, r.getCategoryCodes = function (t) {
    }, r._convertSelector = function (t) {
        if (!Entry.Utils.isNumber(t)) return t;
        t = Number(t);
        for (var e = this._categories, n = this._categoryElems, r = 0; r < e.length; r++) {
            var o = e[r];
            if (!n[o].hasClass("entryRemove") && 0 == t--) return o
        }
    }, r.selectMenu = function (t, e, n) {
        if (this._isOn() && this._categoryData) {
            var r = "entrySelectedCategory", a = this._selectedCategoryView, s = this._convertSelector(t);
            if (void 0 === t || s) {
                switch (s && (this.lastSelector = s), this._isSelectingMenu = !0, s) {
                    case"variable":
                        Entry.playground.checkVariables();
                        break;
                    case o:
                        this._generateHwCode(), this.align()
                }
                var i = this._categoryElems[s], l = !1, c = this.workspace.board, u = c.view;
                a && a.removeClass(r), e = e || !this.hasCategory(), i != a || e ? !a && this.hasCategory() ? (this.visible || (l = !0, u.addClass("foldOut"), Entry.playground.showTabs()), u.removeClass("folding"), this.visible = !0) : s || (this._selectedCategoryView = null) : (u.addClass("folding"), this._selectedCategoryView = null, i && i.removeClass(r), Entry.playground.hideTabs(), l = !0, this.visible = !1), l && Entry.bindAnimationCallbackOnce(u, function () {
                    c.scroller.resizeScrollBar.call(c.scroller), u.removeClass("foldOut"), Entry.windowResized.notify()
                }), this._isSelectingMenu = !1, this.visible && (this._selectedCategoryView = i, i && i.addClass(r)), !0 !== n && this._dAlign()
            } else this._dAlign()
        }
    }, r._generateCategoryCodes = function (t) {
        if (t || (this.categoryRendered = !1, this.view.addClass("init"), t = (0, a.default)(this._categoryElems)), t.length) {
            var e = t.shift();
            e !== o ? this._generateCategoryCode(e) : this._generateHwCode(!0), t.length ? this._generateCodesTimer = setTimeout(function () {
                this._generateCategoryCodes(t)
            }.bind(this), 0) : (this._generateCodesTimer = null, this.view.removeClass("init"), this.align(), this.categoryRendered = !0, this.categoryDoneEvent.notify())
        }
    }, r._generateCategoryCode = function (t) {
        if (this._categoryData) {
            var e = this.code, n = [], r = this._categoryData.filter(function (e) {
                return e.category == t
            })[0];
            if (r) {
                var o, a = t;
                if (r.blocks.forEach(function (t) {
                        var e = Entry.block[t];
                        if (e && e.def) if (e.defs) {
                            e.defs.forEach(function (t) {
                                t.category = a
                            });
                            for (var r = 0; r < e.defs.length; r++) n.push([e.defs[r]])
                        } else e.def.category = a, n.push([e.def]); else n.push([{type: t, category: a}])
                    }), this._categories.push(a), "func" == t) {
                    var s = this.code.getThreadsByCategory("func");
                    s.length && (o = this.code.getThreadIndex(s[0]))
                }
                n.forEach(function (t) {
                    t && t[0] && (t[0].x = -99999, this._createThread(t, o), void 0 !== o && o++, delete t[0].x)
                }.bind(this)), e.changeEvent.notify()
            }
        }
    }, r.banCategory = function (t) {
        t in this._categoryElems && (this._categoryElems[t].addClass("entryRemoveCategory"), this.lastSelector === t && this._dSelectMenu(this.firstSelector, !0))
    }, r.unbanCategory = function (t) {
        var e, n;
        this._categoryData.some(function (e) {
            var r = t === e.category;
            return r && (n = e.blocks), r
        });
        for (var r = n.length, o = 0; o < n.length; o++) this.checkBanClass(Entry.block[n[o]]) && r--;
        t in this._categoryElems && r > 0 && ((e = this._categoryElems[t]).removeClass("entryRemoveCategory"), e.removeClass("entryRemove"))
    }, r.banClass = function (t, e) {
        this._bannedClass.indexOf(t) < 0 && (this._bannedClass.push(t), !0 !== e && this._dAlign())
    }, r.unbanClass = function (t, e) {
        var n = this._bannedClass.indexOf(t);
        n > -1 && (this._bannedClass.splice(n, 1), !0 !== e && this._dAlign())
    }, r.checkBanClass = function (t) {
        if (t) {
            var e, n = t.isNotFor;
            if (!n || 0 === n.length) return !1;
            for (var r = this._bannedClass, o = 0; o < n.length; o++) if ((e = n[o]) && -1 === r.indexOf(e)) return !1;
            return !0
        }
    }, r.checkCategory = function (t) {
        if (this.hasCategory() && t) {
            if (!this.lastSelector || this._selectDynamic) return !0;
            var e = t.isFor;
            return e && e.indexOf("category_" + this.lastSelector) < 0
        }
    }, r._addControl = function (t) {
        var e = this;
        this.svgDom, t.on("wheel", function () {
            e._mouseWheel.apply(e, arguments)
        }), e._scroller && $(this.svg).bind("mousedown touchstart", function (t) {
            e.onMouseDown.apply(e, arguments)
        })
    }, r.removeControl = function (t) {
        this.svgDom.off(t)
    }, r.onMouseDown = function (t) {
        t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault();
        var e = this;
        if (0 === t.button || t.originalEvent && t.originalEvent.touches) {
            var n = Entry.Utils.convertMouseEvent(t);
            Entry.documentMousedown && Entry.documentMousedown.notify(n);
            var r = $(document);
            r.bind("mousemove.blockMenu", o), r.bind("mouseup.blockMenu", a), r.bind("touchmove.blockMenu", o), r.bind("touchend.blockMenu", a), this.dragInstance = new Entry.DragInstance({
                startY: n.pageY,
                offsetY: n.pageY
            })
        }

        function o(t) {
            t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault();
            var n = Entry.Utils.convertMouseEvent(t), r = e.dragInstance;
            e._scroller.scroll(-n.pageY + r.offsetY), r.set({offsetY: n.pageY})
        }

        function a(t) {
            $(document).unbind(".blockMenu"), delete e.dragInstance
        }
    }, r._mouseWheel = function (t) {
        (t = t.originalEvent).preventDefault();
        var e = Entry.disposeEvent;
        e && e.notify(t), this._scroller.scroll(-t.wheelDeltaY || t.deltaY / 3)
    }, r.dominate = function (t) {
        this.svgBlockGroup.appendChild(t.view.svgGroup)
    }, r.reDraw = function () {
        if (this._isOn()) {
            var t = this.lastSelector;
            this._selectDynamic && (t = void 0), this.selectMenu(t, !0), this._getSortedBlocks().shift().forEach(function (t) {
                t.view.reDraw()
            })
        }
    }, r._handleDragBlock = function () {
        this._boardBlockView = null, this._scroller && this._scroller.setOpacity(0)
    }, r._captureKeyEvent = function (t) {
        var e = t.keyCode;
        t.ctrlKey && "workspace" == Entry.type && e > 48 && e < 58 && (t.preventDefault(), setTimeout(function () {
            this._cancelDynamic(!0), this._dSelectMenu(e - 49, !0)
        }.bind(this), 200))
    }, r.enablePattern = function () {
        this.pattern.removeAttribute("style")
    }, r.disablePattern = function () {
        this.pattern.attr({style: "display: none"})
    }, r._clearCategory = function () {
        this._generateCodesTimer && (clearTimeout(this._generateCodesTimer), this._generateCodesTimer = null), this._selectedCategoryView = null, this._categories = [], this._threadsMap = {};
        var t = this._categoryElems;
        for (var e in t) t[e].remove();
        this._categoryElems = {}, this.code && this.code.constructor == Entry.Code && this.code.clear(), this._categoryCol && this._categoryCol.remove(), this._categoryData = null
    }, r.clearCategory = r._clearCategory, r.setCategoryData = function (t) {
        this._clearCategory(), this._categoryData = t, this._generateCategoryView(t), this._generateCategoryCodes(), this.setMenu(), Entry.resizeElement()
    }, r.setNoCategoryData = function (t) {
        this._clearCategory(), Entry.resizeElement(), this.changeCode(t, !0), this.categoryDoneEvent.notify()
    }, r._generateCategoryView = function (t) {
        if (t) {
            this._categoryCol && this._categoryCol.remove && this._categoryCol.remove(), this._categoryCol = Entry.Dom("ul", {class: "entryCategoryListWorkspace"}), this.view.prepend(this._categoryCol);
            var e = document.createDocumentFragment();
            t.forEach(function (t, n) {
                var r = t.category;
                0 === n && (this.firstSelector = r);
                var o = this._generateCategoryElement(r, t.visible);
                e.appendChild(o[0])
            }.bind(this)), this._categoryCol[0].appendChild(e)
        }
    }, r._generateCategoryElement = function (t, e) {
        var n = this,
            r = Entry.Dom("li", {id: "entryCategory" + t, classes: ["entryCategoryElementWorkspace", "entryRemove"]});
        return !1 === e && r.addClass("entryRemoveCategory"), function (t, e) {
            t.text(Lang.Blocks[e.toUpperCase()]), n._categoryElems[e] = t, t.bindOnClick(function (t) {
                n._cancelDynamic(!0, function () {
                    n.selectMenu(e, void 0, !0), n.align()
                })
            })
        }(r, t), r
    }, r.updateOffset = function () {
        this._offset = this.svgDom.offset()
    }, r.offset = function () {
        var t = this._offset;
        return (!t || 0 === t.top && 0 === t.left) && this.updateOffset(), this._offset
    }, r._generateHwCode = function (t) {
        var e = this.code.getThreadsByCategory(o);
        if (this._categoryData && this.shouldGenerateHwCode(e)) {
            e.forEach(function (t) {
                this._deleteThreadsMap(t), t.destroy()
            }.bind(this));
            for (var n, r = this._categoryData, a = r.length - 1; a >= 0; a--) if (r[a].category === o) {
                n = r[a].blocks;
                break
            }
            if (n) {
                for (e = [], a = 0; a < n.length; a++) {
                    var s = n[a], i = Entry.block[s];
                    if (!this.checkBanClass(i)) if (i && i.def) if (i.defs) for (i.defs.forEach(function (t) {
                        t.category = o
                    }), a = 0; a < i.defs.length; a++) e.push([i.defs[a]]); else i.def.category = o, e.push([i.def]); else e.push([{
                        type: s,
                        category: o
                    }])
                }
                e.forEach(function (e) {
                    t && (e[0].x = -99999), this._createThread(e), delete e[0].x
                }.bind(this)), this.hwCodeOutdated = !1, Entry.dispatchEvent("hwCodeGenerated")
            }
        }
    }, r.setAlign = function (t) {
        this._align = t || "CENTER"
    }, r._isNotVisible = function (t) {
        return this.checkCategory(t) || this.checkBanClass(t)
    }, r._getSortedBlocks = function () {
        var t, e, n = this, r = [], o = n._getThreads().map(function (t) {
            return t && t.getFirstBlock()
        }).filter(function (t) {
            return !!t
        });
        if (n._selectDynamic) {
            var a = n._threadsMap;
            n._dynamicThreads.forEach(function (t) {
                var n = a[t];
                (e = n && n.getFirstBlock()) && r.push(e)
            }), t = o
        } else t = [], o.forEach(function (e) {
            n._isNotVisible(Entry.block[e.type]) ? t.push(e) : r.push(e)
        });
        return [r, t]
    }, r._setDynamic = function (t) {
        if (this._isOn()) {
            var e, n = this;
            this._dynamicThreads = t.map(function (t) {
                if ("string" == typeof t) return t;
                if (t.constructor === Array) {
                    var r = t[0];
                    return n.getThreadByBlockKey(r) || ((e = t[1]).category = "extra", n._createThread([e], void 0, r)), r
                }
            }).filter(function (t) {
                return !!t
            }), this._selectDynamic = !0, this.selectMenu(void 0, !0)
        }
    }, r._cancelDynamic = function (t, e) {
        this._setDynamicTimer && (clearTimeout(this._setDynamicTimer), this._setDynamicTimer = null), this._selectDynamic = !1, this._dynamicThreads = [], !0 !== t && this.selectMenu(this.lastSelector, !0), e && e()
    }, r._isOn = function () {
        return "none" !== this.view.css("display")
    }, r.deleteRendered = function (t) {
        delete this._renderedCategories[t]
    }, r.clearRendered = function () {
        this._renderedCategories = {}
    }, r.hasCategory = function () {
        return !!this._categoryData
    }, r.getDom = function (t) {
        if (t.length >= 1) {
            if ("category" === t[0]) return this._categoryElems[t[1]];
            var e = t[0][0].type, n = this.getSvgDomByType(e);
            return this.align(), this.scrollToType(e), n
        }
    }, r.getSvgDomByType = function (t) {
        for (var e = this.code.getThreads(), n = 0; n < e.length; n++) {
            var r = e[n] && e[n].getFirstBlock();
            if (r && r.type === t) return r.view.svgGroup
        }
    }, r.scrollToType = function (t) {
        if (t) {
            var e = this.code.getBlockList(!1, t)[0], n = e.view;
            if (this.hasCategory() && this.selectMenu(e.category, !0), this.getSvgDomByType(t).getBoundingClientRect().bottom > $(window).height() - 10) {
                var r = n.y - 20;
                this._scroller.scrollByPx(r)
            }
        }
    }, r.shouldGenerateHwCode = function (t) {
        return this.hwCodeOutdated || 0 === t.length
    }, r._registerThreadsMap = function (t, e) {
        t && e && e.getFirstBlock() && (this._threadsMap[t] = e)
    }, r._deleteThreadsMap = function (t) {
        var e = t && t.getFirstBlock();
        e && delete this._threadsMap[e.type]
    }, r.getThreadByBlockKey = function (t) {
        return this._threadsMap[t]
    }, r._getThreads = function () {
        return this.code.getThreads()
    }, r._createThread = function (t, e, n) {
        "string" != typeof n && (n = void 0), n = n || t[0].type;
        var r = this.code.createThread(t, e);
        return this._registerThreadsMap(n, r), r
    }
}, function (t, e, n) {
    "use strict";
    var r;
    r = {
        practical_course_dummy: {
            color: "#7C7C7C",
            skeleton: "basic",
            statements: [],
            isNotFor: ["arduinoDisconnected"],
            template: "%1",
            params: [{type: "Indicator", color: "#6B6B6B", size: 12}],
            events: {},
            def: {params: [null], type: "practical_course_dummy"},
            paramsKeyMap: {VALUE: 0},
            func: function (t, e) {
            }
        },
        practical_course_motor_speed: {
            color: "#00B200",
            skeleton: "basic_string_field",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1",
            params: [{
                type: "Dropdown",
                options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]],
                value: "15",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null]},
            paramsKeyMap: {VALUE: 0},
            func: function (t, e) {
                return e.getStringField("VALUE")
            }
        },
        practical_course_set_servo2: {
            color: "#D126BD",
            skeleton: "basic",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1 포트의 서보모터를 %2 도 이동 %3",
            params: [{
                type: "Dropdown",
                options: [["OUT1", "1"], ["OUT2", "2"], ["OUT3", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/servo.png",
                size: 12
            }],
            events: {},
            def: {params: [null, null, null], type: "practical_course_set_servo2"},
            paramsKeyMap: {PORT: 0, DEGREE: 1},
            class: "practical_course_servo",
            func: function (t, e) {
                var n = e.getNumberField("PORT"), r = e.getNumberValue("DEGREE");
                r < 0 ? r = 0 : r > 180 && (r = 180), Entry.hw.sendQueue["OUT" + n] = r;
                var o = n;
                return 3 === o && (o = 4), Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT | o, e.callReturn()
            }
        },
        practical_course_move_for_secs: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1모터를 %2 %3의 속도로 %4초 동안 회전 %5",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "16"], ["뒤로", "32"]], value: "16", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/dcmotor.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {type: "practical_course_motor_speed"}, {type: "number", params: ["2"]}, null],
                type: "practical_course_move_for_secs"
            },
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2, DURATION: 3},
            class: "practical_course_motor",
            func: function (t, e) {
                if (e.isStart) {
                    if (1 == e.timeFlag) return e;
                    switch (e.wheelMode) {
                        case 1:
                            Entry.hw.sendQueue.DCL = 0, Entry.hw.sendQueue.DCR = 0;
                            break;
                        case 2:
                            Entry.hw.sendQueue.DCR = 0;
                            break;
                        case 3:
                            Entry.hw.sendQueue.DCL = 0
                    }
                    return delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, e.callReturn()
                }
                var n = e.getNumberField("WHEEL"), r = e.getNumberValue("SPEED"), o = e.getNumberField("DIRECTION"),
                    a = e.getNumberValue("DURATION"), s = r + o;
                switch (n) {
                    case 1:
                        Entry.hw.sendQueue.DCL = s, Entry.hw.sendQueue.DCR = s;
                        break;
                    case 2:
                        Entry.hw.sendQueue.DCR = s;
                        break;
                    case 3:
                        Entry.hw.sendQueue.DCL = s
                }
                return e.wheelMode = n, e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * a), e
            }
        },
        practical_course_move_for_secs2: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "왼쪽 모터를 %1 %2의 속도로, 오른쪽 모터를 %3 %4의 속도로 %5초 동안 회전 %6",
            params: [{
                type: "Dropdown",
                options: [["앞으로", "16"], ["뒤로", "32"]],
                value: "16",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Dropdown",
                options: [["앞으로", "16"], ["뒤로", "32"]],
                value: "16",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/dcmotor.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, {type: "practical_course_motor_speed"}, null, {type: "practical_course_motor_speed"}, {
                    type: "number",
                    params: ["2"]
                }, null], type: "practical_course_move_for_secs2"
            },
            paramsKeyMap: {DIRECTION1: 0, SPEED1: 1, DIRECTION2: 2, SPEED2: 3, DURATION: 4},
            class: "practical_course_motor",
            func: function (t, e) {
                if (e.isStart) return 1 == e.timeFlag ? e : (Entry.hw.sendQueue.DCL = 0, Entry.hw.sendQueue.DCR = 0, delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, e.callReturn());
                var n = e.getNumberValue("SPEED1"), r = e.getNumberValue("SPEED2"), o = e.getNumberField("DIRECTION1"),
                    a = e.getNumberField("DIRECTION2"), s = e.getNumberValue("DURATION"), i = n + o, l = r + a;
                return Entry.hw.sendQueue.DCL = i, Entry.hw.sendQueue.DCR = l, e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * s), e
            }
        },
        practical_course_move_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1모터를 %2 %3의 속도로 계속 회전 %4",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "16"], ["뒤로", "32"]], value: "16", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {
                params: [null, null, {type: "practical_course_motor_speed"}, null],
                type: "practical_course_move_for"
            },
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2},
            class: "practical_course_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL"), r = e.getNumberValue("SPEED") + e.getNumberField("DIRECTION");
                switch (n) {
                    case 1:
                        Entry.hw.sendQueue.DCL = r, Entry.hw.sendQueue.DCR = r;
                        break;
                    case 2:
                        Entry.hw.sendQueue.DCR = r;
                        break;
                    case 3:
                        Entry.hw.sendQueue.DCL = r
                }
                return e.callReturn()
            }
        },
        practical_course_move_for2: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "왼쪽 모터를 %1 %2의 속도로, 오른쪽 모터를 %3 %4의 속도로 계속 회전 %5",
            params: [{
                type: "Dropdown",
                options: [["앞으로", "16"], ["뒤로", "32"]],
                value: "16",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Dropdown",
                options: [["앞으로", "16"], ["뒤로", "32"]],
                value: "16",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/dcmotor.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, {type: "practical_course_motor_speed"}, null, {type: "practical_course_motor_speed"}, null],
                type: "practical_course_move_for2"
            },
            paramsKeyMap: {DIRECTION1: 0, SPEED1: 1, DIRECTION2: 2, SPEED2: 3},
            class: "practical_course_motor",
            func: function (t, e) {
                var n = e.getNumberValue("SPEED1") + e.getNumberField("DIRECTION1"),
                    r = e.getNumberValue("SPEED2") + e.getNumberField("DIRECTION2");
                return Entry.hw.sendQueue.DCL = n, Entry.hw.sendQueue.DCR = r, e.callReturn()
            }
        },
        practical_course_stop_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1모터를 정지 %2",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {params: [null, null], type: "practical_course_stop_for"},
            paramsKeyMap: {WHEEL: 0},
            class: "practical_course_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL");
                return 2 == n ? Entry.hw.sendQueue.DCR = 0 : 3 == n ? Entry.hw.sendQueue.DCL = 0 : (Entry.hw.sendQueue.DCR = 0, Entry.hw.sendQueue.DCL = 0), e.callReturn()
            }
        },
        practical_course_touch_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 접촉 센서 값",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "practical_course_touch_value"},
            paramsKeyMap: {PORT: 0},
            class: "practical_course_touch",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["IN" + n] > 125 ? 1 : 0
            }
        },
        practical_course_touch_value_boolean: {
            color: "#2AB4D3",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["neobot"],
            template: "%1번 포트의 접촉 센서가 %2",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["접촉 되면", "1"], ["접촉 안되면", "0"]], value: "1", fontsIze: 11}],
            def: {params: [null, null, null], type: "practical_course_touch_value_boolean"},
            paramsKeyMap: {PORT: 0, TOUCH: 1},
            class: "practical_course_touch",
            func: function (t, e) {
                var n = e.getStringField("PORT"), r = e.getNumberField("TOUCH", e);
                return !(Entry.hw.portData["IN" + n] > 125 ^ r)
            }
        },
        practical_course_light_value: {
            color: "#498DEB",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 빛 감지 센서 값",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "practical_course_light_value"},
            paramsKeyMap: {PORT: 0},
            class: "practical_course_light",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["IN" + n]
            }
        },
        practical_course_light_value_boolean: {
            color: "#498DEB",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["neobot"],
            template: "%1번 포트의 빛 감지 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {
                params: [null, null, {type: "number", params: ["100"]}],
                type: "practical_course_light_value_boolean"
            },
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "practical_course_light",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData["IN" + n], s = !1;
                switch (r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        practical_course_sound_value: {
            color: "#00D67F",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 소리 센서에 감지되는 소리 값",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "practical_course_sound_value"},
            paramsKeyMap: {PORT: 0},
            class: "practical_course_sound",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["IN" + n]
            }
        },
        practical_course_sound_value_boolean: {
            color: "#00D67F",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["neobot"],
            template: "%1번 포트의 소리 센서에 감지되는 소리 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {
                params: [null, null, {type: "number", params: ["100"]}],
                type: "practical_course_sound_value_boolean"
            },
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "practical_course_sound",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData["IN" + n], s = !1;
                switch (r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        practical_course_irs_value: {
            color: "#C4065C",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 적외선 센서에 감지되는 크기 값",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "practical_course_irs_value"},
            paramsKeyMap: {PORT: 0},
            class: "practical_course_irs",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["IN" + n]
            }
        },
        practical_course_irs_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["neobot"],
            template: "%1번 포트의 적외선 센서에 감지되는 크기 값이 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, null, {type: "number", params: ["100"]}], type: "practical_course_irs_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "practical_course_irs",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData["IN" + n], s = !1;
                switch (r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        practical_course_diode_secs_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 발광다이오드를 %2초 동안 %3 %4",
            params: [{
                type: "Dropdown",
                options: [["OUT 1", "1"], ["OUT 2", "2"], ["OUT 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Dropdown",
                options: [["켜기", "255"], ["끄기", "0"]],
                value: "255",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/diode.png", size: 12}],
            events: {},
            def: {
                params: [null, {type: "number", params: ["2"]}, null, null],
                type: "practical_course_diode_secs_toggle"
            },
            paramsKeyMap: {PORT: 0, DURATION: 1, VALUE: 2},
            class: "practical_course_diode",
            func: function (t, e) {
                if (e.isStart) return 1 == e.timeFlag ? e : (Entry.hw.sendQueue["OUT" + e.outPort] = 0, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~e.outOption, delete e.timeFlag, delete e.isStart, delete e.outPort, delete e.outOption, Entry.engine.isContinue = !1, e.callReturn());
                var n = e.getNumberField("PORT"), r = e.getNumberValue("DURATION"), o = e.getNumberField("VALUE"),
                    a = n;
                return o < 0 ? o = 0 : o > 255 && (o = 255), 3 === a && (a = 4), e.isStart = !0, e.timeFlag = 1, e.outPort = n, e.outOption = a, Entry.hw.sendQueue["OUT" + n] = o, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~a, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * r), e
            }
        },
        practical_course_diode_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 발광다이오드를 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["OUT 1", "1"], ["OUT 2", "2"], ["OUT 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["켜기", "255"], ["끄기", "0"]],
                value: "255",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/diode.png", size: 12}],
            events: {},
            def: {params: [null, null, null], type: "practical_course_diode_toggle"},
            paramsKeyMap: {PORT: 0, VALUE: 1},
            class: "practical_course_diode",
            func: function (t, e) {
                var n = e.getNumberField("PORT"), r = e.getNumberField("VALUE"), o = n;
                return r < 0 ? r = 0 : r > 255 && (r = 255), 3 === o && (o = 4), Entry.hw.sendQueue["OUT" + n] = r, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~o, e.callReturn()
            }
        },
        practical_course_diode_inout_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 발광다이오드를 %2번 포트의 %3~%4의 범위로 켜기%5",
            params: [{
                type: "Dropdown",
                options: [["OUT 1", "1"], ["OUT 2", "2"], ["OUT 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/diode.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {type: "number", params: ["0"]}, {type: "number", params: ["255"]}, null],
                type: "practical_course_diode_inout_toggle"
            },
            paramsKeyMap: {OUTPUT: 0, INPUT: 1, MIN: 2, MAX: 3},
            class: "practical_course_diode",
            func: function (t, e) {
                var n = e.getNumberField("OUTPUT"), r = e.getNumberField("INPUT"), o = r;
                3 === o && (o = 4);
                var a = e.getNumberValue("MIN"), s = e.getNumberValue("MAX"),
                    i = (Entry.hw.portData["IN" + r] - a) / (s - a) * 255 + 0;
                return i > 255 && (i = 255), i < 0 && (i = 0), Entry.hw.sendQueue["OUT" + n] = i, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~o, e.callReturn()
            }
        },
        practical_course_diode_set_output: {
            color: "#FF8D10",
            skeleton: "basic",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 발광다이오드를 %2의 밝기로 정하기 %3",
            params: [{
                type: "Dropdown",
                options: [["OUT 1", "1"], ["OUT 2", "2"], ["OUT 3", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/diode.png",
                size: 12
            }],
            events: {},
            def: {params: [null, {type: "number", params: ["255"]}, null], type: "practical_course_diode_set_output"},
            paramsKeyMap: {PORT: 0, VALUE: 1},
            class: "practical_course_diode",
            func: function (t, e) {
                var n = e.getStringField("PORT", e), r = e.getNumberValue("VALUE", e), o = n;
                return r < 0 ? r = 0 : r > 255 && (r = 255), 3 === o && (o = 4), Entry.hw.sendQueue["OUT" + n] = r, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~o, e.callReturn()
            }
        },
        practical_course_diode_input_value: {
            color: "#FF8D10",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["neobot"],
            template: "%1번 포트의 값",
            params: [{
                type: "Dropdown",
                options: [["IN 1", "1"], ["IN 2", "2"], ["IN 3", "3"]],
                value: "1",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "practical_course_diode_input_value"},
            paramsKeyMap: {PORT: 0},
            class: "practical_course_diode",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["IN" + n]
            }
        },
        practical_course_melody_note_for: {
            color: "#FC327F",
            skeleton: "basic",
            statements: [],
            isNotFor: ["neobot"],
            template: "멜로디 %1 을(를) %2 옥타브로 %3 길이만큼 소리내기 %4",
            params: [{
                type: "Dropdown",
                options: [["무음", "0"], ["도", "1"], ["도#(레♭)", "2"], ["레", "3"], ["레#(미♭)", "4"], ["미", "5"], ["파", "6"], ["파#(솔♭)", "7"], ["솔", "8"], ["솔#(라♭)", "9"], ["라", "10"], ["라#(시♭)", "11"], ["시", "12"]],
                value: "1",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                value: "2",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["온음표", "1"], ["2분음표", "2"], ["4분음표", "4"], ["8분음표", "8"], ["16분음표", "16"]],
                value: "4",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/melody.png", size: 12}],
            events: {},
            def: {params: [null, null, null, null], type: "practical_course_melody_note_for"},
            paramsKeyMap: {NOTE: 0, OCTAVE: 1, DURATION: 2},
            class: "practical_course_melody",
            func: function (t, e) {
                var n = Entry.hw.sendQueue;
                if (e.isStart) return 1 == e.timeFlag ? e : 1 == e.soundFlag ? (Entry.hw.sendQueue.SND = 0, e.soundFlag = 0, e) : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                var r = e.getNumberField("NOTE", e), o = e.getNumberField("OCTAVE", e),
                    a = e.getNumberField("DURATION", e), s = r > 0 ? r + 12 * o : 0;
                return e.isStart = !0, e.timeFlag = 1, e.soundFlag = 1, s > 65 && (s = 65), n.SND = s, setTimeout(function () {
                    setTimeout(function () {
                        e.timeFlag = 0
                    }, 50)
                }, 1 / a * 2e3), e
            }
        },
        roborobo_motor_speed: {
            color: "#00B200",
            skeleton: "basic_string_field",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1",
            params: [{
                type: "Dropdown",
                options: [["1", "52"], ["2", "66"], ["3", "80"], ["4", "94"], ["5", "107"], ["6", "120"], ["7", "134"], ["8", "148"], ["9", "162"], ["10", "176"], ["11", "190"], ["12", "204"], ["13", "218"], ["14", "232"], ["15", "255"]],
                value: "255",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null]},
            paramsKeyMap: {VALUE: 0},
            func: function (t, e) {
                return e.getStringField("VALUE")
            }
        },
        roborobo_move_for_secs: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1모터를 %2 %3의 속도로 %4초 동안 회전 %5",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "1"], ["뒤로", "2"]], value: "1", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/dcmotor.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {type: "roborobo_motor_speed"}, {type: "number", params: ["2"]}, null],
                type: "roborobo_move_for_secs"
            },
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2, DURATION: 3},
            class: "roborobo_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL"), r = e.getNumberValue("SPEED"), o = e.getNumberField("DIRECTION"),
                    a = e.getNumberValue("DURATION");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), e.isStart ? 1 == e.timeFlag ? e : (Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = 0, delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, e.callReturn()) : (1 == n ? (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = r, Entry.hw.sendQueue[1] = r) : 2 == o && (Entry.hw.sendQueue[0] = -r, Entry.hw.sendQueue[1] = -r)) : 2 == n ? (Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = r) : 2 == o && (Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = -r)) : 3 == n && (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = r, Entry.hw.sendQueue[1] = 0) : 2 == o && (Entry.hw.sendQueue[0] = -r, Entry.hw.sendQueue[1] = 0)), e.wheelMode = n, e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * a), e)
            }
        },
        roborobo_move_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1모터를 %2 %3의 속도로 계속 회전 %4",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "1"], ["뒤로", "2"]], value: "1", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {params: [null, null, {type: "roborobo_motor_speed"}, null], type: "roborobo_move_for"},
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2},
            class: "roborobo_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL"), r = e.getNumberValue("SPEED"), o = e.getNumberField("DIRECTION");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), 1 == n ? (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = r, Entry.hw.sendQueue[1] = r) : 2 == o && (Entry.hw.sendQueue[0] = -r, Entry.hw.sendQueue[1] = -r)) : 2 == n ? (Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = r) : 2 == o && (Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = -r)) : 3 == n && (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, 1 == o ? (Entry.hw.sendQueue[0] = r, Entry.hw.sendQueue[1] = 0) : 2 == o && (Entry.hw.sendQueue[0] = -r)), e.callReturn()
            }
        },
        roborobo_turn_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "오른쪽 모터를 %1 %2, 왼쪽 모터를 %3 %4의 속도로 계속 회전 %5",
            params: [{type: "Dropdown", options: [["앞으로", "1"], ["뒤로", "2"]], value: "1", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Dropdown", options: [["앞으로", "1"], ["뒤로", "2"]], value: "1", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {
                params: [null, {type: "roborobo_motor_speed"}, null, {type: "roborobo_motor_speed"}, null],
                type: "roborobo_turn_for"
            },
            paramsKeyMap: {RDIR: 0, RSPEED: 1, LDIR: 2, LSPEED: 3},
            class: "roborobo_motor",
            func: function (t, e) {
                var n = e.getNumberField("RDIR"), r = e.getNumberValue("RSPEED"), o = e.getNumberField("LDIR"),
                    a = e.getNumberValue("LSPEED");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[0] = 1 == o ? a : -a, Entry.hw.sendQueue[1] = 1 == n ? r : -r, e.callReturn()
            }
        },
        roborobo_stop_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1모터를 정지 %2",
            params: [{
                type: "Dropdown",
                options: [["양쪽", "1"], ["오른쪽", "2"], ["왼쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {params: [null, null], type: "roborobo_stop_for"},
            paramsKeyMap: {WHEEL: 0},
            class: "roborobo_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), 1 == n ? (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[0] = 0, Entry.hw.sendQueue[1] = 0) : 2 == n ? (Entry.hw.sendQueue.digitalPinMode[8] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[1] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[1] = 0) : 3 == n && (Entry.hw.sendQueue.digitalPinMode[7] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[0] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[0] = 0), e.callReturn()
            }
        },
        roborobo_touch_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "접촉 센서 값",
            params: [{type: "Block", accept: "string"}],
            events: {},
            def: {params: [null], type: "roborobo_touch_value"},
            paramsKeyMap: {},
            class: "roborobo_touch",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.contact;
                return Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.INPUT, Entry.hw.update(), Entry.hw.portData[n - 7]
            }
        },
        roborobo_touch_value_boolean: {
            color: "#2AB4D3",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["roborobo_schoolkit"],
            template: "접촉 센서가 %1",
            params: [{type: "Dropdown", options: [["접촉 되면", "1"], ["접촉 안되면", "0"]], value: "1", fontsIze: 11}],
            def: {params: [null], type: "roborobo_touch_value_boolean"},
            paramsKeyMap: {TOUCH: 0},
            class: "roborobo_touch",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.contact, r = e.getNumberField("TOUCH", e);
                return Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.INPUT, Entry.hw.update(), r == Entry.hw.portData[n - 7]
            }
        },
        roborobo_light_value: {
            color: "#498DEB",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "CDS 센서 값",
            params: [{type: "Block", accept: "string"}],
            events: {},
            def: {params: [null], type: "roborobo_light_value"},
            paramsKeyMap: {},
            class: "roborobo_light",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.cds;
                return Entry.hw.portData[n - 7]
            }
        },
        roborobo_light_value_boolean: {
            color: "#498DEB",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["roborobo_schoolkit"],
            template: "CDS 센서 값 %1 %2",
            params: [{
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, {type: "number", params: ["512"]}], type: "roborobo_light_value_boolean"},
            paramsKeyMap: {OPERATOR: 0, RIGHTVALUE: 1},
            class: "roborobo_light",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.cds, r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData[n - 7], s = !1;
                switch (o < 0 ? o = 0 : o > 1023 && (o = 1023), r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        roborobo_sound_value: {
            color: "#00D67F",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "소리 센서에 감지되는 소리 값",
            params: [{type: "Block", accept: "string"}],
            events: {},
            def: {params: [null], type: "roborobo_sound_value"},
            paramsKeyMap: {},
            class: "roborobo_sound",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.sound;
                return Entry.hw.portData[n - 7]
            }
        },
        roborobo_sound_value_boolean: {
            color: "#00D67F",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["roborobo_schoolkit"],
            template: "소리 센서에 감지되는 소리 값 %1 %2",
            params: [{
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, {type: "number", params: ["512"]}], type: "roborobo_sound_value_boolean"},
            paramsKeyMap: {OPERATOR: 0, RIGHTVALUE: 1},
            class: "roborobo_sound",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.sound, r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData[n - 7], s = !1;
                switch (o < 0 ? o = 0 : o > 1023 && (o = 1023), r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        roborobo_irs_value: {
            color: "#C4065C",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "적외선 센서 값",
            params: [{type: "Block", accept: "string"}],
            events: {},
            def: {params: [null], type: "roborobo_irs_value"},
            paramsKeyMap: {},
            class: "roborobo_irs",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.ir;
                return void 0 == Entry.hw.portData[n - 7] ? 0 : Entry.hw.portData[n - 7]
            }
        },
        roborobo_irs_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["roborobo_schoolkit"],
            template: "적외선 센서가 %1",
            params: [{type: "Dropdown", options: [["감지 되면", "1"], ["감지 안되면", "0"]], value: "1", fontsIze: 11}],
            def: {params: [null], type: "roborobo_irs_value_boolean"},
            paramsKeyMap: {DETECT: 0},
            class: "roborobo_irs",
            func: function (t, e) {
                var n = Entry.Roborobo_SchoolKit.inputPort.ir, r = e.getNumberField("DETECT", e);
                return Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.INPUT, Entry.hw.update(), r == Entry.hw.portData[n - 7]
            }
        },
        roborobo_diode_secs_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1번 포트의 발광다이오드를 %2초 동안 %3 %4",
            params: [{
                type: "Dropdown",
                options: [["LED 1", "5"], ["LED 2", "4"], ["R - A", "3"], ["R - B", "2"]],
                value: "5",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Dropdown",
                options: [["켜기", "255"], ["끄기", "0"]],
                value: "255",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/diode.png", size: 12}],
            events: {},
            def: {params: [null, {type: "number", params: ["2"]}, null, null], type: "roborobo_diode_secs_toggle"},
            paramsKeyMap: {PORT: 0, DURATION: 1, VALUE: 2},
            class: "roborobo_diode",
            func: function (t, e) {
                var n = e.getNumberField("PORT"), r = e.getNumberValue("DURATION"), o = e.getNumberField("VALUE");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.PWM, e.isStart ? 1 == e.timeFlag ? e : (Entry.hw.sendQueue[n] = 0, delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, Entry.hw.sendQueue[n] = o, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * r), e)
            }
        },
        roborobo_diode_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1번 포트의 발광다이오드를 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["LED 1", "5"], ["LED 2", "4"], ["R - A", "3"], ["R - B", "2"]],
                value: "5",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["켜기", "255"], ["끄기", "0"]],
                value: "255",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/diode.png", size: 12}],
            events: {},
            def: {params: [null, null, null], type: "roborobo_diode_toggle"},
            paramsKeyMap: {PORT: 0, VALUE: 1},
            class: "roborobo_diode",
            func: function (t, e) {
                var n = e.getNumberField("PORT"), r = e.getNumberField("VALUE");
                return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[n] = r, e.callReturn()
            }
        },
        roborobo_diode_inout_toggle: {
            color: "#FF8D10",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1번 포트의 발광다이오드를 %2번 포트의 %3~%4의 범위로 켜기%5",
            params: [{
                type: "Dropdown",
                options: [["LED 1", "5"], ["LED 2", "4"], ["R - A", "3"], ["R - B", "2"]],
                value: "5",
                fontsIze: 11
            }, {type: "Dropdown", options: [["소 리", "8"], ["CDS", "10"]], value: "8", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/diode.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {type: "number", params: ["0"]}, {type: "number", params: ["255"]}, null],
                type: "roborobo_diode_inout_toggle"
            },
            paramsKeyMap: {OUTPUT: 0, INPUT: 1, MIN: 2, MAX: 3},
            class: "roborobo_diode",
            func: function (t, e) {
                var n = e.getNumberField("OUTPUT"), r = e.getNumberField("INPUT"), o = e.getNumberValue("MIN"),
                    a = e.getNumberValue("MAX"), s = (Entry.hw.portData[r - 7] / 4 - o) / (a - o) * 255 + 0;
                return s > 255 && (s = 255), s < 0 && (s = 0), Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[n] = s, e.callReturn()
            }
        },
        roborobo_diode_set_output: {
            color: "#FF8D10",
            skeleton: "basic",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1번 포트의 발광다이오드를 %2의 밝기로 켜기 %3",
            params: [{
                type: "Dropdown",
                options: [["LED 1", "5"], ["LED 2", "4"], ["R - A", "3"], ["R - B", "2"]],
                value: "5",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/diode.png",
                size: 12
            }],
            events: {},
            def: {params: [null, {type: "number", params: ["255"]}, null], type: "roborobo_diode_set_output"},
            paramsKeyMap: {PORT: 0, VALUE: 1},
            class: "roborobo_diode",
            func: function (t, e) {
                var n = e.getStringField("PORT", e), r = e.getNumberValue("VALUE", e);
                return r < 0 ? r = 0 : r > 255 && (r = 255), Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue[n] = r, e.callReturn()
            }
        },
        roborobo_diode_input_value: {
            color: "#FF8D10",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["roborobo_schoolkit"],
            template: "%1 포트의 값",
            params: [{
                type: "Dropdown",
                options: [["적외선", "7"], ["소 리", "8"], ["접 촉", "9"], ["CDS", "10"]],
                value: "8",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "roborobo_diode_input_value"},
            paramsKeyMap: {PORT: 0},
            class: "roborobo_diode",
            func: function (t, e) {
                var n = e.getNumberField("PORT");
                return Entry.hw.portData[n - 7]
            }
        },
        robotis_set_led: {
            color: "#2AB4D3",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 LED를 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["모두 끄기", "0"], ["노랑색 켜기", "1"], ["파랑색 켜기", "2"], ["모두 켜기", "3"]],
                value: "0",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/light.png", size: 12}],
            events: {},
            def: {params: [null], type: "robotis_set_led"},
            paramsKeyMap: {PORT: 0, COLOR: 1},
            class: "robotis_led",
            func: function (t, e) {
                var n = e.getStringField("PORT"), r = Entry.Robotis_openCM70.INSTRUCTION.WRITE, o = 0,
                    a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1], s = e.getNumberField("COLOR");
                switch (n) {
                    case"3":
                        o = 212;
                        break;
                    case"4":
                        o = 213;
                        break;
                    case"5":
                        o = 214;
                        break;
                    case"6":
                        o = 215
                }
                var i = [[r, o, a, s]];
                return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
            }
        },
        robotis_touch_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 접촉 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_touch_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_touch",
            func: function (t, e) {
                var n = 0;
                switch (e.getStringField("PORT")) {
                    case"3":
                        n = Entry.hw.portData.TOUCH0;
                        break;
                    case"4":
                        n = Entry.hw.portData.TOUCH1;
                        break;
                    case"5":
                        n = Entry.hw.portData.TOUCH2;
                        break;
                    case"6":
                        n = Entry.hw.portData.TOUCH3
                }
                return n
            }
        },
        robotis_touch_value_boolean: {
            color: "#2AB4D3",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 접촉 센서가 %2",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {type: "Dropdown", options: [["접촉 되면", "1"], ["접촉 안되면", "0"]], value: "1", fontsIze: 11}],
            def: {params: [null, null, null], type: "robotis_touch_value_boolean"},
            paramsKeyMap: {PORT: 0, TOUCH: 1},
            class: "robotis_touch",
            func: function (t, e) {
                var n = e.getStringField("PORT"), r = e.getNumberField("TOUCH", e), o = 0;
                switch (n) {
                    case"3":
                        o = Entry.hw.portData.TOUCH0;
                        break;
                    case"4":
                        o = Entry.hw.portData.TOUCH1;
                        break;
                    case"5":
                        o = Entry.hw.portData.TOUCH2;
                        break;
                    case"6":
                        o = Entry.hw.portData.TOUCH3
                }
                return !(1 == o ^ r)
            }
        },
        robotis_irs_value: {
            color: "#C4065C",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 적외선 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_irs_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_irs",
            func: function (t, e) {
                var n = e.getStringField("PORT"), r = 0, o = 0;
                switch (n) {
                    case"3":
                        r = Entry.hw.portData.IR0, o = 108;
                        break;
                    case"4":
                        r = Entry.hw.portData.IR1, o = 109;
                        break;
                    case"5":
                        r = Entry.hw.portData.IR2, o = 110;
                        break;
                    case"6":
                        r = Entry.hw.portData.IR3, o = 111
                }
                var a = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, o, 1, 2]];
                return Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 || "3" != n || (Entry.Robotis_carCont.setRobotisData(a), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 || "4" != n || (Entry.Robotis_carCont.setRobotisData(a), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 || "5" != n || (Entry.Robotis_carCont.setRobotisData(a), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 || "6" != n || (Entry.Robotis_carCont.setRobotisData(a), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = !0), r
            }
        },
        robotis_irs_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 적외선 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, null, {type: "number", params: ["100"]}], type: "robotis_irs_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "robotis_irs",
            func: function (t, e) {
                var n = e.getStringField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = 0, s = !1, i = 0;
                switch (n) {
                    case"3":
                        a = Entry.hw.portData.IR0, i = 108;
                        break;
                    case"4":
                        a = Entry.hw.portData.IR1, i = 109;
                        break;
                    case"5":
                        a = Entry.hw.portData.IR2, i = 110;
                        break;
                    case"6":
                        a = Entry.hw.portData.IR3, i = 111
                }
                var l = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, i, 1, 2]];
                switch (Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 || "3" != n || (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 || "4" != n || (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 || "5" != n || (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = !0), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 || "6" != n || (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = !0), r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        robotis_light_value: {
            color: "#498DEB",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 빛 감지 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "0"], ["PORT 4", "1"], ["PORT 5", "2"], ["PORT 6", "3"]],
                value: "0",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_light_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_light",
            func: function (t, e) {
                var n = e.getStringField("PORT");
                return Entry.hw.portData["LIGHT" + n]
            }
        },
        robotis_light_value_boolean: {
            color: "#498DEB",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 빛 감지 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "0"], ["PORT 4", "1"], ["PORT 5", "2"], ["PORT 6", "3"]],
                value: "0",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, null, {type: "number", params: ["100"]}], type: "robotis_light_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "robotis_light",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = Entry.hw.portData["LIGHT" + n], s = !1;
                switch (r) {
                    case"EQUAL":
                        s = a == o;
                        break;
                    case"GREATER":
                        s = Number(a) > Number(o);
                        break;
                    case"LESS":
                        s = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        s = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        s = Number(a) <= Number(o)
                }
                return s
            }
        },
        robotis_detectedsound_value: {
            color: "#00D67F",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "소리 센서 최종 소리 횟수",
            events: {},
            params: [{type: "Block", accept: "string"}],
            def: {params: [null], type: "robotis_detectedsound_value"},
            paramsKeyMap: {},
            class: "robotis_sound",
            func: function (t, e) {
                return Entry.hw.portData.DETECTEDSOUNDE
            }
        },
        robotis_detectedsound_value_boolean: {
            color: "#00D67F",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "소리 센서 최종 소리 횟수 %1 %2",
            params: [{
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, {type: "number", params: ["100"]}], type: "robotis_detectedsound_value_boolean"},
            paramsKeyMap: {OPERATOR: 0, RIGHTVALUE: 1},
            class: "robotis_sound",
            func: function (t, e) {
                var n = e.getField("OPERATOR", e), r = e.getNumberValue("RIGHTVALUE", e),
                    o = Entry.hw.portData.DETECTEDSOUNDE, a = !1;
                switch (n) {
                    case"EQUAL":
                        a = o == r;
                        break;
                    case"GREATER":
                        a = Number(o) > Number(r);
                        break;
                    case"LESS":
                        a = Number(o) < Number(r);
                        break;
                    case"GREATER_OR_EQUAL":
                        a = Number(o) >= Number(r);
                        break;
                    case"LESS_OR_EQUAL":
                        a = Number(o) <= Number(r)
                }
                return a
            }
        },
        robotis_detectingsound_value: {
            color: "#00D67F",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "소리 센서 실시간 소리 횟수",
            events: {},
            params: [{type: "Block", accept: "string"}],
            def: {params: [null], type: "robotis_detectingsound_value"},
            paramsKeyMap: {},
            class: "robotis_sound",
            func: function (t, e) {
                return Entry.hw.portData.DETECTINGSOUNDE1
            }
        },
        robotis_detectingsound_value_boolean: {
            color: "#00D67F",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "소리 센서 실시간 소리 횟수 %1 %2",
            params: [{
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, {type: "number", params: ["100"]}], type: "robotis_detectingsound_value_boolean"},
            paramsKeyMap: {OPERATOR: 0, RIGHTVALUE: 1},
            class: "robotis_sound",
            func: function (t, e) {
                var n = e.getField("OPERATOR", e), r = e.getNumberValue("RIGHTVALUE", e),
                    o = Entry.hw.portData.DETECTINGSOUNDE1, a = !1;
                switch (n) {
                    case"EQUAL":
                        a = o == r;
                        break;
                    case"GREATER":
                        a = Number(o) > Number(r);
                        break;
                    case"LESS":
                        a = Number(o) < Number(r);
                        break;
                    case"GREATER_OR_EQUAL":
                        a = Number(o) >= Number(r);
                        break;
                    case"LESS_OR_EQUAL":
                        a = Number(o) <= Number(r)
                }
                return a
            }
        },
        robotis_color_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 칼라 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_color_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_color",
            func: function (t, e) {
                var n = 0, r = 0;
                switch (e.getStringField("PORT")) {
                    case"3":
                        n = Entry.hw.portData.COLOR0, r = 108;
                        break;
                    case"4":
                        n = Entry.hw.portData.COLOR1, r = 109;
                        break;
                    case"5":
                        n = Entry.hw.portData.COLOR2, r = 110;
                        break;
                    case"6":
                        n = Entry.hw.portData.COLOR3, r = 111
                }
                var o = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, r, 1, 4]];
                switch (Entry.Robotis_carCont.setRobotisData(o), Entry.Robotis_carCont.update(), n) {
                    case 0:
                        n = "알 수 없음";
                        break;
                    case 1:
                        n = "흰색";
                        break;
                    case 2:
                        n = "검은색";
                        break;
                    case 3:
                        n = "빨강색";
                        break;
                    case 4:
                        n = "초록색";
                        break;
                    case 5:
                        n = "파랑색";
                        break;
                    case 6:
                        n = "노랑색"
                }
                return n
            }
        },
        robotis_color_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 칼라 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {
                type: "Dropdown",
                options: [["알 수 없음 : 0", "0"], ["흰색 : 1", "1"], ["검은색 : 2", "2"], ["빨강색 : 3", "3"], ["초록색 : 4", "4"], ["파랑색 : 5", "5"], ["노랑색 : 6", "6"]],
                value: "0",
                fontsIze: 11
            }],
            def: {params: [null, null, null], type: "robotis_color_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "robotis_color",
            func: function (t, e) {
                var n = e.getField("PORT", e), r = e.getField("OPERATOR", e), o = e.getNumberField("RIGHTVALUE", e),
                    a = 0, s = 0, i = !1;
                switch (n) {
                    case"3":
                        a = Entry.hw.portData.COLOR0, s = 108;
                        break;
                    case"4":
                        a = Entry.hw.portData.COLOR1, s = 109;
                        break;
                    case"5":
                        a = Entry.hw.portData.COLOR2, s = 110;
                        break;
                    case"6":
                        a = Entry.hw.portData.COLOR3, s = 111
                }
                var l = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, s, 1, 4]];
                switch (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), r) {
                    case"EQUAL":
                        i = a == o;
                        break;
                    case"GREATER":
                        i = Number(a) > Number(o);
                        break;
                    case"LESS":
                        i = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        i = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        i = Number(a) <= Number(o)
                }
                return i
            }
        },
        robotis_humidity_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 습도 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_humidity_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_humidity",
            func: function (t, e) {
                var n = 0, r = 0;
                switch (e.getStringField("PORT")) {
                    case"3":
                        n = Entry.hw.portData.HUMIDTY0, r = 108;
                        break;
                    case"4":
                        n = Entry.hw.portData.HUMIDTY1, r = 109;
                        break;
                    case"5":
                        n = Entry.hw.portData.HUMIDTY2, r = 110;
                        break;
                    case"6":
                        n = Entry.hw.portData.HUMIDTY3, r = 111
                }
                var o = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, r, 1, 5]];
                return Entry.Robotis_carCont.setRobotisData(o), Entry.Robotis_carCont.update(), n
            }
        },
        robotis_humidity_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 습도 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, null, {type: "number", params: ["50"]}], type: "robotis_humidity_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "robotis_humidity",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = 0, s = 0, i = !0;
                switch (n) {
                    case 3:
                        a = Entry.hw.portData.HUMIDTY0, s = 108;
                        break;
                    case 4:
                        a = Entry.hw.portData.HUMIDTY1, s = 109;
                        break;
                    case 5:
                        a = Entry.hw.portData.HUMIDTY2, s = 110;
                        break;
                    case 6:
                        a = Entry.hw.portData.HUMIDTY3, s = 111
                }
                var l = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, s, 1, 5]];
                switch (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), r) {
                    case"EQUAL":
                        i = a == o;
                        break;
                    case"GREATER":
                        i = Number(a) > Number(o);
                        break;
                    case"LESS":
                        i = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        i = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        i = Number(a) <= Number(o)
                }
                return i
            }
        },
        robotis_temperature_value: {
            color: "#2AB4D3",
            skeleton: "basic_string_field",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 온도 센서 값",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }],
            events: {},
            def: {params: [null], type: "robotis_temperature_value"},
            paramsKeyMap: {PORT: 0},
            class: "robotis_temperature",
            func: function (t, e) {
                var n = 0, r = 0;
                switch (e.getStringField("PORT")) {
                    case"3":
                        n = Entry.hw.portData.TEMPERATURE0, r = 108;
                        break;
                    case"4":
                        n = Entry.hw.portData.TEMPERATURE1, r = 109;
                        break;
                    case"5":
                        n = Entry.hw.portData.TEMPERATURE2, r = 110;
                        break;
                    case"6":
                        n = Entry.hw.portData.TEMPERATURE3, r = 111
                }
                var o = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, r, 1, 5]];
                return Entry.Robotis_carCont.setRobotisData(o), Entry.Robotis_carCont.update(), n
            }
        },
        robotis_temperature_value_boolean: {
            color: "#C4065C",
            skeleton: "basic_boolean_field",
            fontColor: "#fff",
            isNotFor: ["robotis_openCM70"],
            template: "%1번 포트 온도 센서 값 %2 %3",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                value: "LESS",
                fontsIze: 11,
                noaRrow: !0
            }, {type: "Block", accept: "string"}],
            def: {params: [null, null, {type: "number", params: ["50"]}], type: "robotis_temperature_value_boolean"},
            paramsKeyMap: {PORT: 0, OPERATOR: 1, RIGHTVALUE: 2},
            class: "robotis_temperature",
            func: function (t, e) {
                var n = e.getNumberField("PORT", e), r = e.getField("OPERATOR", e),
                    o = e.getNumberValue("RIGHTVALUE", e), a = 0, s = 0, i = !0;
                switch (n) {
                    case 3:
                        a = Entry.hw.portData.TEMPERATURE0, s = 108;
                        break;
                    case 4:
                        a = Entry.hw.portData.TEMPERATURE1, s = 109;
                        break;
                    case 5:
                        a = Entry.hw.portData.TEMPERATURE2, s = 110;
                        break;
                    case 6:
                        a = Entry.hw.portData.TEMPERATURE3, s = 111
                }
                var l = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, s, 1, 5]];
                switch (Entry.Robotis_carCont.setRobotisData(l), Entry.Robotis_carCont.update(), r) {
                    case"EQUAL":
                        i = a == o;
                        break;
                    case"GREATER":
                        i = Number(a) > Number(o);
                        break;
                    case"LESS":
                        i = Number(a) < Number(o);
                        break;
                    case"GREATER_OR_EQUAL":
                        i = Number(a) >= Number(o);
                        break;
                    case"LESS_OR_EQUAL":
                        i = Number(a) <= Number(o)
                }
                return i
            }
        },
        robotis_move_for_secs: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1모터를 %2 %3의 속도로 %4초 동안 회전 %5",
            params: [{
                type: "Dropdown",
                options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "CW"], ["뒤로", "CCW"]], value: "CW", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Block", accept: "string"}, {
                type: "Indicator",
                img: "block_icon/practical_course/dcmotor.png",
                size: 12
            }],
            events: {},
            def: {
                params: [null, null, {type: "practical_course_motor_speed"}, {type: "number", params: ["2"]}, null],
                type: "robotis_move_for_secs"
            },
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2, DURATION: 3},
            class: "robotis_motor",
            func: function (t, e) {
                var n = e.getNumberValue("DURATION"), r = e.getNumberField("WHEEL"), o = e.getNumberValue("SPEED"),
                    a = e.getStringField("DIRECTION"), s = Entry.Robotis_openCM70.INSTRUCTION.WRITE, i = 0, l = 0;
                if (i = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0], "3" == r ? (l = 4, i = 136) : i += (r - 1) * (l = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1]), e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, c = [[s, i, l, 0]], Entry.Robotis_carCont.setRobotisData(c), Entry.engine.isContinue = !1, Entry.Robotis_carCont.update(), e.callReturn());
                o *= 68, "3" == r || "1" == r ? "CCW" == a ? (o += 1024) > 2047 && (o = 2047) : o > 1023 && (o = 1023) : "CW" == a ? (o += 1024) > 2047 && (o = 2047) : o > 1023 && (o = 1023);
                var c = [[s, i, l, o]];
                return e.wheelMode = r, e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                    e.timeFlag = 0
                }, 1e3 * n), Entry.Robotis_carCont.setRobotisData(c), Entry.Robotis_carCont.update(), e
            }
        },
        robotis_aux_move_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1모터를 %2 %3의 속도로 계속 회전 %4",
            params: [{
                type: "Dropdown",
                options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Dropdown", options: [["앞으로", "CW"], ["뒤로", "CCW"]], value: "CW", fontsIze: 11}, {
                type: "Block",
                accept: "string"
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {params: [null, null, {type: "practical_course_motor_speed"}, null], type: "robotis_aux_move_for"},
            paramsKeyMap: {WHEEL: 0, DIRECTION: 1, SPEED: 2},
            class: "robotis_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL"), r = e.getNumberValue("SPEED"), o = e.getStringField("DIRECTION"),
                    a = Entry.Robotis_openCM70.INSTRUCTION.WRITE, s = 0, i = 0;
                s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0], "3" == n ? (i = 4, s = 136) : s += (n - 1) * (i = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1]), r *= 68, "3" == n || "1" == n ? "CCW" == o ? (r += 1024) > 2047 && (r = 2047) : r > 1023 && (r = 1023) : "CW" == o ? (r += 1024) > 2047 && (r = 2047) : r > 1023 && (r = 1023);
                var l = [[a, s, i, r]];
                return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_openCM70.delay)
            }
        },
        robotis_aux_stop_for: {
            color: "#00B200",
            skeleton: "basic",
            fontColor: "#fff",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1모터를 정지 %2",
            params: [{
                type: "Dropdown",
                options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                value: "1",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/dcmotor.png", size: 12}],
            events: {},
            def: {params: [null, null], type: "robotis_aux_stop_for"},
            paramsKeyMap: {WHEEL: 0},
            class: "robotis_motor",
            func: function (t, e) {
                var n = e.getNumberField("WHEEL"), r = Entry.Robotis_openCM70.INSTRUCTION.WRITE, o = 0, a = 0;
                o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0], "3" == n ? (a = 4, o = 136) : o += (n - 1) * (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1]);
                var s = [[r, o, a, 0]];
                return Entry.Robotis_carCont.postCallReturn(e, s, Entry.Robotis_openCM70.delay)
            }
        },
        robotis_set_servo_wheel: {
            color: "#D126BD",
            skeleton: "basic",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1 포트의 서보모터를 %2 %3속도로 회전 %4",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["시계방향", "CW"], ["반시계방향", "CCW"]],
                value: "CW",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["1", 1], ["2", 2], ["3", 3], ["4", 4], ["5", 5], ["6", 6], ["7", 7], ["8", 8], ["9", 9], ["10", 10], ["11", 11], ["12", 12], ["13", 13], ["14", 14], ["15", 15]],
                value: 7,
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/servo.png", size: 12}],
            events: {},
            def: {params: [null, null, null, null], type: "robotis_set_servo_wheel"},
            paramsKeyMap: {PORT: 0, DIRECTION: 1, SPEED: 2},
            class: "robotis_servo_motor",
            func: function (t, e) {
                var n, r, o = e.getField("PORT", e), a = e.getStringField("DIRECTION"), s = e.getNumberField("SPEED"),
                    i = 0, l = Entry.Robotis_openCM70.INSTRUCTION.WRITE, c = 0, u = 0, p = 0;
                switch ((p = 68 * s) > 1023 && (p = 1023), o) {
                    case"3":
                        i = 108, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 = !0;
                        break;
                    case"4":
                        i = 109, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 = !0;
                        break;
                    case"5":
                        i = 110, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 = !0;
                        break;
                    case"6":
                        i = 111, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 = !0
                }
                if (Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1], u = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0], u += (o - 1) * (r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1]), c = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0], c += (o - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1]), "CW" == a ? (p += 1024) > 2047 && (p = 2047) : p > 1023 && (p = 1023), e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, _ = [[l, c, n, 0], [l, u, r, p]], Entry.Robotis_carCont.setRobotisData(_), Entry.engine.isContinue = !1, Entry.Robotis_carCont.update(), e.callReturn());
                if (!Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 && "3" == o || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 && "4" == o || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 && "5" == o || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 && "6" == o) {
                    var _ = [[l, i, 1, 7]];
                    Entry.Robotis_carCont.setRobotisData(_), Entry.Robotis_carCont.update(), e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                        e.timeFlag = 0
                    }, 650)
                } else e.isStart = !0, e.timeFlag = 0;
                return e
            }
        },
        robotis_set_servo_joint: {
            color: "#D126BD",
            skeleton: "basic",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "%1 포트의 서보모터를 %2 도 %3속도로 이동 %4",
            params: [{
                type: "Dropdown",
                options: [["PORT 3", "3"], ["PORT 4", "4"], ["PORT 5", "5"], ["PORT 6", "6"]],
                value: "3",
                fontsIze: 11
            }, {type: "Block", accept: "string"}, {
                type: "Dropdown",
                options: [["1", 1], ["2", 2], ["3", 3], ["4", 4], ["5", 5], ["6", 6], ["7", 7], ["8", 8], ["9", 9], ["10", 10], ["11", 11], ["12", 12], ["13", 13], ["14", 14], ["15", 15]],
                value: 7,
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/servo.png", size: 12}],
            events: {},
            def: {params: [null, {type: "number", params: ["512"]}, null, null], type: "robotis_set_servo_joint"},
            paramsKeyMap: {PORT: 0, VALUE: 1, SPEED: 2},
            class: "robotis_servo_motor",
            func: function (t, e) {
                var n, r, o, a, s = e.getField("PORT", e), i = e.getNumberValue("VALUE"), l = e.getNumberField("SPEED"),
                    c = Entry.Robotis_openCM70.INSTRUCTION.WRITE, u = 0, p = 0,
                    _ = (c = Entry.Robotis_openCM70.INSTRUCTION.WRITE, 0), d = 0, y = 0;
                switch ((y = 68 * l) > 1023 && (y = 1023), s) {
                    case"3":
                        p = 108;
                        break;
                    case"4":
                        p = 109;
                        break;
                    case"5":
                        p = 110;
                        break;
                    case"6":
                        p = 111
                }
                if (u = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], u += (s - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1]), d = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0], d += (s - 1) * (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1]), _ = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0], _ += (s - 1) * (o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1]), i > 1023 ? i = 1023 : i < 0 && (i = 0), r = i, e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, delete e.wheelMode, Entry.engine.isContinue = !1, setTimeout(function () {
                    e.timeFlag = 0
                }, 70), g = [[c, _, o, 1], [c, d, a, y], [c, u, n, r]], Entry.Robotis_carCont.setRobotisData(g), Entry.engine.isContinue = !1, Entry.Robotis_carCont.update(), e.callReturn());
                var g = [[c, p, 1, 7]];
                return !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 && "3" == s || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 && "4" == s || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 && "5" == s || !Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 && "6" == s ? (e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                    e.timeFlag = 0
                }, 650)) : (e.isStart = !0, e.timeFlag = 0), e
            }
        },
        robotis_melody_note_for: {
            color: "#FC327F",
            skeleton: "basic",
            statements: [],
            isNotFor: ["robotis_openCM70"],
            template: "멜로디 %1 을(를) %2 옥타브로 %3 만큼 소리내기 %4",
            params: [{
                type: "Dropdown",
                options: [["도", "0"], ["도#(레♭)", "1"], ["레", "2"], ["레#(미♭)", "3"], ["미", "4"], ["파", "5"], ["파#(솔♭)", "6"], ["솔", "7"], ["솔#(라♭)", "8"], ["라", "9"], ["라#(시♭)", "10"], ["시", "11"]],
                value: "0",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                value: "2",
                fontsIze: 11
            }, {
                type: "Dropdown",
                options: [["온음표", "4"], ["2분음표", "2"], ["4분음표", "1"], ["8분음표", "0.5"], ["16분음표", "0.25"]],
                value: "4",
                fontsIze: 11
            }, {type: "Indicator", img: "block_icon/practical_course/melody.png", size: 12}],
            events: {},
            def: {params: [null, null, null, null], type: "robotis_melody_note_for"},
            paramsKeyMap: {NOTE: 0, OCTAVE: 1, DURATION: 2},
            class: "robotis_melody",
            func: function (t, e) {
                var n = e.getNumberField("NOTE", e), r = e.getNumberField("OCTAVE", e),
                    o = e.getNumberField("DURATION", e), a = n + 12 * r;
                a > 51 && (a = 51), a < 0 && (a = 0);
                var s, i, l = Entry.Robotis_openCM70.INSTRUCTION.WRITE, c = 0;
                s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0], i = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1], (c = parseInt(10 * o)) > 50 && (c = 50);
                var u = [[l, s, i, c], [l, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], a]];
                return Entry.Robotis_carCont.postCallReturn(e, u, 1e3 * o)
            }
        }
    }, $.extend(Entry.block, r)
}, function (module, exports, __webpack_require__) {
    "use strict";
    (function (global) {
        var _extends2 = __webpack_require__(80), _extends3 = _interopRequireDefault(_extends2),
            _typeof2 = __webpack_require__(5), _typeof3 = _interopRequireDefault(_typeof2);

        function _interopRequireDefault(t) {
            return t && t.__esModule ? t : {default: t}
        }

        "object" !== (0, _typeof3.default)(global.Entry) && (global.Entry = {}), "object" == (0, _typeof3.default)(exports) && "object" !== ("undefined" == typeof EntryStatic ? "undefined" : (0, _typeof3.default)(EntryStatic)) && (global.EntryStatic = {}), Entry.block || (Entry.block = {}), Entry.block.converters || (Entry.block.converters = {}), Entry && Entry.block && function (c) {
            c.keyboardCode = function (t, e) {
                var n;
                return t && (n = t.toUpperCase()), n = {
                    32: "space",
                    13: "enter",
                    38: "up",
                    37: "left",
                    39: "right",
                    40: "down"
                }[e] || n || e, Entry.Utils.isNumber(n) ? '"()"'.replace('"()"', n) : '"()"'.replace("()", n)
            }, c.returnStringKey = function (key, value) {
                if (!value && "number" != typeof value || "null" === value) return "None";
                key = String(key), "mouse" === value && (key = "mouse");
                var name = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(value, this.menuName);
                if (name && (key = name), this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (key = codeMapValue)
                }
                return key = key.replace(/\"/gi, ""), '"()"'.replace("()", key)
            }, c.returnRawStringKey = function (t, e) {
                if (!e && "number" != typeof e || "null" === e) return "None";
                t = String(t), "mouse" === e && (t = e);
                var n = Entry.TextCodingUtil.dropdownDynamicIdToNameConvertor(e, this.menuName);
                return n && (t = n), t = t.replace(/\"/gi, ""), '"()"'.replace('"()"', t)
            }, c.returnStringValue = function (key, value) {
                if (!value && "number" != typeof value || "null" === value) return "None";
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                return '"()"'.replace("()", value)
            }, c.returnOperator = function (t, e) {
                return {
                    EQUAL: "==",
                    GREATER: ">",
                    LESS: "<",
                    GREATER_OR_EQUAL: ">=",
                    LESS_OR_EQUAL: "<=",
                    PLUS: "+",
                    MINUS: "-",
                    MULTI: "*",
                    DIVIDE: "/",
                    "==": "EQUAL",
                    ">": "GREATER",
                    "<": "LESS",
                    ">=": "GREATER_OR_EQUAL",
                    "<=": "LESS_OR_EQUAL",
                    "+": "PLUS",
                    "-": "MINUS",
                    "*": "MULTI",
                    "/": "DIVIDE",
                    AND: "and",
                    OR: "or"
                }[e]
            }, c.returnRawNumberValueByKey = function (t, e) {
                return t
            }, c.returnStringOrNumberByValue = function (t, e) {
                return Entry.Utils.isNumber(e) ? e : (e = e.replace(/\"/gi, ""), '"()"'.replace("()", e))
            }, c.returnObjectOrStringValue = function (key, value) {
                if (Entry.container && Entry.container.getObject(value)) {
                    var objectName = Entry.container.getObject(value).name;
                    return '"()"'.replace("()", objectName)
                }
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                return value = value.replace(/\"/gi, ""), '"()"'.replace("()", value)
            }, c.returnStringValueUpperCase = function (key, value) {
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                return '"()"'.replace("()", value).toUpperCase()
            }, c.returnValueUpperCase = function (key, value) {
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                return value.toUpperCase()
            }, c.returnStringValueLowerCase = function (key, value) {
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                return '"()"'.replace("()", value).toLowerCase()
            }, c.returnValuePartialUpperCase = function (key, value) {
                if (this.codeMap) var codeMap = eval(this.codeMap);
                var codeMapKey = value;
                if (codeMap) {
                    var codeMapValue = codeMap[codeMapKey];
                    codeMapValue && (value = codeMapValue)
                }
                var dot = value.indexOf(".") + 1;
                return dot > 1 ? value.charAt(0).toUpperCase() + value.substring(1, dot) + value.substring(dot).toUpperCase() : value.toUpperCase()
            }
        }(Entry.block.converters);
        var blocks = __webpack_require__(84), block = {
            arduino_download_connector: {
                skeleton: "basic_button",
                isNotFor: ["arduinoDisconnected"],
                color: "#eee",
                params: [{
                    type: "Text",
                    text: Entry.isOffline ? Lang.Blocks.ARDUINO_open_connector : Lang.Blocks.ARDUINO_download_connector,
                    color: "#333",
                    align: "center"
                }],
                events: {
                    mousedown: [function () {
                        Entry.hw.downloadConnector()
                    }]
                }
            },
            download_guide: {
                skeleton: "basic_button",
                isNotFor: ["arduinoDisconnected"],
                color: "#eee",
                params: [{type: "Text", text: Lang.Blocks.download_guide, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.downloadGuide()
                    }]
                }
            },
            arduino_download_source: {
                skeleton: "basic_button",
                isNotFor: ["arduinoDisconnected"],
                color: "#eee",
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_download_source, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.downloadSource()
                    }]
                }
            },
            arduino_connected: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoConnected"],
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_connected, color: "#333", align: "center"}],
                events: {}
            },
            arduino_connect: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoConnect"],
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_connect, color: "#333", align: "center"}],
                events: {}
            },
            arduino_reconnect: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoDisconnected"],
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_reconnect, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.retryConnect()
                    }]
                }
            },
            robot_reconnect: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoDisconnected"],
                template: "%1",
                params: [{type: "Text", text: Lang.Blocks.ROBOT_reconnect, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.retryConnect()
                    }]
                }
            },
            arduino_open: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoDisconnected"],
                template: "%1",
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_open_connector, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.openHardwareProgram()
                    }]
                }
            },
            arduino_cloud_pc_open: {
                skeleton: "basic_button",
                color: "#eee",
                isNotFor: ["arduinoConnect", "arduinoConnected"],
                template: "%1",
                params: [{type: "Text", text: Lang.Blocks.ARDUINO_cloud_pc_connector, color: "#333", align: "center"}],
                events: {
                    mousedown: [function () {
                        Entry.hw.openHardwareProgram()
                    }]
                }
            },
            change_opacity: {
                color: "#FF9E20",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/brush_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["10"]}, null], type: "change_opacity"},
                paramsKeyMap: {VALUE: 0},
                class: "brush_opacity",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), n = Entry.adjustValueWithMaxMin(t.brush.opacity + n, 0, 100), t.brush) {
                        t.brush.opacity = n, t.brush.endStroke();
                        var r = t.brush.rgb;
                        t.brush.beginStroke("rgba(" + r.r + "," + r.g + "," + r.b + "," + t.brush.opacity / 100 + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                    }
                    return e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_opacity: {
                color: "#FF9E20",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/brush_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["50"]}, null], type: "set_opacity"},
                paramsKeyMap: {VALUE: 0},
                class: "brush_opacity",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush) {
                        t.brush.opacity = Entry.adjustValueWithMaxMin(n, 0, 100), t.brush.endStroke();
                        var r = t.brush.rgb;
                        t.brush.beginStroke("rgba(" + r.r + "," + r.g + "," + r.b + "," + t.brush.opacity / 100 + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                    }
                    return e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            number: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "TextInput", value: 10}],
                events: {},
                def: {params: []},
                paramsKeyMap: {NUM: 0},
                func: function (t, e) {
                    return e.getField("NUM", e)
                },
                isPrimitive: !0,
                syntax: {
                    js: ["Scope", "%1"],
                    py: [{
                        syntax: "%1",
                        keyOption: "number",
                        textParams: [{type: "TextInput", converter: Entry.block.converters.returnStringOrNumberByValue}]
                    }]
                }
            },
            angle: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Angle"}],
                events: {},
                def: {params: [null], type: "angle"},
                paramsKeyMap: {ANGLE: 0},
                func: function (t, e) {
                    return e.getNumberField("ANGLE")
                },
                isPrimitive: !0,
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        keyOption: "angle",
                        textParams: [{type: "Angle", converter: Entry.block.converters.returnRawNumberValueByKey}]
                    }]
                }
            },
            get_x_coordinate: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.CALC_get_x_coordinate, color: "#3D3D3D"}],
                events: {},
                def: {params: [null], type: "get_x_coordinate"},
                class: "calc",
                isNotFor: [],
                func: function (t, e) {
                    return t.getX()
                },
                syntax: {js: [], py: [""]}
            },
            get_y_coordinate: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.CALC_get_y_coordinate, color: "#3D3D3D"}],
                events: {},
                def: {params: [null], type: "get_y_coordinate"},
                class: "calc",
                isNotFor: [],
                func: function (t, e) {
                    return t.getY()
                },
                syntax: {js: [], py: [""]}
            },
            get_angle: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.CALC_get_angle, color: "#3D3D3D"}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    return parseFloat(t.getRotation().toFixed(1))
                },
                syntax: {js: [], py: [""]}
            },
            get_rotation_direction: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CALC_rotation_value, "ROTATION"], [Lang.Blocks.CALC_direction_value, "DIRECTION"]],
                    value: "ROTATION",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "get_rotation_direction"},
                paramsKeyMap: {OPERATOR: 0},
                class: "calc",
                isNotFor: [],
                func: function (t, e) {
                    return "DIRECTION" == e.getField("OPERATOR", e).toUpperCase() ? parseFloat(t.getDirection().toFixed(1)) : parseFloat(t.getRotation().toFixed(1))
                },
                syntax: {js: [], py: [""]}
            },
            calc_plus: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "+", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) + e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            calc_minus: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "-", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) - e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            calc_times: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "x", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) * e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            calc_divide: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "/", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) / e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            calc_mod: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "/", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Text", text: Lang.Blocks.CALC_calc_mod_3, color: "#3D3D3D"}],
                events: {},
                def: {
                    params: [{type: "number", params: ["10"]}, null, {type: "number", params: ["10"]}, null],
                    type: "calc_mod"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "calc",
                isNotFor: [],
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) % e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: ["Entry.get_remainder(%1, %3)"]}
            },
            calc_share: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "/", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Text", text: "의 몫", color: "#3D3D3D"}],
                events: {},
                def: {
                    params: [{type: "number", params: ["10"]}, null, {type: "number", params: ["10"]}, null],
                    type: "calc_share"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "calc",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("LEFTHAND", e), r = e.getNumberValue("RIGHTHAND", e);
                    return Math.floor(n / r)
                },
                syntax: {js: [], py: [""]}
            },
            reset_project_timer: {
                color: "#FFD974",
                skeleton: "basic",
                statements: [],
                params: [{type: "Text", text: "초시계 초기화", color: "#3D3D3D"}],
                events: {
                    viewAdd: [function () {
                        Entry.engine && Entry.engine.showProjectTimer()
                    }], viewDestroy: [function (t, e) {
                        Entry.engine && Entry.engine.hideProjectTimer(t, e)
                    }]
                },
                def: {params: [null], type: "reset_project_timer"},
                class: "calc_timer",
                isNotFor: [],
                func: function (t, e) {
                    return Entry.engine.updateProjectTimer(0), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_visible_project_timer: {
                color: "#FFD974",
                skeleton: "basic",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.CALC_timer_visible_1, color: "#000"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                    value: "SHOW",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_CALC
                }, {type: "Text", text: Lang.Blocks.CALC_timer_visible_2, color: "#000"}, {
                    type: "Indicator",
                    img: "block_icon/calc_01.png",
                    size: 12
                }],
                events: {
                    viewAdd: [function () {
                        Entry.engine && Entry.engine.showProjectTimer()
                    }], viewDestroy: [function (t, e) {
                        Entry.engine && Entry.engine.hideProjectTimer(t, e)
                    }]
                },
                def: {params: [null, "HIDE", null, null], type: "set_visible_project_timer"},
                pyHelpDef: {params: [null, "A&value", null, null], type: "set_visible_project_timer"},
                paramsKeyMap: {ACTION: 1},
                class: "calc_timer",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getField("ACTION"), r = Entry.engine.projectTimer;
                    return "SHOW" == n ? r.setVisible(!0) : r.setVisible(!1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        template: "%1 %2 %3",
                        syntax: "Entry.timer_view(%2)",
                        textParams: [{type: "Text", text: "Entry.timer_view(", color: "#000"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                            value: "SHOW",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_CALC,
                            converter: Entry.block.converters.returnStringValueLowerCase,
                            codeMap: "Entry.CodeMap.Entry.set_visible_project_timer[1]"
                        }, {type: "Text", text: ")", color: "#000"}]
                    }]
                }
            },
            timer_variable: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Text", text: "초시계 값", color: "#3D3D3D"}, {type: "Text", text: " ", color: "#3D3D3D"}],
                events: {},
                def: {params: [null, null]},
                func: function (t, e) {
                    return Entry.container.inputValue.getValue()
                },
                syntax: {js: [], py: [""]}
            },
            stop_run: {
                color: "#498deb",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    return Entry.engine.toggleStop()
                },
                syntax: {js: [], py: [""]}
            },
            function_field_label: {
                skeleton: "basic_param",
                isNotFor: ["functionEdit"],
                color: "#f9c535",
                params: [{type: "TextInput", value: Lang.Blocks.FUNCTION_explanation_1}, {
                    type: "Output",
                    accept: "param"
                }],
                paramsKeyMap: {NAME: 0, NEXT: 1},
                def: {params: [Lang.Blocks.FUNCTION_explanation_1], type: "function_field_label"},
                syntax: {js: [], py: ["name"]}
            },
            function_field_string: {
                skeleton: "basic_param",
                isNotFor: ["functionEdit"],
                color: "#ffd974",
                params: [{type: "Block", accept: "string", restore: !0}, {type: "Output", accept: "param"}],
                paramsKeyMap: {PARAM: 0, NEXT: 1},
                def: {
                    params: [{type: "text", params: [Lang.template.function_param_string]}],
                    type: "function_field_string"
                },
                syntax: {js: [], py: ["value"]}
            },
            function_field_boolean: {
                skeleton: "basic_param",
                isNotFor: ["functionEdit"],
                color: "#aeb8ff",
                params: [{type: "Block", accept: "boolean", restore: !0}, {type: "Output", accept: "param"}],
                paramsKeyMap: {PARAM: 0, NEXT: 1},
                def: {
                    params: [{type: "True", params: [Lang.template.function_param_boolean]}],
                    type: "function_field_boolean"
                },
                syntax: {js: [], py: ["boolean"]}
            },
            function_param_string: {
                skeleton: "basic_string_field",
                color: "#ffd974",
                template: "%1 %2",
                events: {
                    viewAdd: [function () {
                        Entry.Func.isEdit && Entry.Func.refreshMenuCode()
                    }]
                },
                func: function () {
                    return this.executor.register.params[this.executor.register.paramMap[this.block.type]]
                },
                syntax: {js: [], py: [""]}
            },
            function_param_boolean: {
                skeleton: "basic_boolean_field",
                color: "#aeb8ff",
                template: "%1 %2",
                events: {
                    viewAdd: [function () {
                        Entry.Func.isEdit && Entry.Func.refreshMenuCode()
                    }]
                },
                func: function () {
                    return this.executor.register.params[this.executor.register.paramMap[this.block.type]]
                },
                syntax: {js: [], py: [""]}
            },
            function_create: {
                skeleton: "basic_create",
                color: "#cc7337",
                event: "funcDef",
                params: [{
                    type: "Block",
                    accept: "param",
                    value: {type: "function_field_label", params: [Lang.Blocks.FUNC], copyable: !1}
                }, {type: "Indicator", img: "block_icon/function_03.png", size: 12}],
                paramsKeyMap: {FIELD: 0},
                func: function () {
                },
                syntax: {js: [], py: [{syntax: "%1", keyOption: "function_create"}]}
            },
            function_general: {
                skeleton: "basic",
                color: "#cc7337",
                params: [{type: "Indicator", img: "block_icon/function_03.png", size: 12}],
                events: {
                    dataAdd: [function (t) {
                        var e = Entry.variableContainer;
                        e && e.addRef("_functionRefs", t)
                    }], dataDestroy: [function (t) {
                        var e = Entry.variableContainer;
                        e && e.removeRef("_functionRefs", t)
                    }], dblclick: [function (t) {
                        if (t.getBoard().workspace.getMode() === Entry.Workspace.MODE_BOARD && "workspace" === Entry.type) {
                            var e = t.block.getFuncId();
                            Entry.Func.edit(Entry.variableContainer.functions_[e])
                        }
                    }]
                },
                func: function (t) {
                    if (!this.initiated) {
                        if (this.initiated = !0, Entry.callStackLength++, Entry.callStackLength > Entry.Executor.MAXIMUM_CALLSTACK) throw Entry.toast.alert(Lang.Workspace.RecursiveCallWarningTitle, Lang.Workspace.RecursiveCallWarningContent), new Error;
                        var e = Entry.variableContainer.getFunction(this.block.getFuncId());
                        this.funcCode = e.content, this.funcExecutor = this.funcCode.raiseEvent("funcDef", t)[0], this.funcExecutor.register.params = this.getParams(), this.funcExecutor.register.paramMap = e.paramMap, this.funcExecutor.parentExecutor = this.executor, this.funcExecutor.isFuncExecutor = !0
                    }
                    if (this.funcExecutor.execute(), !this.funcExecutor.isEnd()) return this.funcCode.removeExecutor(this.funcExecutor), Entry.STATIC.BREAK;
                    Entry.callStackLength--
                },
                syntax: {js: [], py: [""]}
            },
            change_to_nth_shape: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "pictures", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/looks_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null, null], type: "change_to_nth_shape"},
                paramsKeyMap: {VALUE: 0},
                class: "shape",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getField("VALUE", e), r = t.parent.getPicture(n);
                    return t.setImage(r), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_effect_volume: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                deprecated: !0,
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.opacity, "opacity"]],
                    value: "color",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["10"]}, null], type: "set_effect_volume"},
                paramsKeyMap: {EFFECT: 0, VALUE: 1},
                class: "effect",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                    return "color" == n ? (t.effect.hue = r + t.effect.hue, o = "hue") : "lens" == n || "swriling" == n || "pixel" == n || "mosaic" == n || ("brightness" == n ? (t.effect.brightness = r + t.effect.brightness, o = "brightness") : "blur" == n || "opacity" == n && (t.effect.alpha = t.effect.alpha + r / 100, o = "alpha")), t.applyFilter(!0, [o]), e.callReturn()
                },
                syntax: {js: [], py: ["Entry.set_effect_volume(%1, %2)"]}
            },
            set_effect: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.opacity, "opacity"]],
                    value: "color",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["100"]}, null], type: "set_effect"},
                paramsKeyMap: {EFFECT: 0, VALUE: 1},
                class: "effect",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                    return "color" == n ? (t.effect.hue = r, o = "hue") : "lens" == n || "swriling" == n || "pixel" == n || "mosaic" == n || ("brightness" == n ? (t.effect.brightness = r, o = "brightness") : "blur" == n || "opacity" == n && (t.effect.alpha = r / 100, o = "alpha")), t.applyFilter(!0, [o]), e.callReturn()
                },
                syntax: {js: [], py: ["Entry.set_effect(%1, %2)"]}
            },
            change_scale_percent: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/looks_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["10"]}, null], type: "change_scale_percent"},
                paramsKeyMap: {VALUE: 0},
                class: "scale",
                isNotFor: [],
                func: function (t, e) {
                    var n = (e.getNumberValue("VALUE", e) + 100) / 100;
                    return t.setScaleX(t.getScaleX() * n), t.setScaleY(t.getScaleY() * n), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_scale_percent: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/looks_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["100"]}, null], type: "set_scale_percent"},
                paramsKeyMap: {VALUE: 0},
                class: "scale",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e) / 100, r = t.snapshot_;
                    return t.setScaleX(n * r.scaleX), t.setScaleY(n * r.scaleY), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_object_order: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    menuName: "objectSequence",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "set_object_order"},
                paramsKeyMap: {VALUE: 0},
                class: "z-index",
                isNotFor: [],
                func: function (t, e) {
                    if (e.getField("VALUE", e), Entry.container.getCurrentObjects().indexOf(t.parent) > -1) return e.callReturn();
                    throw new Error("object is not available")
                },
                syntax: {js: [], py: [""]}
            },
            get_pictures: {
                color: "#EC4466",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    menuName: "pictures",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    return e.getStringField("VALUE")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        keyOption: "get_pictures",
                        textParams: [{
                            type: "DropdownDynamic",
                            value: null,
                            menuName: "pictures",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                            converter: Entry.block.converters.returnStringKey
                        }]
                    }]
                }
            },
            set_effect_amount: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                    value: "color",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["10"]}, null], type: "set_effect_amount"},
                paramsKeyMap: {EFFECT: 0, VALUE: 1},
                class: "effect",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                    return "color" == n ? (t.effect.hue = r + t.effect.hue, o = "hue") : "brightness" == n ? (t.effect.brightness = r + t.effect.brightness, o = "brightness") : "transparency" == n && (t.effect.alpha = t.effect.alpha - r / 100, o = "alpha"), t.applyFilter(!0, [o]), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            set_entity_effect: {
                color: "#EC4466",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                    value: "color",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["100"]}, null], type: "set_entity_effect"},
                paramsKeyMap: {EFFECT: 0, VALUE: 1},
                class: "effect",
                isNotFor: ["textBox"],
                func: function (t, e) {
                    var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                    return "color" == n ? (t.effect.hue = r, o = "hue") : "brightness" == n ? (t.effect.brightness = r, o = "brightness") : "transparency" == n && (t.effect.alpha = 1 - r / 100, o = "alpha"), t.applyFilter(!0, [o]), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            rotate_by_angle: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["90"]}, null], type: "rotate_by_angle"},
                paramsKeyMap: {VALUE: 0},
                class: "rotate",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return t.setRotation(t.getRotation() + n), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            rotate_by_angle_dropdown: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["45", "45"], ["90", "90"], ["135", "135"], ["180", "180"]],
                    value: "45",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                events: {},
                def: {params: ["45", null], type: "rotate_by_angle_dropdown"},
                paramsKeyMap: {VALUE: 0},
                class: "ebs",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getField("VALUE", e);
                    return t.setRotation(t.getRotation() + Number(n)), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            see_angle: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["90"]}, null], type: "see_angle"},
                paramsKeyMap: {VALUE: 0},
                class: "rotate",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return t.setDirection(n), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            see_direction: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "sprites", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null, null]},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE", e), r = Entry.container.getEntity(n), o = r.getX() - t.getX(),
                        a = r.getY() - t.getY();
                    return o >= 0 ? t.setRotation(Math.atan(a / o) / Math.PI * 180 + 90) : t.setRotation(Math.atan(a / o) / Math.PI * 180 + 270), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            rotate_by_angle_time: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "angle", params: ["90"]}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["2"]}, null, null], type: "rotate_by_angle_time"},
                paramsKeyMap: {VALUE: 1},
                class: "rotate",
                isNotFor: [],
                func: function (t, e) {
                    if (!e.isStart) {
                        var n;
                        n = e.getNumberValue("VALUE", e);
                        var r = e.getNumberField("VALUE", e);
                        e.isStart = !0, e.frameCount = Math.floor(n * Entry.FPS), e.dAngle = r / e.frameCount
                    }
                    return 0 != e.frameCount ? (t.setRotation(t.getRotation() + e.dAngle), e.frameCount--, e) : (delete e.isStart, delete e.frameCount, e.callReturn())
                },
                syntax: {js: [], py: [""]}
            },
            flip_arrow_horizontal: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    return t.setDirection(t.getDirection() + 180), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            flip_arrow_vertical: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    return t.setDirection(t.getDirection() + 180), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            see_angle_direction: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["90"]}, null], type: "see_angle_direction"},
                paramsKeyMap: {VALUE: 0},
                class: "rotate",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e), r = t.getDirection() + t.getRotation();
                    return t.setRotation(t.getRotation() + n - r), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            rotate_direction: {
                color: "#A751E3",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/moving_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["90"]}, null], type: "rotate_direction"},
                paramsKeyMap: {VALUE: 0},
                class: "rotate",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return t.setDirection(n + t.getDirection()), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            sound_something: {
                color: "#A4D01D",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "sounds", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/sound_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null, null], type: "sound_something"},
                paramsKeyMap: {VALUE: 0},
                class: "sound",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getField("VALUE", e), r = t.parent.sounds;
                    return Entry.isExist(n, "id", r) && createjs.Sound.play(n), e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            sound_something_second: {
                color: "#A4D01D",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "sounds", fontSize: 11}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/sound_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["1"]}, null], type: "sound_something_second"},
                paramsKeyMap: {VALUE: 0, SECOND: 1},
                class: "sound",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getField("VALUE", e), r = e.getNumberValue("SECOND", e), o = t.parent.sounds;
                    if (Entry.isExist(n, "id", o)) {
                        var a = createjs.Sound.play(n);
                        Entry.Utils.addSoundInstances(a), setTimeout(function () {
                            a.stop()
                        }, 1e3 * r)
                    }
                    return e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            sound_something_wait: {
                color: "#A4D01D",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "sounds", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/sound_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null, null], type: "sound_something_wait"},
                paramsKeyMap: {VALUE: 0},
                class: "sound",
                isNotFor: [],
                func: function (t, e) {
                    if (e.isPlay) return 1 == e.playState ? e : (delete e.playState, delete e.isPlay, e.callReturn());
                    e.isPlay = !0, e.playState = 1;
                    var n = e.getField("VALUE", e), r = t.parent.getSound(n), o = t.parent.sounds;
                    if (Entry.isExist(n, "id", o)) {
                        var a = createjs.Sound.play(n);
                        Entry.Utils.addSoundInstances(a), setTimeout(function () {
                            e.playState = 0
                        }, 1e3 * r.duration)
                    }
                    return e
                },
                syntax: {js: [], py: [""]}
            },
            sound_something_second_wait: {
                color: "#A4D01D",
                skeleton: "basic",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, menuName: "sounds", fontSize: 11}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/sound_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["1"]}, null], type: "sound_something_second_wait"},
                paramsKeyMap: {VALUE: 0, SECOND: 1},
                class: "sound",
                isNotFor: [],
                func: function (t, e) {
                    if (e.isPlay) return 1 == e.playState ? e : (delete e.isPlay, delete e.playState, e.callReturn());
                    e.isPlay = !0, e.playState = 1;
                    var n = e.getField("VALUE", e), r = t.parent.sounds;
                    if (Entry.isExist(n, "id", r)) {
                        var o = createjs.Sound.play(n), a = e.getNumberValue("SECOND", e);
                        Entry.Utils.addSoundInstances(o), setTimeout(function () {
                            o.stop(), e.playState = 0
                        }, 1e3 * a), o.addEventListener("complete", function (t) {
                        })
                    }
                    return e
                },
                syntax: {js: [], py: [""]}
            },
            get_sounds: {
                color: "#A4D01D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    menuName: "sounds",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_SOUNDS
                }],
                events: {},
                def: {params: [null], type: "get_sounds"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    return e.getStringField("VALUE")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "DropdownDynamic",
                            value: null,
                            menuName: "sounds",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_SOUNDS,
                            converter: Entry.block.converters.returnStringKey
                        }],
                        keyOption: "get_sounds"
                    }]
                }
            },
            boolean_comparison: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["=", "EQUAL"], ["<", "SMALLER"], [">", "BIGGER"]],
                    value: "EQUAL",
                    fontSize: 11
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {params: [null], type: "boolean_comparison"},
                paramsKeyMap: {LEFTHAND: 0, OPERATOR: 1, RIGHTHAND: 2},
                func: function (t, e) {
                    var n = e.getField("OPERATOR", e), r = e.getNumberValue("LEFTHAND", e),
                        o = e.getNumberValue("RIGHTHAND", e);
                    return "EQUAL" == n ? r == o : "BIGGER" == n ? r > o : r < o
                },
                syntax: {js: [], py: [""]}
            },
            boolean_equal: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "=", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["10"]}, null, {type: "number", params: ["10"]}],
                    type: "boolean_equal"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "boolean_compare",
                isNotFor: [],
                func: function (t, e) {
                    return e.getStringValue("LEFTHAND", e) == e.getStringValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            boolean_bigger: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: ">", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["10"]}, null, {type: "number", params: ["10"]}],
                    type: "boolean_bigger"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "boolean_compare",
                isNotFor: [],
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) > e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            boolean_smaller: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Text", text: "<", color: "#3D3D3D"}, {
                    type: "Block",
                    accept: "string"
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["10"]}, null, {type: "number", params: ["10"]}],
                    type: "boolean_smaller"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "boolean_compare",
                isNotFor: [],
                func: function (t, e) {
                    return e.getNumberValue("LEFTHAND", e) < e.getNumberValue("RIGHTHAND", e)
                },
                syntax: {js: [], py: [""]}
            },
            boolean_and: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "boolean"}, {
                    type: "Text",
                    text: Lang.Blocks.JUDGEMENT_boolean_and,
                    color: "#3D3D3D"
                }, {type: "Block", accept: "boolean"}],
                events: {},
                def: {params: [{type: "True"}, null, {type: "True"}], type: "boolean_and"},
                pyHelpDef: {
                    params: [{type: "boolean_shell", params: ["A"]}, null, {
                        type: "boolean_shell",
                        params: ["B"]
                    }], type: "boolean_and"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "boolean",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getBooleanValue("LEFTHAND", e), r = e.getBooleanValue("RIGHTHAND", e);
                    return n && r
                },
                syntax: {js: [], py: [{syntax: "(%1 and %3)", template: "%1 and %3", blockType: "param", dic: "&&"}]}
            },
            boolean_or: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "boolean"}, {
                    type: "Text",
                    text: Lang.Blocks.JUDGEMENT_boolean_or,
                    color: "#3D3D3D"
                }, {type: "Block", accept: "boolean"}],
                events: {},
                def: {params: [{type: "True"}, null, {type: "False"}], type: "boolean_or"},
                pyHelpDef: {
                    params: [{type: "boolean_shell", params: ["A"]}, null, {
                        type: "boolean_shell",
                        params: ["B"]
                    }], type: "boolean_or"
                },
                paramsKeyMap: {LEFTHAND: 0, RIGHTHAND: 2},
                class: "boolean",
                isNotFor: [],
                func: function (t, e) {
                    var n = e.getBooleanValue("LEFTHAND", e), r = e.getBooleanValue("RIGHTHAND", e);
                    return n || r
                },
                syntax: {js: [], py: [{syntax: "(%1 or %3)", template: "%1 or %3", blockType: "param", dic: "||"}]}
            },
            true_or_false: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.JUDGEMENT_true, "true"], [Lang.Blocks.JUDGEMENT_false, "false"]],
                    value: "true",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    return "true" == e.children[0].textContent
                },
                syntax: {js: [], py: [""]}
            },
            True: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.JUDGEMENT_true, color: "#3D3D3D"}],
                events: {},
                def: {params: [null], type: "True"},
                func: function (t, e) {
                    return !0
                },
                isPrimitive: !0,
                syntax: {js: ["Scope", "true"], py: ["True"]}
            },
            False: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.JUDGEMENT_false, color: "#3D3D3D"}],
                events: {},
                def: {params: [null], type: "False"},
                func: function (t, e) {
                    return !1
                },
                isPrimitive: !0,
                syntax: {js: [], py: ["False"]}
            },
            press_some_key: {
                color: "#3BBD70",
                skeleton: "basic_event",
                statements: [],
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_keyboard.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }, {
                    type: "Dropdown",
                    options: [["q", "81"], ["w", "87"], ["e", "69"], ["r", "82"], ["a", "65"], ["s", "83"], ["d", "68"], ["위쪽 화살표", "38"], ["아래쪽 화살표", "40"], ["왼쪽 화살표", "37"], ["오른쪽 화살표", "39"], ["엔터", "13"], ["스페이스", "32"]],
                    value: "81",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/start_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null]},
                paramsKeyMap: {VALUE: 1},
                func: function (t, e) {
                    return e.callReturn()
                },
                syntax: {js: [], py: [""]}
            },
            when_some_key_click: {
                color: "#3BBD70",
                skeleton: "basic_event",
                statements: [],
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_keyboard.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    return e.callReturn()
                },
                event: "keyPress",
                syntax: {js: [], py: ["Entry.on_key_press_down(%1)"]}
            },
            text: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "TextInput", value: 10}],
                events: {},
                def: {params: [], type: "text"},
                paramsKeyMap: {NAME: 0},
                func: function (t, e) {
                    return e.getField("NAME", e)
                },
                isPrimitive: !0,
                syntax: {
                    js: ["Scope", "%1"],
                    py: [{
                        syntax: "%1",
                        keyOption: "text",
                        textParams: [{type: "TextInput", converter: Entry.block.converters.returnStringOrNumberByValue}]
                    }]
                }
            },
            options_for_list: {
                color: "#E457DC",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["첫번째", "FIRST"], ["마지막", "LAST"], ["무작위", "RANDOM"]],
                    value: "FIRST",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OPERATOR: 0},
                func: function (t, e) {
                    return e.getField("OPERATOR", e)
                },
                syntax: {js: [], py: [""]}
            },
            run: {skeleton: "basic", color: "#3BBD70", contents: ["this is", "basic block"]},
            mutant: {skeleton: "basic", event: "start", color: "#3BBD70", params: [], changeEvent: {_listeners: []}},
            jr_start: {
                skeleton: "pebble_event",
                event: "start",
                color: "#3BBD70",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_play_image.png",
                    highlightColor: "#3BBD70",
                    position: {x: 0, y: 0},
                    size: 22
                }],
                func: function () {
                    var t = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var e in t) this._unit = t[e];
                    Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT)
                }
            },
            jr_repeat: {
                skeleton: "pebble_loop",
                color: "#127CDB",
                params: [{type: "Text", text: ""}, {
                    type: "Dropdown",
                    options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
                    value: 3,
                    fontSize: 14,
                    roundValue: 3
                }],
                statements: [{accept: "pebble_basic"}],
                func: function () {
                    if (void 0 === this.repeatCount) return this.repeatCount = this.block.params[1], Entry.STATIC.BREAK;
                    if (this.repeatCount > 0) {
                        this.repeatCount--;
                        var t = this.block.statements[0];
                        if (0 === t.getBlocks().length) return;
                        return this.executor.stepInto(t), Entry.STATIC.BREAK
                    }
                    delete this.repeatCount
                }
            },
            jr_item: {
                skeleton: "pebble_basic",
                color: "#F46C6C",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_item_image.png",
                    highlightColor: "#FFF",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function () {
                            Ntry.dispatchEvent("getItem"), t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            cparty_jr_item: {
                skeleton: "pebble_basic",
                color: "#8ABC1D",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/cpartyjr/pen.png",
                    highlightColor: "#FFF",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.GET_ITEM, function () {
                            Ntry.dispatchEvent("getItem"), t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            jr_north: {
                skeleton: "pebble_basic",
                color: "#A751E3",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_up_image.png",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t, e = Ntry.STATIC, n = this, r = function () {
                            window.setTimeout(function () {
                                Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                                    n.isAction = !1
                                })
                            }, 3)
                        };
                        switch (Ntry.unitComp.direction) {
                            case Ntry.STATIC.EAST:
                                t = e.TURN_LEFT;
                                break;
                            case Ntry.STATIC.SOUTH:
                                t = e.HALF_ROTATION;
                                break;
                            case Ntry.STATIC.WEST:
                                t = e.TURN_RIGHT;
                                break;
                            default:
                                r()
                        }
                        return t && Ntry.dispatchEvent("unitAction", t, r), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            jr_east: {
                skeleton: "pebble_basic",
                color: "#A751E3",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_right_image.png",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    var t = Ntry.STATIC;
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var e, n = this, r = function () {
                            window.setTimeout(function () {
                                Ntry.dispatchEvent("unitAction", t.WALK, function () {
                                    n.isAction = !1
                                })
                            }, 3)
                        };
                        switch (Ntry.unitComp.direction) {
                            case t.SOUTH:
                                e = t.TURN_LEFT;
                                break;
                            case t.WEST:
                                e = t.HALF_ROTATION;
                                break;
                            case t.NORTH:
                                e = t.TURN_RIGHT;
                                break;
                            default:
                                r()
                        }
                        return e && Ntry.dispatchEvent("unitAction", e, r), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            jr_south: {
                skeleton: "pebble_basic",
                color: "#A751E3",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_down_image.png",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t, e = Ntry.STATIC, n = this, r = function () {
                            window.setTimeout(function () {
                                Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                                    n.isAction = !1
                                })
                            }, 3)
                        };
                        switch (Ntry.unitComp.direction) {
                            case e.EAST:
                                t = e.TURN_RIGHT;
                                break;
                            case e.NORTH:
                                t = e.HALF_ROTATION;
                                break;
                            case e.WEST:
                                t = e.TURN_LEFT;
                                break;
                            default:
                                r()
                        }
                        return t && Ntry.dispatchEvent("unitAction", t, r), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            jr_west: {
                skeleton: "pebble_basic",
                color: "#A751E3",
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/ntry/bitmap/jr/block_left_image.png",
                    position: {x: 83, y: 0},
                    size: 22
                }],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t, e = Ntry.STATIC, n = this, r = function () {
                            window.setTimeout(function () {
                                Ntry.dispatchEvent("unitAction", e.WALK, function () {
                                    n.isAction = !1
                                })
                            }, 3)
                        };
                        switch (Ntry.unitComp.direction) {
                            case e.SOUTH:
                                t = e.TURN_RIGHT;
                                break;
                            case e.EAST:
                                t = e.HALF_ROTATION;
                                break;
                            case e.NORTH:
                                t = e.TURN_LEFT;
                                break;
                            default:
                                r()
                        }
                        return t && Ntry.dispatchEvent("unitAction", t, r), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            jr_start_basic: {
                skeleton: "basic_event",
                event: "start",
                color: "#3BBD70",
                params: [{
                    type: "Indicator",
                    boxMultiplier: 2,
                    img: "../../../img/assets/block_icon/start_icon_play.png",
                    highlightColor: "#3BBD70",
                    size: 17,
                    position: {x: 0, y: -2}
                }, {text: "시작하기를 클릭했을때", type: "Text"}],
                func: function () {
                    var t = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var e in t) this._unit = t[e];
                    Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT)
                }
            },
            jr_go_straight: {
                skeleton: "basic",
                color: "#A751E3",
                params: [{type: "Image", img: "../../../img/assets/ntry/bitmap/jr/cparty_go_straight.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                },
                syntax: ["Scope", "move"]
            },
            jr_turn_left: {
                skeleton: "basic",
                color: "#A751E3",
                params: [{type: "Image", img: "../../../img/assets/ntry/bitmap/jr/cparty_rotate_l.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                },
                syntax: ["Scope", "left"]
            },
            jr_turn_right: {
                skeleton: "basic",
                color: "#A751E3",
                params: [{type: "Image", img: "../../../img/assets/ntry/bitmap/jr/cparty_rotate_r.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                },
                syntax: ["Scope", "right"]
            },
            jr_go_slow: {
                skeleton: "basic",
                color: "#f46c6c",
                params: [{type: "Image", img: "../../../img/assets/ntry/bitmap/jr/cparty_go_slow.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.GO_SLOW, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                },
                syntax: ["Scope", "move_slowly"]
            },
            jr_repeat_until_dest: {
                skeleton: "basic_loop",
                color: "#498DEB",
                syntax: ["BasicWhile", "true"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/ntry/bitmap/jr/jr_goal_image.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    var t = this.block.statements[0];
                    if (0 !== t.getBlocks().length) return this.executor.stepInto(t), Entry.STATIC.BREAK
                }
            },
            jr_if_construction: {
                skeleton: "basic_loop",
                color: "#498DEB",
                syntax: ["BasicIf", "front == 'wall'"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/ntry/bitmap/jr/jr_construction_image.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_REPAIR});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            jr_if_speed: {
                skeleton: "basic_loop",
                color: "#498DEB",
                syntax: ["BasicIf", "front == 'hump'"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/ntry/bitmap/jr/jr_speed_image.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_SLOW});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_start: {
                skeleton: "basic_event",
                mode: "maze",
                event: "start",
                color: "#3BBD70",
                syntax: ["Program"],
                params: [{
                    type: "Indicator",
                    boxMultiplier: 2,
                    img: "../../../img/assets/block_icon/start_icon_play.png",
                    highlightColor: "#3BBD70",
                    size: 17,
                    position: {x: 0, y: -2}
                }],
                func: function () {
                    var t = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var e in t) this._unit = t[e];
                    Ntry.unitComp = Ntry.entityManager.getComponent(this._unit.id, Ntry.STATIC.UNIT), Ntry.unit = this._unit
                }
            },
            maze_step_jump: {
                skeleton: "basic",
                mode: "maze",
                color: "#FF6E4B",
                params: [{type: "Image", img: "/img/assets/week/blocks/jump.png", size: 24}],
                syntax: ["Scope", "jump"],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_jump2: {
                parent: "maze_step_jump", func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t, e = this, n = function () {
                            e.isAction = !1
                        }, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (e, n) {
                            t = e
                        });
                        var o = Ntry.entityManager.getComponent(t, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(t, Ntry.STATIC.GRID));
                        return a.x, a.y, Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_IRON], 2) ? (Ntry.dispatchEvent("unitAction", Ntry.STATIC.FAIL_JUMP, n), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.CONTACT_IRON)) : (Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, n), Entry.STATIC.BREAK)
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_jump_pinkbean: {
                parent: "maze_step_jump", func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this, e = function () {
                                t.isAction = !1
                            }, n = Ntry.getUnit().components || {}, r = n[Ntry.STATIC.UNIT] || {},
                            o = $.extend({}, n[Ntry.STATIC.GRID]);
                        return o.x, o.y, Ntry.checkCollisionTile(o, r.direction, [Ntry.STATIC.OBSTACLE_MUSHROOM], 1) ? (Ntry.dispatchEvent("unitAction", Ntry.STATIC.FAIL_JUMP, e), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.HIT_UNIT_BY_MUSHROOM)) : (Ntry.dispatchEvent("unitAction", Ntry.STATIC.JUMP, e), Entry.STATIC.BREAK)
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_for: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIteration"],
                params: [{
                    type: "Dropdown",
                    key: "REPEAT",
                    options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
                    value: 1
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (void 0 === this.repeatCount) return this.repeatCount = this.block.params[0], Entry.STATIC.BREAK;
                    if (this.repeatCount > 0) {
                        this.repeatCount--;
                        var t = this.block.statements[0];
                        if (0 === t.getBlocks().length) return;
                        return this.executor.stepInto(t), Entry.STATIC.BREAK
                    }
                    delete this.repeatCount
                }
            },
            test: {
                skeleton: "basic_boolean_field",
                mode: "maze",
                color: "#127CDB",
                params: [{type: "Angle", value: "90"}, {
                    type: "Dropdown",
                    options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
                    value: 1
                }]
            },
            maze_repeat_until_1: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicWhile", "true"],
                params: [{
                    type: "Image",
                    img: "/img/assets/ntry/block_inner/repeat_goal_1.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    var t = this.block.statements[0];
                    if (0 !== t.getBlocks().length) return this.executor.stepInto(t), Entry.STATIC.BREAK
                }
            },
            maze_repeat_until_2: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicWhile", "true"],
                params: [{
                    type: "Image",
                    img: "/img/assets/ntry/block_inner/repeat_goal_1.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    var t = this.block.statements[0];
                    if (0 !== t.getBlocks().length) return this.executor.stepInto(t), Entry.STATIC.BREAK
                }
            },
            maze_step_if_1: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == 'wall'"],
                params: [{type: "Image", img: "/img/assets/ntry/block_inner/if_target_1.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: a.x, y: a.y}),
                            i = this.block.statements[0];
                        if (0 === s.length) return this.executor.stepInto(i), Entry.STATIC.BREAK;
                        var l = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.WALL});
                        return this.isContinue = !0, 0 === l.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_2: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == 'bee'"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/ntry/bitmap/maze2/obstacle_01.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/if.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_BEE});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_call_function: {
                skeleton: "basic",
                mode: "maze",
                color: "#B57242",
                syntax: ["Scope", "promise"],
                params: [{type: "Image", img: "/img/assets/week/blocks/function.png", size: 24}],
                func: function () {
                    if (!this.funcExecutor) {
                        var t = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.CODE);
                        for (var e in t) {
                            var n = t[e].components[Ntry.STATIC.CODE].code;
                            this.funcExecutor = new Entry.Executor(n.getEventMap("define")[0])
                        }
                    }
                    return this.funcExecutor.execute(), null === this.funcExecutor.scope.block ? void 0 : Entry.STATIC.BREAK
                }
            },
            maze_define_function: {
                skeleton: "basic_define",
                mode: "maze",
                color: "#B57242",
                event: "define",
                syntax: ["BasicFunction"],
                params: [{type: "Image", img: "/img/assets/week/blocks/function.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function (t) {
                    if (!this.executed) {
                        var e = this.block.statements[0];
                        if (0 !== e.getBlocks().length) return this.executor.stepInto(e), this.executed = !0, Entry.STATIC.BREAK
                    }
                }
            },
            maze_step_if_3: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == banana"],
                params: [{type: "Image", img: "/img/assets/ntry/block_inner/if_target_3.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_BANANA});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_4: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == wall"],
                params: [{type: "Image", img: "/img/assets/ntry/block_inner/if_target_2.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.WALL});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_move_step: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "move"],
                params: [{type: "Image", img: "/img/assets/week/blocks/moveStep.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_rotate_left: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "left"],
                params: [{type: "Image", img: "/img/assets/week/blocks/turnL.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_rotate_right: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/week/blocks/turnR.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_step_forward: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "move"],
                params: [{type: "Image", img: "/img/assets/week/blocks/moveStep.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.WALK, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_turn_right: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "turn_right"],
                params: [{type: "Indicator", img: "../../../img/assets/week/blocks/right_ic.png", size: 12}],
                func: function () {
                    return this.isDead ? Entry.STATIC.BREAK : this.executor.register.isTurned ? (Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                    }), this.isDead = !0, Entry.STATIC.BREAK) : (Ntry.unit.components[Ntry.STATIC.UNIT].direction = Ntry.STATIC.EAST, void(this.executor.register.isTurned = !0))
                }
            },
            maze_turn_left: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "turn_left"],
                params: [{type: "Indicator", img: "../../../img/assets/week/blocks/left_ic.png", size: 12}],
                func: function () {
                    return this.isDead ? Entry.STATIC.BREAK : this.executor.register.isTurned ? (Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                    }), this.isDead = !0, Entry.STATIC.BREAK) : (Ntry.unit.components[Ntry.STATIC.UNIT].direction = Ntry.STATIC.WEST, void(this.executor.register.isTurned = !0))
                }
            },
            maze_step_if_left_monster: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "left == monster"],
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/week/blocks/if.png",
                    size: 12
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (!this.isContinue) {
                        Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.UNIT);
                        var n = Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID),
                            r = {x: n.x - 1, y: n.y},
                            o = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: r.x, y: r.y}).filter(function (t) {
                                return t.components[Ntry.STATIC.ENEMY]
                            });
                        return this.isContinue = !0, 0 === o.length ? e.getStatement("STACK_ELSE", e) : e.getStatement("STACK_IF", e)
                    }
                }
            },
            maze_step_if_right_monster: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "right == monster"],
                params: [{
                    type: "Indicator",
                    img: "../../../img/assets/week/blocks/if.png",
                    size: 12
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (!this.isContinue) {
                        Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.UNIT);
                        var n = Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID),
                            r = {x: n.x + 1, y: n.y},
                            o = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: r.x, y: r.y}).filter(function (t) {
                                return t.components[Ntry.STATIC.ENEMY]
                            });
                        return this.isContinue = !0, 0 === o.length ? e.getStatement("STACK_ELSE", e) : e.getStatement("STACK_IF", e)
                    }
                }
            },
            maze_step_if_yeti: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == yeti"],
                params: [{type: "Image", img: "/img/assets/week/blocks/yeti.png", size: 24}, {
                    type: "Indicator",
                    img: "../../../img/assets/week/blocks/if.png",
                    size: 12
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (!this.isContinue) {
                        var n = Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.UNIT),
                            r = Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID), o = {x: r.x, y: r.y};
                        Ntry.addVectorByDirection(o, n.direction, 1);
                        var a = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: o.x,
                            y: o.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_YETI});
                        return this.isContinue = !0, 0 === a.length ? e.getStatement("STACK_ELSE", e) : e.getStatement("STACK_IF", e)
                    }
                }
            },
            maze_repeat_until_beat_monster: {
                parent: "repeat_inf",
                params: [{type: "Indicator", img: "../../../img/assets/week/blocks/for.png", size: 12}]
            },
            maze_ladder_climb: {
                skeleton: "basic",
                mode: "maze",
                color: "#71C11B",
                emphasizedColor: "#9BDB40",
                syntax: ["Scope", "climb"],
                params: [{type: "Image", img: "/img/assets/week/blocks/ladder.png", size: 24}],
                func: function (t, e) {
                    if (!e.isContinue) {
                        e.isContinue = !0, e.isAction = !0;
                        var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, e) {
                            n = t
                        });
                        var o = Ntry.entityManager.getComponent(n, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(n, Ntry.STATIC.GRID));
                        e.direction = o.direction;
                        var s = function () {
                            o.direction = e.direction, e.isAction = !1
                        }, i = !1;
                        return a.y > 3 ? (o.direction = Ntry.STATIC.NORTH, i = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.LADDER], 2)) : (o.direction = Ntry.STATIC.SOUTH, Ntry.getTileByGrid(a).tileType === Ntry.STATIC.LADDER && (i = !0)), i ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.CLIMB, s) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.NOT_FOUND_LADDER, s), Entry.STATIC.BREAK
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_lupin: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                syntax: ["Scope", "yoyo"],
                params: [{type: "Image", img: "/img/assets/week/blocks/lupin.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/pinkbean_ic.png",
                    size: 24
                }],
                func: function (t, e) {
                    if (!e.isContinue) {
                        var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, e) {
                            n = t
                        });
                        var o = Ntry.entityManager.getComponent(n, Ntry.STATIC.UNIT);
                        e.isContinue = !0, e.isAction = !0;
                        for (var a = !1, s = $.extend({}, Ntry.entityManager.getComponent(n, Ntry.STATIC.GRID)), i = 0; i < 2; i++) {
                            Ntry.addVectorByDirection(s, o.direction, 1);
                            var l = Ntry.entityManager.find({
                                type: Ntry.STATIC.GRID,
                                x: s.x,
                                y: s.y
                            }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_MUSHROOM});
                            l && l.length && (a = !0)
                        }
                        if (a) return Ntry.dispatchEvent("unitAction", Ntry.STATIC.WRONG_ATTACK_OBSTACLE, function () {
                            e.isAction = !1
                        }), Entry.STATIC.BREAK;
                        var c = $.extend({}, Ntry.entityManager.getComponent(n, Ntry.STATIC.GRID));
                        return Ntry.checkCollisionTile(c, o.direction, [Ntry.STATIC.OBSTACLE_LUPIN], 2) ? (Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK_LUPIN, function () {
                            Ntry.dispatchEvent("playSound", "dieLupin"), Ntry.dispatchEvent("destroyObstacle", 2, function (t) {
                                e.isAction = !1
                            })
                        }), Entry.STATIC.BREAK) : (Ntry.dispatchEvent("unitAction", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT, function () {
                            e.isAction = !1
                        }), Entry.STATIC.BREAK)
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_both_side: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                syntax: ["Scope", "both_side"],
                params: [{type: "Image", img: "/img/assets/week/blocks/pinkbean_ic.png", size: 24}],
                func: function (t, e) {
                    if (!e.isContinue) {
                        Ntry.dispatchEvent("stopEnemyWalk"), this.executor.register.isTurned = !1, e.isContinue = !0, e.isAction = !0;
                        var n = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID)),
                            r = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID));
                        Ntry.addVectorByDirection(n, Ntry.unitComp.direction, 1), Ntry.addVectorByDirection(r, Ntry.unitComp.direction, -1);
                        var o = !!Ntry.entityManager.find(n).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }).length, a = !!Ntry.entityManager.find(r).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }).length;
                        return o && a ? (Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                        }), Ntry.dispatchEvent("destroyObstacle", -1, function (t) {
                        }), Ntry.dispatchEvent("unitAction", Ntry.STATIC.BOTH_SIDE, function () {
                            Ntry.dispatchEvent("startEnemyWalk", !0, function () {
                                e.isAction = !1
                            })
                        }), Entry.STATIC.BREAK) : (Ntry.dispatchEvent("unitAction", Ntry.STATIC.BOTH_SIDE_FAIL, function () {
                            e.isAction = !1
                        }), Entry.STATIC.BREAK)
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_pepe: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                params: [{type: "Image", img: "/img/assets/week/blocks/pepe.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/pinkbean_ic.png",
                    size: 24
                }],
                func: function (t, e) {
                    if (!e.isContinue) {
                        Ntry.dispatchEvent("stopEnemyWalk"), this.executor.register.isTurned = !1, e.isContinue = !0, e.isAction = !0;
                        var n = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID)),
                            r = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID));
                        Ntry.addVectorByDirection(n, Ntry.unitComp.direction, 1);
                        var o = Ntry.entityManager.find(n, {
                            type: Ntry.STATIC.TILE,
                            tileType: Ntry.STATIC.OBSTACLE_PEPE
                        });
                        Ntry.addVectorByDirection(r, Ntry.unitComp.direction, -1);
                        var a = Ntry.entityManager.find(r).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }), s = !!Ntry.entityManager.find(n).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }).length, i = !!o.length, l = !!a.length;
                        if (i && !l) {
                            var c = function () {
                                Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                                }), Ntry.dispatchEvent("startEnemyWalk", !0, function () {
                                    e.isAction = !1
                                })
                            };
                            Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE, c)
                        } else i && l ? (c = function () {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                            }), Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                            })
                        }, Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE, c)) : l ? s ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE_FAIL, function () {
                            e.isAction = !1
                        }) : Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                        }) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE_FAIL, function () {
                            e.isAction = !1
                        });
                        return Entry.STATIC.BREAK
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_yeti: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                params: [{type: "Image", img: "/img/assets/week/blocks/yeti.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/pinkbean_ic.png",
                    size: 24
                }],
                func: function (t, e) {
                    if (!e.isContinue) {
                        Ntry.dispatchEvent("stopEnemyWalk"), this.executor.register.isTurned = !1, e.isContinue = !0, e.isAction = !0;
                        var n = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID)),
                            r = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID));
                        Ntry.addVectorByDirection(n, Ntry.unitComp.direction, 1);
                        var o = Ntry.entityManager.find(n, {
                            type: Ntry.STATIC.TILE,
                            tileType: Ntry.STATIC.OBSTACLE_YETI
                        });
                        Ntry.addVectorByDirection(r, Ntry.unitComp.direction, -1);
                        var a = Ntry.entityManager.find(r).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }), s = !!Ntry.entityManager.find(n).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }).length, i = !!o.length, l = !!a.length;
                        if (i && !l) {
                            var c = function () {
                                Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                                }), Ntry.dispatchEvent("startEnemyWalk", !0, function () {
                                    e.isAction = !1
                                })
                            };
                            Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE, c)
                        } else i && l ? (c = function () {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                            }), Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                            })
                        }, Ntry.dispatchEvent("unitAction", Ntry.STATIC.PEPE, c)) : l ? s ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.YETI_FAIL, function () {
                            e.isAction = !1
                        }) : Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                        }) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.YETI_FAIL, function () {
                            e.isAction = !1
                        });
                        return Entry.STATIC.BREAK
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_mushroom: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                syntax: ["Scope", "both_side"],
                params: [{type: "Image", img: "/img/assets/week/blocks/mushroom.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/pinkbean_ic.png",
                    size: 24
                }],
                func: function (t, e) {
                    if (!e.isContinue) {
                        var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, e) {
                            n = t
                        });
                        var o = Ntry.entityManager.getComponent(n, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(n, Ntry.STATIC.GRID)),
                            s = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_MUSHROOM], 1);
                        return e.isContinue = !0, e.isAction = !0, s ? (Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK_MUSHROOM, function () {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                                e.isAction = !1
                            })
                        }), Entry.STATIC.BREAK) : (Ntry.dispatchEvent("unitAction", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT, function () {
                            e.isAction = !1
                        }), Entry.STATIC.BREAK)
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_attack_peti: {
                skeleton: "basic",
                mode: "maze",
                color: "#ef6d6a",
                emphasizedColor: "#f29999",
                syntax: ["Scope", "both_side"],
                params: [{type: "Image", img: "/img/assets/week/blocks/bigYeti.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/pinkbean_ic.png",
                    size: 24
                }],
                func: function (t, e) {
                    if (!e.isContinue) {
                        Ntry.dispatchEvent("stopEnemyWalk"), this.executor.register.isTurned = !1, e.isContinue = !0, e.isAction = !0;
                        var n = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID)),
                            r = $.extend({type: Ntry.STATIC.GRID}, Ntry.entityManager.getComponent(Ntry.unit.id, Ntry.STATIC.GRID));
                        Ntry.addVectorByDirection(n, Ntry.unitComp.direction, 1);
                        var o = Ntry.entityManager.find(n, {
                            type: Ntry.STATIC.TILE,
                            tileType: Ntry.STATIC.OBSTACLE_PETI
                        });
                        Ntry.addVectorByDirection(r, Ntry.unitComp.direction, -1);
                        var a = Ntry.entityManager.find(r).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }), s = !!Ntry.entityManager.find(n).filter(function (t) {
                            return t.components[Ntry.STATIC.ENEMY]
                        }).length, i = !!o.length, l = !!a.length;
                        if (i && !l) {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                            });
                            var c = function () {
                                Ntry.dispatchEvent("startEnemyWalk", !0, function () {
                                    e.isAction = !1
                                })
                            };
                            Ntry.dispatchEvent("unitAction", Ntry.STATIC.PETI, c)
                        } else i && l ? (Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                        }), c = function () {
                            Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                            })
                        }, Ntry.dispatchEvent("unitAction", Ntry.STATIC.PETI, c)) : l ? s ? Ntry.dispatchEvent("unitAction", Ntry.STATIC.PETI_FAIL, function () {
                            e.isAction = !1
                        }) : Ntry.dispatchEvent("startEnemyWalk", !1, function () {
                        }) : Ntry.dispatchEvent("unitAction", Ntry.STATIC.PETI_FAIL, function () {
                            e.isAction = !1
                        });
                        return Entry.STATIC.BREAK
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_eat_item: {
                skeleton: "basic",
                mode: "maze",
                color: "#b2521d",
                emphasizedColor: "#9BDB40",
                syntax: ["Scope", "item"],
                params: [{type: "Image", img: "/img/assets/week/blocks/eat.png", size: 24}],
                func: function (t, e) {
                    if (!e.isContinue) {
                        e.isContinue = !0, e.isAction = !0;
                        var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, e) {
                            n = t
                        });
                        var o = function () {
                                e.isAction = !1
                            },
                            a = (Ntry.entityManager.getComponent(n, Ntry.STATIC.UNIT), $.extend({}, Ntry.entityManager.getComponent(n, Ntry.STATIC.GRID))),
                            s = Ntry.checkTileByGrid(a, Ntry.STATIC.MEAT);
                        return !s || s.components[Ntry.STATIC.ITEM].isEaten ? (Ntry.dispatchEvent("unitAction", Ntry.STATIC.NOT_FOUND_MEAT, o), Entry.STATIC.BREAK) : (Ntry.dispatchEvent("unlockItem"), Ntry.dispatchEvent("unitAction", Ntry.STATIC.EAT, o), Entry.STATIC.BREAK)
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isContinue
                }
            },
            maze_rotate_left: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "left"],
                params: [{type: "Image", img: "/img/assets/week/blocks/turnL.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_LEFT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_rotate_right: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/week/blocks/turnR.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.TURN_RIGHT, function () {
                            t.isAction = !1
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_moon_kick: {
                skeleton: "basic",
                mode: "maze",
                color: "#2EB0E8",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/moon_icon.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(e, function (e, n) {
                            t = e
                        });
                        var n = Ntry.entityManager.getComponent(t, Ntry.STATIC.UNIT),
                            r = $.extend({}, Ntry.entityManager.getComponent(t, Ntry.STATIC.GRID));
                        if (!Ntry.checkCollisionTile(r, n.direction, [Ntry.STATIC.OBSTACLE_BRICK], 1)) return Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
                        this.isContinue = !0, this.isAction = !0;
                        var o = this;
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                                switch (t) {
                                    case Ntry.STATIC.OBSTACLE_DESTROY_SUCCESS:
                                        o.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_cony_flower_throw: {
                skeleton: "basic",
                mode: "maze",
                color: "#D8617D",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/cony_icon.png", size: 24}],
                func: function () {
                    var t = this;
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var e, n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, r) {
                            e = t, n = r.components
                        });
                        var o = Ntry.entityManager.getComponent(e, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(e, Ntry.STATIC.GRID)),
                            s = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_SPIDER]), i = 550;
                        if (o.direction === Ntry.STATIC.NORTH && (i = 450), !s) return Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
                        var l = Ntry.entityManager.addEntity();
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            $.each(n, function (t, e) {
                                if (+t === Ntry.STATIC.SPRITE) {
                                    var n = $.extend({}, e);
                                    n.zIndex = i, Ntry.entityManager.addComponent(l.id, n)
                                } else +t != Ntry.STATIC.UNIT ? Ntry.entityManager.addComponent(l.id, e) : Ntry.entityManager.addComponent(l.id, {
                                    type: Ntry.STATIC.PARTICLE,
                                    direction: e.direction,
                                    collisionList: [Ntry.STATIC.OBSTACLE_SPIDER]
                                })
                            }), Ntry.dispatchEvent("particleAction", {
                                entityId: l.id,
                                actionType: Ntry.STATIC.FLOWER_ATTACK,
                                callback: function () {
                                    Ntry.entityManager.removeEntity(l.id), t.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_cony_flower_throw2: {
                skeleton: "basic",
                mode: "maze",
                color: "#D8617D",
                template: Lang.template.maze_cony_flower_throw,
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/cony_icon.png", size: 24}],
                func: function () {
                    var t = this;
                    if (!this.isContinue) {
                        var e, n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, r) {
                            e = t, n = r.components
                        });
                        var o = Ntry.entityManager.getComponent(e, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(e, Ntry.STATIC.GRID)),
                            s = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_ENERMY5, Ntry.STATIC.OBSTACLE_ENERMY4], 2, !0),
                            i = 550;
                        if (o.direction === Ntry.STATIC.NORTH && (i = 450), !s) return Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
                        this.isContinue = !0, this.isAction = !0;
                        var l = Ntry.entityManager.addEntity();
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            $.each(n, function (t, e) {
                                if (+t === Ntry.STATIC.SPRITE) {
                                    var n = $.extend({}, e);
                                    n.zIndex = i, Ntry.entityManager.addComponent(l.id, n)
                                } else +t != Ntry.STATIC.UNIT ? Ntry.entityManager.addComponent(l.id, e) : Ntry.entityManager.addComponent(l.id, {
                                    type: Ntry.STATIC.PARTICLE,
                                    direction: e.direction,
                                    collisionList: [Ntry.STATIC.OBSTACLE_ENERMY5, , Ntry.STATIC.OBSTACLE_ENERMY4],
                                    penetrationList: [Ntry.STATIC.WALL]
                                })
                            }), Ntry.dispatchEvent("particleAction", {
                                entityId: l.id,
                                actionType: Ntry.STATIC.HEART_ATTACK,
                                callback: function () {
                                    Ntry.entityManager.removeEntity(l.id), t.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_james_heart: {
                skeleton: "basic",
                mode: "maze",
                color: "#D39D18",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/james_icon.png", size: 24}],
                func: function () {
                    var t = this;
                    if (!this.isContinue) {
                        var e, n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, r) {
                            e = t, n = r.components
                        });
                        var o = Ntry.entityManager.getComponent(e, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(e, Ntry.STATIC.GRID)),
                            s = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_ENERMY1, Ntry.STATIC.OBSTACLE_ENERMY2, Ntry.STATIC.OBSTACLE_ENERMY3, Ntry.STATIC.OBSTACLE_ENERMY5]),
                            i = 550;
                        if (o.direction === Ntry.STATIC.NORTH && (i = 450), !s) return Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
                        this.isContinue = !0, this.isAction = !0;
                        var l = Ntry.entityManager.addEntity();
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            $.each(n, function (t, e) {
                                if (+t === Ntry.STATIC.SPRITE) {
                                    var n = $.extend({}, e);
                                    n.zIndex = i, Ntry.entityManager.addComponent(l.id, n)
                                } else +t != Ntry.STATIC.UNIT ? Ntry.entityManager.addComponent(l.id, e) : Ntry.entityManager.addComponent(l.id, {
                                    type: Ntry.STATIC.PARTICLE,
                                    direction: e.direction,
                                    collisionList: [Ntry.STATIC.OBSTACLE_ENERMY1, Ntry.STATIC.OBSTACLE_ENERMY2, Ntry.STATIC.OBSTACLE_ENERMY3, Ntry.STATIC.OBSTACLE_ENERMY5]
                                })
                            }), Ntry.dispatchEvent("particleAction", {
                                entityId: l.id,
                                actionType: Ntry.STATIC.HEART_ATTACK,
                                callback: function () {
                                    Ntry.entityManager.removeEntity(l.id), t.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_james_heart2: {
                skeleton: "basic",
                mode: "maze",
                color: "#D39D18",
                template: Lang.template.maze_james_heart,
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/james_icon.png", size: 24}],
                func: function () {
                    var t = this;
                    if (!this.isContinue) {
                        var e, n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(r, function (t, r) {
                            e = t, n = r.components
                        });
                        var o = Ntry.entityManager.getComponent(e, Ntry.STATIC.UNIT),
                            a = $.extend({}, Ntry.entityManager.getComponent(e, Ntry.STATIC.GRID)),
                            s = Ntry.checkCollisionTile(a, o.direction, [Ntry.STATIC.OBSTACLE_ENERMY3, Ntry.STATIC.OBSTACLE_ENERMY4], 2),
                            i = 550;
                        if (o.direction === Ntry.STATIC.NORTH && (i = 450), !s) return Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT);
                        this.isContinue = !0, this.isAction = !0;
                        var l = Ntry.entityManager.addEntity();
                        return Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            $.each(n, function (t, e) {
                                if (+t === Ntry.STATIC.SPRITE) {
                                    var n = $.extend({}, e);
                                    n.zIndex = i, Ntry.entityManager.addComponent(l.id, n)
                                } else +t != Ntry.STATIC.UNIT ? Ntry.entityManager.addComponent(l.id, e) : Ntry.entityManager.addComponent(l.id, {
                                    type: Ntry.STATIC.PARTICLE,
                                    direction: e.direction,
                                    collisionList: [Ntry.STATIC.OBSTACLE_ENERMY3, Ntry.STATIC.OBSTACLE_ENERMY4, Ntry.STATIC.OBSTACLE_ENERMY_AREA],
                                    penetrationList: [Ntry.STATIC.OBSTACLE_ENERMY_AREA]
                                })
                            }), Ntry.dispatchEvent("particleAction", {
                                entityId: l.id,
                                actionType: Ntry.STATIC.HEART_ATTACK,
                                callback: function () {
                                    Ntry.entityManager.removeEntity(l.id), t.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_iron_switch: {
                skeleton: "basic",
                mode: "maze",
                color: "#748d69",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/iron_icon.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        this.isContinue = !0, this.isAction = !0;
                        var t = this, e = Ntry.configManager.getConfig("gridSize"),
                            n = Ntry.configManager.getConfig("tileSize").width,
                            r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.OBSTACLE);
                        for (var o in r) if (Ntry.entityManager.getComponent(o, Ntry.STATIC.OBSTACLE).tileType === Ntry.STATIC.OBSTACLE_IRON) {
                            var a = Ntry.entityManager.getComponent(o, Ntry.STATIC.GRID);
                            Ntry.entityManager.getComponent(o, Ntry.STATIC.POSITION), a.x, a.y, a.y = 1 === a.y ? 3 : 1;
                            var s = 2 * n;
                            1 === a.y && (s = -s);
                            var i = {x: 0, y: .5 * s}, l = {x: 0, y: s}, c = {minY: 0, maxY: e.height * n};
                            s > 0 ? c.maxY = a.y * n + n / 2 : c.minY = a.y * n + n / 2, function (e, n, r, o, a) {
                                Ntry.entityManager.getComponent(e, Ntry.STATIC.ANIMATE) ? (t.isAction = !1, Ntry.entityManager.addComponent(e, {
                                    type: Ntry.STATIC.ANIMATE,
                                    animateType: Ntry.STATIC.TRANSITION,
                                    duration: 20,
                                    option: {deltaPos: r, targetPos: o},
                                    afterAnimate: function () {
                                        var t = Ntry.getUtilGrid();
                                        a.x == t.x && a.y == t.y && Ntry.dispatchEvent("unitAction", Ntry.STATIC.CONTACT_IRON2)
                                    }
                                })) : Ntry.entityManager.addComponent(e, {
                                    type: Ntry.STATIC.ANIMATE,
                                    animateType: Ntry.STATIC.TRANSITION,
                                    duration: 10,
                                    option: {deltaPos: n},
                                    afterAnimate: function () {
                                        t.isAction = !1, Ntry.entityManager.addComponent(e, {
                                            type: Ntry.STATIC.ANIMATE,
                                            animateType: Ntry.STATIC.TRANSITION,
                                            duration: 10,
                                            option: {deltaPos: n, targetPos: o},
                                            afterAnimate: function () {
                                                var t = Ntry.getUtilGrid();
                                                a.x == t.x && a.y == t.y && (console.log("충돌"), Ntry.dispatchEvent("unitAction", Ntry.STATIC.CONTACT_IRON2))
                                            }
                                        })
                                    }
                                })
                            }(o, i, l, c, a)
                        }
                        return Entry.STATIC.BREAK
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_brown_punch: {
                skeleton: "basic",
                mode: "maze",
                color: "#6C483A",
                syntax: ["Scope", "right"],
                params: [{type: "Image", img: "/img/assets/maze/sprite/brown_icon.png", size: 24}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = this, n = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        $.each(n, function (e, n) {
                            t = e
                        });
                        var r = Ntry.entityManager.getComponent(t, Ntry.STATIC.UNIT),
                            o = $.extend({}, Ntry.entityManager.getComponent(t, Ntry.STATIC.GRID));
                        return Ntry.checkCollisionTile(o, r.direction, [Ntry.STATIC.OBSTACLE_ICE], 1) ? (this.isContinue = !0, this.isAction = !0, Ntry.dispatchEvent("unitAction", Ntry.STATIC.ATTACK, function () {
                            Ntry.dispatchEvent("destroyObstacle", 1, function (t) {
                                switch (t) {
                                    case Ntry.STATIC.OBSTACLE_DESTROY_SUCCESS:
                                        e.isAction = !1
                                }
                            })
                        }), Entry.STATIC.BREAK) : (Ntry.dispatchEvent("playSound", Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT), void Ntry.dispatchEvent("complete", !1, Ntry.STATIC.NOT_FOUND_DESTORY_OBJECT))
                    }
                    if (this.isAction) return Entry.STATIC.BREAK;
                    delete this.isAction, delete this.isContinue
                }
            },
            maze_repeat_until_3: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicWhile", "true"],
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/tile_goal_01.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    var t = !1, e = this.block.statements[0];
                    if (0 !== e.getBlocks().length) {
                        var n = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var r in n) s = n[r];
                        if (Ntry.entityManager.getComponent(s.id, Ntry.STATIC.UNIT).isStartedUnit) {
                            var o = Ntry.entityManager.getComponent(s.id, Ntry.STATIC.GRID);
                            for (var a in n = Ntry.entityManager.getEntitiesByGrid(o.x, o.y)) {
                                var s = n[a], i = Ntry.entityManager.getComponent(s.id, Ntry.STATIC.TILE),
                                    l = Ntry.entityManager.getComponent(s.id, Ntry.STATIC.ITEM);
                                if (i && l && i.tileType === Ntry.STATIC.GOAL && Ntry.STATIC.GOAL_ITEM_LIST.indexOf(l.itemType) > -1) {
                                    t = !0;
                                    break
                                }
                            }
                        }
                        return t ? void 0 : (this.executor.stepInto(e), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_repeat_until_4: {
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/tile_goal_02.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_5: {
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/tile_goal_03.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_6: {
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-1.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_7: {
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-4.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_8: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-5.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_9: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-6.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_10: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-7.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_11: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-9.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_12: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-10.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_13: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-11.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_14: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/blcok-12.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_15: {
                template: Lang.template.maze_repeat_until_7,
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/maze/bitmap/ws/tile_goal_04.png", size: 18}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }]
            },
            maze_repeat_until_goal: {
                parent: "maze_repeat_until_3",
                params: [{type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}]
            },
            maze_radar_check: {
                skeleton: "basic_boolean_field",
                mode: "maze",
                color: "#AEB8FF",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Menus.maze_distance1, "1"], [Lang.Menus.maze_distance2, "2"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Menus.maze_object_trap, "TRAP"], [Lang.Menus.maze_object_monster, "MONSTER"], [Lang.Menus.maze_object_obstacle1, "OBSTACLE"]],
                    value: "TRAP",
                    fontSize: 11
                }],
                paramsKeyMap: {DISTANCE: 0, TYPE: 1},
                func: function (t, e) {
                    var n, r = e.getNumberField("DISTANCE", e), o = e.getField("TYPE", e),
                        a = Ntry.getRadarEntityIdByDistance(r);
                    if (a) switch (Ntry.entityManager.getComponent(a, Ntry.STATIC.TILE).tileType) {
                        case Ntry.STATIC.OBSTACLE_HOLE:
                            n = "TRAP";
                            break;
                        case Ntry.STATIC.OBSTACLE_ENERMY1:
                        case Ntry.STATIC.OBSTACLE_ENERMY2:
                        case Ntry.STATIC.OBSTACLE_ENERMY3:
                        case Ntry.STATIC.OBSTACLE_ENERMY4:
                        case Ntry.STATIC.OBSTACLE_ENERMY5:
                            n = "MONSTER";
                            break;
                        case Ntry.STATIC.OBSTACLE_IRON:
                            n = "OBSTACLE"
                    } else n = "TRAP";
                    return o === n
                }
            },
            maze_step_if_5: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == bee"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/ntry/bitmap/maze2/obstacle_01.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/if.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_BEE});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_6: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == bee"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/maze/bitmap/stage4/road_4_01.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/if.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.ROAD});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return s.length > 0 ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_7: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == ice"],
                params: [{
                    type: "Image",
                    img: "../../../img/assets/maze/bitmap/stage4/obj_ice_01.png",
                    size: 18
                }, {type: "Image", img: "/img/assets/week/blocks/if.png", size: 24}],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_ICE});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_8: {parent: "_if", class: "", syntax: {js: [], py: []}},
            maze_step_if_mushroom: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == mushroom"],
                params: [{type: "Image", img: "/img/assets/week/blocks/mushroom.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 1);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_MUSHROOM});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_lupin: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == lupin"],
                params: [{type: "Image", img: "/img/assets/week/blocks/lupin.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }],
                statements: [{accept: "basic"}],
                func: function () {
                    if (!this.isContinue) {
                        var t, e = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                        for (var n in e) t = e[n];
                        var r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.UNIT),
                            o = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID), a = {x: o.x, y: o.y};
                        Ntry.addVectorByDirection(a, r.direction, 2);
                        var s = Ntry.entityManager.find({
                            type: Ntry.STATIC.GRID,
                            x: a.x,
                            y: a.y
                        }, {type: Ntry.STATIC.TILE, tileType: Ntry.STATIC.OBSTACLE_LUPIN});
                        this.isContinue = !0;
                        var i = this.block.statements[0];
                        return 0 === s.length ? void 0 : 0 === i.getBlocks().length ? void 0 : (this.executor.stepInto(i), Entry.STATIC.BREAK)
                    }
                }
            },
            maze_step_if_else_road: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                params: [{type: "Image", img: "/img/assets/week/blocks/if.png", size: 24}, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (e.isCondition) return delete e.isCondition, e.callReturn();
                    var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var o in r) n = r[o];
                    var a = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.UNIT),
                        s = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.GRID), i = {x: s.x, y: s.y};
                    Ntry.addVectorByDirection(i, a.direction, 1);
                    var l = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: i.x, y: i.y}, {
                        type: Ntry.STATIC.TILE,
                        tileType: Ntry.STATIC.ROAD
                    });
                    return e.isCondition = !0, l.length ? e.getStatement("STACK_IF", e) : e.getStatement("STACK_ELSE", e)
                }
            },
            maze_step_if_else_mushroom: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                params: [{type: "Image", img: "/img/assets/week/blocks/mushroom.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (e.isCondition) return delete e.isCondition, e.callReturn();
                    var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var o in r) n = r[o];
                    var a = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.UNIT),
                        s = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.GRID), i = {x: s.x, y: s.y};
                    Ntry.addVectorByDirection(i, a.direction, 1);
                    var l = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: i.x, y: i.y}, {
                        type: Ntry.STATIC.TILE,
                        tileType: Ntry.STATIC.OBSTACLE_MUSHROOM
                    });
                    return e.isCondition = !0, l.length ? e.getStatement("STACK_IF", e) : e.getStatement("STACK_ELSE", e)
                }
            },
            maze_step_if_else_lupin: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                params: [{type: "Image", img: "/img/assets/week/blocks/lupin.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (e.isCondition) return delete e.isCondition, e.callReturn();
                    var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var o in r) n = r[o];
                    var a = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.UNIT),
                        s = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.GRID), i = {x: s.x, y: s.y};
                    Ntry.addVectorByDirection(i, a.direction, 2);
                    var l = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: i.x, y: i.y}, {
                        type: Ntry.STATIC.TILE,
                        tileType: Ntry.STATIC.OBSTACLE_LUPIN
                    });
                    return e.isCondition = !0, l.length ? e.getStatement("STACK_IF", e) : e.getStatement("STACK_ELSE", e)
                }
            },
            maze_step_if_else_ladder: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                params: [{type: "Image", img: "/img/assets/week/blocks/ic_ladder.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/if.png",
                    size: 24
                }, {type: "LineBreak"}],
                statements: [{accept: "basic"}, {accept: "basic"}],
                statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                func: function (t, e) {
                    if (e.isCondition) return delete e.isCondition, e.callReturn();
                    var n, r = Ntry.entityManager.getEntitiesByComponent(Ntry.STATIC.UNIT);
                    for (var o in r) n = r[o];
                    var a = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.UNIT),
                        s = Ntry.entityManager.getComponent(n.id, Ntry.STATIC.GRID), i = {x: s.x, y: s.y};
                    i.y > 3 && (i.y = 2), Ntry.addVectorByDirection(i, a.direction, 1);
                    var l = Ntry.entityManager.find({type: Ntry.STATIC.GRID, x: i.x, y: i.y}, {
                        type: Ntry.STATIC.TILE,
                        tileType: Ntry.STATIC.LADDER
                    });
                    return e.isCondition = !0, l.length ? e.getStatement("STACK_IF", e) : e.getStatement("STACK_ELSE", e)
                }
            },
            maze_step_if_else: {parent: "if_else", class: "", syntax: {js: [], py: []}},
            test_wrapper: {
                skeleton: "basic",
                mode: "maze",
                color: "#3BBD70",
                params: [{
                    type: "Block",
                    accept: "basic_boolean_field",
                    value: [{type: "test", params: [30, 50]}]
                }, {
                    type: "Dropdown",
                    options: [[1, 1], [2, 2], [3, 3], [4, 4], [5, 5], [6, 6], [7, 7], [8, 8], [9, 9], [10, 10]],
                    value: 1
                }]
            },
            basic_button: {
                skeleton: "basic_button",
                color: "#eee",
                params: [{type: "Text", text: "basic button", color: "#333", align: "center"}]
            },
            ebs_if: {
                parent: "_if",
                def: {type: "_if", params: [{type: "reach_something", params: [null, "wall"]}]},
                syntax: {js: [], py: []}
            },
            ebs_if2: {
                parent: "_if",
                def: {type: "_if", params: [{type: "reach_something", params: [null, "cwz5"]}]},
                syntax: {js: [], py: []}
            },
            ai_move_right: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "move"],
                params: [{type: "Image", img: "/img/assets/week/blocks/moveStep.png", size: 24}],
                func: function (t, e) {
                    if (!e.isStart) {
                        e.isStart = !0, e.isAction = !0, Ntry.dispatchEvent("gridChange", function () {
                            e.isAction = !1
                        }), Ntry.entityManager.getComponent(t.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.EAST;
                        var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID);
                        return Ntry.entityManager.addComponent(t.id, {
                            type: Ntry.STATIC.ANIMATE,
                            animateType: Ntry.STATIC.ROTATE_TO,
                            animateValue: 0
                        }), n.x++, Entry.STATIC.BREAK
                    }
                    if (e.isAction) return Entry.STATIC.BREAK;
                    delete e.isAction, delete e.isStart
                }
            },
            ai_move_up: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "up"],
                params: [{type: "Image", img: "/img/assets/week/blocks/ai_move_up.png", size: 24}],
                func: function (t, e) {
                    if (e.isStart) return e.isAction ? e : (delete e.isAction, delete e.isStart, e.callReturn());
                    e.isStart = !0, e.isAction = !0, Ntry.dispatchEvent("gridChange", function () {
                        e.isAction = !1
                    }), Ntry.entityManager.getComponent(t.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.NORTH;
                    var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID);
                    return Ntry.entityManager.addComponent(t.id, {
                        type: Ntry.STATIC.ANIMATE,
                        animateType: Ntry.STATIC.ROTATE_TO,
                        animateValue: -45
                    }), n.x++, n.y--, e
                }
            },
            ai_move_down: {
                skeleton: "basic",
                mode: "maze",
                color: "#A751E3",
                syntax: ["Scope", "down"],
                params: [{type: "Image", img: "/img/assets/week/blocks/ai_move_down.png", size: 24}],
                func: function (t, e) {
                    if (e.isStart) return e.isAction ? e : (delete e.isAction, delete e.isStart, e.callReturn());
                    e.isStart = !0, e.isAction = !0, Ntry.dispatchEvent("gridChange", function () {
                        e.isAction = !1
                    }), Ntry.entityManager.getComponent(t.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.SOUTH;
                    var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID);
                    return Ntry.entityManager.addComponent(t.id, {
                        type: Ntry.STATIC.ANIMATE,
                        animateType: Ntry.STATIC.ROTATE_TO,
                        animateValue: 45
                    }), n.x++, n.y++, e
                }
            },
            ai_repeat_until_reach: {
                skeleton: "basic_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicWhile", "true"],
                statements: [{accept: "basic"}],
                params: [{type: "Image", img: "/img/assets/week/blocks/for.png", size: 24}],
                func: function () {
                    var t = this.block.statements[0];
                    if (0 !== t.getBlocks().length) return this.executor.stepInto(t)
                }
            },
            ai_if_else_1: {
                skeleton: "basic_double_loop",
                mode: "maze",
                color: "#498DEB",
                syntax: ["BasicIf", "front == 'stone'"],
                statements: [{accept: "basic"}, {accept: "basic"}],
                params: [{type: "Image", img: "/img/assets/ntry/bitmap/ai/obstacle_1.png", size: 24}, {
                    type: "Image",
                    img: "/img/assets/week/blocks/for.png",
                    size: 24
                }, {type: "LineBreak"}],
                func: function (t, e) {
                    if (e.isLooped) return delete e.isLooped, e.callReturn();
                    var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.RADAR), r = this.block.statements, o = 1;
                    return e.isLooped = !0, n.center.type == Ntry.STATIC.AI_METEO && 1 == n.center.distance && (o = 0), this.executor.stepInto(r[o]), Entry.STATIC.BREAK
                }
            },
            ai_boolean_distance: {
                skeleton: "basic_boolean_field",
                mode: "maze",
                color: "#2fc9f0",
                fontColor: "#fff",
                syntax: ["Scope", "radar_%1 %2 %3#"],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]],
                    value: "RIGHT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[">", "BIGGER"], [">=", "BIGGER_EQUAL"], ["=", "EQUAL"], ["<", "SMALLER"], ["<=", "SMALLER_EQUAL"]],
                    value: "BIGGER",
                    fontSize: 11
                }, {type: "Block", accept: "string"}],
                func: function (t, e) {
                    var n, r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.RADAR), o = this.block.params,
                        a = o[0], s = o[1], i = this.getParam(2);
                    switch (a) {
                        case"UP":
                            n = r.left;
                            break;
                        case"RIGHT":
                            n = r.center;
                            break;
                        case"DOWN":
                            n = r.right
                    }
                    switch (n = n.type == Ntry.STATIC.AI_GOAL ? Number.MAX_VALUE : n.distance, s) {
                        case"BIGGER":
                            return n > i;
                        case"BIGGER_EQUAL":
                            return n >= i;
                        case"EQUAL":
                            return n == i;
                        case"SMALLER":
                            return n < i;
                        case"SMALLER_EQUAL":
                            return n <= i
                    }
                }
            },
            ai_distance_value: {
                skeleton: "basic_string_field",
                mode: "maze",
                color: "#ffd974",
                syntax: ["Scope", "radar_%1#"],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]],
                    value: "RIGHT",
                    fontSize: 11
                }],
                func: function (t, e) {
                    var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.RADAR), r = {};
                    switch (this.block.params[0]) {
                        case"UP":
                            r = n.left;
                            break;
                        case"RIGHT":
                            r = n.center;
                            break;
                        case"DOWN":
                            r = n.right
                    }
                    return r.type == Ntry.STATIC.AI_GOAL ? Number.MAX_VALUE : r.distance
                }
            },
            ai_boolean_object: {
                skeleton: "basic_boolean_field",
                fontColor: "#fff",
                mode: "maze",
                color: "#2fc9f0",
                syntax: ["Scope", "object_%1 == %2#"],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Menus.ai_above, "UP"], [Lang.Menus.ai_front, "RIGHT"], [Lang.Menus.ai_under, "DOWN"]],
                    value: "RIGHT",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [[Lang.Menus.asteroids, "OBSTACLE"], [Lang.Menus.wall, "WALL"], [Lang.Menus.item, "ITEM"]],
                    value: "OBSTACLE",
                    fontSize: 11
                }],
                func: function (t, e) {
                    var n, r = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.RADAR), o = this.block.params;
                    switch (o[0]) {
                        case"UP":
                            n = r.left.type;
                            break;
                        case"RIGHT":
                            n = r.center.type;
                            break;
                        case"DOWN":
                            n = r.right.type
                    }
                    switch (o[1]) {
                        case"OBSTACLE":
                            return n == Ntry.STATIC.AI_METEO;
                        case"WALL":
                            return n == Ntry.STATIC.AI_WALL;
                        case"ITEM":
                            return n == Ntry.STATIC.AI_ITEM
                    }
                }
            },
            ai_use_item: {
                skeleton: "basic",
                mode: "maze",
                color: "#EACF11",
                syntax: ["Scope", "use_item"],
                params: [{type: "Image", img: "/img/assets/week/blocks/item.png", size: 24}],
                func: function (t, e) {
                    if (e.isStart) return e.isAction ? e : (delete e.isAction, delete e.isStart, e.callReturn());
                    Ntry.dispatchEvent("triggerWeapon"), e.isStart = !0, e.isAction = !0, Ntry.dispatchEvent("gridChange", function () {
                        e.isAction = !1
                    }), Ntry.entityManager.getComponent(t.id, Ntry.STATIC.SPACE_SHIP).direction = Ntry.STATIC.EAST;
                    var n = Ntry.entityManager.getComponent(t.id, Ntry.STATIC.GRID);
                    return Ntry.entityManager.addComponent(t.id, {
                        type: Ntry.STATIC.ANIMATE,
                        animateType: Ntry.STATIC.ROTATE_TO,
                        animateValue: 0
                    }), n.x++, e
                }
            },
            ai_boolean_and: {
                color: "#2fc9f0",
                skeleton: "basic_boolean_field",
                fontColor: "#fff",
                statements: [],
                syntax: ["Scope", "%1 && %3#"],
                params: [{type: "Block", accept: "boolean"}, {
                    type: "Text",
                    text: Lang.Blocks.JUDGEMENT_boolean_and,
                    color: "#fff"
                }, {type: "Block", accept: "boolean"}],
                events: {},
                func: function () {
                    return this.getParam(0) && this.getParam(2)
                }
            },
            ai_True: {
                color: "#2fc9f0",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Text", text: Lang.Blocks.JUDGEMENT_true, color: "#3D3D3D"}],
                events: {},
                def: {params: [null], type: "True"},
                func: function (t, e) {
                    return !0
                },
                isPrimitive: !0
            },
            ai_if_else: {
                color: "#498deb",
                skeleton: "basic_double_loop",
                statements: [{accept: "basic"}, {accept: "basic"}],
                params: [{type: "Block", accept: "boolean"}, {
                    type: "Indicator",
                    img: "block_icon/if.png",
                    size: 12
                }, {type: "LineBreak"}],
                func: function (t, e) {
                    if (e.isCondition) return delete e.isCondition, e.callReturn();
                    var n = this.getParam(0);
                    e.isCondition = !0;
                    var r = this.block.statements[n ? 0 : 1];
                    return 0 === r.getBlocks().length ? this.executor.end() : this.executor.stepInto(r)
                },
                syntax: ["BasicIf", "true"]
            },
            hidden: {
                color: "#7C7C7C",
                skeleton: "basic",
                template: "         %1       %2",
                statements: [],
                params: [{type: "TextInput", value: "?", clearBG: !0, color: "white"}, {
                    type: "Indicator",
                    color: "#6B6B6B",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "hidden"},
                paramsKeyMap: {VALUE: 0},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            hidden_event: {
                color: "#7C7C7C",
                skeleton: "basic_event",
                template: "         %1       ",
                statements: [],
                params: [{type: "TextInput", value: "?", clearBG: !0, color: "white"}, {
                    type: "Indicator",
                    color: "#6B6B6B",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "hidden_event"},
                paramsKeyMap: {VALUE: 0},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            hidden_loop: {
                color: "#7C7C7C",
                skeleton: "basic_loop",
                statements: [{accept: "basic"}],
                params: [{
                    type: "Image",
                    img: "/img/assets/maze/icon/group.png",
                    size: {width: 47, height: 20}
                }, {type: "Indicator", color: "#6B6B6B", size: 12}],
                events: {},
                def: {params: [null], type: "hidden_if"},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            hidden_if_else: {
                color: "#7C7C7C",
                skeleton: "basic_double_loop",
                template: "         %1       %2%3",
                statements: [{accept: "basic"}, {accept: "basic"}],
                params: [{type: "TextInput", value: "?", clearBG: !0, color: "white"}, {
                    type: "Indicator",
                    color: "#6B6B6B",
                    size: 12
                }, {type: "LineBreak"}],
                events: {},
                def: {params: [null], type: "hidden_if"},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            hidden_string: {
                color: "#7C7C7C",
                skeleton: "basic_string_field",
                template: "    %1    ",
                fontColor: "#fff",
                statements: [],
                params: [{type: "TextInput", value: "?", clearBG: !0, color: "white"}],
                events: {},
                def: {params: [], type: "hidden_string"},
                paramsKeyMap: {VALUE: 0},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            hidden_boolean: {
                color: "#7C7C7C",
                skeleton: "basic_boolean_field",
                template: "    %1    ",
                fontColor: "#fff",
                statements: [],
                params: [{type: "TextInput", value: "?", clearBG: !0, color: "white"}],
                events: {},
                def: {params: [], type: "hidden_boolean"},
                paramsKeyMap: {},
                class: "etc",
                isNotFor: [],
                func: function (t, e) {
                }
            },
            boolean_shell: {
                color: "#AEB8FF",
                skeleton: "basic_boolean_field",
                template: "%1",
                isPrimitive: !0,
                params: [{type: "Text", text: "A", color: "#3D3D3D"}],
                func: function (t, e) {
                }
            }
        };
        (0, _extends3.default)(Entry.block, block, blocks.getBlocks()), function () {
            for (var t in Entry.HARDWARE_LIST) {
                var e = Entry.HARDWARE_LIST[t];
                if (e && "setLanguage" in e) {
                    var n = e.setLanguage()[global.Lang.type];
                    for (var r in n) (0, _extends3.default)(Lang[r], n[r])
                }
            }
            for (var o in Entry.block) {
                var a = Entry.block[o];
                if (a.isNotFor || (a.isNotFor = []), a.parent) {
                    var s = function () {
                    };
                    s.prototype = Entry.block[a.parent];
                    var i = new s;
                    for (var l in i.syntax = void 0, a) i[l] = a[l];
                    Entry.block[o] = i
                }
            }
        }(), "object" == (0, _typeof3.default)(exports) && (exports.block = Entry.block)
    }).call(this, __webpack_require__(49))
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(3)), a = s(n(5));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.Block = function (t, e) {
        var n = this;
        Entry.Model(this, !1), this._schema = null, t._backupParams && (this._backupParams = t._backupParams), this.setThread(e), this.load(t);
        var r = t.category;
        if (r) {
            this.category = r;
            var o = Entry.block[this.type];
            o && (o.isFor = ["category_" + r])
        }
        var a = this.getCode();
        void 0 !== t.display && (this.display = t.display), a.registerBlock(this);
        var s = this.events.dataAdd;
        s && a.object && s.forEach(function (t) {
            Entry.Utils.isFunction(t) && t(n)
        }), s = this.events.viewAdd;
        var i = a.board;
        s && Entry.getMainWS() && Entry.isTextMode && (!i || i && i.constructor !== Entry.BlockMenu) && s.forEach(function (t) {
            Entry.Utils.isFunction(t) && t.apply(n, [n])
        })
    }, Entry.Block.MAGNET_RANGE = 10, Entry.Block.MAGNET_OFFSET = .4, Entry.Block.DELETABLE_TRUE = 1, Entry.Block.DELETABLE_FALSE = 2, Entry.Block.DELETABLE_FALSE_LIGHTEN = 3, (r = Entry.Block.prototype).schema = {
        id: null,
        x: 0,
        y: 0,
        type: null,
        params: [],
        statements: [],
        view: null,
        thread: null,
        movable: null,
        deletable: Entry.Block.DELETABLE_TRUE,
        emphasized: !1,
        readOnly: null,
        copyable: !0,
        events: {},
        extensions: []
    }, r.load = function (t) {
        t.id || (t.id = Entry.Utils.generateId()), this.set(t), this.loadSchema()
    }, r.changeSchema = function (t, e) {
        var n = [];
        if (e) if (e.isRestore) n = this._backupParams || [], delete this._backupParams; else switch (e.type, e.type) {
            case"noChange":
                n = this.params;
                break;
            case"cut":
                var r = e.pos;
                this.params.splice(r), n = this.params;
                break;
            case"insert":
                var o = e.startPos, a = e.endPos, s = Entry.block[this.type].params;
                n = new Array(s.length);
                for (var i = 0; i < o; i++) n[i] = this.params[i];
                var l = a - o + 1;
                for (i = a + 1; i < s.length; i++) n[i] = this.params[i - l]
        }
        n.forEach(function (t) {
            t instanceof Entry.Block && t.destroyView()
        }), this.set({params: n}), this.loadSchema(), this.view && this.view.changeType()
    }, r.getSchema = function () {
        return this._schema || this.loadSchema(), this._schema
    }, r.loadSchema = function () {
        if (this._schema = Entry.block[this.type], this._schema) {
            !this._schemaChangeEvent && this._schema.changeEvent && (this._schemaChangeEvent = this._schema.changeEvent.attach(this, this.changeSchema)), !this._paramsBackupEvent && this._schema.paramsBackupEvent && (this._paramsBackupEvent = this._schema.paramsBackupEvent.attach(this, this.paramsBackup)), !this._destroyParamsBackupEvent && this._schema.destroyParamsBackupEvent && (this._destroyParamsBackupEvent = this._schema.destroyParamsBackupEvent.attach(this, this.destroyParamsBackup));
            var t = this._schema.events;
            if (t) for (var e in t) {
                this.events[e] || (this.events[e] = []);
                for (var n = t[e], r = 0; r < n.length; r++) {
                    var o = n[r];
                    o && this.events[e].indexOf(o) < 0 && this.events[e].push(o)
                }
            }
            this._schema.event && this.thread.registerEvent(this, this._schema.event);
            var s = this.params, i = this._schema.params;
            for (r = 0; i && r < i.length; r++) {
                var l = void 0 === s[r] || null === s[r] ? i[r].value : s[r], c = s[r] || r < s.length;
                !l || "Output" !== i[r].type && "Block" !== i[r].type || ("object" !== (void 0 === l ? "undefined" : (0, a.default)(l)) && (l = {
                    type: "number",
                    params: [l]
                }), l = new Entry.Block(l, this.thread)), c ? s.splice(r, 1, l) : s.push(l)
            }
            var u = this._schema.statements;
            if (u) for (r = 0; r < u.length; r++) this.statements.splice(r, 1, new Entry.Thread(this.statements[r], this.getCode(), this));
            return !0
        }
    }, r.changeType = function (t) {
        this._schemaChangeEvent && this._schemaChangeEvent.destroy(), this._backupEvent && this._backupEvent.destroy(), this._destroyBackupEvent && this._destroyBackupEvent.destroy(), this.set({type: t}), this.loadSchema(), this.view && this.view.changeType(t)
    }, r.setThread = function (t) {
        this.set({thread: t})
    }, r.getThread = function () {
        return this.thread
    }, r.insertAfter = function (t) {
        this.thread.insertByBlock(this, t)
    }, r._updatePos = function () {
        this.view && this.set({x: this.view.x, y: this.view.y})
    }, r.moveTo = function (t, e) {
        this.view && this.view._moveTo(t, e), this._updatePos(), this.getCode().changeEvent.notify()
    }, r.createView = function (t, e) {
        t = t || this.getCode().view.board, this.view || (this.set({view: new Entry.BlockView(this, t, e)}), this._updatePos())
    }, r.destroyView = function () {
        this.view && this.view.destroy()
    }, r.clone = function (t) {
        return new Entry.Block(this.toJSON(!0), t)
    }, r.toJSON = function (t, e, n) {
        var r = this._toJSON();
        delete r.view, delete r.thread, delete r.events, n = n || {}, t && delete r.id;
        for (var o = [], a = 0; a < r.params.length; a++) {
            var s = r.params[a];
            s instanceof Entry.Block ? s = s.toJSON(t, e, n) : n.captureDynamic && this.view.getParam(a) instanceof Entry.FieldDropdownDynamic && (s = this.view.getParam(a).getTextValue()), o.push(s)
        }
        return r.params = o, r.statements = r.statements.map(function (r) {
            return r.toJSON(t, void 0, e, n)
        }), r.x = this.x, r.y = this.y, r.movable = this.movable, r.deletable = this.deletable, r.emphasized = this.emphasized, r.readOnly = this.readOnly, this._backupParams && (r._backupParams = this._backupParams.map(function (t) {
            return t instanceof Entry.Block ? t.toJSON() : t
        })), e && e instanceof Array && e.forEach(function (t) {
            delete r[t]
        }), r
    }, r.destroy = function (t, e, n) {
        if (!n || this.isDeletable()) {
            var r = this.getBlockType();
            if ("output" === r && !e) {
                var o = this.getPrevOutputBlock(), a = this.getOutputBlock();
                if (o) this.separate(1), a && (a.separate(), a.doInsert(o.view._contents[1])); else if (a) {
                    var s = a.view;
                    s && s._toGlobalCoordinate(), a.doInsert(this.getThread())
                }
            }
            for (var i = this, l = this.params || [], c = 0; c < l.length; c++) {
                var u = l[c];
                u instanceof Entry.Block && (u.doNotSplice = !(u.thread instanceof Entry.FieldOutput), u.destroy(t))
            }
            var p = this.statements || [];
            for (c = 0; c < p.length; c++) p[c].destroy(t);
            var _ = this.getCode();
            _.unregisterBlock(this);
            var d = this.getThread();
            if (this._schema && this._schema.event && d.unregisterEvent(this, this._schema.event), "basic" === r) {
                var y = this.getPrevBlock(), g = this.getNextBlock();
                if (g) if (e) g.destroy(t, e); else {
                    var h = g.view;
                    if (y) h && h.bindPrev(y, !0); else if (d.view) {
                        var m = d.view.getParent(), b = m.constructor;
                        b === Entry.FieldStatement ? (h && h.bindPrev(m), m.insertTopBlock(g)) : b === Entry.FieldStatement ? g.replace(m._valueBlock) : h && h._toGlobalCoordinate()
                    }
                }
            }
            var f = this.doNotSplice;
            !this.doNotSplice && d.spliceBlock ? d.spliceBlock(this) : delete this.doNotSplice, this.view && this.view.destroy(t), this._schemaChangeEvent && this._schemaChangeEvent.destroy(), this._paramsBackupEvent && this._paramsBackupEvent.destroy(), this._destroyParamsBackupEvent && this._destroyParamsBackupEvent.destroy();
            var E = this.events.dataDestroy;
            E && _.object && E.forEach(function (t) {
                Entry.Utils.isFunction(t) && t.apply(i, [i, f])
            }), E = this.events.viewDestroy;
            var v = this.getCode().board;
            E && Entry.getMainWS() && Entry.isTextMode && (!v || v && v.constructor !== Entry.BlockMenu) && E.forEach(function (t) {
                Entry.Utils.isFunction(t) && t.apply(i, [i, f])
            })
        }
    }, r.getView = function () {
        return this.view
    }, r.setMovable = function (t) {
        this.movable != t && this.set({movable: t})
    }, r.setCopyable = function (t) {
        this.copyable != t && this.set({copyable: t})
    }, r.isMovable = function () {
        return this.movable
    }, r.isCopyable = function () {
        return this.copyable
    }, r.setDeletable = function (t) {
        this.deletable != t && this.set({deletable: t})
    }, r.isDeletable = function () {
        return this.deletable === Entry.Block.DELETABLE_TRUE || !0 === this.deletable
    }, r.isReadOnly = function () {
        return this.readOnly
    }, r.getCode = function () {
        return this.thread.getCode()
    }, r.doAdd = function () {
        this.getCode().changeEvent.notify()
    }, r.doMove = function () {
        this._updatePos(), this.getCode().changeEvent.notify()
    }, r.doInsert = function (t) {
        "basic" === this.getBlockType() ? this.insert(t) : this.replace(t)
    }, r.doDestroy = function (t) {
        return this.destroy(t), this.getCode().changeEvent.notify(), this
    }, r.doDestroyBelow = function (t) {
        return this.destroy(t, !0), this.getCode().changeEvent.notify(), this
    }, r.copy = function () {
        var t = this.getThread(), e = [];
        if (t instanceof Entry.Thread) for (var n = t.getBlocks().indexOf(this), r = t.toJSON(!0, n), o = 0; o < r.length; o++) e.push(r[o]); else e.push(this.toJSON(!0));
        var a = this.view.getAbsoluteCoordinate(), s = e[0];
        return s.x = a.x + 15, s.y = a.y + 15, s.id = Entry.Utils.generateId(), e
    }, r.copyToClipboard = function () {
        Entry.clipboard = this.copy()
    }, r.separate = function (t, e) {
        this.thread.separate(this, t, e), this._updatePos(), this.getCode().changeEvent.notify()
    }, r.doSeparate = r.separate, r.insert = function (t) {
        var e = this.thread.cut(this);
        t instanceof Entry.Thread ? t.insertByBlock(null, e) : t.insertAfter(e), this._updatePos(), this.getCode().changeEvent.notify()
    }, r.replace = function (t) {
        this.thread.cut(this), t.getThread().replace(this), this.getCode().changeEvent.notify()
    }, r.getPrevBlock = function () {
        return this.thread.getPrevBlock(this)
    }, r.getNextBlock = function () {
        return this.thread.getNextBlock(this) || null
    }, r.getLastBlock = function () {
        return this.thread.getLastBlock()
    }, r.getPrevOutputBlock = function () {
        return this.thread instanceof Entry.FieldOutput ? this.thread._block : null
    }, r.getOutputBlock = function () {
        for (var t = this._schema.params, e = 0; t && e < t.length; e++) if ("Output" === t[e].type) return this.params[e];
        return null
    }, r.getTerminateOutputBlock = function () {
        for (var t = this; ;) {
            var e = t.getOutputBlock();
            if (!e) return t;
            t = e
        }
    }, r.getOutputBlockCount = function (t) {
        t = t || 0;
        var e = this.getOutputBlock();
        return e ? e.getOutputBlockCount(t + 1) : t
    }, r.getBlockType = function () {
        if (!this.view) return null;
        var t = Entry.skeleton[this._schema.skeleton];
        if (!t.magnets) return null;
        var e = t.magnets(this.view);
        return e.next || e.previous ? "basic" : e.boolean || e.string ? "field" : e.output || e.param ? "output" : null
    }, r.indexOfStatements = function (t) {
        return this.statements.indexOf(t)
    }, r.pointer = function (t) {
        return this.thread.pointer(t || [], this)
    }, r.targetPointer = function () {
        var t = this.thread.pointer([], this);
        return 4 === t.length && 0 === t[3] ? t.pop() : t[t.length - 2] > -1 && (0 === t[t.length - 1] ? t.pop() : t[t.length - 1] = t[t.length - 1] - 1), t
    }, r.getDataByPointer = function (t) {
        t = t.concat();
        var e = this.params[t.shift()];
        return t.length ? e.getDataByPointer ? e.getDataByPointer(t) : null : e
    }, r.getBlockList = function (t, e) {
        var n = [], r = e || this.type;
        if (!this._schema && !this.loadSchema()) return [];
        if (t && this._schema.isPrimitive) return n;
        r === this.type && n.push(this);
        for (var o = this.params, a = 0; a < o.length; a++) {
            var s = o[a];
            s && s.constructor == Entry.Block && (n = n.concat(s.getBlockList(t, e)))
        }
        var i = this.statements;
        if (i) for (var l = 0; l < i.length; l++) {
            var c = i[l];
            c.constructor === Entry.Thread && (n = n.concat(c.getBlockList(t, e)))
        }
        return n
    }, r.stringify = function (t) {
        return (0, o.default)(this.toJSON(!1, t))
    }, r.isInOrigin = function () {
        return 0 === this.x && 0 === this.y
    }, r.isSameParamWith = function (t) {
        if ("wildcard" === t.type.substr(0, 8) || "wildcard" === this.type.substr(0, 8)) return !0;
        var e = t.type, n = this.type;
        if ("angle" === e && "text" === n || "text" === e && "angle" === n) ; else if (e !== n) return !1;
        for (var r = 0; r < this.params.length; r++) {
            var o = this.params[r];
            if (o instanceof Entry.Block) {
                if (!o.isSameParamWith(t.params[r])) return !1
            } else {
                var a = this.params[r], s = t.params[r];
                if ((a = "number" == typeof a ? a + "" : a) !== (s = "number" == typeof s ? s + "" : s)) return !1
            }
        }
        return !0
    }, r.paramsBackup = function () {
        this.view && this.view.isInBlockMenu || (this._backupParams = this.params.slice())
    }, r.destroyParamsBackup = function () {
        this._backupParams = null
    }, r.getDom = function (t) {
        return t.length > 0 && "magnet" === t.shift() ? this.view.getMagnet(t) : this.view.svgGroup
    }, r.getParam = function (t) {
        return this.params[t]
    }, r.isParamBlockType = function () {
        return "basic_string_field" === this._schema.skeleton || "basic_boolean_field" === this._schema.skeleton
    }, r.getFuncId = function () {
        var t = /func_(.*)/.exec(this.type);
        if (t) return t[1]
    }, r.getRootBlock = function () {
        for (var t = this; t;) {
            var e = t.getThread(), n = e.parent;
            if (n) {
                if (n instanceof Entry.Code) {
                    t = e.getFirstBlock();
                    break
                }
                t = n instanceof Entry.Block ? e.parent : void 0
            } else t = e._block
        }
        return t
    }
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(0)), a = s(n(5));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.Parser = function (t, e, n) {
        if (this._mode = t, this.syntax = {}, this.codeMirror = n, this._lang = e || "js", this.availableCode = [], "maze" === t && (this._stageId = Number(Ntry.configManager.getConfig("stageId")), "object" == ("undefined" == typeof NtryData ? "undefined" : (0, a.default)(NtryData)))) {
            var r = NtryData.config[this._stageId].availableCode, o = NtryData.player[this._stageId].code;
            this.setAvailableCode(r, o)
        }
        switch (this.mappingSyntax(t), this._lang) {
            case"js":
                this._parser = new Entry.JSParser(this.syntax), e = this.syntax;
                var s = {};
                for (var i in e.Scope) s[i + "();\n"] = e.Scope[i];
                "BasicIf" in e && (s.front = "BasicIf"), CodeMirror.commands.javascriptComplete = function (t) {
                    CodeMirror.showHint(t, null, {globalScope: s})
                }, n.on("keyup", function (t, e) {
                    !t.state.completionActive && e.keyCode >= 65 && e.keyCode <= 95 && CodeMirror.showHint(t, null, {
                        completeSingle: !1,
                        globalScope: s
                    })
                });
                break;
            case"block":
                this._parser = new Entry.BlockParser(this.syntax)
        }
    }, (r = Entry.Parser.prototype).parse = function (t) {
        var e = null;
        switch (this._lang) {
            case"js":
                try {
                    var n = acorn.parse(t);
                    e = this._parser.Program(n)
                } catch (t) {
                    var r;
                    this.codeMirror && (t instanceof SyntaxError ? (r = {
                        from: {
                            line: t.loc.line - 1,
                            ch: t.loc.column - 2
                        }, to: {line: t.loc.line - 1, ch: t.loc.column + 1}
                    }, t.message = "문법 오류입니다.") : ((r = this.getLineNumber(t.node.start, t.node.end)).message = t.message, r.severity = "error", this.codeMirror.markText(r.from, r.to, {
                        className: "CodeMirror-lint-mark-error",
                        __annotation: r,
                        clearOnEnter: !0
                    })), Entry.toast.alert("Error", t.message)), e = []
                }
                break;
            case"block":
                var o = this._parser.Code(t).match(/(.*{.*[\S|\s]+?}|.+)/g);
                e = Array.isArray(o) ? o.reduce(function (t, e, n) {
                    return 1 === n && (t += "\n"), (e.indexOf("function") > -1 ? e + t : t + e) + "\n"
                }) : ""
        }
        return e
    }, r.getLineNumber = function (t, e) {
        var n = this.codeMirror.getValue(), r = {from: {}, to: {}}, o = n.substring(0, t).split(/\n/gi);
        r.from.line = o.length - 1, r.from.ch = o[o.length - 1].length;
        var a = n.substring(0, e).split(/\n/gi);
        return r.to.line = a.length - 1, r.to.ch = a[a.length - 1].length, r
    }, r.mappingSyntax = function (t) {
        for (var e = (0, o.default)(Entry.block), n = 0; n < e.length; n++) {
            var r = e[n], a = Entry.block[r];
            if (a.mode === t && this.availableCode.indexOf(r) > -1) {
                var s = a.syntax;
                if (!s) continue;
                for (var i = this.syntax, l = 0; l < s.length; l++) {
                    var c = s[l];
                    if (l === s.length - 2 && "function" == typeof s[l + 1]) {
                        i[c] = s[l + 1];
                        break
                    }
                    i[c] || (i[c] = {}), l === s.length - 1 ? i[c] = r : i = i[c]
                }
            }
        }
    }, r.setAvailableCode = function (t, e) {
        var n = [];
        t.forEach(function (t, e) {
            t.forEach(function (t, e) {
                n.push(t.type)
            })
        }), e instanceof Entry.Code ? e.getBlockList().forEach(function (t) {
            t.type !== NtryData.START && -1 === n.indexOf(t.type) && n.push(t.type)
        }) : e.forEach(function (t, e) {
            t.forEach(function (t, e) {
                t.type !== NtryData.START && -1 === n.indexOf(t.type) && n.push(t.type)
            })
        }), this.availableCode = this.availableCode.concat(n)
    }
}, function (t, e, n) {
    var r = n(19), o = n(65);
    n(39)("getPrototypeOf", function () {
        return function (t) {
            return o(r(t))
        }
    })
}, function (t, e, n) {
    n(183), t.exports = n(1).Object.getPrototypeOf
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(5)), a = s(n(60));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.JSParser = function (t) {
        this.syntax = t, this.scopeChain = [], this.scope = null
    }, (r = Entry.JSParser.prototype).Program = function (t) {
        var e = [], n = [];
        t.body, n.push({type: this.syntax.Program});
        var r = this.initScope(t);
        return n = n.concat(this.BlockStatement(t)), this.unloadScope(), e.push(n), e.concat(r)
    }, r.Identifier = function (t, e) {
        return e ? e[t.name] : this.scope[t.name]
    }, r.ExpressionStatement = function (t) {
        var e = t.expression;
        return this[e.type](e)
    }, r.ForStatement = function (t) {
        var e = t.init, n = t.test, r = t.update, o = t.body;
        if (this.syntax.ForStatement) throw{message: "지원하지 않는 표현식 입니다.", node: t};
        o = this[o.type](o);
        var a = e.declarations[0].init.value, s = (n = n).operator, i = n.right.value, l = 0;
        if ("++" != r.operator) {
            var c = a;
            a = i, i = c
        }
        switch (s) {
            case"<":
                l = i - a;
                break;
            case"<=":
                l = i + 1 - a;
                break;
            case">":
                l = a - i;
                break;
            case">=":
                l = a + 1 - i
        }
        return this.BasicIteration(t, l, o)
    }, r.BlockStatement = function (t) {
        for (var e = [], n = t.body, r = 0; r < n.length; r++) {
            var o = n[r], a = this[o.type](o);
            if (a) {
                if (void 0 === a.type) throw{message: "해당하는 블록이 없습니다.", node: o};
                a && e.push(a)
            }
        }
        return e
    }, r.EmptyStatement = function (t) {
        throw{message: "empty는 지원하지 않는 표현식 입니다.", node: t}
    }, r.DebuggerStatement = function (t) {
        throw{message: "debugger는 지원하지 않는 표현식 입니다.", node: t}
    }, r.WithStatement = function (t) {
        throw t.object, t.body, {message: "with는 지원하지 않는 표현식 입니다.", node: t}
    }, r.ReturnStaement = function (t) {
        throw t.arguments, {message: "return은 지원하지 않는 표현식 입니다.", node: t}
    }, r.LabeledStatement = function (t) {
        throw t.label, t.body, {message: "label은 지원하지 않는 표현식 입니다.", node: t}
    }, r.BreakStatement = function (t) {
        throw t.label, {message: "break는 지원하지 않는 표현식 입니다.", node: t}
    }, r.ContinueStatement = function (t) {
        throw t.label, {message: "continue는 지원하지 않는 표현식 입니다.", node: t}
    }, r.IfStatement = function (t) {
        if (t.test, t.consequent, t.alternate, this.syntax.IfStatement) throw{message: "if는 지원하지 않는 표현식 입니다.", node: t};
        return this.BasicIf(t)
    }, r.SwitchStatement = function (t) {
        throw t.discriminant, t.cases, {message: "switch는 지원하지 않는 표현식 입니다.", node: t}
    }, r.SwitchCase = function (t) {
        throw t.test, t.consequent, {message: "switch ~ case는 지원하지 않는 표현식 입니다.", node: t}
    }, r.ThrowStatement = function (t) {
        throw t.arguments, {message: "throw는 지원하지 않는 표현식 입니다.", node: t}
    }, r.TryStatement = function (t) {
        throw t.block, t.handler, t.finalizer, {message: "try는 지원하지 않는 표현식 입니다.", node: t}
    }, r.CatchClause = function (t) {
        throw t.param, t.body, {message: "catch는 지원하지 않는 표현식 입니다.", node: t}
    }, r.WhileStatement = function (t) {
        t.test;
        var e = t.body, n = this.syntax.WhileStatement;
        if (e = this[e.type](e), n) throw{message: "while은 지원하지 않는 표현식 입니다.", node: t};
        return this.BasicWhile(t, e)
    }, r.DoWhileStatement = function (t) {
        throw t.body, t.test, {message: "do ~ while은 지원하지 않는 표현식 입니다.", node: t}
    }, r.ForInStatement = function (t) {
        throw t.left, t.right, t.body, {message: "for ~ in은 지원하지 않는 표현식 입니다.", node: t}
    }, r.FunctionDeclaration = function (t) {
        if (t.id, this.syntax.FunctionDeclaration) throw{message: "function은 지원하지 않는 표현식 입니다.", node: t};
        return null
    }, r.VariableDeclaration = function (t) {
        throw t.declarations, t.kind, {message: "var은 지원하지 않는 표현식 입니다.", node: t}
    }, r.ThisExpression = function (t) {
        return this.scope.this
    }, r.ArrayExpression = function (t) {
        throw t.elements, {message: "array는 지원하지 않는 표현식 입니다.", node: t}
    }, r.ObjectExpression = function (t) {
        throw t.property, {message: "object는 지원하지 않는 표현식 입니다.", node: t}
    }, r.Property = function (t) {
        throw t.key, t.value, t.kind, {message: "init, get, set은 지원하지 않는 표현식 입니다.", node: t}
    }, r.FunctionExpression = function (t) {
        throw{message: "function은 지원하지 않는 표현식 입니다.", node: t}
    }, r.UnaryExpression = function (t) {
        var e = t.operator;
        throw t.prefix, t.argument, {message: e + "은(는) 지원하지 않는 명령어 입니다.", node: t}
    }, r.UnaryOperator = function () {
        return ["-", "+", "!", "~", "typeof", "void", "delete"]
    }, r.updateOperator = function () {
        return ["++", "--"]
    }, r.BinaryOperator = function () {
        return ["==", "!=", "===", "!==", "<", "<=", ">", ">=", "<<", ">>", ">>>", "+", "-", "*", "/", "%", ",", "^", "&", "in", "instanceof"]
    }, r.AssignmentExpression = function (t) {
        var e = t.operator;
        throw t.left, t.right, {message: e + "은(는) 지원하지 않는 명령어 입니다.", node: t}
    }, r.AssignmentOperator = function () {
        return ["=", "+=", "-=", "*=", "/=", "%=", "<<=", ">>=", ">>>=", ",=", "^=", "&="]
    }, r.LogicalExpression = function (t) {
        var e = t.operator;
        throw t.left, t.right, {message: e + "은(는) 지원하지 않는 명령어 입니다.", node: t}
    }, r.LogicalOperator = function () {
        return ["||", "&&"]
    }, r.MemberExpression = function (t) {
        var e = t.object, n = t.property;
        if (t.computed, console.log(e.type), e = this[e.type](e), console.log(e), n = this[n.type](n, e), Object(e) !== e || (0, a.default)(e) !== Object.prototype) throw{
            message: e + "은(는) 잘못된 멤버 변수입니다.",
            node: t
        };
        var r = n;
        if (!r) throw{message: n + "이(가) 존재하지 않습니다.", node: t};
        return r
    }, r.ConditionalExpression = function (t) {
        throw t.test, t.alternate, t.consequent, {message: "지원하지 않는 표현식 입니다.", node: t}
    }, r.UpdateExpression = function (t) {
        var e = t.operator;
        throw t.argument, t.prefix, {message: e + "은(는) 지원하지 않는 명렁어 입니다.", node: t}
    }, r.CallExpression = function (t) {
        var e = t.callee;
        return t.arguments, {type: this[e.type](e)}
    }, r.NewExpression = function (t) {
        throw{message: "new는 지원하지 않는 표현식 입니다.", node: t}
    }, r.SequenceExpression = function (t) {
        throw t.expressions, {message: "지원하지 않는 표현식 입니다.", node: t}
    }, r.initScope = function (t) {
        var e;
        return null === this.scope ? ((e = function () {
        }).prototype = this.syntax.Scope, this.scope = new e) : ((e = function () {
        }).prototype = this.scope, this.scope = new e), this.scopeChain.push(this.scope), this.scanDefinition(t)
    }, r.unloadScope = function () {
        this.scopeChain.pop(), this.scopeChain.length ? this.scope = this.scopeChain[this.scopeChain.length - 1] : this.scope = null
    }, r.scanDefinition = function (t) {
        for (var e = t.body, n = [], r = 0; r < e.length; r++) {
            var o = e[r];
            if ("FunctionDeclaration" === o.type && (this.scope[o.id.name] = this.scope.promise, this.syntax.BasicFunction)) {
                var a = o.body;
                n.push([{type: this.syntax.BasicFunction, statements: [this[a.type](a)]}])
            }
        }
        return n
    }, r.BasicFunction = function (t, e) {
        return null
    }, r.BasicIteration = function (t, e, n) {
        var r = this.syntax.BasicIteration;
        if (!r) throw{message: "지원하지 않는 표현식 입니다.", node: t};
        return {params: [e], type: r, statements: [n]}
    }, r.BasicWhile = function (t, e) {
        var n = t.test.raw;
        if (this.syntax.BasicWhile[n]) return {type: this.syntax.BasicWhile[n], statements: [e]};
        throw{message: "지원하지 않는 표현식 입니다.", node: t.test}
    }, r.BasicIf = function (t) {
        var e = t.consequent;
        e = this[e.type](e);
        try {
            var n = "", r = "===" === t.test.operator ? "==" : t.test.operator;
            if ("Identifier" === t.test.left.type && "Literal" === t.test.right.type) n = t.test.left.name + " " + r + " " + t.test.right.raw; else {
                if ("Literal" !== t.test.left.type || "Identifier" !== t.test.right.type) throw new Error;
                n = t.test.right.name + " " + r + " " + t.test.left.raw
            }
            if (this.syntax.BasicIf[n]) return Array.isArray(e) || "object" !== (void 0 === e ? "undefined" : (0, o.default)(e)) || (e = [e]), {
                type: this.syntax.BasicIf[n],
                statements: [e]
            };
            throw new Error
        } catch (e) {
            throw{message: "지원하지 않는 표현식 입니다.", node: t.test}
        }
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.BlockParser = function (t) {
        this.syntax = t, this._iterVariableCount = 0, this._iterVariableChunk = ["i", "j", "k"]
    }, (r = Entry.BlockParser.prototype).Code = function (t) {
        if (t instanceof Entry.Thread) return this.Thread(t);
        if (t instanceof Entry.Block) return this.Block(t);
        for (var e = "", n = t.getThreads(), r = 0; r < n.length; r++) {
            var o = n[r];
            e += this.Thread(o)
        }
        return e
    }, r.Thread = function (t) {
        if (t instanceof Entry.Block) return this.Block(t);
        for (var e = "", n = t.getBlocks(), r = 0; r < n.length; r++) {
            var o = n[r];
            e += this.Block(o)
        }
        return e
    }, r.Block = function (t) {
        var e = t._schema.syntax;
        return e ? this[e[0]](t) : ""
    }, r.Program = function (t) {
        return ""
    }, r.Scope = function (t) {
        var e = t._schema.syntax.concat();
        return e.splice(1, e.length - 1).join(".") + "();\n"
    }, r.BasicFunction = function (t) {
        var e = this.Thread(t.statements[0]);
        return "function promise() {\n" + this.indent(e) + "}\n"
    }, r.BasicIteration = function (t) {
        var e = t.params[0], n = this.publishIterateVariable(), r = this.Thread(t.statements[0]);
        return this.unpublishIterateVariable(), "for (var " + n + " = 0; " + n + " < " + e + "; " + n + "++){\n" + this.indent(r) + "}\n"
    }, r.BasicIf = function (t) {
        var e = this.Thread(t.statements[0]);
        return "if (" + t._schema.syntax.concat()[1] + ") {\n" + this.indent(e) + "}\n"
    }, r.BasicWhile = function (t) {
        var e = this.Thread(t.statements[0]);
        return "while (" + t._schema.syntax.concat()[1] + ") {\n" + this.indent(e) + "}\n"
    }, r.indent = function (t) {
        var e = "    ", n = t.split("\n");
        return n.pop(), e + (n.join("\n    ") + "\n")
    }, r.publishIterateVariable = function () {
        var t = "", e = this._iterVariableCount;
        do {
            t = this._iterVariableChunk[e % 3] + t, 0 == (e = parseInt(e / 3) - 1) && (t = this._iterVariableChunk[0] + t)
        } while (e > 0);
        return this._iterVariableCount++, t
    }, r.unpublishIterateVariable = function () {
        this._iterVariableCount && this._iterVariableCount--
    }
}, function (t, e, n) {
    "use strict";
    Entry.ThreadModel = function () {
        Entry.Model(this)
    }, Entry.ThreadModel.prototype.schema = {
        id: 0,
        type: Entry.STATIC.THREAD_MODEL,
        x: 0,
        y: 0,
        width: 0,
        minWidth: 0,
        height: 0
    }
}, function (t, e, n) {
    "use strict";
    Entry.DragInstance = function (t) {
        Entry.Model(this), this.set(t)
    }, Entry.DragInstance.prototype.schema = {
        type: Entry.STATIC.DRAG_INSTANCE,
        startX: 0,
        startY: 0,
        offsetX: 0,
        offsetY: 0,
        absX: 0,
        absY: 0,
        prev: null,
        height: 0,
        mode: 0,
        isNew: !1
    }
}, function (t, e, n) {
    "use strict";
    Entry.BoxModel = function () {
        Entry.Model(this)
    }, Entry.BoxModel.prototype.schema = {id: 0, type: Entry.STATIC.BOX_MODEL, x: 0, y: 0, width: 0, height: 0}
}, function (t, e, n) {
    "use strict";
    Entry.BlockRenderModel = function () {
        Entry.Model(this)
    }, Entry.BlockRenderModel.prototype.schema = {
        id: 0,
        type: Entry.STATIC.BLOCK_RENDER_MODEL,
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        magneting: !1
    }
}, function (t, e, n) {
    "use strict";
    Entry.BlockModel = function () {
        Entry.Model(this)
    }, Entry.BlockModel.prototype.schema = {
        id: null,
        x: 0,
        y: 0,
        type: null,
        params: {},
        statements: {},
        prev: null,
        next: null,
        view: null
    }
}, function (t, e, n) {
    "use strict";
    Entry.StateManager = function () {
        this.undoStack_ = [], this.redoStack_ = [], this.isRestore = !1, this._isRedoing = !1, this.isIgnore = !1, Entry.addEventListener("cancelLastCommand", function (t) {
            Entry.stateManager.cancelLastCommand()
        }), Entry.addEventListener("saveWorkspace", function (t) {
            Entry.stateManager.addStamp()
        }), Entry.addEventListener("undo", function (t) {
            Entry.stateManager.undo()
        }), Entry.addEventListener("redo", function (t) {
            Entry.stateManager.redo()
        })
    }, Entry.StateManager.prototype.generateView = function (t, e) {
    }, Entry.StateManager.prototype.addCommand = function (t, e, n, r) {
        if (!this.isIgnoring()) {
            var o = new Entry.State;
            return Entry.State.prototype.constructor.apply(o, Array.prototype.slice.call(arguments)), this.isRestoring() ? this.redoStack_.push(o) : (this.undoStack_.push(o), this._isRedoing || (this.redoStack_ = [])), Entry.reporter && Entry.reporter.report(o), Entry.creationChangedEvent && Entry.creationChangedEvent.notify(), o
        }
    }, Entry.StateManager.prototype.cancelLastCommand = function () {
        this.canUndo() && (this.undoStack_.pop(), Entry.creationChangedEvent && Entry.creationChangedEvent.notify())
    }, Entry.StateManager.prototype.getLastCommand = function () {
        return this.undoStack_[this.undoStack_.length - 1]
    }, Entry.StateManager.prototype.getLastCommandById = function (t) {
        for (var e = this.undoStack_, n = e.length - 1; n >= 0; n--) {
            var r = e[n];
            if (r.id === t) return r
        }
    }, Entry.StateManager.prototype.getLastRedoCommand = function () {
        return this.redoStack_[this.redoStack_.length - 1]
    }, Entry.StateManager.prototype.removeAllPictureCommand = function () {
        this.undoStack_ = this.undoStack_.filter(function (t) {
            return !(t.message >= 400 && t.message < 500)
        }), this.redoStack_ = this.redoStack_.filter(function (t) {
            return !(t.message >= 400 && t.message < 500)
        })
    }, Entry.StateManager.prototype.undo = function (t) {
        if (this.canUndo() && !this.isRestoring()) {
            this.addActivity("undo"), this.startRestore();
            for (var e = !0; this.undoStack_.length;) {
                var n = this.undoStack_.pop();
                n.func.apply(n.caller, n.params);
                var r = this.getLastRedoCommand();
                if (e ? (r.isPass = !1, e = !e) : r.isPass = !0, t && t--, !t && !0 !== n.isPass) break
            }
            this.endRestore(), Entry.disposeEvent && Entry.disposeEvent.notify(), Entry.creationChangedEvent && Entry.creationChangedEvent.notify()
        }
    }, Entry.StateManager.prototype.redo = function () {
        if (this.canRedo() && !this.isRestoring()) {
            this._isRedoing = !0, this.addActivity("undo"), this.addActivity("redo");
            for (var t = !0; this.redoStack_.length;) {
                var e = this.redoStack_.pop(), n = e.func.apply(e.caller, e.params);
                if (t ? (n.isPass(!1), t = !t) : n.isPass(!0), !0 !== e.isPass) break
            }
            this._isRedoing = !1, Entry.creationChangedEvent && Entry.creationChangedEvent.notify()
        }
    }, Entry.StateManager.prototype.updateView = function () {
    }, Entry.StateManager.prototype.startRestore = function () {
        this.isRestore = !0
    }, Entry.StateManager.prototype.endRestore = function () {
        this.isRestore = !1
    }, Entry.StateManager.prototype.isRestoring = function () {
        return this.isRestore
    }, Entry.StateManager.prototype.startIgnore = function () {
        this.isIgnore = !0
    }, Entry.StateManager.prototype.endIgnore = function () {
        this.isIgnore = !1
    }, Entry.StateManager.prototype.isIgnoring = function () {
        return this.isIgnore
    }, Entry.StateManager.prototype.canUndo = function () {
        return this.undoStack_.length > 0 && Entry.engine.isState("stop")
    }, Entry.StateManager.prototype.canRedo = function () {
        return this.redoStack_.length > 0 && Entry.engine.isState("stop")
    }, Entry.StateManager.prototype.addStamp = function () {
        this.stamp = Entry.generateHash(), this.undoStack_.length && (this.undoStack_[this.undoStack_.length - 1].stamp = this.stamp)
    }, Entry.StateManager.prototype.isSaved = function () {
        return 0 === this.undoStack_.length || this.undoStack_[this.undoStack_.length - 1].stamp == this.stamp && "string" == typeof this.stamp
    }, Entry.StateManager.prototype.addActivity = function (t) {
        Entry.reporter && Entry.reporter.report(new Entry.State(t))
    }, Entry.StateManager.prototype.getUndoStack = function () {
        return this.undoStack_.slice(0)
    }, Entry.StateManager.prototype.changeLastCommandType = function (t) {
        var e = this.getLastCommand();
        return e && (e.message = t), e
    }, Entry.StateManager.prototype.clear = function () {
        for (; this.undoStack_.length;) this.undoStack_.pop();
        for (; this.redoStack_.length;) this.redoStack_.pop()
    }
}, function (t, e, n) {
    "use strict";
    Entry.State = function (t, e, n, r) {
        this.caller = e, this.func = n, arguments.length > 3 && (this.params = Array.prototype.slice.call(arguments).slice(3)), this.message = t, this.time = Entry.getUpTime(), this.isPass = !!Entry.Command[t] && Entry.Command[t].isPass, this.id = Entry.generateHash()
    }, Entry.State.prototype.generateMessage = function () {
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Recorder = function () {
        this._recordData = [], Entry.commander.addReporter(this)
    }, (r = Entry.Recorder.prototype).add = function (t) {
        var e = t[0];
        if (e) switch (Entry.Command[e].recordable) {
            case Entry.STATIC.RECORDABLE.SUPPORT:
                return this._recordData.push(t), void Entry.toast.warning("Record", Lang.Command[e + ""]);
            case Entry.STATIC.RECORDABLE.SKIP:
                return;
            case Entry.STATIC.RECORDABLE.ABANDON:
                return void Entry.toast.alert("지원하지 않음")
        }
    }, r.getData = function () {
        return this._recordData
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.ActivityReporter = function () {
        this._activities = []
    }, (r = Entry.ActivityReporter.prototype).add = function (t) {
        if (t && 0 !== t.length) {
            var e;
            if (t instanceof Entry.Activity) e = t; else {
                var n = t.shift();
                e = new Entry.Activity(n, t)
            }
            this._activities.push(e)
        }
    }, r.clear = function () {
        this._activities = []
    }, r.get = function () {
        return this._activities
    }, r.report = function () {
    }
}, function (t, e, n) {
    "use strict";
    Entry.Activity = function (t, e) {
        this.name = t, this.timestamp = new Date;
        var n = [];
        if (void 0 !== e) for (var r = 0, o = e.length; r < o; r++) {
            var a = e[r];
            n.push({key: a[0], value: a[1]})
        }
        this.data = n
    }
}, function (t, e, n) {
    "use strict";
    var r;
    n(33), n(61), Entry.TargetChecker = function (t, e, n) {
        this.isForEdit = e, this.goals = [], this.publicGoals = [], this.unachievedGoals = [], this.remainPublicGoal = 0, this.lastMessage = "", this.isForEdit && (this.watchingBlocks = [], Entry.playground.mainWorkspace.blockMenu.unbanClass("checker"), Entry.addEventListener("run", this.reRegisterAll.bind(this))), this.type = n || "mission", this.isFail = !1, this.isSuccess = !1, this.entity = this, this.parent = this, Entry.achieveEvent = new Entry.Event, Entry.addEventListener("stop", this.reset.bind(this)), Entry.registerAchievement = this.registerAchievement.bind(this), this.script = new Entry.Code(t || [], this), Entry.targetChecker = this
    }, Entry.Utils.inherit(Entry.Extension, Entry.TargetChecker), (r = Entry.TargetChecker.prototype).renderView = function () {
        return this._view = Entry.Dom("li", {class: "targetChecker"}), this._view.bindOnClick(function (t) {
            Entry.playground.injectObject(this)
        }.bind(this)), this.updateView(), this.isForEdit || this._view.addClass("entryRemove"), this._view
    }, r.generateStatusView = function (t) {
        this._statusView = Entry.Dom("div", {class: "entryTargetStatus"});
        var e = Entry.Dom("div", {class: "innerWrapper", parent: this._statusView});
        this._statusViewIndicator = Entry.Dom("div", {class: "statusIndicator", parent: e});
        var n = Entry.Dom("div", {class: "statusMessage", parent: e});
        this._statusViewContent = Entry.Dom("p", {parent: n}), t && ($(Entry.view_).addClass("iframeWithTargetStatus"), Entry.view_.appendChild(this._statusView[0])), this.updateView(), this.showDefaultMessage()
    }, r.updateView = function () {
        this._view && (this.renderViewMessage(), this.isSuccess ? this._view.addClass("success") : this._view.removeClass("success"), this.isFail ? this._view.addClass("fail") : this._view.removeClass("fail")), this._statusView && this.renderIndicatorMessage()
    }, r.getStatusView = function () {
        return this._statusView || this.generateStatusView(), this._statusView
    }, r.showStatusMessage = function (t) {
        this.lastMessage = t, this.lastIndicatorMessage = null, this.renderIndicatorMessage(), this._statusViewContent && !this.isFail && this._statusViewContent.text(t), this.renderViewMessage()
    }, r.achieveCheck = function (t, e) {
        !this.isFail && Entry.engine.achieveEnabled && (t ? this.achieveGoal(e) : this.fail(e))
    }, r.achieveGoal = function (t) {
        this.isSuccess || this.isFail || this.unachievedGoals.indexOf(t) < 0 || (this.unachievedGoals.splice(this.unachievedGoals.indexOf(t), 1), this.publicGoals.indexOf(t) > -1 && this.remainPublicGoal--, 0 === this.remainPublicGoal && (this.isSuccess = !0, this.showSuccessMessage(), Entry.achieveEvent.notify("success", t)), this.updateView())
    }, r.fail = function (t) {
        this.isSuccess || this.isFail || (this.showStatusMessage(t), this.isFail = !0, Entry.achieveEvent.notify("fail", t), this.updateView())
    }, r.reset = function () {
        this.unachievedGoals = this.goals.concat(), this.remainPublicGoal = this.publicGoals.length, this.isFail = !1, this.isSuccess = !1, this.updateView(), this.showDefaultMessage()
    }, r.showDefaultMessage = function () {
        switch (this.type) {
            case"mission":
                this.showStatusMessage("작품을 실행 해봅시다.");
                break;
            case"mission_intro":
                this.showStatusMessage("작품을 실행하며 미션을 파악해 봅시다."), this.renderIndicatorMessage("미션");
                break;
            case"guide_intro":
                this.showStatusMessage("작품을 실행하며 무엇을 만들지 알아 봅시다."), this.renderIndicatorMessage("안내")
        }
    }, r.showSuccessMessage = function () {
        switch (this.type) {
            case"mission":
                break;
            case"mission_intro":
                this.showStatusMessage("이제 작품을 만들며 미션을 해결해 봅시다."), this.renderIndicatorMessage("미션");
                break;
            case"guide_intro":
                this.showStatusMessage("이제 학습을 시작해 봅시다."), this.renderIndicatorMessage("안내")
        }
    }, r.checkGoal = function (t) {
        return this.goals.indexOf(t) > -1 && this.unachievedGoals.indexOf(t) < 0
    }, r.registerAchievement = function (t) {
        this.isForEdit && this.watchingBlocks.push(t), t.params[1] && this.goals.indexOf(t.params[0] + "") < 0 && (this.goals.push(t.params[0] + ""), t.params[2] && this.publicGoals.push(t.params[0] + ""), this.remainPublicGoal = this.publicGoals.length), this.reset()
    }, r.reRegisterAll = function () {
        var t = this.script.getBlockList(!1, "check_lecture_goal");
        this.watchingBlocks = t, this.goals = _.uniq(t.filter(function (t) {
            return 1 === t.params[1]
        }).map(function (t) {
            return t.params[0] + ""
        })), this.publicGoals = _.uniq(t.filter(function (t) {
            return 1 === t.params[1] && 1 === t.params[2]
        }).map(function (t) {
            return t.params[0] + ""
        })), this.remainPublicGoal = this.publicGoals.length
    }, r.clearExecutor = function () {
        this.script.clearExecutors()
    }, r.destroy = function () {
        this.reset(), Entry.achieveEvent.clear(), this.script.destroy(), $(this._view).remove()
    }, r.renderViewMessage = function () {
        var t = this.goals.length, e = this.publicGoals.length;
        this._view && this._view.html("목표 : " + (t - this.unachievedGoals.length) + " / " + t + " , 공식 목표 : " + (e - this.remainPublicGoal) + " / " + e + "<br>" + this.lastMessage)
    }, r.renderIndicatorMessage = function (t) {
        if (this._statusViewIndicator) {
            t && (this.lastIndicatorMessage = t);
            var e = this.publicGoals.length;
            this._statusViewIndicator.text(this.lastIndicatorMessage || Math.min(e - this.remainPublicGoal + 1, e) + "/" + e)
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.SVG = function (t, e) {
        var n = e || document.getElementById(t);
        return Entry.SVG.createElement(n)
    }, Entry.SVG.NS = "http://www.w3.org/2000/svg", Entry.SVG.NS_XLINK = "http://www.w3.org/1999/xlink", Entry.SVG.createElement = function (t, e) {
        var n;
        if (n = "string" == typeof t ? document.createElementNS(Entry.SVG.NS, t) : t, e) for (var r in e.href && (n.setAttributeNS(Entry.SVG.NS_XLINK, "href", e.href), delete e.href), e) n.setAttribute(r, e[r]);
        return n.elem = Entry.SVG.createElement, n.attr = Entry.SVG.attr, n.addClass = Entry.SVG.addClass, n.removeClass = Entry.SVG.removeClass, n.hasClass = Entry.SVG.hasClass, n.remove = Entry.SVG.remove, n.removeAttr = Entry.SVG.removeAttr, "text" === t && n.setAttributeNS("http://www.w3.org/XML/1998/namespace", "xml:space", "preserve"), this instanceof SVGElement && this.appendChild(n), n
    }, Entry.SVG.attr = function (t, e) {
        if ("string" == typeof t) {
            var n = {};
            n[t] = e, t = n
        }
        if (t) for (var r in t.href && (this.setAttributeNS(Entry.SVG.NS_XLINK, "href", t.href), delete t.href), t) this.setAttribute(r, t[r]);
        return this
    }, Entry.SVG.addClass = function (t) {
        for (var e = this.getAttribute("class"), n = 0; n < arguments.length; n++) t = arguments[n], this.hasClass(t) || (e += " " + t);
        return this.setAttribute("class", e.replace(/\s+/g, " ")), this
    }, Entry.SVG.removeClass = function (t) {
        for (var e = this.getAttribute("class"), n = 0; n < arguments.length; n++) t = arguments[n], this.hasClass(t) && (e = e.replace(new RegExp("(\\s|^)" + t + "(\\s|$)"), " "));
        return this.setAttribute("class", e.replace(/\s+/g, " ")), this
    }, Entry.SVG.hasClass = function (t) {
        var e = this.getAttribute("class");
        return !!e && e.match(new RegExp("(\\s|^)" + t + "(\\s|$)"))
    }, Entry.SVG.remove = function () {
        this.parentNode && this.parentNode.removeChild(this)
    }, Entry.SVG.removeAttr = function (t) {
        this.removeAttribute(t)
    }
}, function (t, e, n) {
    "use strict";
    Entry.Observer = function (t, e, n, r) {
        this.parent = t, this.object = e, this.funcName = n, this.attrs = r, t.push(this)
    }, Entry.Observer.prototype.destroy = function () {
        var t = this.parent, e = t.indexOf(this);
        return e > -1 && t.splice(e, 1), this
    }
}, function (t, e, n) {
    var r = n(16), o = n(64).onFreeze;
    n(39)("seal", function (t) {
        return function (e) {
            return t && r(e) ? t(o(e)) : e
        }
    })
}, function (t, e, n) {
    n(200), t.exports = n(1).Object.seal
}, function (t, e, n) {
    t.exports = {default: n(201), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    var r, o = l(n(0)), a = l(n(38)), s = l(n(3)), i = l(n(202));

    function l(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.Model = function (t, e) {
        var n = Entry.Model;
        return n.generateSchema(t), n.generateSetter(t), n.generateObserve(t), (void 0 === e || e) && (0, i.default)(t), t
    }, (r = Entry.Model).generateSchema = function (t) {
        var e = t.schema;
        if (void 0 !== e) {
            try {
                e = JSON.parse((0, s.default)(e))
            } catch (t) {
                console.log(e), console.error(t)
            }
            for (var n in t.data = {}, e) !function (n) {
                t.data[n] = e[n], (0, a.default)(t, n, {
                    get: function () {
                        return t.data[n]
                    }
                })
            }(n);
            t._toJSON = this._toJSON
        }
    }, r.generateSetter = function (t) {
        t.set = this.set
    }, r.set = function (t, e) {
        var n = {}, r = (0, o.default)(t);
        for (var a in this.data) void 0 !== t[a] && (t[a] === this.data[a] ? r.splice(r.indexOf(a), 1) : (n[a] = this.data[a], t[a] instanceof Array ? this.data[a] = t[a].concat() : this.data[a] = t[a]));
        e || this.notify(r, n)
    }, r.generateObserve = function (t) {
        t.observers = [], t.observe = this.observe, t.unobserve = this.unobserve, t.notify = this.notify
    }, r.observe = function (t, e, n, r) {
        var o = new Entry.Observer(this.observers, t, e, n);
        return !1 !== r && t[e]([]), o
    }, r.unobserve = function (t) {
        t.destroy()
    }, r.notify = function (t, e) {
        "string" == typeof t && (t = [t]);
        var n = this, r = n.observers;
        if (r.length) {
            var o = Entry.Utils.intersectArray;
            r.forEach(function (r) {
                var a = t;
                void 0 !== r.attrs && (a = o(r.attrs, t)), a.length && r.object[r.funcName](a.forEach(function (t) {
                    return {name: t, object: n, oldValue: e[t]}
                }))
            })
        }
    }, r._toJSON = function () {
        var t = {};
        for (var e in this.data) t[e] = this.data[e];
        return t
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Event = function (t) {
        this._sender = t, this._listeners = []
    }, (r = Entry.Event.prototype).attach = function (t, e) {
        var n = this, r = {
            obj: t, fn: e, destroy: function () {
                n.detach(this)
            }
        };
        return this._listeners.push(r), r
    }, r.detach = function (t) {
        var e = this._listeners || [], n = e.indexOf(t);
        if (n > -1) return e.splice(n, 1)
    }, r.clear = function () {
        for (var t = this._listeners; t.length;) t.pop().destroy()
    }, r.notify = function () {
        var t = arguments;
        this._listeners.slice().forEach(function (e) {
            e.fn.apply(e.obj, t)
        })
    }, r.hasListeners = function () {
        return !!this._listeners.length
    }
}, function (t, e, n) {
    "use strict";
    Entry.Dom = function (t, e) {
        var n;
        return n = t instanceof HTMLElement ? $(t) : t instanceof jQuery ? t : /<(\w+)>/.test(t) ? $(t) : $("<" + t + "></" + t + ">"), void 0 === e ? n : (e.id && n.attr("id", e.id), e.class && n.addClass(e.class), e.classes && e.classes.map(function (t) {
            n.addClass(t)
        }), e.src && n.attr("src", e.src), e.parent && e.parent.append(n), n.bindOnClick = function () {
            var t, e, n = function (t) {
                t.stopImmediatePropagation(), t.handled || (t.handled = !0, e.call(this, t))
            };
            arguments.length > 1 ? (e = arguments[1] instanceof Function ? arguments[1] : function () {
            }, t = "string" == typeof arguments[0] ? arguments[0] : "") : e = arguments[0] instanceof Function ? arguments[0] : function () {
            }, t ? $(this).on("click tab", t, n) : $(this).on("click tab", n)
        }, n)
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.db = {data: {}, typeMap: {}}, (r = Entry.db).add = function (t) {
        this.data[t.id] = t;
        var e = t.type;
        void 0 === this.typeMap[e] && (this.typeMap[e] = {}), this.typeMap[e][t.id] = t
    }, r.has = function (t) {
        return this.data.hasOwnProperty(t)
    }, r.remove = function (t) {
        if (this.has(t)) {
            var e = this.data[t];
            delete this.typeMap[e.type][t], delete this.data[t]
        }
    }, r.get = function (t) {
        return this.data[t]
    }, r.find = function () {
    }, r.clear = function () {
        this.data = {}, this.typeMap = {}
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    Entry.Collection = function (t) {
        this.length = 0, this._hashMap = {}, this._observers = [], this.set(t)
    }, r = Entry.Collection.prototype, o = Array.prototype, r.set = function (t) {
        for (; this.length;) o.pop.call(this);
        var e = this._hashMap;
        for (var n in e) delete e[n];
        if (void 0 !== t) for (var r = 0, a = t.length; r < a; r++) {
            var s = t[r];
            e[s.id] = s, o.push.call(this, s)
        }
    }, r.push = function (t) {
        this._hashMap[t.id] = t, o.push.call(this, t)
    }, r.unshift = function () {
        for (var t = Array.prototype.slice.call(arguments, 0), e = this._hashMap, n = t.length - 1; n >= 0; n--) {
            var r = t[n];
            o.unshift.call(this, r), e[r.id] = r
        }
    }, r.insert = function (t, e) {
        o.splice.call(this, e, 0, t), this._hashMap[t.id] = t
    }, r.has = function (t) {
        return !!this._hashMap[t]
    }, r.get = function (t) {
        return this._hashMap[t]
    }, r.at = function (t) {
        return this[t]
    }, r.getAll = function () {
        for (var t = this.length, e = [], n = 0; n < t; n++) e.push(this[n]);
        return e
    }, r.indexOf = function (t) {
        return o.indexOf.call(this, t)
    }, r.find = function (t) {
        for (var e, n = [], r = 0, o = this.length; r < o; r++) {
            e = !0;
            var a = this[r];
            for (var s in t) if (t[s] != a[s]) {
                e = !1;
                break
            }
            e && n.push(a)
        }
        return n
    }, r.pop = function () {
        var t = o.pop.call(this);
        return delete this._hashMap[t.id], t
    }, r.shift = function () {
        var t = o.shift.call(this);
        return delete this._hashMap[t.id], t
    }, r.slice = function (t, e) {
        var n = o.slice.call(this, t, e), r = this._hashMap;
        for (var a in n) delete r[n[a].id];
        return n
    }, r.remove = function (t) {
        var e = this.indexOf(t);
        e > -1 && (delete this._hashMap[t.id], this.splice(e, 1))
    }, r.splice = function (t, e) {
        var n = o.slice.call(arguments, 2), r = this._hashMap;
        e = void 0 === e ? this.length - t : e;
        for (var a = o.splice.call(this, t, e), s = 0, i = a.length; s < i; s++) delete r[a[s].id];
        for (s = 0, i = n.length; s < i; s++) {
            var l = n[s];
            o.splice.call(this, t++, 0, l), this._hashMap[l.id] = l
        }
        return a
    }, r.clear = function () {
        for (; this.length;) o.pop.call(this);
        this._hashMap = {}
    }, r.map = function (t, e) {
        for (var n = [], r = 0, o = this.length; r < o; r++) n.push(t(this[r], e));
        return n
    }, r.moveFromTo = function (t, e) {
        var n = this.length - 1;
        t < 0 || e < 0 || t > n || e > n || o.splice.call(this, e, 0, o.splice.call(this, t, 1)[0])
    }, r.sort = function () {
    }, r.fromJSON = function () {
    }, r.toJSON = function () {
        for (var t = [], e = 0, n = this.length; e < n; e++) t.push(this[e].toJSON());
        return t
    }, r.observe = function () {
    }, r.unobserve = function () {
    }, r.notify = function () {
    }, r.destroy = function () {
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Commander = function (t) {
        "workspace" != t && "phone" != t || (Entry.stateManager = new Entry.StateManager), Entry.do = this.do.bind(this), Entry.undo = this.undo.bind(this), this.editor = {}, this.reporters = [], this._tempStorage = null, Entry.Command.editor = this.editor, this.doEvent = new Entry.Event(this), this.logEvent = new Entry.Event(this), this.doCommandAll = Entry.doCommandAll
    }, (r = Entry.Commander.prototype).do = function (t) {
        "string" == typeof t && (t = Entry.STATIC.COMMAND_TYPES[t]);
        var e = Array.prototype.slice.call(arguments);
        e.shift(), this.report(Entry.STATIC.COMMAND_TYPES.do), this.report(t, e);
        var n, r = Entry.Command[t], o = !0 === r.skipUndoStack || !this.doCommandAll && t > 500;
        Entry.stateManager && !o && (n = Entry.stateManager.addCommand.apply(Entry.stateManager, [t, this, this.do, r.undo].concat(r.state.apply(this, e))));
        var a = Entry.Command[t].do.apply(this, e);
        this.doEvent.notify(t, e);
        var s = n ? n.id : null;
        return {
            value: a, isPass: function (t, e) {
                this.isPassById(s, t, e)
            }.bind(this)
        }
    }, r.undo = function () {
        var t = Array.prototype.slice.call(arguments), e = t.shift(), n = Entry.Command[e];
        this.report(Entry.STATIC.COMMAND_TYPES.undo);
        var r, o = Entry.Command[e];
        return Entry.stateManager && !0 !== o.skipUndoStack && (r = Entry.stateManager.addCommand.apply(Entry.stateManager, [e, this, this.do, n.undo].concat(n.state.apply(this, t)))), {
            value: Entry.Command[e].do.apply(this, t),
            isPass: function (t) {
                this.isPassById(r.id, t)
            }.bind(this)
        }
    }, r.redo = function () {
        var t = Array.prototype.slice.call(arguments), e = t.shift(), n = Entry.Command[e];
        this.report(Entry.STATIC.COMMAND_TYPES.redo);
        var r = Entry.Command[e];
        Entry.stateManager && !0 !== r.skipUndoStack && Entry.stateManager.addCommand.apply(Entry.stateManager, [e, this, this.undo, e].concat(n.state.apply(null, t))), n.undo.apply(this, t)
    }, r.setCurrentEditor = function (t, e) {
        this.editor[t] = e
    }, r.isPass = function (t) {
        if (Entry.stateManager) {
            t = void 0 === t || t;
            var e = Entry.stateManager.getLastCommand();
            e && (e.isPass = t)
        }
    }, r.isPassById = function (t, e, n) {
        if (t && Entry.stateManager) {
            e = void 0 === e || e;
            var r = Entry.stateManager.getLastCommandById(t);
            r && (r.isPass = e, n && (r.skipCount = !!n))
        }
    }, r.addReporter = function (t) {
        t.logEventListener = this.logEvent.attach(t, t.add)
    }, r.removeReporter = function (t) {
        t.logEventListener && this.logEvent.detatch(t.logEventListener), delete t.logEventListener
    }, r.report = function (t, e) {
        var n;
        (n = t && Entry.Command[t] && Entry.Command[t].log ? Entry.Command[t].log.apply(this, e) : e).unshift(t), this.logEvent.notify(n)
    }, r.applyOption = function () {
        this.doCommandAll = Entry.doCommandAll
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Command = {}, (r = Entry.Command)[Entry.STATIC.COMMAND_TYPES.do] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP,
        log: function (t) {
            return []
        },
        skipUndoStack: !0
    }, r[Entry.STATIC.COMMAND_TYPES.undo] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP, log: function (t) {
            return []
        }, skipUndoStack: !0
    }, r[Entry.STATIC.COMMAND_TYPES.redo] = {
        recordable: Entry.STATIC.RECORDABLE.SKIP, log: function (t) {
            return []
        }, skipUndoStack: !0
    }
}, function (t, e, n) {
    "use strict";
    var r, o = s(n(3)), a = s(n(0));

    function s(t) {
        return t && t.__esModule ? t : {default: t}
    }

    Entry.VariableContainer = function () {
        this.variables_ = [], this.messages_ = [], this.lists_ = [], this.functions_ = {}, this.viewMode_ = "all", this.selected = null, this.variableAddPanel = {
            isOpen: !1,
            info: {object: null, isCloud: !1}
        }, this.listAddPanel = {
            isOpen: !1,
            info: {object: null, isCloud: !1}
        }, this.selectedVariable = null, this._variableRefs = [], this._messageRefs = [], this._functionRefs = [], this._filterTabs = {}, Entry.addEventListener("workspaceChangeMode", this.updateList.bind(this))
    }, (r = Entry.VariableContainer.prototype).createDom = function (t) {
        var e = this;
        this.filterElements = {}, this.view_ = t;
        var n = Entry.createElement("table");
        n.addClass("entryVariableSelectorWorkspace"), this.view_.appendChild(n);
        var r = Entry.createElement("tr");
        n.appendChild(r);
        var o = this.createSelectButton("all");
        this.filterElements.all = o, o.setAttribute("rowspan", "2"), o.addClass("selected", "allButton"), r.appendChild(o), this.filterElements.variable = this.createSelectButton("variable", Entry.variableEnable), r.appendChild(this.filterElements.variable), this.filterElements.message = this.createSelectButton("message", Entry.messageEnable), r.appendChild(this.filterElements.message), r = Entry.createElement("tr"), this.filterElements.list = this.createSelectButton("list", Entry.listEnable), r.appendChild(this.filterElements.list), this.filterElements.func = this.createSelectButton("func", Entry.functionEnable), r.appendChild(this.filterElements.func), n.appendChild(r);
        var a = Entry.createElement("ul");
        a.addClass("entryVariableListWorkspace"), this.view_.appendChild(a), this.listView_ = a;
        var s = Entry.createElement("li");
        s.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace"), s.innerHTML = "+ " + Lang.Workspace.variable_add;
        var i = this;
        this.variableAddButton_ = s, s.bindOnClick(function (t) {
            Entry.do("variableContainerClickVariableAddButton")
        }), this.generateVariableAddView(), this.generateListAddView(), this.generateVariableSplitterView(), this.generateVariableSettingView(), this.generateListSettingView();
        var l = Entry.createElement("li");
        l.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace"), l.innerHTML = "+ " + Lang.Workspace.message_create, this.messageAddButton_ = l, l.bindOnClick(function (t) {
            var n = Entry.getOrderedName(Lang.Workspace.message + " ", e.messages_, "name");
            e.addMessage({name: n})
        });
        var c = Entry.createElement("li");
        c.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace"), c.innerHTML = "+ " + Lang.Workspace.list_create, this.listAddButton_ = c, c.bindOnClick(function (t) {
            var n = i.listAddPanel, r = n.view.name.value.trim();
            n.isOpen ? r && 0 !== r.length ? e.addList() : (n.view.addClass("entryRemove"), n.isOpen = !1) : (n.view.removeClass("entryRemove"), n.view.name.focus(), n.isOpen = !0)
        });
        var u = Entry.createElement("li");
        return u.addClass("entryVariableAddWorkspace entryVariableListElementWorkspace"), u.innerHTML = "+ " + Lang.Workspace.function_add, this.functionAddButton_ = u, u.bindOnClick(function (t) {
            var n = Entry.playground, r = e._getBlockMenu();
            n.changeViewMode("code"), "func" != r.lastSelector && r.selectMenu("func"), e.createFunction()
        }), t
    }, r.createSelectButton = function (t, e) {
        void 0 === e && (e = !0);
        var n = Entry.createElement("td");
        return n.addClass("entryVariableSelectButtonWorkspace", t), n.innerHTML = Lang.Workspace[t], n.bindOnClick(function (e) {
            Entry.do("variableContainerSelectFilter", t, this.viewMode_)
        }), !1 === e && (n.addClass("disable"), n.disabled = !0), this._filterTabs[t] = n, n
    }, r.selectFilter = function (t) {
        for (var e = this.view_.getElementsByTagName("td"), n = 0; n < e.length; n++) e[n].removeClass("selected"), e[n].hasClass(t) && e[n].addClass("selected");
        this.viewMode_ = t, this.select(), this.updateList()
    }, r.updateVariableAddView = function (t) {
        var e = "variable" == (t = t || "variable") ? this.variableAddPanel : this.listAddPanel, n = e.info, r = e.view;
        e.view.addClass("entryRemove"), r.cloudCheck.removeClass("entryVariableAddChecked"), r.localCheck.removeClass("entryVariableAddChecked"), r.globalCheck.removeClass("entryVariableAddChecked"), r.cloudWrapper.removeClass("entryVariableAddSpaceUnCheckedWorkspace"), n.isCloud && r.cloudCheck.addClass("entryVariableAddChecked"), e.isOpen && (r.removeClass("entryRemove"), r.name.focus()), n.object ? (r.localCheck.addClass("entryVariableAddChecked"), r.cloudWrapper.addClass("entryVariableAddSpaceUnCheckedWorkspace")) : r.globalCheck.addClass("entryVariableAddChecked")
    }, r.select = function (t) {
        t = this.selected == t ? null : t, this.selected && (this.selected.listElement.removeClass("selected"), this.selected.callerListElement && (this.listView_.removeChild(this.selected.callerListElement), delete this.selected.callerListElement), this.selected = null), t && (t.listElement.addClass("selected"), this.selected = t, t instanceof Entry.Variable ? (this.renderVariableReference(t), t.object_ && Entry.container.selectObject(t.object_, !0)) : t instanceof Entry.Func ? this.renderFunctionReference(t) : this.renderMessageReference(t))
    }, r.getMessage = function (t) {
        return this.messages_.filter(function (e) {
            return e.id === t
        })[0]
    }, r.renderMessageReference = function (t) {
        for (var e = this, n = this._messageRefs, r = t.id, o = [], a = 0; a < n.length; a++) n[a].block.params.indexOf(r) > -1 && o.push(n[a]);
        var s = Entry.createElement("ul");
        for (var a in s.addClass("entryVariableListCallerListWorkspace"), o) {
            var i, l = o[a];
            (i = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace"), !l.object.thumbnailView_ && l.object.generateView(), i.appendChild(l.object.thumbnailView_.cloneNode());
            var c = Entry.createElement("div");
            c.addClass("entryVariableListCallerNameWorkspace"), c.innerHTML = l.object.name + " : " + Lang.Blocks["START_" + l.block.type], i.appendChild(c), i.caller = l, i.message = t, i.bindOnClick(function (t) {
                Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), e.select(null), e.select(this.message)), this.caller, Entry.playground.toggleOnVariableView(), Entry.playground.changeViewMode("variable")
            }), s.appendChild(i)
        }
        0 === o.length && ((i = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), i.innerHTML = Lang.Workspace.no_use, s.appendChild(i)), t.callerListElement = s, this.listView_.insertBefore(s, t.listElement), this.listView_.insertBefore(t.listElement, s)
    }, r.renderVariableReference = function (t) {
        for (var e = this, n = this._variableRefs, r = t.id_, o = [], a = 0; a < n.length; a++) n[a].block.params.indexOf(r) > -1 && o.push(n[a]);
        var s = Entry.createElement("ul");
        for (var a in s.addClass("entryVariableListCallerListWorkspace"), o) {
            var i, l = o[a];
            (i = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace"), !l.object.thumbnailView_ && l.object.generateView(), i.appendChild(l.object.thumbnailView_.cloneNode());
            var c = Entry.createElement("div");
            c.addClass("entryVariableListCallerNameWorkspace"), c.innerHTML = l.object.name + " : " + Lang.Blocks["VARIABLE_" + l.block.type], i.appendChild(c), i.caller = l, i.variable = t, i.bindOnClick(function (t) {
                Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), e.select(null));
                var n = this.caller, r = n.funcBlock || n.block, o = r.view;
                o && o.getBoard().activateBlock(r), Entry.playground.toggleOnVariableView(), Entry.playground.changeViewMode("variable")
            }), s.appendChild(i)
        }
        0 === o.length && ((i = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), i.innerHTML = Lang.Workspace.no_use, s.appendChild(i)), t.callerListElement = s, this.listView_.insertBefore(s, t.listElement), this.listView_.insertBefore(t.listElement, s)
    }, r.renderFunctionReference = function (t) {
        for (var e = this, n = this._functionRefs, r = (t.id_, []), o = 0; o < n.length; o++) r.push(n[o]);
        var a = Entry.createElement("ul");
        for (var o in a.addClass("entryVariableListCallerListWorkspace"), r) {
            var s, i = r[o];
            (s = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace"), !i.object.thumbnailView_ && i.object.generateView(), s.appendChild(i.object.thumbnailView_.cloneNode());
            var l = Entry.createElement("div");
            l.addClass("entryVariableListCallerNameWorkspace"), l.innerHTML = i.object.name, s.appendChild(l), s.caller = i, s.bindOnClick(function (n) {
                Entry.playground.object != this.caller.object && (Entry.container.selectObject(), Entry.container.selectObject(this.caller.object.id, !0), e.select(null), e.select(t)), Entry.playground.toggleOnVariableView();
                var r = this.caller.block, o = r.view;
                o && o.getBoard().activateBlock(r), Entry.playground.changeViewMode("variable")
            }), a.appendChild(s)
        }
        0 === r.length && ((s = Entry.createElement("li")).addClass("entryVariableListCallerWorkspace entryVariableListCallerNoneWorkspace"), s.innerHTML = Lang.Workspace.no_use, a.appendChild(s)), t.callerListElement = a, this.listView_.insertBefore(a, t.listElement), this.listView_.insertBefore(t.listElement, a)
    }, r.updateList = function () {
        var t = Entry.playground;
        if (this.listView_ && (!t || "variable" === t.getViewMode() || "code" === t.getViewMode())) {
            this.variableSettingView.addClass("entryRemove"), this.listSettingView.addClass("entryRemove");
            var e = this._isPythonMode();
            for (e ? this.listView_.addClass("entryVariableContainerTextMode") : this.listView_.removeClass("entryVariableContainerTextMode"); this.listView_.firstChild;) this.listView_.removeChild(this.listView_.lastChild);
            var n = this.viewMode_, r = [];
            if ("all" == n || "message" == n) for (var o in"message" == n && this.listView_.appendChild(this.messageAddButton_), this.messages_) {
                var a = this.messages_[o];
                r.push(a), !a.listElement && this.createMessageView(a);
                var s = a.listElement;
                this.listView_.appendChild(s), a.callerListElement && this.listView_.appendChild(a.callerListElement)
            }
            if ("all" == n || "variable" == n) if ("variable" == n) {
                var i = this.variableAddPanel.info;
                for (var o in i.object && !Entry.playground.object && (i.object = null), this.listView_.appendChild(this.variableAddButton_), this.listView_.appendChild(this.variableAddPanel.view), this.variableSplitters.top.innerHTML = Lang.Workspace.Variable_used_at_all_objects, this.listView_.appendChild(this.variableSplitters.top), this.variables_) (l = this.variables_[o]).object_ || (r.push(l), !l.listElement && this.createVariableView(l), s = l.listElement, this.listView_.appendChild(s), l.callerListElement && this.listView_.appendChild(l.callerListElement));
                for (var o in this.variableSplitters.bottom.innerHTML = Lang.Workspace.Variable_used_at_special_object, this.listView_.appendChild(this.variableSplitters.bottom), this.variables_) (l = this.variables_[o]).object_ && (r.push(l), !l.listElement && this.createVariableView(l), s = l.listElement, this.listView_.appendChild(s), l.callerListElement && this.listView_.appendChild(l.callerListElement));
                this.updateVariableAddView("variable")
            } else for (var o in this.variables_) {
                var l = this.variables_[o];
                r.push(l), !l.listElement && this.createVariableView(l), s = l.listElement, this.listView_.appendChild(s), l.callerListElement && this.listView_.appendChild(l.callerListElement)
            }
            if ("all" == n || "list" == n) if ("list" == n) {
                for (var o in(i = this.listAddPanel.info).object && !Entry.playground.object && (i.object = null), this.listView_.appendChild(this.listAddButton_), this.listView_.appendChild(this.listAddPanel.view), this.variableSplitters.top.innerHTML = Lang.Workspace.List_used_all_objects, this.listView_.appendChild(this.variableSplitters.top), this.updateVariableAddView("list"), this.lists_) (c = this.lists_[o]).object_ || (r.push(c), !c.listElement && this.createListView(c), s = c.listElement, this.listView_.appendChild(s), c.callerListElement && this.listView_.appendChild(c.callerListElement));
                for (var o in this.variableSplitters.bottom.innerHTML = Lang.Workspace.list_used_specific_objects, this.listView_.appendChild(this.variableSplitters.bottom), this.lists_) (c = this.lists_[o]).object_ && (r.push(c), !c.listElement && this.createListView(c), s = c.listElement, this.listView_.appendChild(s), c.callerListElement && this.listView_.appendChild(c.callerListElement));
                this.updateVariableAddView("variable")
            } else for (var o in this.lists_) {
                var c = this.lists_[o];
                r.push(c), !c.listElement && this.createListView(c), s = c.listElement, this.listView_.appendChild(s), c.callerListElement && this.listView_.appendChild(c.callerListElement)
            }
            if ("all" == n || "func" == n) {
                if ("func" == n) {
                    var u = Entry.Workspace.MODE_BOARD;
                    Entry.getMainWS() && (u = Entry.getMainWS().getMode()), u === Entry.Workspace.MODE_OVERLAYBOARD || e ? this.functionAddButton_.addClass("disable") : this.functionAddButton_.removeClass("disable"), this.listView_.appendChild(this.functionAddButton_)
                }
                for (var o in this.functions_) {
                    var p = this.functions_[o];
                    r.push(p), !p.funcElement && this.createFunctionView(p), s = p.listElement, this.listView_.appendChild(s), p.callerListElement && this.listView_.appendChild(p.callerListElement)
                }
            }
            this.listView_.appendChild(this.variableSettingView), this.listView_.appendChild(this.listSettingView), r = null
        }
    }, r.setMessages = function (t) {
        for (var e in t) {
            var n = t[e];
            n.id || (n.id = Entry.generateHash()), this.messages_.push(n)
        }
        Entry.playground.reloadPlayground()
    }, r.appendMessages = function (t) {
        var e = this, n = function (n) {
            var r = t[n];
            if (r.id) {
                if (e.messages_.some(function (t) {
                        return t.id === r.id
                    })) return "continue"
            } else r.id = Entry.generateHash();
            var o = r.name;
            o = e.checkAllVariableName(o, "messages_", "name") ? Entry.getOrderedName(o, e.messages_, "name") : o, r.name = o, e.messages_.push(r)
        };
        for (var r in t) n(r);
        Entry.playground.reloadPlayground()
    }, r.setVariables = function (t) {
        for (var e in t) {
            var n = new Entry.Variable(t[e]), r = n.getType();
            "variable" == r || "slide" == r ? (n.generateView(this.variables_.length), this.variables_.push(n)) : "list" == r ? (n.generateView(this.lists_.length), this.lists_.push(n)) : "timer" == r ? this.generateTimer(n) : "answer" == r && this.generateAnswer(n)
        }
        Entry.isEmpty(Entry.engine.projectTimer) && Entry.variableContainer.generateTimer(), Entry.isEmpty(Entry.container.inputValue) && Entry.variableContainer.generateAnswer(), Entry.playground.reloadPlayground()
    }, r.generateVariable = function (t, e, n) {
        var r = t.name_;
        t.generateView(e.length), r = this.checkAllVariableName(r, n) ? Entry.getOrderedName(r, e, "name_") : r, t.name_ = r
    }, r.appendVariables = function (t) {
        for (var e in t) {
            var n = new Entry.Variable(t[e]);
            n.id_ || (n.id_ = Entry.generateHash()), n.name_;
            var r = n.getType();
            if ("variable" == r || "slide" == r) {
                if (this.variables_.some(function (t) {
                        return t.id_ === n.id_
                    })) continue;
                this.generateVariable(n, this.variables_, "variables_"), this.variables_.push(n)
            } else if ("list" == r) {
                if (this.lists_.some(function (t) {
                        return t.id_ === n.id_
                    })) continue;
                this.generateVariable(n, this.lists_, "lists_"), this.lists_.push(n)
            }
        }
        Entry.isEmpty(Entry.engine.projectTimer) && Entry.variableContainer.generateTimer(), Entry.isEmpty(Entry.container.inputValue) && Entry.variableContainer.generateAnswer(), Entry.playground.reloadPlayground()
    }, r.setFunctions = function (t) {
        for (var e in t) {
            var n = new Entry.Func(t[e]);
            n.generateBlock(), this.functions_[n.id] = n
        }
    }, r.appendFunctions = function (t) {
        for (var e in t) {
            var n = t[e];
            if (n.id) {
                if ("" + n.id in this.functions_) continue
            } else n.id = Entry.generateHash();
            var r = new Entry.Func(n);
            this.changeFunctionName(r), r.generateBlock(), this.functions_[r.id] = r
        }
    }, r.changeFunctionName = function (t) {
        var e = this, n = t.content.getEventMap("funcDef")[0].params[0].data.params, r = this.getFunctionParamInfo(n),
            o = this.getFunctionParamName(r), s = (0, a.default)(this.functions_).map(function (t) {
                var n = e.functions_[t].content.getEventMap("funcDef")[0].params[0].data.params,
                    r = e.getFunctionParamInfo(n);
                return {name: e.getFunctionParamName(r)}
            });
        if (s.some(function (t) {
                var e = t.name;
                return o === e
            })) {
            for (var i = Entry.getOrderedNameNumber(o, s, "name"), l = r.length - 1; ; l--) {
                var c = r[l];
                if ("string" === c.type) {
                    c.parent[0] += i;
                    break
                }
            }
            Entry.Func.generateWsBlock(t)
        }
    }, r.getFunctionParamName = function (t) {
        var e = "";
        return t.forEach(function (t) {
            e += t.name
        }), e
    }, r.getFunctionParamInfo = function (t) {
        var e = this, n = [];
        return t.forEach(function (r, o) {
            if ("string" == typeof r) n[o] = {name: r, type: "string", parent: t}; else if (r instanceof Entry.Block) {
                var s = r.data, i = void 0 === s ? {} : s, l = i.params, c = void 0 === l ? [] : l, u = i.type;
                if (0 === u.indexOf("stringParam") || 0 === u.indexOf("booleanParam")) {
                    var p = u.slice(0, -5);
                    n[o] = {name: p, type: p, parent: t}
                } else {
                    var _ = e.getFunctionParamInfo(c);
                    (0, a.default)(_), _.forEach(function (t, e) {
                        n[e + o] = t
                    })
                }
            }
        }), n
    }, r.getFunction = function (t) {
        return this.functions_[t]
    }, r.getVariable = function (t, e) {
        var n = Entry.findObjsByKey(this.variables_, "id_", t)[0];
        return e && e.isClone && n.object_ && (n = Entry.findObjsByKey(e.variables, "id_", t)[0]), n
    }, r.getVariableByName = function (t, e, n) {
        !n && Entry.playground && Entry.playground.object && (n = Entry.playground.object.id);
        for (var r = 0; r < this.variables_.length; r++) {
            var o = this.variables_[r];
            if (!0 === e) {
                if (!o.object_ || o.object_ !== n) continue
            } else if (!1 === e && o.object_) continue;
            if (o.getName() === t) return o
        }
    }, r.getList = function (t, e) {
        var n = Entry.findObjsByKey(this.lists_, "id_", t)[0];
        return e && e.isClone && n.object_ && (n = Entry.findObjsByKey(e.lists, "id_", t)[0]), n
    }, r.createFunction = function () {
        if (!Entry.Func.isEdit) {
            var t = new Entry.Func;
            Entry.Func.edit(t)
        }
    }, r.addFunction = function (t) {
    }, r.removeFunction = function (t) {
        var e = t.id, n = this.functions_;
        n[e].destroy(), delete n[e];
        var r = "func_" + e;
        for (var o in Entry.container.removeFuncBlocks(r), n) n[o].content.removeBlocksByType(r);
        this.updateList()
    }, r.checkListPosition = function (t, e) {
        var n = t.x_, r = t.x_ + t.width_, o = -t.y_, a = -t.y_ - t.height_;
        return e.x > n && e.x < r && e.y < o && e.y > a
    }, r.getListById = function (t) {
        var e = this.lists_, n = [];
        if (e.length > 0) {
            for (var r = 0; r < e.length; r++) this.checkListPosition(e[r], t) && n.push(e[r]);
            return n
        }
        return !1
    }, r.getListByName = function (t, e, n) {
        var r = this.lists_;
        !n && Entry.playground && Entry.playground.object && (n = Entry.playground.object.id);
        for (var o = 0; o < r.length; o++) {
            var a = r[o];
            if (!0 === e) {
                if (!a.object_ || a.object_ !== n) continue
            } else if (!1 === e && a.object_) continue;
            if (a.getName() === t) return a
        }
    }, r.editFunction = function (t, e) {
    }, r.saveFunction = function (t) {
        var e = Entry.getMainWS();
        if (e && e.overlayModefrom == Entry.Workspace.MODE_VIMBOARD && t && t.description) {
            var n = t.description.substring(1, t.description.length - 1),
                r = Entry.TextCodingUtil.isNameIncludeSpace(n, "function");
            if (r) return entrylms.alert(r), void Entry.Func.cancelEdit()
        }
        this.functions_[t.id] || (this.functions_[t.id] = t, this.createFunctionView(t)), t.listElement && (t.listElement.nameField.innerHTML = t.description), this.updateList()
    }, r.createFunctionView = function (t) {
        var e = this;
        if (this.view_) {
            var n = Entry.createElement("li"), r = "";
            r += "entryVariableListElementWorkspace", r += " entryFunctionElementWorkspace", r += " function", n.addClass(r), n.bindOnClick(function (n) {
                n.stopPropagation(), e.select(t)
            });
            var o = Entry.createElement("button");
            o.addClass("entryVariableListElementDeleteWorkspace"), o.bindOnClick(function (n) {
                n.stopPropagation(), entrylms.confirm(Lang.Workspace.will_you_delete_function).then(function (n) {
                    !0 === n && (e.removeFunction(t), e.selected = null)
                })
            });
            var a = Entry.createElement("button");
            a.addClass("entryVariableListElementEditWorkspace notForTextMode");
            var s = this._getBlockMenu();
            a.bindOnClick(function (e) {
                e.stopPropagation();
                var n = Entry.playground;
                n && (n.changeViewMode("code"), "func" != s.lastSelector && s.selectMenu("func")), Entry.Func.edit(t)
            });
            var i = Entry.createElement("div");
            i.addClass("entryVariableFunctionElementNameWorkspace"), i.innerHTML = t.description, n.nameField = i, n.appendChild(i), n.appendChild(a), n.appendChild(o), t.listElement = n
        }
    }, r.checkAllVariableName = function (t, e) {
        e = this[e];
        for (var n = 0; n < e.length; n++) if (e[n].name_ == t) return !0;
        return !1
    }, r.addVariable = function (t) {
        if (Entry.isTextMode) {
            var e = (r = this.variableAddPanel).view.name.value,
                n = Entry.TextCodingUtil.isNameIncludeSpace(e, "variable");
            if (n) return entrylms.alert(n), this.variableAddPanel.view.addClass("entryRemove"), void this.resetVariableAddPanel("variable")
        }
        var r = this.variableAddPanel;
        if (!t) {
            var o = r.view.name.value.trim();
            o && 0 !== o.length || (o = Lang.Workspace.variable), o.length > this._maxNameLength && (o = this._truncName(o, "variable")), o = this.checkAllVariableName(o, "variables_") ? Entry.getOrderedName(o, this.variables_, "name_") : o;
            var a = r.info;
            t = {name: o, isCloud: a.isCloud, object: a.object, variableType: "variable"}
        }
        r.view && r.view.addClass("entryRemove"), this.resetVariableAddPanel("variable"), t instanceof Entry.Variable || (t = new Entry.Variable(t)), t.generateView(this.variables_.length), this.createVariableView(t), this.variables_.unshift(t), Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable"), Entry.playground.reloadPlayground(), r.view && (r.view.name.value = ""), this.updateList()
    }, r.removeVariable = function (t) {
        t instanceof Entry.Variable || (t = this.variables_.filter(function (e) {
            return t.id === e.id_
        })[0]);
        var e = this.variables_.indexOf(t);
        t.toJSON(), this.selected == t && this.select(null), t.remove(), this.variables_.splice(e, 1), Entry.playground.reloadPlayground(), this.updateList()
    }, r.changeVariableName = function (t, e) {
        if (t.name_ != e) {
            if (Entry.isTextMode) {
                var n = Entry.TextCodingUtil.isNameIncludeSpace(e, "variable");
                if (n) return entrylms.alert(n), void(t.listElement.nameField.value = t.name_)
            }
            var r = this.variables_;
            if (Entry.isExist(e, "name_", r)) return t.listElement.nameField.value = t.name_, void Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_dup);
            if (e.length > 10) return t.listElement.nameField.value = t.name_, void Entry.toast.alert(Lang.Workspace.variable_rename_failed, Lang.Workspace.variable_too_long);
            t.setName(e), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.variable_rename, Lang.Workspace.variable_rename_ok)
        }
    }, r.changeListName = function (t, e) {
        if (t.name_ != e) {
            if (Entry.isTextMode) {
                var n = Entry.TextCodingUtil.isNameIncludeSpace(e, "list");
                if (n) return entrylms.alert(n), void(t.listElement.nameField.value = t.name_)
            }
            var r = this.lists_;
            if (Entry.isExist(e, "name_", r)) return t.listElement.nameField.value = t.name_, void Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_dup);
            if (e.length > 10) return t.listElement.nameField.value = t.name_, void Entry.toast.alert(Lang.Workspace.list_rename_failed, Lang.Workspace.list_too_long);
            t.name_ = e, t.updateView(), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.list_rename, Lang.Workspace.list_rename_ok)
        }
    }, r.removeList = function (t) {
        var e = this.lists_.indexOf(t), n = t.toJSON();
        return Entry.stateManager && Entry.stateManager.addCommand("remove list", this, this.addList, n), this.selected == t && this.select(null), t.remove(), this.lists_.splice(e, 1), Entry.playground.reloadPlayground(), this.updateList(), new Entry.State(this, this.addList, n)
    }, r.createVariableView = function (t) {
        var e = this, n = Entry.createElement("li"), r = Entry.createElement("div");
        r.addClass("entryVariableListElementWrapperWorkspace variable"), n.appendChild(r);
        var o = "entryVariableListElementWorkspace";
        t.object_ ? o += " entryVariableLocalElementWorkspace" : t.isCloud_ ? o += " entryVariableCloudElementWorkspace" : o += " entryVariableGlobalElementWorkspace", n.addClass(o), n.bindOnClick(function (n) {
            e.select(t)
        });
        var a = Entry.createElement("button");
        a.addClass("entryVariableListElementDeleteWorkspace notForTextMode"), a.bindOnClick(function (n) {
            n.stopPropagation(), e.removeVariable(t), e.selectedVariable = null, e.variableSettingView.addClass("entryRemove")
        }), n.removeButton = a, this._removeButton = a;
        var s = Entry.createElement("button");
        s.addClass("entryVariableListElementEditWorkspace"), s.bindOnClick(function (n) {
            n.stopPropagation(), l.removeAttribute("disabled"), i.removeClass("entryRemove"), this.addClass("entryRemove"), e.updateSelectedVariable(t), l.focus()
        }), n.editButton = s;
        var i = Entry.createElement("button");
        i.addClass("entryVariableListElementEditWorkspace entryRemove"), i.bindOnClick(function (t) {
            t.stopPropagation(), l.blur(), l.setAttribute("disabled", "disabled"), s.removeClass("entryRemove"), this.addClass("entryRemove"), e.updateSelectedVariable(null, "variable")
        }), n.editSaveButton = i;
        var l = Entry.createElement("input");
        l.addClass("entryVariableListElementNameWorkspace"), l.setAttribute("disabled", "disabled"), l.value = t.name_, l.bindOnClick(function (t) {
            t.stopPropagation()
        }), l.onblur = function (n) {
            var r = this.value.trim();
            if (!r || 0 === r.length) return Entry.toast.alert(Lang.Msgs.warn, Lang.Workspace.variable_can_not_space), void(this.value = t.getName());
            e.changeVariableName(t, this.value)
        }, l.onkeydown = function (t) {
            13 == t.keyCode && this.blur()
        }, n.nameField = l, r.appendChild(l), r.appendChild(s), r.appendChild(i), r.appendChild(a), t.listElement = n
    }, r.addMessage = function (t) {
        return t.id || (t.id = Entry.generateHash()), Entry.stateManager && Entry.stateManager.addCommand("add message", this, this.removeMessage, t), this.createMessageView(t), this.messages_.unshift(t), Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start"), Entry.playground.reloadPlayground(), this.updateList(), t.listElement.nameField.focus(), new Entry.State(this, this.removeMessage, t)
    }, r.removeMessage = function (t) {
        this.selected == t && this.select(null), Entry.stateManager && Entry.stateManager.addCommand("remove message", this, this.addMessage, t);
        var e = this.messages_.indexOf(t);
        return this.messages_.splice(e, 1), this.updateList(), Entry.playground.reloadPlayground(), new Entry.State(this, this.addMessage, t)
    }, r.changeMessageName = function (t, e) {
        if (t.name != e) {
            var n = this.messages_;
            if (Entry.isExist(e, "name", n)) return t.listElement.nameField.value = t.name, void Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_dup);
            if (e.length > 10) return t.listElement.nameField.value = t.name, void Entry.toast.alert(Lang.Workspace.message_rename_failed, Lang.Workspace.message_too_long);
            t.name = e, Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("start"), Entry.playground.reloadPlayground(), Entry.toast.success(Lang.Workspace.message_rename, Lang.Workspace.message_rename_ok)
        }
    }, r.createMessageView = function (t) {
        var e = this, n = Entry.createElement("li");
        n.addClass("entryVariableListElementWorkspace entryMessageElementWorkspace"), n.bindOnClick(function (n) {
            e.select(t)
        });
        var r = Entry.createElement("button");
        r.addClass("entryVariableListElementDeleteWorkspace"), r.bindOnClick(function (n) {
            n.stopPropagation(), e.removeMessage(t)
        });
        var o = Entry.createElement("button");
        o.addClass("entryVariableListElementEditWorkspace"), o.bindOnClick(function (t) {
            t.stopPropagation(), s.removeAttribute("disabled"), s.focus(), a.removeClass("entryRemove"), this.addClass("entryRemove")
        });
        var a = Entry.createElement("button");
        a.addClass("entryVariableListElementEditWorkspace entryRemove"), a.bindOnClick(function (t) {
            t.stopPropagation(), s.blur(), o.removeClass("entryRemove"), this.addClass("entryRemove")
        });
        var s = Entry.createElement("input");
        s.addClass("entryVariableListElementNameWorkspace"), s.value = t.name, s.bindOnClick(function (t) {
            t.stopPropagation()
        }), s.onblur = function (n) {
            var r = this.value.trim();
            if (!r || 0 === r.length) return Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.sign_can_not_space), void(this.value = t.name);
            e.changeMessageName(t, this.value), o.removeClass("entryRemove"), a.addClass("entryRemove"), s.setAttribute("disabled", "disabled")
        }, s.onkeydown = function (t) {
            13 == t.keyCode && this.blur()
        }, n.nameField = s, n.appendChild(s), n.appendChild(o), n.appendChild(a), n.appendChild(r), t.listElement = n
    }, r.addList = function (t) {
        if (Entry.isTextMode) {
            var e = (r = this.listAddPanel).view.name.value, n = Entry.TextCodingUtil.isNameIncludeSpace(e, "list");
            if (n) return entrylms.alert(n), this.listAddPanel.view.addClass("entryRemove"), void this.resetVariableAddPanel("list")
        }
        if (!t) {
            var r, o = (r = this.listAddPanel).view.name.value.trim();
            o && 0 !== o.length || (o = Lang.Workspace.list);
            var a = r.info;
            o.length > this._maxNameLength && (o = this._truncName(o, "list")), t = {
                name: o = this.checkAllVariableName(o, "lists_") ? Entry.getOrderedName(o, this.lists_, "name_") : o,
                isCloud: a.isCloud,
                object: a.object,
                variableType: "list"
            }, r.view.addClass("entryRemove"), this.resetVariableAddPanel("list")
        }
        return t = new Entry.Variable(t), Entry.stateManager && Entry.stateManager.addCommand("add list", this, this.removeList, t), t.generateView(this.lists_.length), this.createListView(t), this.lists_.unshift(t), Entry.playground && Entry.playground.blockMenu && Entry.playground.blockMenu.deleteRendered("variable"), Entry.playground.reloadPlayground(), this.updateList(), new Entry.State(this, this.removelist, t)
    }, r.createListView = function (t) {
        var e = this, n = Entry.createElement("li"), r = Entry.createElement("div");
        r.addClass("entryVariableListElementWrapperWorkspace list"), n.appendChild(r), n.addClass("entryVariableListElementWorkspace"), t.object_ ? n.addClass("entryListLocalElementWorkspace") : t.isCloud_ ? n.addClass("entryListCloudElementWorkspace") : n.addClass("entryListGlobalElementWorkspace"), n.bindOnClick(function (n) {
            e.select(t)
        });
        var o = Entry.createElement("button");
        o.addClass("entryVariableListElementDeleteWorkspace notForTextMode"), o.bindOnClick(function (n) {
            n.stopPropagation(), e.removeList(t), e.selectedList = null, e.listSettingView.addClass("entryRemove")
        });
        var a = Entry.createElement("button");
        a.addClass("entryVariableListElementEditWorkspace"), a.bindOnClick(function (n) {
            n.stopPropagation(), i.removeAttribute("disabled"), s.removeClass("entryRemove"), this.addClass("entryRemove"), e.updateSelectedVariable(t), i.focus()
        }), n.editButton = a;
        var s = Entry.createElement("button");
        s.addClass("entryVariableListElementEditWorkspace entryRemove"), s.bindOnClick(function (n) {
            n.stopPropagation(), i.blur(), i.setAttribute("disabled", "disabled"), a.removeClass("entryRemove"), this.addClass("entryRemove"), e.select(t), e.updateSelectedVariable(null, "list")
        }), n.editSaveButton = s;
        var i = Entry.createElement("input");
        i.setAttribute("disabled", "disabled"), i.addClass("entryVariableListElementNameWorkspace"), i.value = t.name_, i.bindOnClick(function (t) {
            t.stopPropagation()
        }), i.onblur = function (n) {
            var r = this.value.trim();
            if (!r || 0 === r.length) return Entry.toast.alert(Lang.Msgs.warn, Lang.Msgs.list_can_not_space), void(this.value = t.getName());
            e.changeListName(t, this.value)
        }, i.onkeydown = function (t) {
            13 == t.keyCode && this.blur()
        }, n.nameField = i, r.appendChild(i), r.appendChild(a), r.appendChild(s), r.appendChild(o), t.listElement = n
    }, r.mapVariable = function (t, e) {
        for (var n = this.variables_.length, r = 0; r < n; r++) t(this.variables_[r], e)
    }, r.mapList = function (t, e) {
        for (var n = this.lists_.length, r = 0; r < n; r++) t(this.lists_[r], e)
    }, r.getVariableJSON = function () {
        for (var t = [], e = 0; e < this.variables_.length; e++) {
            var n = this.variables_[e];
            t.push(n.toJSON())
        }
        for (e = 0; e < this.lists_.length; e++) {
            var r = this.lists_[e];
            t.push(r.toJSON())
        }
        Entry.engine.projectTimer && t.push(Entry.engine.projectTimer.toJSON());
        var o = Entry.container.inputValue;
        return Entry.isEmpty(o) || t.push(o.toJSON()), t
    }, r.getMessageJSON = function () {
        for (var t = [], e = 0; e < this.messages_.length; e++) {
            var n = {id: this.messages_[e].id, name: this.messages_[e].name};
            t.push(n)
        }
        return t
    }, r.getFunctionJSON = function () {
        var t = [];
        for (var e in this.functions_) {
            var n = this.functions_[e], r = {id: n.id, content: (0, o.default)(n.content.toJSON())};
            t.push(r)
        }
        return t
    }, r.resetVariableAddPanel = function (t) {
        var e = "variable" == (t = t || "variable") ? this.variableAddPanel : this.listAddPanel;
        if (e.view) {
            var n = e.info;
            n.isCloud = !1, n.object = null, e.view.name.value = "", e.isOpen = !1, this.updateVariableAddView(t)
        }
    }, r.generateVariableAddView = function () {
        var t = this, e = Entry.createElement("li");
        this.variableAddPanel.view = e, this.variableAddPanel.isOpen = !1, e.addClass("entryVariableAddSpaceWorkspace entryRemove");
        var n = Entry.createElement("div");
        n.addClass("entryVariableAddSpaceNameWrapperWorkspace"), e.appendChild(n);
        var r = Entry.createElement("input");
        r.addClass("entryVariableAddSpaceInputWorkspace"), r.setAttribute("placeholder", Lang.Workspace.Variable_placeholder_name), r.variableContainer = this, r.onkeypress = function (e) {
            13 === e.keyCode && (this.enterKeyDisabled ? this.blur() : t._addVariable())
        }, r.onfocus = function (t) {
            this.blurred = !1
        }, r.onblur = function (t) {
            "" === this.value || this.blurred || (Entry.do("variableAddSetName", $(".entryVariableAddSpaceInputWorkspace").val()), this.blurred = !0)
        }, this.variableAddPanel.view.name = r, n.appendChild(r);
        var o = Entry.createElement("div");
        o.addClass("entryVariableAddSpaceGlobalWrapperWorkspace"), o.bindOnClick(function (e) {
            t.variableAddPanel.info.object = null, t.updateVariableAddView("variable")
        }), e.appendChild(o);
        var a = Entry.createElement("span");
        a.innerHTML = Lang.Workspace.Variable_use_all_objects, o.appendChild(a);
        var s = Entry.createElement("span");
        s.addClass("entryVariableAddSpaceCheckWorkspace"), this.variableAddPanel.view.globalCheck = s, this.variableAddPanel.info.object || s.addClass("entryVariableAddChecked"), o.appendChild(s);
        var i = Entry.createElement("div");
        i.addClass("entryVariableAddSpaceLocalWrapperWorkspace"), i.bindOnClick(function (e) {
            if (Entry.playground.object) {
                var n = t.variableAddPanel.info;
                n.object = Entry.playground.object.id, n.isCloud = !1, t.updateVariableAddView("variable")
            }
        }), e.appendChild(i);
        var l = Entry.createElement("span");
        l.innerHTML = Lang.Workspace.Variable_use_this_object, i.appendChild(l);
        var c = Entry.createElement("span");
        c.addClass("entryVariableAddSpaceCheckWorkspace"), this.variableAddPanel.view.localCheck = c, this.variableAddPanel.info.object && c.addClass("entryVariableAddChecked"), i.appendChild(c);
        var u = Entry.createElement("div");
        e.cloudWrapper = u, u.addClass("entryVariableAddSpaceCloudWrapperWorkspace"), u.bindOnClick(function (e) {
            var n = t.variableAddPanel.info;
            n.object || (n.isCloud = !n.isCloud, t.updateVariableAddView("variable"))
        }), e.appendChild(u);
        var p = Entry.createElement("span");
        p.addClass("entryVariableAddSpaceCloudSpanWorkspace"), p.innerHTML = Lang.Workspace.Variable_create_cloud, u.appendChild(p);
        var _ = Entry.createElement("span");
        this.variableAddPanel.view.cloudCheck = _, _.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace"), this.variableAddPanel.info.isCloud && _.addClass("entryVariableAddChecked"), u.appendChild(_);
        var d = Entry.createElement("div");
        d.addClass("entryVariableAddSpaceButtonWrapperWorkspace"), e.appendChild(d);
        var y = Entry.createElement("span");
        y.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace"), y.innerHTML = Lang.Buttons.cancel, y.bindOnClick(function (e) {
            t.variableAddPanel.view.addClass("entryRemove"), t.resetVariableAddPanel("variable")
        }), d.appendChild(y);
        var g = Entry.createElement("span");
        g.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace"), g.innerHTML = Lang.Buttons.save, g.variableContainer = this, g.bindOnClick(function (e) {
            t._addVariable()
        }), d.appendChild(g), this.variableAddConfirmButton = g
    }, r._addVariable = function () {
        $(".entryVariableAddSpaceInputWorkspace").blur();
        var t = this._makeVariableData();
        t = new Entry.Variable(t), Entry.do("variableContainerAddVariable", t), this.updateSelectedVariable(this.variables_[0]);
        var e = this.variables_[0].listElement;
        e.editButton.addClass("entryRemove"), e.editSaveButton.removeClass("entryRemove"), e.nameField.removeAttribute("disabled")
    }, r.generateListAddView = function () {
        var t = this, e = Entry.createElement("li");
        this.listAddPanel.view = e, this.listAddPanel.isOpen = !1, e.addClass("entryVariableAddSpaceWorkspace entryRemove");
        var n = Entry.createElement("div");
        n.addClass("entryVariableAddSpaceNameWrapperWorkspace entryListAddSpaceNameWrapperWorkspace"), e.appendChild(n);
        var r = Entry.createElement("input");
        r.addClass("entryVariableAddSpaceInputWorkspace"), r.setAttribute("placeholder", Lang.Workspace.list_name), this.listAddPanel.view.name = r, r.variableContainer = this, r.onkeypress = function (e) {
            if (13 == e.keyCode) {
                t.addList();
                var n = t.lists_[0];
                t.updateSelectedVariable(n);
                var r = n.listElement;
                r.editButton.addClass("entryRemove"), r.editSaveButton.removeClass("entryRemove"), r.nameField.removeAttribute("disabled")
            }
        }, n.appendChild(r);
        var o = Entry.createElement("div");
        o.addClass("entryVariableAddSpaceGlobalWrapperWorkspace"), o.bindOnClick(function (e) {
            t.listAddPanel.info.object = null, t.updateVariableAddView("list")
        }), e.appendChild(o);
        var a = Entry.createElement("span");
        a.innerHTML = Lang.Workspace.use_all_objects, o.appendChild(a);
        var s = Entry.createElement("span");
        s.addClass("entryVariableAddSpaceCheckWorkspace"), this.listAddPanel.view.globalCheck = s, this.listAddPanel.info.object || s.addClass("entryVariableAddChecked"), o.appendChild(s);
        var i = Entry.createElement("div");
        i.addClass("entryVariableAddSpaceLocalWrapperWorkspace"), i.bindOnClick(function (e) {
            if (Entry.playground.object) {
                var n = t.listAddPanel.info;
                n.object = Entry.playground.object.id, n.isCloud = !1, t.updateVariableAddView("list")
            }
        }), e.appendChild(i);
        var l = Entry.createElement("span");
        l.innerHTML = Lang.Workspace.Variable_use_this_object, i.appendChild(l);
        var c = Entry.createElement("span");
        c.addClass("entryVariableAddSpaceCheckWorkspace"), this.listAddPanel.view.localCheck = c, this.variableAddPanel.info.object && c.addClass("entryVariableAddChecked"), i.appendChild(c);
        var u = Entry.createElement("div");
        e.cloudWrapper = u, u.addClass("entryVariableAddSpaceCloudWrapperWorkspace"), u.bindOnClick(function (e) {
            var n = t.listAddPanel.info;
            n.object || (n.isCloud = !n.isCloud, t.updateVariableAddView("list"))
        }), e.appendChild(u);
        var p = Entry.createElement("span");
        p.addClass("entryVariableAddSpaceCloudSpanWorkspace"), p.innerHTML = Lang.Workspace.List_create_cloud, u.appendChild(p);
        var _ = Entry.createElement("span");
        this.listAddPanel.view.cloudCheck = _, _.addClass("entryVariableAddSpaceCheckWorkspace entryVariableAddSpaceCloudCheckWorkspace"), this.listAddPanel.info.isCloud && _.addClass("entryVariableAddChecked"), u.appendChild(_);
        var d = Entry.createElement("div");
        d.addClass("entryVariableAddSpaceButtonWrapperWorkspace"), e.appendChild(d);
        var y = Entry.createElement("span");
        y.addClass("entryVariableAddSpaceCancelWorkspace entryVariableAddSpaceButtonWorkspace"), y.innerHTML = Lang.Buttons.cancel, y.bindOnClick(function (e) {
            t.listAddPanel.view.addClass("entryRemove"), t.resetVariableAddPanel("list")
        }), d.appendChild(y);
        var g = Entry.createElement("span");
        g.addClass("entryVariableAddSpaceConfirmWorkspace entryVariableAddSpaceButtonWorkspace"), g.innerHTML = Lang.Buttons.save, g.variableContainer = this, g.bindOnClick(function (e) {
            t.addList();
            var n = t.lists_[0];
            t.updateSelectedVariable(n);
            var r = n.listElement;
            r.editButton.addClass("entryRemove"), r.editSaveButton.removeClass("entryRemove"), r.nameField.removeAttribute("disabled")
        }), d.appendChild(g)
    }, r.generateVariableSplitterView = function () {
        var t = Entry.createElement("li");
        t.addClass("entryVariableSplitterWorkspace");
        var e = Entry.createElement("li");
        e.addClass("entryVariableSplitterWorkspace"), this.variableSplitters = {top: t, bottom: e}
    }, r.openVariableAddPanel = function (t) {
        t = t || "variable", Entry.playground.toggleOnVariableView(), Entry.playground.changeViewMode("variable"), "variable" == t ? (this.variableAddPanel.isOpen = !0, this.selectFilter(t)) : (this.listAddPanel.isOpen = !0, this.selectFilter(t)), this.updateVariableAddView(t)
    }, r.getMenuXml = function (t) {
        for (var e, n, r = [], o = 0 !== this.variables_.length, a = 0 !== this.lists_.length, s = 0; n = t[s]; s++) {
            var i = n.tagName;
            if (i && "BLOCK" == i.toUpperCase()) {
                if (e = n.getAttribute("bCategory"), !o && "variable" == e) continue;
                if (!a && "list" == e) continue;
                r.push(n)
            } else if (i && ("SPLITTER" == i.toUpperCase() || "BTN" == i.toUpperCase())) {
                if (!o && "variable" == e) continue;
                if (!a && "list" == e) continue;
                r.push(n)
            }
        }
        return r
    }, r.addCloneLocalVariables = function (t) {
        var e = this, n = [];
        this.mapVariable(function (t, e) {
            var r = o(t, e, "variables_");
            r && n.push(r)
        }, t);
        var r = [];

        function o(t, n, r) {
            var o = t.object_;
            if (o && o === n.objectId) {
                var a = t.toJSON();
                a.originId = a.id, a.id = Entry.generateHash(), a.object = n.newObjectId, a.name = e.checkAllVariableName(a.name, r) ? Entry.getOrderedName(a.name, e[r], "name_") : a.name, delete a.x, delete a.y;
                var s = n.json;
                return s.script = s.script.replace(new RegExp(a.originId, "g"), a.id), a
            }
        }

        this.mapList(function (t, e) {
            var n = o(t, e, "lists_");
            n && r.push(n)
        }, t), n.map(this.addVariable.bind(this)), r.map(this.addList.bind(this))
    }, r.generateTimer = function (t) {
        t || ((t = {}).id = Entry.generateHash(), t.name = Lang.Workspace.Variable_Timer, t.value = 0, t.variableType = "timer", t.visible = !1, t.x = 150, t.y = -70, t = new Entry.Variable(t)), t.generateView(), t.tick = null, Entry.engine.projectTimer = t, Entry.addEventListener("stop", function () {
            Entry.engine.stopProjectTimer()
        }.bind(this))
    }, r.generateAnswer = function (t) {
        t || (t = new Entry.Variable({
            id: Entry.generateHash(),
            name: Lang.Blocks.VARIABLE_get_canvas_input_value,
            value: 0,
            variableType: "answer",
            visible: !1,
            x: 150,
            y: -100
        })), t.generateView(), Entry.container.inputValue = t
    }, r.generateVariableSettingView = function () {
        var t = this, e = Entry.createElement("div");
        e.bindOnClick(function (t) {
            t.stopPropagation()
        }), this.variableSettingView = e, e.addClass("entryVariableSettingWorkspace"), this.listView_.appendChild(e), e.addClass("entryRemove");
        var n = Entry.createElement("div");
        n.addClass("entryVariableSettingVisibleWrapperWorkspace"), n.bindOnClick(function (e) {
            var n = t.selectedVariable, r = t.variableSettingView.visibleCheck;
            n.setVisible(!n.isVisible()), n.isVisible() ? r.addClass("entryVariableSettingChecked") : r.removeClass("entryVariableSettingChecked")
        }), e.appendChild(n);
        var r = Entry.createElement("span");
        r.innerHTML = Lang.Workspace.show_variable, n.appendChild(r);
        var o = Entry.createElement("span");
        o.addClass("entryVariableSettingCheckWorkspace"), e.visibleCheck = o, n.appendChild(o);
        var a = Entry.createElement("div");
        a.addClass("entryVariableSettingInitValueWrapperWorkspace"), e.appendChild(a);
        var s = Entry.createElement("span");
        s.innerHTML = Lang.Workspace.default_value, a.appendChild(s);
        var i = Entry.createElement("input");
        i.addClass("entryVariableSettingInitValueInputWorkspace"), e.initValueInput = i, i.value = 0, i.onkeyup = function (e) {
            var n = t.selectedVariable;
            this.value, n.setValue(this.value)
        }, i.onblur = function (e) {
            var n = t.selectedVariable;
            this.value, n.setValue(this.value)
        }, e.initValueInput = i, a.appendChild(i);
        var l = Entry.createElement("div");
        l.addClass("entryVariableSettingSplitterWorkspace"), e.appendChild(l);
        var c = Entry.createElement("div");
        c.addClass("entryVariableSettingSlideWrapperWorkspace"), e.appendChild(c);
        var u = Entry.createElement("span");
        u.innerHTML = Lang.Workspace.slide, c.appendChild(u);
        var p = Entry.createElement("span");
        p.addClass("entryVariableSettingCheckWorkspace"), e.slideCheck = p, c.appendChild(p), c.bindOnClick(function (e) {
            var n, r = t.selectedVariable, o = t.variables_, a = r.getType();
            if ("variable" == a) (s = r.toJSON()).variableType = "slide", n = new Entry.Variable(s), o.splice(o.indexOf(r), 0, n), n.getValue() < 0 && n.setValue(0), n.getValue() > 100 && n.setValue(100), y.removeAttribute("disabled"), m.removeAttribute("disabled"); else if ("slide" == a) {
                var s;
                (s = r.toJSON()).variableType = "variable", n = new Entry.Variable(s), o.splice(o.indexOf(r), 0, n), y.setAttribute("disabled", "disabled"), m.setAttribute("disabled", "disabled")
            }
            t.createVariableView(n), t.removeVariable(r), t.updateSelectedVariable(n), n.generateView()
        });
        var _ = Entry.createElement("div");
        e.minMaxWrapper = _, _.addClass("entryVariableSettingMinMaxWrapperWorkspace"), e.appendChild(_);
        var d = Entry.createElement("span");
        d.innerHTML = Lang.Workspace.min_value, _.appendChild(d);
        var y = Entry.createElement("input");
        y.addClass("entryVariableSettingMinValueInputWorkspace");
        var g = t.selectedVariable;
        g && "slide" == g.type ? y.value = g.minValue_ : y.value = 0, y.onkeypress = function (t) {
            13 === t.keyCode && this.blur()
        }, y.onblur = function (e) {
            if (Entry.Utils.isNumber(this.value)) {
                var n = t.selectedVariable;
                n.setMinValue(this.value), t.updateVariableSettingView(n)
            }
        }, e.minValueInput = y, _.appendChild(y);
        var h = Entry.createElement("span");
        h.addClass("entryVariableSettingMaxValueSpanWorkspace"), h.innerHTML = Lang.Workspace.max_value, _.appendChild(h);
        var m = Entry.createElement("input");
        m.addClass("entryVariableSettingMaxValueInputWorkspace"), g && "slide" == g.type ? m.value = g.maxValue_ : m.value = 100, m.onkeypress = function (t) {
            13 === t.keyCode && this.blur()
        }, m.onblur = function (e) {
            if (Entry.Utils.isNumber(this.value)) {
                var n = t.selectedVariable;
                n.setMaxValue(this.value), t.updateVariableSettingView(n)
            }
        }, e.maxValueInput = m, _.appendChild(m)
    }, r.updateVariableSettingView = function (t) {
        var e = this.variableSettingView, n = e.visibleCheck, r = e.initValueInput, o = e.slideCheck,
            a = e.minValueInput, s = e.maxValueInput, i = e.minMaxWrapper;
        n.removeClass("entryVariableSettingChecked"), t.isVisible() && n.addClass("entryVariableSettingChecked"), o.removeClass("entryVariableSettingChecked"), "slide" == t.getType() ? (o.addClass("entryVariableSettingChecked"), a.removeAttribute("disabled"), s.removeAttribute("disabled"), a.value = t.getMinValue(), s.value = t.getMaxValue(), i.removeClass("entryVariableMinMaxDisabledWorkspace")) : (i.addClass("entryVariableMinMaxDisabledWorkspace"), a.setAttribute("disabled", "disabled"), s.setAttribute("disabled", "disabled")), r.value = t.getValue(), t.listElement.appendChild(e), e.removeClass("entryRemove")
    }, r.generateListSettingView = function () {
        var t = this, e = Entry.createElement("div");
        e.bindOnClick(function (t) {
            t.stopPropagation()
        }), this.listSettingView = e, e.addClass("entryListSettingWorkspace"), this.listView_.appendChild(e), e.addClass("entryRemove");
        var n = Entry.createElement("div");
        n.addClass("entryListSettingVisibleWrapperWorkspace"), n.bindOnClick(function (e) {
            var n = t.selectedList, r = t.listSettingView.visibleCheck;
            n.setVisible(!n.isVisible()), n.isVisible() ? r.addClass("entryListSettingCheckedWorkspace") : r.removeClass("entryListSettingCheckedWorkspace")
        }), e.appendChild(n);
        var r = Entry.createElement("span");
        r.innerHTML = Lang.Workspace.show_list_workspace, n.appendChild(r);
        var o = Entry.createElement("span");
        o.addClass("entryListSettingCheckWorkspace"), e.visibleCheck = o, n.appendChild(o);
        var a = Entry.createElement("div");
        a.addClass("entryListSettingLengthWrapperWorkspace");
        var s = Entry.createElement("span");
        s.addClass("entryListSettingLengthSpanWorkspace"), s.innerHTML = Lang.Workspace.number_of_list, a.appendChild(s), e.appendChild(a);
        var i = Entry.createElement("div");
        i.addClass("entryListSettingLengthControllerWorkspace"), a.appendChild(i);
        var l = Entry.createElement("span");
        l.addClass("entryListSettingMinusWorkspace"), l.bindOnClick(function (e) {
            t.selectedList, t.selectedList.array_.pop(), t.updateListSettingView(t.selectedList)
        }), i.appendChild(l);
        var c = Entry.createElement("input");
        c.addClass("entryListSettingLengthInputWorkspace"), c.onblur = function () {
            t.setListLength(this.value)
        }, c.onkeypress = function (t) {
            13 == t.keyCode && this.blur()
        }, e.lengthInput = c, i.appendChild(c);
        var u = Entry.createElement("span");
        u.addClass("entryListSettingPlusWorkspace"), u.bindOnClick(function (e) {
            t.selectedList, t.selectedList.array_.push({data: 0}), t.updateListSettingView(t.selectedList)
        }), i.appendChild(u);
        var p = Entry.createElement("div");
        e.seperator = p, e.appendChild(p), p.addClass("entryListSettingSeperatorWorkspace");
        var _ = Entry.createElement("div");
        _.addClass("entryListSettingListValuesWorkspace"), e.listValues = _, e.appendChild(_)
    }, r.updateListSettingView = function (t) {
        var e = this;
        t = t || this.selectedList;
        var n = this.listSettingView, r = n.listValues, o = n.visibleCheck, a = n.lengthInput, s = n.seperator;
        for (o.removeClass("entryListSettingCheckedWorkspace"), t.isVisible() && o.addClass("entryListSettingCheckedWorkspace"), a.value = t.array_.length, t.listElement.appendChild(n); r.firstChild;) r.removeChild(r.firstChild);
        var i = t.array_;
        0 === i.length ? s.addClass("entryRemove") : s.removeClass("entryRemove");
        var l = 1;
        Entry.playground.mainWorkspace.mode === Entry.Workspace.MODE_VIMBOARD && (l = 0);
        for (var c = 0; c < i.length; c++) !function (n) {
            var o = Entry.createElement("div");
            o.addClass("entryListSettingValueWrapperWorkspace");
            var a = Entry.createElement("span");
            a.addClass("entryListSettingValueNumberSpanWorkspace"), a.innerHTML = n + l, o.appendChild(a);
            var s = Entry.createElement("input");
            s.value = i[n].data, s.onblur = function () {
                i[n].data = this.value, t.updateView()
            }, s.onkeypress = function (t) {
                13 == t.keyCode && this.blur()
            }, s.addClass("entryListSettingEachInputWorkspace"), o.appendChild(s);
            var c = Entry.createElement("span");
            c.bindOnClick(function () {
                i.splice(n, 1), e.updateListSettingView()
            }), c.addClass("entryListSettingValueRemoveWorkspace"), o.appendChild(c), r.appendChild(o)
        }(c);
        t.updateView(), n.removeClass("entryRemove")
    }, r.setListLength = function (t) {
        t = Number(t);
        var e = this.selectedList.array_;
        if (Entry.Utils.isNumber(t)) {
            var n = e.length;
            if (n < t) for (var r = t - n, o = 0; o < r; o++) e.push({data: 0}); else n > t && (e.length = t)
        }
        this.updateListSettingView()
    }, r.updateViews = function () {
        var t = this.variables_, e = this.lists_;
        t.map(function (t) {
            t.updateView()
        }), e.map(function (t) {
            t.updateView()
        })
    }, r.updateSelectedVariable = function (t, e) {
        t ? "variable" == t.type ? (this.selectedVariable = t, this.updateVariableSettingView(t)) : "slide" == t.type ? (this.selectedVariable = t, this.updateVariableSettingView(t)) : "list" == t.type && (this.selectedList = t, this.updateListSettingView(t)) : (e = e || "variable", this.selectedVariable = null, "variable" == e ? this.variableSettingView.addClass("entryRemove") : this.listSettingView.addClass("entryRemove"))
    }, r.removeLocalVariables = function (t) {
        var e = [], n = this;
        this.mapVariable(function (t, n) {
            t.object_ && t.object_ == n && e.push(t)
        }, t), e.map(function (t) {
            n.removeVariable(t)
        })
    }, r.updateCloudVariables = function () {
        var t = Entry.projectId;
        if (Entry.cloudSavable && t) {
            var e = Entry.variableContainer, n = e.variables_.filter(function (t) {
                return t.isCloud_
            });
            n = n.map(function (t) {
                return t.toJSON()
            });
            var r = e.lists_.filter(function (t) {
                return t.isCloud_
            });
            r = r.map(function (t) {
                return t.toJSON()
            }), (n.length || r.length) && $.ajax({
                url: "/api/project/variable/" + Entry.projectId,
                type: "PUT",
                data: {variables: n, lists: r}
            }).done(function () {
            })
        }
    }, r.addRef = function (t, e) {
        if (this.view_ && Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
            var n = {object: e.getCode().object, block: e};
            if (e.funcBlock && (n.funcBlock = e.funcBlock, delete e.funcBlock), this[t].push(n), "_functionRefs" == t) {
                var r = e.type.substr(5), o = Entry.variableContainer.functions_[r];
                if (o.isAdded) return;
                o.isAdded = !0;
                for (var a = o.content.getBlockList(), s = 0; s < a.length; s++) {
                    var i = a[s], l = i.events;
                    i.type.indexOf("func_") > -1 && i.type.substr(5) == r || (l && l.viewAdd && l.viewAdd.forEach(function (t) {
                        i.getCode().object = n.object, t && (i.funcBlock = n.block, t(i))
                    }), l && l.dataAdd && l.dataAdd.forEach(function (t) {
                        i.getCode().object = n.object, t && (i.funcBlock = n.block, t(i))
                    }))
                }
            }
            return n
        }
    }, r.getObjectVariables = function (t, e) {
        var n = e || {}, r = [], a = this.getVariableJSONByBlockList(t), s = a.variables, i = a.messages;
        return t.forEach(function (e) {
            var a = e.type;
            if (a && 0 === a.indexOf("func_")) {
                var l = a.substr(5);
                if (!n[l]) {
                    var c = this.functions_[l];
                    n[l] = !0, r.push({
                        id: l,
                        content: (0, o.default)(c.content.toJSON())
                    }), t = c.content.getBlockList();
                    var u = this.getObjectVariables(t, n);
                    r = r.concat(u.functions), s = s.concat(u.variables), i = i.concat(u.messages)
                }
            }
        }.bind(this)), {functions: r, variables: s, messages: i}
    }, r.getVariableJSONByBlockList = function (t) {
        var e = {}, n = [], r = [];
        return this.variables_.forEach(function (t) {
            e[t.id_] = t
        }), this.lists_.forEach(function (t) {
            e[t.id_] = t
        }), this.messages_.forEach(function (t) {
            e[t.id] = t
        }), t.forEach(function (t) {
            var o, a, s = (t.data || {}).type;
            s && (o = EntryStatic.messageBlockList.indexOf(s) > -1, a = EntryStatic.variableBlockList.indexOf(s) > -1), s && (o || a) && t.data.params.forEach(function (t) {
                if ("string" == typeof t && e[t]) {
                    var o = e[t];
                    a ? n.push(o.toJSON()) : r.push({id: o.id, name: o.name}), e[t] = void 0
                }
            })
        }), {variables: n, messages: r}
    }, r.removeRef = function (t, e) {
        if (Entry.playground.mainWorkspace && Entry.getMainWS().getMode() === Entry.Workspace.MODE_BOARD) {
            for (var n = this[t], r = 0; r < n.length; r++) if (n[r].block == e) {
                n.splice(r, 1);
                break
            }
            if ("_functionRefs" == t) {
                var o = e.type.substr(5), a = Entry.variableContainer.functions_[o];
                if (!a || a.isRemoved) return;
                if (a.isRemoved = !0, a) {
                    var s = a.content.getBlockList();
                    for (r = 0; r < s.length; r++) {
                        var i = (e = s[r]).events;
                        e.type.indexOf("func_") > -1 && e.type.substr(5) == o || (i && i.viewDestroy && i.viewDestroy.forEach(function (t) {
                            t && t(e)
                        }), i && i.dataDestroy && i.dataDestroy.forEach(function (t) {
                            t && t(e)
                        }))
                    }
                }
            }
        }
    }, r._getBlockMenu = function () {
        return Entry.playground.mainWorkspace.getBlockMenu()
    }, r._truncName = function (t, e) {
        var n, r;
        return t = t.substring(0, this._maxNameLength), n = Lang.Workspace[e + "_name_auto_edited_title"], r = Lang.Workspace[e + "_name_auto_edited_content"], Entry.toast.warning(n, r), t
    }, r._maxNameLength = 10, r.clear = function () {
        for (var t in this.variables_.map(function (t) {
            t.remove()
        }), this.variables_ = [], this.lists_.map(function (t) {
            t.remove()
        }), this.lists_ = [], Entry.engine && Entry.engine.projectTimer && Entry.engine.projectTimer.remove(), Entry.container && Entry.container.inputValue && Entry.container.inputValue.remove && Entry.container.inputValue.remove(), this.messages_ = [], this.functions_) this.functions_[t].destroy(), delete this.functions_[t];
        Entry.playground.reloadPlayground(), this.updateList()
    }, r._isPythonMode = function () {
        var t = Entry.getMainWS();
        return t && t.isVimMode()
    }, r.getDom = function (t) {
        if (t.length >= 1) switch (t.shift()) {
            case"filter":
                return this.filterElements[t.shift()];
            case"variableAddButton":
                return this.variableAddButton_;
            case"variableAddConfirmButton":
                return this.variableAddConfirmButton;
            case"variableAddInput":
                return this.variableAddPanel.view.name
        }
    }, r.clickVariableAddButton = function (t, e) {
        var n = this.variableAddPanel, r = n.view.name.value.trim();
        if (n.isOpen && !t) if (r && 0 !== r.length) {
            var o = this._makeVariableData();
            o = new Entry.Variable(o), Entry.do("variableContainerAddVariable", o)
        } else n.view.addClass("entryRemove"), n.isOpen = !1; else n.view.removeClass("entryRemove"), document.activeElement === n.view.name || e || n.view.name.focus(), n.isOpen = !0
    }, r._makeVariableData = function () {
        var t = this.variableAddPanel, e = t.view.name.value.trim();
        e && 0 !== e.length || (e = Lang.Workspace.variable), e.length > this._maxNameLength && (e = this._truncName(e, "variable")), e = this.checkAllVariableName(e, "variables_") ? Entry.getOrderedName(e, this.variables_, "name_") : e;
        var n = t.info;
        return {name: e, isCloud: n.isCloud, object: n.object, variableType: "variable"}
    }, r.applyOption = function () {
        function t(t, e) {
            e ? (t.removeClass("disable"), t.disabled = !1) : (t.addClass("disable"), t.disabled = !0)
        }

        t(this._filterTabs.variable, Entry.variableEnable), t(this._filterTabs.message, Entry.messageEnable), t(this._filterTabs.list, Entry.listEnable), t(this._filterTabs.func, Entry.functionEnable)
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Variable = function (t) {
        Entry.assert("string" == typeof t.name, "Variable name must be given"), this.name_ = t.name, this.id_ = t.id ? t.id : Entry.generateHash(), this.type = t.variableType ? t.variableType : "variable", this.object_ = t.object || null, this.isCloud_ = t.isCloud || !1, this._nameWidth = null, this._valueWidth = null;
        var e = Entry.parseNumber(t.value);
        "number" == typeof e ? this.value_ = e : t.value ? this.value_ = t.value : this.value_ = 0, "slide" == this.type ? (this.setMinValue(t.minValue), this.setMaxValue(t.maxValue)) : "list" == this.type && (this.array_ = t.array ? t.array : []), t.isClone || (this.visible_ = !t.visible && "boolean" != typeof t.visible || t.visible, this.x_ = t.x ? t.x : null, this.y_ = t.y ? t.y : null, "list" == this.type && (this.width_ = t.width ? t.width : 100, this.height_ = t.height ? t.height : 120, this.scrollPosition = 0), this.BORDER = 6, this.FONT = "10pt NanumGothic"), Entry.addEventListener("workspaceChangeMode", this.updateView.bind(this))
    }, Entry.Variable.prototype.generateView = function (t) {
        var e = this.type;
        if ("variable" == e || "timer" == e || "answer" == e) {
            this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.wrapper_ = new createjs.Shape, this.view_.addChild(this.wrapper_), this.textView_ = new createjs.Text("asdf", this.FONT, "#000000"), this.textView_.textBaseline = "alphabetic", this.textView_.x = 4, this.textView_.y = 1, this.view_.addChild(this.textView_), this.valueView_ = new createjs.Text("asdf", "10pt NanumGothic", "#ffffff"), this.valueView_.textBaseline = "alphabetic";
            var n = Entry.variableContainer.variables_.length;
            this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(80 * Math.floor(n % 66 / 11) - 230), this.setY(24 * t + 20 - 135 - 264 * Math.floor(n / 11))), this.view_.visible = this.visible_, this.view_.addChild(this.valueView_), this.view_.on("mousedown", function (t) {
                "workspace" == Entry.type && (this.offset = {
                    x: this.x - (.75 * t.stageX - 240),
                    y: this.y - (.75 * t.stageY - 135)
                }, this.cursor = "move")
            }), this.view_.on("pressmove", function (t) {
                "workspace" == Entry.type && (this.variable.setX(.75 * t.stageX - 240 + this.offset.x), this.variable.setY(.75 * t.stageY - 135 + this.offset.y), this.variable.updateView())
            })
        } else if ("slide" == e) {
            var r = this;
            this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.wrapper_ = new createjs.Shape, this.view_.addChild(this.wrapper_), this.textView_ = new createjs.Text("name", this.FONT, "#000000"), this.textView_.textBaseline = "alphabetic", this.textView_.x = 4, this.textView_.y = 1, this.view_.addChild(this.textView_), this.valueView_ = new createjs.Text("value", "10pt NanumGothic", "#ffffff"), this.valueView_.textBaseline = "alphabetic", this.view_.on("mousedown", function (t) {
                "workspace" == Entry.type && (this.offset = {
                    x: this.x - (.75 * t.stageX - 240),
                    y: this.y - (.75 * t.stageY - 135)
                })
            }), this.view_.on("pressmove", function (t) {
                "workspace" != Entry.type || r.isAdjusting || (this.variable.setX(.75 * t.stageX - 240 + this.offset.x), this.variable.setY(.75 * t.stageY - 135 + this.offset.y), this.variable.updateView())
            }), this.view_.visible = this.visible_, this.view_.addChild(this.valueView_);
            var o = this.textView_.getMeasuredWidth() + this.valueView_.getMeasuredWidth() + 26;
            o = Math.max(o, 90), this.maxWidth = o - 20, this.slideBar_ = new createjs.Shape, this.slideBar_.graphics.beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5), this.view_.addChild(this.slideBar_);
            var a = this.getSlidePosition(this.maxWidth);
            this.valueSetter_ = new createjs.Shape, this.valueSetter_.graphics.beginFill("#1bafea").s("#A0A1A1").ss(1).dc(a, 10.5, 3), this.valueSetter_.cursor = "pointer", this.valueSetter_.on("mousedown", function (t) {
                Entry.engine.isState("run") && (r.isAdjusting = !0, this.offsetX = -(this.x - .75 * t.stageX + 240))
            }), this.valueSetter_.on("pressmove", function (t) {
                if (Entry.engine.isState("run")) {
                    var e = this.offsetX;
                    if (this.offsetX = -(this.x - .75 * t.stageX + 240), e !== this.offsetX) {
                        var n, o = r.getX();
                        n = o + 10 > this.offsetX ? 0 : o + r.maxWidth + 10 > this.offsetX ? this.offsetX - o : r.maxWidth + 10, r.setSlideCommandX(n)
                    }
                }
            }), this.valueSetter_.on("pressup", function (t) {
                r.isAdjusting = !1
            }), this.view_.addChild(this.valueSetter_), n = Entry.variableContainer.variables_.length, this.getX() && this.getY() ? (this.setX(this.getX()), this.setY(this.getY())) : (this.setX(80 * Math.floor(n / 11) - 230), this.setY(24 * t + 20 - 135 - 264 * Math.floor(n / 11)))
        } else {
            this.view_ = new createjs.Container, this.rect_ = new createjs.Shape, this.view_.addChild(this.rect_), this.view_.variable = this, this.titleView_ = new createjs.Text("asdf", this.FONT, "#000"), this.titleView_.textBaseline = "alphabetic", this.titleView_.textAlign = "center", this.titleView_.width = this.width_ - 2 * this.BORDER, this.titleView_.y = this.BORDER + 10, this.titleView_.x = this.width_ / 2, this.view_.addChild(this.titleView_), this.resizeHandle_ = new createjs.Shape, this.resizeHandle_.graphics.f("#1bafea").ss(1, 0, 0).s("#1bafea").lt(0, -9).lt(-9, 0).lt(0, 0), this.view_.addChild(this.resizeHandle_), this.resizeHandle_.list = this, this.resizeHandle_.on("mouseover", function (t) {
                this.cursor = "nwse-resize"
            }), this.resizeHandle_.on("mousedown", function (t) {
                this.list.isResizing = !0, this.offset = {
                    x: .75 * t.stageX - this.list.getWidth(),
                    y: .75 * t.stageY - this.list.getHeight()
                }, this.parent.cursor = "nwse-resize"
            }), this.resizeHandle_.on("pressmove", function (t) {
                this.list.setWidth(.75 * t.stageX - this.offset.x), this.list.setHeight(.75 * t.stageY - this.offset.y), this.list.updateView()
            }), this.view_.on("mouseover", function (t) {
                this.cursor = "move"
            }), this.view_.on("mousedown", function (t) {
                "workspace" != Entry.type || this.variable.isResizing || (this.offset = {
                    x: this.x - (.75 * t.stageX - 240),
                    y: this.y - (.75 * t.stageY - 135)
                }, this.cursor = "move")
            }), this.view_.on("pressup", function (t) {
                this.cursor = "initial", this.variable.isResizing = !1
            }), this.view_.on("pressmove", function (t) {
                "workspace" != Entry.type || this.variable.isResizing || (this.variable.setX(.75 * t.stageX - 240 + this.offset.x), this.variable.setY(.75 * t.stageY - 135 + this.offset.y), this.variable.updateView())
            }), this.elementView = new createjs.Container;
            var s = new createjs.Text("asdf", this.FONT, "#000");
            s.textBaseline = "middle", s.y = 5, this.elementView.addChild(s), this.elementView.indexView = s;
            var i = new createjs.Shape;
            this.elementView.addChild(i), this.elementView.valueWrapper = i;
            var l = new createjs.Text("fdsa", this.FONT, "#eee");
            if (l.x = 24, l.y = 6, l.textBaseline = "middle", this.elementView.addChild(l), this.elementView.valueView = l, this.elementView.x = this.BORDER, this.scrollButton_ = new createjs.Shape, this.scrollButton_.graphics.f("#aaa").rr(0, 0, 7, 30, 3.5), this.view_.addChild(this.scrollButton_), this.scrollButton_.y = 23, this.scrollButton_.list = this, this.scrollButton_.on("mousedown", function (t) {
                    this.list.isResizing = !0, this.cursor = "pointer", this.offsetY = !Entry.Utils.isNumber(this.offsetY) || this.offsetY < 0 ? t.rawY / 2 : this.offsetY
                }), this.scrollButton_.on("pressmove", function (t) {
                    void 0 === this.moveAmount ? (this.y = t.target.y, this.moveAmount = !0) : this.y = t.rawY / 2 - this.offsetY + this.list.height_ / 100 * 23, this.y < 23 && (this.y = 23), this.y > this.list.getHeight() - 40 && (this.y = this.list.getHeight() - 40), this.list.updateView()
                }), this.scrollButton_.on("pressup", function (t) {
                    this.moveAmount = void 0
                }), this.getX() && this.getY()) this.setX(this.getX()), this.setY(this.getY()); else {
                var c = Entry.variableContainer.lists_.length;
                this.setX(110 * -Math.floor(c % 24 / 6) + 120), this.setY(24 * t + 20 - 135 - 145 * Math.floor(c / 6))
            }
        }
        this.setVisible(this.isVisible()), this.updateView(), Entry.stage.loadVariable(this)
    }, Entry.Variable.prototype.updateView = function () {
        if (this.view_) {
            if (this.isVisible()) if ("variable" == this.type) {
                this.view_.x = this.getX(), this.view_.y = this.getY();
                var t = this.textView_.text;
                t !== (e = this.object_ && (s = Entry.container.getObject(this.object_)) ? s.name + ":" + this.getName() : this.getName()) && (this.textView_.text = e, this._nameWidth = null), this.isNumber() ? 0 !== this.value_[0] && Entry.isInteger(this.value_) ? this.valueView_.text = "" + this.getValue() : this.valueView_.text = Number(this.getValue()).toFixed(2).replace(".00", "") : this.valueView_.text = this.getValue(), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1, null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7)
            } else if ("slide" == this.type) {
                var e;
                this.view_.x = this.getX(), this.view_.y = this.getY(), (t = this.textView_.text) !== (e = this.object_ && (s = Entry.container.getObject(this.object_)) ? s.name + ":" + this.getName() : this.getName()) && (this.textView_.text = e, this._nameWidth = null), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1;
                var n = String(this.getValue());
                if (this.isFloatPoint()) {
                    var r = /\.(.*)/;
                    if (r.exec(n)) for (; r.exec(n)[1].length < 2;) n += "0"; else n += ".00"
                }
                this.valueView_.text = n, null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth());
                var o = this._nameWidth + this._valueWidth + 26;
                o = Math.max(o, 90), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, o, 33, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#1bafea").ss(1, 2, 0).s("#1bafea").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7), o = this._nameWidth + this._valueWidth + 26, o = Math.max(o, 90), this.maxWidth = o - 20, this.slideBar_.graphics.clear().beginFill("#A0A1A1").s("#A0A1A1").ss(1).dr(10, 10, this.maxWidth, 1.5);
                var a = this.getSlidePosition(this.maxWidth);
                this.valueSetter_.graphics.clear().beginFill("#1bafea").s("#A0A1A1").ss(1).dc(a, 10.5, 3)
            } else if ("list" == this.type) {
                this.view_.x = this.getX(), this.view_.y = this.getY(), this.resizeHandle_.x = this.width_ - 2, this.resizeHandle_.y = this.height_ - 2;
                var s, i = this.array_, l = this.getName();
                if (this.object_ && (s = Entry.container.getObject(this.object_)) && (l = s.name + ":" + l), this.titleView_.text = l, this.titleView_.getMeasuredWidth() > this.width_) for (l += ".."; this.titleView_.getMeasuredWidth() > this.width_;) l = l.substr(0, l.length - 3) + "..", this.titleView_.text = l;
                for (this.titleView_.x = this.width_ / 2, this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rect(0, 0, this.width_, this.height_); this.view_.children[4];) this.view_.removeChild(this.view_.children[4]);
                var c = Math.floor((this.getHeight() - 20) / 20), u = c < i.length, p = this.getWidth(),
                    _ = p - 2 * this.BORDER - (u ? 30 : 20);
                u ? (this.scrollButton_.y > this.getHeight() - 40 && (this.scrollButton_.y = this.getHeight() - 40), this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, _, 17, 2), this.scrollButton_.x = p - 12, this.scrollPosition = Math.floor((this.scrollButton_.y - 23) / (this.getHeight() - 23 - 40) * (i.length - c))) : (this.elementView.valueWrapper.graphics.clear().f("#1bafea").rr(20, -2, _, 17, 2), this.scrollPosition = 0), this.scrollButton_.visible = u;
                var d = {}, y = 3;
                _ -= 6;
                for (var g = this.scrollPosition; g < this.scrollPosition + c && g < i.length; g++) {
                    Entry.getMainWS() && Entry.getMainWS().getMode() === Entry.Workspace.MODE_VIMBOARD ? this.elementView.indexView.text = g : this.elementView.indexView.text = g + 1;
                    var h = String(i[g].data), m = this.elementView.valueView, b = d[h.substr(0, 150)];
                    if (b) m.text = b; else {
                        var f = h.substr(0, y), E = y;
                        if (m.text = h, m.getMeasuredWidth() > _) {
                            for (m.text = f; m.getMeasuredWidth() < _ && void 0 !== h[E];) f += h[E++], m.text = f;
                            for (var v = 1; m.getMeasuredWidth() > _;) f = f.substr(0, f.length - v) + "..", m.text = f, v = 3
                        } else f = h;
                        d[h.substr(0, 150)] = f, y = Math.max(f.length, y)
                    }
                    var k = this.elementView.clone(!0);
                    k.y = 20 * (g - this.scrollPosition) + 23, this.view_.addChild(k)
                }
            } else if ("answer" == this.type) {
                if (this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), this.valueView_.y = 1, this.isNumber()) {
                    var T = Number(this.getValue());
                    parseInt(this.getValue(), 10) == this.getValue() ? this.valueView_.text = T : this.valueView_.text = Number(T).toFixed(1).replace(".00", "")
                } else this.valueView_.text = this.getValue();
                null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#E457DC").ss(1, 2, 0).s("#E457DC").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7)
            } else this.view_.x = this.getX(), this.view_.y = this.getY(), this.textView_.text = this.getName(), null === this._nameWidth && (this._nameWidth = this.textView_.getMeasuredWidth()), this.valueView_.x = this._nameWidth + 14, this.valueView_.y = 1, this.isNumber() ? this.valueView_.text = Number(this.getValue()).toFixed(1).replace(".00", "") : this.valueView_.text = this.getValue(), null === this._valueWidth && (this._valueWidth = this.valueView_.getMeasuredWidth()), this.rect_.graphics.clear().f("#ffffff").ss(1, 2, 0).s("#A0A1A1").rc(0, -14, this._nameWidth + this._valueWidth + 26, 20, 4, 4, 4, 4), this.wrapper_.graphics.clear().f("#ffbb14").ss(1, 2, 0).s("orange").rc(this._nameWidth + 7, -11, this._valueWidth + 15, 14, 7, 7, 7, 7);
            Entry.requestUpdate = !0
        }
    }, Entry.Variable.prototype.getName = function () {
        return this.name_
    }, Entry.Variable.prototype.setName = function (t) {
        Entry.assert("string" == typeof t, "Variable name must be string"), this.name_ = t, this._nameWidth = null, this.updateView(), Entry.requestUpdateTwice = !0
    }, Entry.Variable.prototype.getId = function () {
        return this.id_
    }, Entry.Variable.prototype.getValue = function () {
        return "slide" === this.type && this.isNumber() ? Number(this.value_) : this.value_
    }, Entry.Variable.prototype.isNumber = function () {
        return Entry.Utils.isNumber(this.value_)
    }, Entry.Variable.prototype.setValue = function (t) {
        "slide" != this.type ? this.value_ = t : (t = Number(t)) < this.minValue_ ? this.value_ = this.minValue_ : t > this.maxValue_ ? this.value_ = this.maxValue_ : this.value_ = t, this._valueWidth = null, this.updateView(), Entry.requestUpdateTwice = !0
    }, Entry.Variable.prototype.isVisible = function () {
        return this.visible_
    }, Entry.Variable.prototype.setVisible = function (t) {
        Entry.assert("boolean" == typeof t, "Variable visible state must be boolean"), this.visible !== t && (this.view_.visible = t, this.visible_ = t, this.updateView())
    }, Entry.Variable.prototype.setX = function (t) {
        this.x_ = t, this.updateView()
    }, Entry.Variable.prototype.getX = function () {
        return this.x_
    }, Entry.Variable.prototype.setY = function (t) {
        this.y_ = t, this.updateView()
    }, Entry.Variable.prototype.getY = function () {
        return this.y_
    }, Entry.Variable.prototype.setWidth = function (t) {
        t = t < 100 ? 100 : t, this.width_ = t, this.updateView()
    }, Entry.Variable.prototype.getWidth = function () {
        return this.width_
    }, Entry.Variable.prototype.isInList = function (t, e) {
        this.getX(), this.width_, this.getY(), this.height_
    }, Entry.Variable.prototype.setHeight = function (t) {
        t = t < 100 ? 100 : t, this.height_ = t, this.updateView()
    }, Entry.Variable.prototype.getHeight = function () {
        return this.height_
    }, Entry.Variable.prototype.takeSnapshot = function () {
        this.snapshot_ = this.toJSON()
    }, Entry.Variable.prototype.loadSnapshot = function () {
        this.snapshot_ && this.syncModel_(this.snapshot_), delete this.snapshot_
    }, Entry.Variable.prototype.syncModel_ = function (t) {
        var e = this.isCloud_;
        "list" == this.type && (e || (this.array_ = t.array), this.setWidth(t.width), this.setHeight(t.height)), e || this.setValue(t.value), this.setName(t.name), this.setX(t.x), this.setY(t.y), this.setVisible(t.visible), this.isCloud_ = t.isCloud
    }, Entry.Variable.prototype.toJSON = function () {
        var t = {};
        return t.name = this.name_, t.id = this.id_, t.visible = this.visible_, t.value = this.value_, t.variableType = this.type, "list" == this.type ? (t.width = this.getWidth(), t.height = this.getHeight(), t.array = JSON.parse((0, o.default)(this.array_))) : "slide" == this.type && (t.minValue = this.minValue_, t.maxValue = this.maxValue_), t.isCloud = this.isCloud_, t.object = this.object_, t.x = this.x_, t.y = this.y_, t
    }, Entry.Variable.prototype.remove = function () {
        Entry.stage.removeVariable(this)
    }, Entry.Variable.prototype.clone = function () {
        var t = this.toJSON();
        return t.isClone = !0, new Entry.Variable(t)
    }, Entry.Variable.prototype.getType = function () {
        return this.type
    }, Entry.Variable.prototype.setType = function (t) {
        this.type = t
    }, Entry.Variable.prototype.getSlidePosition = function (t) {
        var e = this.minValue_, n = this.maxValue_, r = this.value_;
        return t * (Math.abs(r - e) / Math.abs(n - e)) + 10
    }, Entry.Variable.prototype.setSlideCommandX = function (t) {
        var e = this.valueSetter_.graphics.command;
        t = void 0 === t ? 10 : t, t = Math.max(t, 10), t = Math.min(this.maxWidth + 10, t), e.x = t, this.updateSlideValueByView()
    }, Entry.Variable.prototype.updateSlideValueByView = function () {
        var t = this.maxWidth, e = Math.max(this.valueSetter_.graphics.command.x - 10, 0) / t;
        e < 0 && (e = 0), e > 1 && (e = 1);
        var n = parseFloat(this.minValue_), r = parseFloat(this.maxValue_),
            o = (n + Number(Math.abs(r - n) * e)).toFixed(2);
        (o = parseFloat(o)) < n ? o = this.minValue_ : o > r && (o = this.maxValue_), this.isFloatPoint() || (o = Math.round(o)), this.setValue(o)
    }, Entry.Variable.prototype.getMinValue = function () {
        return this.minValue_
    }, Entry.Variable.prototype.setMinValue = function (t) {
        this._valueWidth = null, t = t || 0, this.minValue_ = t, this.value_ < t && this.setValue(t), this.isMinFloat = Entry.isFloat(this.minValue_), this.updateView()
    }, Entry.Variable.prototype.getMaxValue = function () {
        return this.maxValue_
    }, Entry.Variable.prototype.setMaxValue = function (t) {
        this._valueWidth = null, t = t || 100, this.maxValue_ = t, this.value_ > t && (this.value_ = t), this.isMaxFloat = Entry.isFloat(this.maxValue_), this.updateView()
    }, Entry.Variable.prototype.isFloatPoint = function () {
        return this.isMaxFloat || this.isMinFloat
    }
}, function (t, e, n) {
    "use strict";
    Entry.Toast = function () {
        this.toasts_ = [];
        var t = document.getElementById("entryToastContainer");
        t && document.body.removeChild(t), this.body_ = Entry.createElement("div", "entryToastContainer"), this.body_.addClass("entryToastContainer"), document.body.appendChild(this.body_)
    }, Entry.Toast.prototype.warning = function (t, e, n) {
        var r = Entry.createElement("div", "entryToast");
        r.addClass("entryToast"), r.addClass("entryToastWarning"), r.bindOnClick(function () {
            Entry.toast.body_.removeChild(this)
        });
        var o = Entry.createElement("div", "entryToast");
        o.addClass("entryToastTitle"), o.innerHTML = t, r.appendChild(o);
        var a = Entry.createElement("p", "entryToast");
        a.addClass("entryToastMessage"), a.innerHTML = e, r.appendChild(a), this.toasts_.push(r), this.body_.appendChild(r), n || window.setTimeout(function () {
            r.style.opacity = 1;
            var t = setInterval(function () {
                r.style.opacity < .05 && (clearInterval(t), r.style.display = "none", Entry.removeElement(r)), r.style.opacity *= .9
            }, 20)
        }, 1e3)
    }, Entry.Toast.prototype.success = function (t, e, n) {
        var r = Entry.createElement("div", "entryToast");
        r.addClass("entryToast"), r.addClass("entryToastSuccess"), r.bindOnClick(function () {
            Entry.toast.body_.removeChild(this)
        });
        var o = Entry.createElement("div", "entryToast");
        o.addClass("entryToastTitle"), o.innerHTML = t, r.appendChild(o);
        var a = Entry.createElement("p", "entryToast");
        a.addClass("entryToastMessage"), a.innerHTML = e, r.appendChild(a), this.toasts_.push(r), this.body_.appendChild(r), n || window.setTimeout(function () {
            r.style.opacity = 1;
            var t = setInterval(function () {
                r.style.opacity < .05 && (clearInterval(t), r.style.display = "none", Entry.removeElement(r)), r.style.opacity *= .9
            }, 20)
        }, 1e3)
    }, Entry.Toast.prototype.alert = function (t, e, n) {
        var r, o = Entry.createElement("div", "entryToast");
        o.addClass("entryToast"), o.addClass("entryToastAlert"), o.bindOnClick(function () {
            Entry.toast.body_.removeChild(this), r && clearInterval(r)
        });
        var a = Entry.createElement("div", "entryToast");
        a.addClass("entryToastTitle"), a.innerHTML = t, o.appendChild(a);
        var s = Entry.createElement("p", "entryToast");
        s.addClass("entryToastMessage"), s.innerHTML = e, o.appendChild(s), this.toasts_.push(o), this.body_.appendChild(o), n || window.setTimeout(function () {
            o.style.opacity = 1, r = setInterval(function () {
                o.style.opacity < .05 && (clearInterval(r), o.style.display = "none", o.parentElement && Entry.toast.body_.removeChild(o)), o.style.opacity *= .9
            }, 20)
        }, 5e3)
    }
}, function (t, e, n) {
    "use strict";
    var r, o;
    Entry.StampEntity = function (t, e) {
        this.parent = t, this.type = t.objectType, this.isClone = !0, this.isStamp = !0, this.width = e.getWidth(), this.height = e.getHeight(), "sprite" == this.type ? (this.object = e.object.clone(), this.object.mouseEnabled = !1, this.object.tickEnabled = !1, this.object.filters = null, e.effect && (this.effect = Entry.cloneSimpleObject(e.effect), this.applyFilter())) : this.type, this.object.entity = e
    }, r = Entry.StampEntity.prototype, o = Entry.EntityObject.prototype, ["applyFilter", "getWidth", "getHeight", "getInitialEffectValue", "destroy", "cache"].forEach(function (t) {
        r[t] = o[t]
    })
}, function (t, e, n) {
    "use strict";
    Entry.Stage = function () {
        this.variables = {}, this.background = new createjs.Shape, this.background.graphics.beginFill("#ffffff").drawRect(-480, -240, 960, 480), this.objectContainers = [], this.selectedObjectContainer = null, this.variableContainer = new createjs.Container, this.dialogContainer = new createjs.Container, this.selectedObject = null, this.isObjectClick = !1, this._entitySelectable = !0
    }, Entry.Stage.prototype.initStage = function (t) {
        if (this.canvas = new createjs.Stage(t.id), this.canvas.x = 320, this.canvas.y = 180, this.canvas.scaleX = this.canvas.scaleY = 2 / 1.5, createjs.Touch.enable(this.canvas), this.canvas.enableMouseOver(10), this.canvas.mouseMoveOutside = !0, this.canvas.addChild(this.background), this.canvas.addChild(this.variableContainer), this.canvas.addChild(this.dialogContainer), this.inputField = null, this.initCoordinator(), this.initHandle(), this.mouseCoordinate = {
                x: 0,
                y: 0
            }, Entry.isPhone()) t.ontouchstart = function (t) {
            Entry.dispatchEvent("canvasClick", t), Entry.stage.isClick = !0
        }, t.ontouchend = function (t) {
            Entry.stage.isClick = !1, Entry.dispatchEvent("canvasClickCanceled", t)
        }; else {
            var e = function (t) {
                Entry.dispatchEvent("canvasClick", t), Entry.stage.isClick = !0
            };
            t.onmousedown = e, t.ontouchstart = e;
            var n = function (t) {
                Entry.stage.isClick = !1, Entry.dispatchEvent("canvasClickCanceled", t)
            };
            t.onmouseup = n, t.ontouchend = n, $(document).click(function (t) {
                "entryCanvas" === t.target.id ? Entry.stage.focused = !0 : Entry.stage.focused = !1
            })
        }
        Entry.addEventListener("canvasClick", function (t) {
            Entry.stage.isObjectClick = !1
        }), Entry.addEventListener("loadComplete", function () {
            this.sortZorder()
        }.bind(this)), Entry.windowResized.attach(this, function () {
            Entry.stage.updateBoundRect()
        });
        var r = _.debounce(function () {
            Entry.windowResized.notify()
        }, 200);
        $(window).scroll(function () {
            window.requestAnimationFrame(function () {
                r()
            })
        });
        var o = function (t) {
            t.preventDefault(), t = Entry.Utils.convertMouseEvent(t);
            var e = Entry.stage.getBoundRect(), n = Entry.Utils.getScrollPos(),
                r = 480 * ((t.pageX - e.left - n.left) / e.width - .5),
                o = -270 * ((t.pageY - e.top - n.top) / e.height - .5);
            this.mouseCoordinate = {
                x: Entry.Utils.toFixed(r),
                y: Entry.Utils.toFixed(o)
            }, Entry.dispatchEvent("stageMouseMove")
        }.bind(this);
        t.onmousemove = o, t.ontouchmove = o, t.onmouseout = function (t) {
            Entry.dispatchEvent("stageMouseOut")
        }, Entry.addEventListener("updateObject", a), Entry.addEventListener("run", function (t) {
            Entry.removeEventListener("updateObject", a)
        }), Entry.addEventListener("stop", function (t) {
            Entry.addEventListener("updateObject", a)
        });
        var a = function (t) {
            Entry.engine.isState("stop") && Entry.stage.updateObject()
        };
        Entry.addEventListener("canvasInputComplete", function (t) {
            try {
                var e = Entry.stage.inputField.value();
                Entry.stage.hideInputField(), e && ((n = Entry.container).setInputValue(e), n.inputValue.complete = !0)
            } catch (t) {
            }
            var n
        }), this.initWall(), this.render()
    }, Entry.Stage.prototype.render = function () {
        Entry.stage.timer && clearTimeout(Entry.stage.timer);
        var t = (new Date).getTime();
        Entry.stage.update(), t = (new Date).getTime() - t, Entry.stage.timer = setTimeout(Entry.stage.render, 16 - t % 16 + 16 * Math.floor(t / 16))
    }, Entry.Stage.prototype.update = function () {
        if ("invisible" !== Entry.type) if (Entry.requestUpdate) {
            Entry.engine.isState("stop") && this.objectUpdated ? (this.canvas.update(), this.objectUpdated = !1) : this.canvas.update();
            var t = this.inputField;
            t && !t._isHidden && t.render(), Entry.requestUpdateTwice ? Entry.requestUpdateTwice = !1 : Entry.requestUpdate = !1
        } else Entry.requestUpdate = !1
    }, Entry.Stage.prototype.loadObject = function (t) {
        var e = t.entity.object;
        Entry.scene.scenes_, this.getObjectContainerByScene(t.scene).addChild(e), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.loadEntity = function (t, e) {
        var n = t.parent.scene, r = Entry.stage.getObjectContainerByScene(n);
        e > -1 ? r.addChildAt(t.object, e) : r.addChild(t.object), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.unloadEntity = function (t) {
        var e = t.parent.scene;
        Entry.stage.getObjectContainerByScene(e).removeChild(t.object), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.loadVariable = function (t) {
        var e = t.view_;
        this.variables[t.id] = e, this.variableContainer.addChild(e), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.removeVariable = function (t) {
        var e = t.view_;
        this.variableContainer.removeChild(e), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.loadDialog = function (t) {
        this.dialogContainer.addChild(t.object)
    }, Entry.Stage.prototype.unloadDialog = function (t) {
        this.dialogContainer.removeChild(t.object)
    }, Entry.Stage.prototype.setEntityIndex = function (t, e) {
        var n = Entry.stage.selectedObjectContainer;
        n.getChildIndex(t.object) !== e && (n.setChildIndex(t.object, e), Entry.requestUpdate = !0)
    }, Entry.Stage.prototype.sortZorder = function () {
        for (var t = Entry.container.getCurrentObjects().slice(), e = t.length, n = this.selectedObjectContainer, r = 0, o = e - 1; o >= 0; o--) {
            var a = t[o].entity;
            n.setChildIndex(a.object, r++)
        }
        Entry.requestUpdate = !0
    }, Entry.Stage.prototype.sortZorderRun = function () {
        Entry.requestUpdate = !0
    }, Entry.Stage.prototype.initCoordinator = function () {
        var t = new createjs.Container, e = new createjs.Bitmap(Entry.mediaFilePath + "workspace_coordinate.png");
        e.scaleX = .5, e.scaleY = .5, e.x = -240, e.y = -135, t.mouseEnabled = !1, t.tickEnabled = !1, t.tickChildren = !1, t.visible = !1, t.addChild(e), this.canvas.addChild(t), this.coordinator = t
    }, Entry.Stage.prototype.toggleCoordinator = function () {
        this.coordinator.visible = !this.coordinator.visible, Entry.requestUpdate = !0
    }, Entry.Stage.prototype.selectObject = function (t) {
        this.selectedObject = t || null, this.updateObject()
    }, Entry.Stage.prototype.initHandle = function () {
        this.handle = new EaselHandle(this.canvas), this.handle.setChangeListener(this, this.updateHandle), this.handle.setEditStartListener(this, this.startEdit), this.handle.setEditEndListener(this, this.endEdit)
    }, Entry.Stage.prototype.updateObject = function () {
        if ("invisible" !== Entry.type && (Entry.requestUpdate = !0, this.handle.setDraggable(!0), !this.editEntity)) {
            var t = this.selectedObject;
            if (t) {
                "textBox" == t.objectType ? this.handle.toggleCenter(!1) : this.handle.toggleCenter(!0), "free" == t.getRotateMethod() ? (this.handle.toggleRotation(!0), this.handle.toggleDirection(!0)) : (this.handle.toggleRotation(!1), this.handle.toggleDirection(!0)), t.getLock() ? (this.handle.toggleRotation(!1), this.handle.toggleDirection(!1), this.handle.toggleResize(!1), this.handle.toggleCenter(!1), this.handle.setDraggable(!1)) : this.handle.toggleResize(!0), this.handle.setVisible(!0);
                var e, n, r = t.entity;
                if (this.handle.setWidth(r.getScaleX() * r.getWidth()), this.handle.setHeight(r.getScaleY() * r.getHeight()), "textBox" == r.type) if (r.getLineBreak()) e = r.regX * r.scaleX, n = -r.regY * r.scaleY; else {
                    var o = r.getTextAlign();
                    switch (n = -r.regY * r.scaleY, o) {
                        case Entry.TEXT_ALIGN_LEFT:
                            e = -r.getWidth() / 2 * r.scaleX;
                            break;
                        case Entry.TEXT_ALIGN_CENTER:
                            e = r.regX * r.scaleX;
                            break;
                        case Entry.TEXT_ALIGN_RIGHT:
                            e = r.getWidth() / 2 * r.scaleX
                    }
                } else e = (r.regX - r.width / 2) * r.scaleX, n = (r.height / 2 - r.regY) * r.scaleY;
                var a = r.getRotation() / 180 * Math.PI;
                this.handle.setX(r.getX() - e * Math.cos(a) - n * Math.sin(a)), this.handle.setY(-r.getY() - e * Math.sin(a) + n * Math.cos(a)), this.handle.setRegX((r.regX - r.width / 2) * r.scaleX), this.handle.setRegY((r.regY - r.height / 2) * r.scaleY), this.handle.setRotation(r.getRotation()), this.handle.setDirection(r.getDirection()), this.objectUpdated = !0, this.handle.setVisible(t.entity.getVisible()), t.entity.getVisible() && this.handle.render()
            } else this.handle.setVisible(!1)
        }
    }, Entry.Stage.prototype.updateHandle = function () {
        this.editEntity = !0;
        var t = this.handle, e = this.selectedObject.entity;
        if (e.lineBreak) e.setHeight(t.height / e.getScaleY()), e.setWidth(t.width / e.getScaleX()); else {
            if (0 !== e.width) {
                var n = Math.abs(t.width / e.width);
                e.flip && (n *= -1), e.setScaleX(n)
            }
            0 !== e.height && e.setScaleY(t.height / e.height)
        }
        var r = t.rotation / 180 * Math.PI;
        if ("textBox" == e.type) {
            e.syncFont();
            var o = t.regX / e.scaleX, a = t.regY / e.scaleY;
            if (e.getLineBreak()) e.setX(t.x), e.setY(-t.y); else switch (e.getTextAlign()) {
                case Entry.TEXT_ALIGN_LEFT:
                    e.setX(t.x - t.width / 2 * Math.cos(r)), e.setY(-t.y + t.width / 2 * Math.sin(r));
                    break;
                case Entry.TEXT_ALIGN_CENTER:
                    e.setX(t.x), e.setY(-t.y);
                    break;
                case Entry.TEXT_ALIGN_RIGHT:
                    e.setX(t.x + t.width / 2 * Math.cos(r)), e.setY(-t.y - t.width / 2 * Math.sin(r))
            }
        } else o = e.width / 2 + t.regX / e.scaleX, e.setX(t.x + t.regX * Math.cos(r) - t.regY * Math.sin(r)), e.setRegX(o), a = e.height / 2 + t.regY / e.scaleY, e.setY(-t.y - t.regX * Math.sin(r) - t.regY * Math.cos(r)), e.setRegY(a);
        e.setDirection(t.direction), e.setRotation(t.rotation), this.selectedObject.entity.doCommand(), this.editEntity = !1
    }, Entry.Stage.prototype.startEdit = function () {
        var t = this.selectedObject;
        t && t.entity.initCommand()
    }, Entry.Stage.prototype.endEdit = function () {
        this.selectedObject.entity.checkCommand()
    }, Entry.Stage.prototype.initWall = function () {
        var t = new createjs.Container;
        t.mouseEnabled = !1;
        var e = new Image;
        e.src = Entry.mediaFilePath + "media/bound.png", t.up = new createjs.Bitmap, t.up.scaleX = 16, t.up.y = -165, t.up.x = -240, t.up.image = e, t.addChild(t.up), t.down = new createjs.Bitmap, t.down.scaleX = 16, t.down.y = 135, t.down.x = -240, t.down.image = e, t.addChild(t.down), t.right = new createjs.Bitmap, t.right.scaleY = 9, t.right.y = -135, t.right.x = 240, t.right.image = e, t.addChild(t.right), t.left = new createjs.Bitmap, t.left.scaleY = 9, t.left.y = -135, t.left.x = -270, t.left.image = e, t.addChild(t.left), this.canvas.addChild(t), this.wall = t
    }, Entry.Stage.prototype.showInputField = function () {
        this.inputField || (this.inputField = new CanvasInput({
            canvas: document.getElementById("entryCanvas"),
            fontSize: 20,
            fontFamily: "NanumGothic",
            fontColor: "#212121",
            width: Math.round(1 / 1.5 * 556),
            height: 1 / 1.5 * 26,
            padding: 1 / 1.5 * 8,
            borderWidth: 1 / 1.5 * 1,
            borderColor: "#000",
            borderRadius: 3,
            boxShadow: "none",
            innerShadow: "0px 0px 5px rgba(0, 0, 0, 0.5)",
            x: 1 / 1.5 * 202,
            y: 300,
            topPosition: !0,
            onsubmit: function () {
                Entry.dispatchEvent("canvasInputComplete")
            }
        }));
        var t = new createjs.Container, e = new Image, n = new createjs.Bitmap;
        e.onload = function () {
            n.image = this, Entry.requestUpdate = !0
        }, e.src = Entry.mediaFilePath + "confirm_button.png", n.scaleX = .23, n.scaleY = .23, n.x = 160, n.y = 89, n.cursor = "pointer", n.image = e, t.addChild(n), t.on("mousedown", function (t) {
            Entry.dispatchEvent("canvasInputComplete")
        }), this.inputSubmitButton || (this.inputField.value(""), this.canvas.addChild(t), this.inputSubmitButton = t), this.inputField.show(), Entry.requestUpdateTwice = !0
    }, Entry.Stage.prototype.hideInputField = function () {
        this.inputField && this.inputField.value() && this.inputField.value(""), this.inputSubmitButton && (this.canvas.removeChild(this.inputSubmitButton), this.inputSubmitButton = null), this.inputField && this.inputField.hide(), Entry.requestUpdate = !0
    }, Entry.Stage.prototype.initObjectContainers = function () {
        var t = Entry.scene.scenes_;
        if (t && 0 !== t.length) {
            for (var e = 0; e < t.length; e++) this.objectContainers[e] = this.createObjectContainer(t[e]);
            this.selectedObjectContainer = this.objectContainers[0]
        } else {
            var n = this.createObjectContainer(Entry.scene.selectedScene);
            this.objectContainers.push(n), this.selectedObjectContainer = n
        }
        "invisible" !== Entry.type && this.canvas.addChild(this.selectedObjectContainer), this.selectObjectContainer(Entry.scene.selectedScene)
    }, Entry.Stage.prototype.selectObjectContainer = function (t) {
        var e = this.objectContainers, n = this.canvas;
        n && e && e.length && (e.forEach(function (t) {
            n.removeChild(t)
        }), this.selectedObjectContainer = this.getObjectContainerByScene(t), n.addChildAt(this.selectedObjectContainer, 2))
    }, Entry.Stage.prototype.createObjectContainer = function (t) {
        var e = new createjs.Container;
        return e.scene = t, e
    }, Entry.Stage.prototype.removeObjectContainer = function (t) {
        var e = this.objectContainers, n = this.getObjectContainerByScene(t);
        this.canvas && this.canvas.removeChild(n), e.splice(this.objectContainers.indexOf(n), 1)
    }, Entry.Stage.prototype.getObjectContainerByScene = function (t) {
        for (var e = this.objectContainers, n = 0; n < e.length; n++) if (e[n].scene.id == t.id) return e[n]
    }, Entry.Stage.prototype.moveSprite = function (t) {
        if (this.selectedObject && Entry.stage.focused && !this.selectedObject.getLock()) {
            var e = 5;
            t.shiftKey && (e = 1);
            var n = this.selectedObject.entity;
            switch (t.keyCode) {
                case 38:
                    n.setY(n.getY() + e);
                    break;
                case 40:
                    n.setY(n.getY() - e);
                    break;
                case 37:
                    n.setX(n.getX() - e);
                    break;
                case 39:
                    n.setX(n.getX() + e)
            }
            this.updateObject()
        }
    }, Entry.Stage.prototype.getBoundRect = function (t) {
        return this._boundRect ? this._boundRect : this.updateBoundRect()
    }, Entry.Stage.prototype.updateBoundRect = function (t) {
        return this._boundRect = this.canvas.canvas.getBoundingClientRect()
    }, Entry.Stage.prototype.getDom = function (t) {
        if ("canvas" === t.shift()) return this.canvas.canvas
    }, Entry.Stage.prototype.setEntitySelectable = function (t) {
        this._entitySelectable = t
    }, Entry.Stage.prototype.isEntitySelectable = function () {
        return Entry.engine.isState("stop") && this._entitySelectable
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Scene = function () {
        var t = this;
        this.scenes_ = [], this.selectedScene = null, this.maxCount = 20, $(window).on("resize", function (e) {
            t.resize()
        }), t.disposeEvent = Entry.disposeEvent.attach(this, function (t) {
            var e = document.activeElement;
            t && e && e !== t.target && $(e).hasClass("entrySceneFieldWorkspace") && e.blur()
        })
    }, Entry.Scene.prototype.generateView = function (t, e) {
        var n = this;
        if (this.view_ = t, this.view_.addClass("entryScene"), !e || "workspace" == e) {
            this.view_.addClass("entrySceneWorkspace"), $(this.view_).on("mousedown", function (t) {
                var e = $(this).offset(), r = $(window), o = t.pageX - e.left + r.scrollLeft(),
                    a = t.pageY - e.top + r.scrollTop();
                a = 40 - a;
                var s = n.selectedScene, i = $(s.view).find(".entrySceneRemoveButtonCoverWorkspace").offset().left;
                if (!(o < i || o > i + 55) && a > 40 + -40 / 55 * (o -= i)) {
                    var l = n.getNextScene();
                    if (l) {
                        var c = $(l.view);
                        $(document).trigger("mouseup"), c.trigger("mousedown")
                    }
                }
            });
            var r = Entry.createElement("ul");
            if (r.addClass("entrySceneListWorkspace"), Entry.sceneEditable && $ && $(r).sortable({
                    start: function (t, e) {
                        e.item.data("start_pos", e.item.index()), $(e.item[0]).clone(!0)
                    }, stop: function (t, e) {
                        var n = e.item.data("start_pos"), r = e.item.index();
                        Entry.scene.moveScene(n, r)
                    }, axis: "x", tolerance: "pointer"
                }), this.view_.appendChild(r), this.listView_ = r, Entry.sceneEditable) {
                var o = Entry.createElement("span");
                o.addClass("entrySceneElementWorkspace"), o.addClass("entrySceneAddButtonWorkspace"), o.bindOnClick(function (t) {
                    Entry.engine.isState("run") || Entry.do("sceneAdd", Entry.generateHash())
                }), this.view_.appendChild(o), this.addButton_ = o
            }
        }
    }, Entry.Scene.prototype.generateElement = function (t) {
        var e = this, n = Entry.createElement("li", t.id);
        document.createDocumentFragment("div").appendChild(n), n.addClass("entrySceneElementWorkspace  entrySceneButtonWorkspace minValue"), $(n).on("mousedown", function (e) {
            Entry.engine.isState("run") ? e.preventDefault() : Entry.scene.selectScene(t)
        });
        var r = Entry.createElement("input");
        r.addClass("entrySceneFieldWorkspace"), r.value = t.name, Entry.sceneEditable || (r.disabled = "disabled");
        var o = Entry.createElement("span");
        o.addClass("entrySceneLeftWorkspace"), n.appendChild(o);
        var a = Entry.createElement("span");
        a.addClass("entrySceneInputCover"), n.appendChild(a), t.inputWrapper = a, r.onkeyup = function (n) {
            var r = n.keyCode;
            Entry.isArrowOrBackspace(r) || (t.name = this.value, 13 == r && this.blur(), this.value.length > 10 && (this.value = this.value.substring(0, 10), t.name = this.value, this.blur()), setTimeout(function () {
                e.resize()
            }, 0))
        }, r.onblur = function (n) {
            r.value = this.value, t.name = this.value, e.resize()
        }, a.appendChild(r), n.nameField = r;
        var s = Entry.createElement("span");
        if (s.addClass("entrySceneRemoveButtonCoverWorkspace"), n.appendChild(s), Entry.sceneEditable) {
            var i = Entry.createElement("button");
            i.addClass("entrySceneRemoveButtonWorkspace"), i.scene = t, i.bindOnClick(function (t) {
                t.stopPropagation(), Entry.engine.isState("run") || entrylms.confirm(Lang.Workspace.will_you_delete_scene).then(function (t) {
                    !0 === t && Entry.scene.removeScene(this.scene)
                }.bind(this))
            }), s.appendChild(i)
        }
        return Entry.Utils.disableContextmenu(n), Entry.sceneEditable && Entry.ContextMenu.onContextmenu($(n), function (e) {
            var n = [{
                text: Lang.Workspace.duplicate_scene,
                enable: Entry.engine.isState("stop") && !this.isMax(),
                callback: function () {
                    Entry.scene.cloneScene(t)
                }
            }];
            Entry.ContextMenu.show(n, "workspace-contextmenu", e)
        }.bind(this)), t.view = n, n
    }, Entry.Scene.prototype.updateView = function () {
        if (!Entry.type || "workspace" == Entry.type) {
            for (var t = this.listView_, e = $(t).children().length; e < this.getScenes().length; e++) t.appendChild(this.getScenes()[e].view);
            this.addButton_ && (this.getScenes().length, this.isMax() ? this.addButton_.addClass("entryRemove") : this.addButton_.removeClass("entryRemove"))
        }
        this.resize()
    }, Entry.Scene.prototype.addScenes = function (t) {
        if (this.scenes_ = t, t && 0 !== t.length) for (var e = 0, n = t.length; e < n; e++) this.generateElement(t[e]); else this.scenes_ = [], this.scenes_.push(this.createScene());
        this.selectScene(this.getScenes()[0])
    }, Entry.Scene.prototype.addScene = function (t, e) {
        return void 0 !== t && "string" != typeof t || (t = this.createScene(t)), t.view || this.generateElement(t), e || "number" == typeof e ? this.getScenes().splice(e, 0, t) : this.getScenes().push(t), Entry.stage.objectContainers.push(Entry.stage.createObjectContainer(t)), this.selectScene(t), this.updateView(), Entry.creationChangedEvent && Entry.creationChangedEvent.notify(), t
    }, Entry.Scene.prototype.removeScene = function (t) {
        if (this.getScenes().length <= 1) Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_delete_error, !1); else {
            var e = this.getScenes().indexOf(this.getSceneById(t.id));
            this.getScenes().splice(e, 1);
            for (var n = Entry.container.getSceneObjects(t), r = 0; r < n.length; r++) Entry.container.removeObject(n[r], !0);
            Entry.stage.removeObjectContainer(t), $(t.view).remove(), this.selectScene()
        }
    }, Entry.Scene.prototype.selectScene = function (t) {
        t = t || this.getScenes()[0];
        var e = Entry.container;
        if (e.resetSceneDuringRun(), !this.selectedScene || this.selectedScene.id != t.id) {
            var n = this.selectedScene;
            if (n) {
                var r = n.view;
                r.removeClass("selectedScene");
                var o = document.activeElement;
                o === r.nameField && o.blur()
            }
            this.selectedScene = t, t.view.addClass("selectedScene");
            var a = Entry.stage, s = Entry.playground;
            e.setCurrentObjects(), a.selectObjectContainer(t);
            var i = e.getCurrentObjects()[0];
            if (i && "minimize" !== Entry.type) e.selectObject(i.id), s.refreshPlayground(); else {
                if (Entry.isTextMode) {
                    var l = Entry.getMainWS(), c = l && l.vimBoard;
                    if (c) {
                        var u = c._currentObject, p = c._currentScene, _ = c._parser;
                        try {
                            t.id != p.id && l._syncTextCode()
                        } catch (t) {
                        }
                        if (_._onError) return void e.selectObject(u.id, !0)
                    }
                    c && c.clearText()
                }
                a.selectObject(null), s.flushPlayground(), Entry.variableContainer.updateList()
            }
            !e.listView_ && a.sortZorder(), e.updateListView(), this.updateView(), Entry.requestUpdate = !0
        }
    }, Entry.Scene.prototype.toJSON = function () {
        for (var t = [], e = this.getScenes().length, n = 0; n < e; n++) {
            var r = this.getScenes()[n], a = r.view, s = r.inputWrapper;
            delete r.view, delete r.inputWrapper, t.push(JSON.parse((0, o.default)(r))), r.view = a, r.inputWrapper = s
        }
        return t
    }, Entry.Scene.prototype.moveScene = function (t, e) {
        this.getScenes().splice(e, 0, this.getScenes().splice(t, 1)[0]), Entry.container.updateObjectsOrder(), Entry.stage.sortZorder(), $(".entrySceneElementWorkspace").removeAttr("style")
    }, Entry.Scene.prototype.getSceneById = function (t) {
        for (var e = this.getScenes(), n = 0; n < e.length; n++) if (e[n].id == t) return e[n];
        return !1
    }, Entry.Scene.prototype.getScenes = function () {
        return this.scenes_
    }, Entry.Scene.prototype.takeStartSceneSnapshot = function () {
        this.sceneBeforeRun = this.selectedScene
    }, Entry.Scene.prototype.loadStartSceneSnapshot = function () {
        this.selectScene(this.sceneBeforeRun), this.sceneBeforeRun = null
    }, Entry.Scene.prototype.createScene = function (t) {
        var e = Entry.getOrderedName(Lang.Blocks.SCENE + " ", this.scenes_, "name");
        /[0-9]/.test(e) || (e += "1");
        var n = {name: e, id: t || Entry.generateHash()};
        return this.generateElement(n), n
    }, Entry.Scene.prototype.cloneScene = function (t) {
        if (this.isMax()) Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.Scene_add_error, !1); else {
            var e = {name: (Lang.Workspace.cloned_scene + t.name).substring(0, 10), id: Entry.generateHash()};
            this.generateElement(e), this.addScene(e);
            var n = Entry.container, r = n.getSceneObjects(t);
            try {
                var o = [], a = [];
                this.isSceneCloning = !0;
                for (var s = r.length - 1; s >= 0; s--) {
                    var i = r[s], l = n.addCloneObject(i, e.id, !0);
                    o.push(i.id), a.push(l.id)
                }
                n.adjustClonedValues(o, a);
                var c = Entry.getMainWS();
                c && c.board && c.board.reDraw(), this._focusSceneNameField(e), this.isSceneCloning = !1, n.setCurrentObjects(), n.updateObjectsOrder(), n.updateListView(), n.selectObject(a[a.length - 1]), Entry.variableContainer.updateViews()
            } catch (t) {
                console.log("error", t)
            }
        }
    }, Entry.Scene.prototype.resize = function () {
        var t = this.getScenes(), e = this.selectedScene, n = (this.addButton_, t[0]);
        if (0 !== t.length && n) {
            var r = $(n.view).offset().left,
                o = (parseFloat($(e.view).css("margin-left")), Math.floor($(this.view_).width() - r - 5)), a = r + 15,
                s = 0, i = !1, l = 0;
            for (var c in t) {
                var u = t[c], p = u.view;
                p.addClass("minValue"), i = p === this.selectedScene.view, p = $(p);
                var _ = parseFloat(Entry.computeInputWidth(u.name)), d = 10 * _ / 9;
                u === this.selectedScene && (s = d - _), $(u.inputWrapper).width(d + "px");
                var y = p.width();
                i && (l = y), a += y + -40
            }
            a > o && function () {
                var n = t.length - 1;
                o = o - Math.round(l || $(e.view).width()) - 30.5 * n - s;
                var r = Math.floor(o / n);
                for (c in t) u = t[c], e.id != u.id ? (u.view.removeClass("minValue"), $(u.inputWrapper).width(r)) : u.view.addClass("minValue")
            }()
        }
    }, Entry.Scene.prototype.getNextScene = function () {
        var t = this.getScenes();
        return t[t.indexOf(this.selectedScene) + 1]
    }, Entry.Scene.prototype.isMax = function () {
        return this.scenes_.length >= this.maxCount
    }, Entry.Scene.prototype.clear = function () {
        this.scenes_.forEach(function (t) {
            Entry.stage.removeObjectContainer(t)
        }), $(this.listView_).html(""), this.scenes_ = [], this.selectedScene = null
    }, Entry.Scene.prototype._focusSceneNameField = function (t) {
        var e = t.view && t.view.nameField;
        e && e.focus && e.focus()
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(5)) && r.__esModule ? r : {default: r};
    Entry.Reporter = function (t) {
        this.userId = null, this.projectId = null, this.isRealTime = t, this.activities = []
    }, Entry.Reporter.prototype.start = function (t, e, n) {
        this.isRealTime && (window.location.href.indexOf("localhost") > -1 ? this.io = io("localhost:7000") : this.io = io("play04.play-entry.com:7000"), this.io.emit("activity", {
            message: "start",
            userId: e,
            projectId: t,
            time: n
        })), this.userId = e, this.projectId = t
    }, Entry.Reporter.prototype.report = function (t) {
        if (!this.isRealTime || this.io) {
            var e = [];
            for (var n in t.params) {
                var r = t.params[n];
                "object" !== (void 0 === r ? "undefined" : (0, o.default)(r)) ? e.push(r) : r.id && e.push(r.id)
            }
            var a = {message: t.message, userId: this.userId, projectId: this.projectId, time: t.time, params: e};
            this.isRealTime ? this.io.emit("activity", a) : this.activities.push(a)
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.PropertyPanel = function () {
        this.modes = {}, this.selected = null
    }, (o = Entry.PropertyPanel.prototype).generateView = function (t, e) {
        this._view = Entry.Dom("div", {
            class: "propertyPanel",
            parent: $(t)
        }), this._tabView = Entry.Dom("div", {
            class: "propertyTab",
            parent: this._view
        }), this._contentView = Entry.Dom("div", {
            class: "propertyContent",
            parent: this._view
        }), this._cover = Entry.Dom("div", {classes: ["propertyPanelCover", "entryRemove"], parent: this._view});
        var n = Entry.Dom("div", {class: "entryObjectSelectedImgWorkspace", parent: this._view});
        this.initializeSplitter(n)
    }, o.addMode = function (t, e) {
        this.modes[t] && this.removeMode(t);
        var n = e.getView();
        n = Entry.Dom(n, {parent: this._contentView});
        var r = Entry.Dom("<div>" + Lang.Menus[t] + "</div>", {
            classes: ["propertyTabElement", "propertyTab" + t],
            parent: this._tabView
        }), o = this;
        r.bind("click", function () {
            o.select(t)
        }), "console" == t && e.codeMirror.refresh(), this.modes[t] && (this.modes[t].tabDom.remove(), this.modes[t].contentDom.remove(), "hw" == t && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick"))), this.modes[t] = {
            obj: e,
            tabDom: r,
            contentDom: n
        }, "hw" == t && $(".propertyTabhw").bind("dblclick", function () {
            Entry.dispatchEvent("hwModeChange")
        })
    }, o.removeMode = function (t) {
        this.modes[t] && (this.modes[t].tabDom.remove(), this.modes[t].contentDom.remove(), "hw" == t && ($(this.modes).removeClass(".propertyTabhw"), $(".propertyTabhw").unbind("dblclick")));
        var e = (0, a.default)(this.modes);
        e && e.length > 0 && this.select(e[0])
    }, o.resize = function (t) {
        var e = this.selected;
        if (e) {
            var n = 9 * t / 16;
            this._view.css({
                width: t + "px",
                top: n + 35 + 40 + 48 - 22 + "px"
            }), t >= 430 ? this._view.removeClass("collapsed") : this._view.addClass("collapsed"), Entry.dispatchEvent("windowResized");
            var r = this.modes[e].obj;
            "hw" == e && this.modes.hw.obj.listPorts ? r.resizeList() : r.resize && r.resize()
        }
    }, o.select = function (t) {
        for (var e in this.modes) {
            var n = this.modes[e];
            n.tabDom.removeClass("selected"), n.contentDom.addClass("entryRemove"), $(n.contentDom).detach(), n.obj.visible = !1
        }
        var r = this.modes[t];
        $(this._contentView).append(r.contentDom), r.tabDom.addClass("selected"), r.contentDom.removeClass("entryRemove"), r.obj.resize && r.obj.resize(), r.obj.visible = !0, this.selected = t
    }, o.initializeSplitter = function (t) {
        var e = this;
        t.bind("mousedown touchstart", function (t) {
            var r = Entry.container;
            e._cover.removeClass("entryRemove"), e._cover._isVisible = !0, r.splitterEnable = !0, Entry.documentMousemove && (r.resizeEvent = Entry.documentMousemove.attach(this, function (t) {
                r.splitterEnable && Entry.resizeElement({canvasWidth: t.clientX || t.x})
            })), $(document).bind("mouseup.container:splitter touchend.container:splitter", n)
        });
        var n = function (t) {
            var n = Entry.container, r = n.resizeEvent;
            r && (n.splitterEnable = !1, r.destroy(), delete n.resizeEvent), e._cover._isVisible && (e._cover._isVisible = !1, e._cover.addClass("entryRemove")), $(document).unbind(".container:splitter")
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.getStartProject = function (t) {
        return {
            category: "기타",
            scenes: [{name: Lang.Blocks.SCENE + " 1", id: "7dwq"}],
            variables: [{
                name: Lang.Workspace.Variable_Timer,
                id: "brih",
                visible: !1,
                value: "0",
                variableType: "timer",
                x: 150,
                y: -70,
                array: [],
                object: null,
                isCloud: !1
            }, {
                name: Lang.Blocks.VARIABLE_get_canvas_input_value,
                id: "1vu8",
                visible: !1,
                value: "0",
                variableType: "answer",
                x: 150,
                y: -100,
                array: [],
                object: null,
                isCloud: !1
            }],
            objects: [{
                id: "7y0y",
                name: "엔트리봇",
                label: {ko: "엔트리봇", en: "Entrybot"},
                script: [[{type: "when_run_button_click", x: 40, y: 50}, {
                    type: "repeat_basic",
                    statements: [[{type: "move_direction"}]]
                }]],
                selectedPictureId: "vx80",
                objectType: "sprite",
                rotateMethod: "free",
                scene: "7dwq",
                sprite: {
                    sounds: [{
                        duration: 1.3,
                        ext: ".mp3",
                        id: "8el5",
                        fileurl: t + "media/bark.mp3",
                        name: "강아지 짖는소리",
                        label: {ko: "강아지 짖는소리", en: "Doggi's Bark"}
                    }],
                    pictures: [{
                        id: "vx80",
                        fileurl: t + "media/entrybot1.png",
                        name: Lang.Blocks.walking_entryBot + "1",
                        scale: 100,
                        dimension: {width: 284, height: 350}
                    }, {
                        id: "4t48",
                        fileurl: t + "media/entrybot2.png",
                        name: Lang.Blocks.walking_entryBot + "2",
                        scale: 100,
                        dimension: {width: 284, height: 350}
                    }]
                },
                entity: {
                    x: 0,
                    y: 0,
                    regX: 142,
                    regY: 175,
                    scaleX: .3154574132492113,
                    scaleY: .3154574132492113,
                    rotation: 0,
                    direction: 90,
                    width: 284,
                    height: 350,
                    visible: !0
                },
                lock: !1,
                active: !0
            }],
            speed: 60
        }
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.PopupList = function (t) {
        this.view = t
    }, (r = Entry.PopupList.prototype).getView = function () {
        return this.view
    }, r.resize = function () {
    }
}, function (t, e, n) {
    "use strict";
    Entry.popupHelper = function (t) {
        this.popupList = {}, this.nextPopupList = [], this.nowContent, t && ($(".entryPopup.popupHelper").remove(), window.popupHelper = null), Entry.assert(!window.popupHelper, "Popup exist");
        var e = ["confirm", "spinner"],
            n = ["entryPopupHelperTopSpan", "entryPopupHelperBottomSpan", "entryPopupHelperLeftSpan", "entryPopupHelperRightSpan"];
        this.body_ = Entry.Dom("div", {classes: ["entryPopup", "hiddenPopup", "popupHelper"]});
        var r = this;
        this.body_.bindOnClick(function (t) {
            if (!(r.nowContent && e.indexOf(r.nowContent.prop("type")) > -1)) {
                var o = $(t.target);
                n.forEach(function (t) {
                    o.hasClass(t) && r.hide()
                }), t.target == r && r.hide()
            }
        }), window.popupHelper = this, this.body_.prop("popup", this), Entry.Dom("div", {
            class: "entryPopupHelperTopSpan",
            parent: this.body_
        });
        var o = Entry.Dom("div", {class: "entryPopupHelperMiddleSpan", parent: this.body_});
        Entry.Dom("div", {
            class: "entryPopupHelperBottomSpan",
            parent: this.body_
        }), Entry.Dom("div", {
            class: "entryPopupHelperLeftSpan",
            parent: o
        }), this.window_ = Entry.Dom("div", {
            class: "entryPopupHelperWindow",
            parent: o
        }), Entry.Dom("div", {class: "entryPopupHelperRightSpan", parent: o}), $("body").append(this.body_)
    }, Entry.popupHelper.prototype.clearPopup = function () {
        for (var t = this.popupWrapper_.children.length - 1; t > 2; t--) this.popupWrapper_.removeChild(this.popupWrapper_.children[t])
    }, Entry.popupHelper.prototype.addPopup = function (t, e) {
        var n = Entry.Dom("div"), r = Entry.Dom("div", {class: "entryPopupHelperCloseButton"});
        r.bindOnClick(function () {
            e.closeEvent ? e.closeEvent(this) : this.hide()
        }.bind(this));
        var o = Entry.Dom("div", {class: "entryPopupHelperWrapper"});
        if (o.append(r), e.title) {
            var a = Entry.Dom("div", {class: "entryPopupHelperTitle"});
            o.append(a), a.text(e.title)
        }
        n.addClass(t), n.append(o), n.popupWrapper_ = o, n.prop("type", e.type), "function" == typeof e.setPopupLayout && e.setPopupLayout(n), n._obj = e, this.popupList[t] = n
    }, Entry.popupHelper.prototype.hasPopup = function (t) {
        return !!this.popupList[t]
    }, Entry.popupHelper.prototype.setPopup = function (t) {
    }, Entry.popupHelper.prototype.remove = function (t) {
        t ? this.window_.find("> ." + t).remove() : this.window_.children().length > 0 && this.window_.children().remove(), delete this.popupList[t], this.nowContent && this.nowContent.hasClass(t) && (this.nowContent = void 0, this.body_.addClass("hiddenPopup"), this.nextPopupList.length > 0 && this.show(this.nextPopupList.shift()))
    }, Entry.popupHelper.prototype.resize = function (t) {
    }, Entry.popupHelper.prototype.show = function (t, e) {
        var n = this;
        e && this.window_.children().length > 0 ? this.nextPopupList.push(t) : (this.window_.children().detach(), function (t) {
            n.window_.append(n.popupList[t]), n.nowContent = n.popupList[t], n.body_.removeClass("hiddenPopup")
        }(t)), this.nowContent && this.nowContent._obj && this.nowContent._obj.onShow && this.nowContent._obj.onShow()
    }, Entry.popupHelper.prototype.hide = function () {
        var t = this.nowContent && this.nowContent._obj;
        t && "closeEvent" in t && t.closeEvent(this), this.nowContent = void 0, this.body_.addClass("hiddenPopup"), this.window_.children().detach(), this.nextPopupList.length > 0 && this.show(this.nextPopupList.shift())
    }, Entry.popupHelper.prototype.addClass = function (t) {
        t && this.body_.addClass(t)
    }
}, function (t, e, n) {
    "use strict";
    Entry.Popup = function (t) {
        Entry.assert(!window.popup, "Popup exist"), this.body_ = Entry.createElement("div"), this.body_.addClass("entryPopup"), t && this.body_.addClass(t), this.body_.bindOnClick(function (t) {
            t.target == this && this.popup.remove()
        }), this.body_.popup = this, document.body.appendChild(this.body_), this.window_ = Entry.createElement("div"), this.window_.addClass("entryPopupWindow"), Entry.targetChecker && this.window_.addClass("targetCheckerPopup"), "tablet" === Entry.device && this.window_.addClass("tablet"), this.window_.bindOnClick(function () {
        }), Entry.addEventListener("windowResized", this.resize), window.popup = this, this.resize(), this.body_.appendChild(this.window_)
    }, Entry.Popup.prototype.remove = function () {
        for (; this.window_.hasChildNodes();) "workspace" == Entry.type ? Entry.view_.insertBefore(this.window_.firstChild, Entry.container.view_) : Entry.view_.insertBefore(this.window_.lastChild, Entry.view_.firstChild);
        $("body").css("overflow", "auto"), Entry.removeElement(this.body_), window.popup = null, Entry.removeEventListener("windowResized", this.resize), Entry.engine.popup = null, Entry.windowResized.notify(), "workspace" === Entry.type && Entry.targetChecker && Entry.targetChecker.getStatusView().remove()
    }, Entry.Popup.prototype.resize = function (t) {
        var e = window.popup.window_, n = Entry.targetChecker ? 126 : 35, r = .9 * window.innerWidth,
            o = .9 * window.innerHeight - n;
        9 * r <= 16 * o ? (o = r / 16 * 9, o += n, e.style.width = String(r) + "px", e.style.height = String(o) + "px") : (r = 16 * o / 9, o += n, e.style.width = String(r) + "px", e.style.height = String(o) + "px"), Entry.stage && Entry.stage.updateBoundRect()
    }, Entry.Popup.prototype.removeMouseDispose = function (t) {
        this.body_.unBindOnClick()
    }
}, function (t, e, n) {
    "use strict";
    var r, o = n(50);
    o.Playground = function () {
        this.isTextBGMode_ = !1, this.enableArduino = !1, this.viewMode_ = "default", o.addEventListener("textEdited", this.injectText), o.addEventListener("hwChanged", this.updateHW)
    }, (r = o.Playground.prototype).setMode = function (t) {
        console.log("playground setMode", t), this.mainWorkspace.setMode(t)
    }, r.generateView = function (t, e) {
        if (this.view_ = t, this.view_.addClass("entryPlayground"), e && "workspace" != e) "phone" == e && (this.view_.addClass("entryPlaygroundPhone"), (n = o.createElement("div", "entryCategoryTab")).addClass("entryPlaygroundTabPhone"), o.view_.insertBefore(n, this.view_), this.generateTabView(n), this.tabView_ = n, (r = o.createElement("div", "entryCurtain")).addClass("entryPlaygroundCurtainPhone"), r.addClass("entryRemove"), r.innerHTML = Lang.Workspace.cannot_edit_click_to_stop, r.bindOnClick(function () {
            o.engine.toggleStop()
        }), this.view_.appendChild(r), this.curtainView_ = r, o.pictureEditable && ((a = o.createElement("div", "entryPicture")).addClass("entryPlaygroundPicturePhone"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generatePictureView(a), this.pictureView_ = a), (s = o.createElement("div", "entryText")).addClass("entryRemove"), this.view_.appendChild(s), this.generateTextView(s), this.textView_ = s, o.soundEditable && ((i = o.createElement("div", "entrySound")).addClass("entryPlaygroundSoundWorkspacePhone"), i.addClass("entryRemove"), this.view_.appendChild(i), this.generateSoundView(i), this.soundView_ = i), l = o.createElement("div", "entryDefault"), this.view_.appendChild(l), this.generateDefaultView(l), this.defaultView_ = l, (c = o.createElement("div", "entryCode")).addClass("entryPlaygroundCodePhone"), this.view_.appendChild(c), this.generateCodeView(c), this.codeView_ = c, this.codeView_ = c, o.addEventListener("run", function (t) {
            o.playground.curtainView_.removeClass("entryRemove")
        }), o.addEventListener("stop", function (t) {
            o.playground.curtainView_.addClass("entryRemove")
        })); else {
            var n, r;
            this.view_.addClass("entryPlaygroundWorkspace"), (n = o.createElement("div", "entryCategoryTab")).addClass("entryPlaygroundTabWorkspace"), this.view_.appendChild(n), this.generateTabView(n), this.tabView_ = n, (r = o.createElement("div", "entryCurtain")).addClass("entryPlaygroundCurtainWorkspace"), r.addClass("entryRemove");
            var a, s, i, l, c, u = Lang.Workspace.cannot_edit_click_to_stop.split(".");
            r.innerHTML = u[0] + ".<br/>" + u[1], r.addEventListener("click", function () {
                o.engine.toggleStop()
            }), this.view_.appendChild(r), this.curtainView_ = r, (a = o.createElement("div", "entryPicture")).addClass("entryPlaygroundPictureWorkspace"), a.addClass("entryRemove"), this.view_.appendChild(a), this.generatePictureView(a), this.pictureView_ = a, (s = o.createElement("div", "entryText")).addClass("entryPlaygroundTextWorkspace"), s.addClass("entryRemove"), this.view_.appendChild(s), this.generateTextView(s), this.textView_ = s, (i = o.createElement("div", "entrySound")).addClass("entryPlaygroundSoundWorkspace"), i.addClass("entryRemove"), this.view_.appendChild(i), this.generateSoundView(i), this.soundView_ = i, (l = o.createElement("div", "entryDefault")).addClass("entryPlaygroundDefaultWorkspace"), this.view_.appendChild(l), this.generateDefaultView(l), this.defaultView_ = l, (c = o.createElement("div", "entryCode")).addClass("entryPlaygroundCodeWorkspace"), c.addClass("entryRemove"), this.view_.appendChild(c), this.generateCodeView(c), this.codeView_ = c;
            var p = o.createElement("div");
            p.addClass("entryPlaygroundResizeWorkspace", "entryRemove"), this.resizeHandle_ = p, this.view_.appendChild(p), this.initializeResizeHandle(p), this.codeView_ = c, o.addEventListener("run", function (t) {
                o.playground.curtainView_.removeClass("entryRemove")
            }), o.addEventListener("stop", function (t) {
                o.playground.curtainView_.addClass("entryRemove")
            })
        }
        this.applyTabOption()
    }, r.generateDefaultView = function (t) {
        return t
    }, r.generateTabView = function (t) {
        var e = this, n = o.createElement("ul");
        n.addClass("entryTabListWorkspace"), this.tabList_ = n, t.appendChild(n), this.tabViewElements = {};
        var r = o.createElement("li", "entryCodeTab");
        r.innerHTML = Lang.Workspace.tab_code, r.addClass("entryTabListItemWorkspace entryTabSelected"), n.appendChild(r), r.bindOnClick(function (t) {
            o.do("playgroundChangeViewMode", "code", e.selectedViewMode)
        }), this.tabViewElements.code = r, this._codeTab = r;
        var a = o.createElement("li", "entryPictureTab");
        a.innerHTML = Lang.Workspace.tab_picture, a.addClass("entryTabListItemWorkspace"), n.appendChild(a), a.bindOnClick(function (t) {
            o.do("playgroundChangeViewMode", "picture", e.selectedViewMode)
        }), this.tabViewElements.picture = a, this.pictureTab = a;
        var s = o.createElement("li", "entryTextboxTab");
        s.innerHTML = Lang.Workspace.tab_text, s.addClass("entryTabListItemWorkspace"), n.appendChild(s), s.bindOnClick(function (t) {
            o.do("playgroundChangeViewMode", "text", e.selectedViewMode)
        }), this.tabViewElements.text = s, s.addClass("entryRemove"), this.textboxTab = s;
        var i = o.createElement("li", "entrySoundTab");
        i.innerHTML = Lang.Workspace.tab_sound, i.addClass("entryTabListItemWorkspace"), n.appendChild(i), i.bindOnClick(function (t) {
            o.do("playgroundChangeViewMode", "sound", e.selectedViewMode)
        }), this.tabViewElements.sound = i, this.soundTab = i;
        var l = o.createElement("li", "entryVariableTab");
        l.innerHTML = Lang.Workspace.tab_attribute, l.addClass("entryTabListItemWorkspace entryVariableTabWorkspace"), n.appendChild(l), l.bindOnClick(function (t) {
            o.do("playgroundChangeViewMode", "variable", e.selectedViewMode)
        }), this.tabViewElements.variable = l, this.variableTab = l
    }, r.generateCodeView = function (t) {
        var e = this.createVariableView();
        t.appendChild(e), this.variableView_ = e, t = o.Dom(t);
        var n = o.Dom("div", {parent: t, id: "entryWorkspaceBoard", class: "entryWorkspaceBoard"}), r = {
            blockMenu: {
                dom: o.Dom("div", {
                    parent: t,
                    id: "entryWorkspaceBlockMenu",
                    class: "entryWorkspaceBlockMenu"
                }), align: "LEFT", categoryData: EntryStatic.getAllBlocks(), scroll: !0
            }, board: {dom: n}, readOnly: o.readOnly
        };
        o.textCodingEnable && (r.vimBoard = {dom: n}), this.mainWorkspace = new o.Workspace(r), this.blockMenu = this.mainWorkspace.blockMenu, this.board = this.mainWorkspace.board, this.blockMenu.banClass("checker"), this.vimBoard = this.mainWorkspace.vimBoard, o.hw && this.updateHW()
    }, r.generatePictureView = function (t) {
        if ("workspace" == o.type) {
            (n = o.createElement("div", "entryAddPicture")).addClass("entryPlaygroundAddPicture"), n.bindOnClick(function (t) {
                !o.container || o.container.isSceneObjectsExist() ? o.do("playgroundClickAddPicture") : o.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg)
            }), (r = o.createElement("div", "entryAddPictureInner")).addClass("entryPlaygroundAddPictureInner"), r.innerHTML = Lang.Workspace.picture_add, n.appendChild(r), t.appendChild(n), this._pictureAddButton = r, (a = o.createElement("ul", "entryPictureList")).addClass("entryPlaygroundPictureList"), $ && $(a).sortable({
                start: function (t, e) {
                    e.item.data("start_pos", e.item.index())
                }, stop: function (t, e) {
                    var n = e.item.data("start_pos"), r = e.item.index();
                    o.playground.movePicture(n, r)
                }, axis: "y"
            }), t.appendChild(a), this.pictureListView_ = a;
            var e = o.createElement("div", "entryPainter");
            e.addClass("entryPlaygroundPainter"), t.appendChild(e), this.painter = new o.Painter(e)
        } else if ("phone" == o.type) {
            var n, r, a;
            (n = o.createElement("div", "entryAddPicture")).addClass("entryPlaygroundAddPicturePhone"), n.bindOnClick(function (t) {
                o.dispatchEvent("openPictureManager")
            }), (r = o.createElement("div", "entryAddPictureInner")).addClass("entryPlaygroundAddPictureInnerPhone"), r.innerHTML = Lang.Workspace.picture_add, n.appendChild(r), t.appendChild(n), (a = o.createElement("ul", "entryPictureList")).addClass("entryPlaygroundPictureListPhone"), $ && $(a).sortable({
                start: function (t, e) {
                    e.item.data("start_pos", e.item.index())
                }, stop: function (t, e) {
                    var n = e.item.data("start_pos"), r = e.item.index();
                    o.playground.movePicture(n, r)
                }, axis: "y"
            }), t.appendChild(a), this.pictureListView_ = a
        }
    }, r.generateTextView = function (t) {
        var e = o.createElement("div");
        t.appendChild(e);
        var n = o.createElement("div");
        n.addClass("textProperties"), e.appendChild(n);
        var r = o.createElement("div");
        r.addClass("entryTextFontSelect"), n.appendChild(r);
        var a = o.createElement("select", "entryPainterAttrFontName");
        a.addClass("entryPlaygroundPainterAttrFontName", "entryTextFontSelecter"), a.size = "1", a.onchange = function (t) {
            var e = t.target.value;
            if ("Nanum Pen Script" == e || "Jeju Hallasan" == e) {
                var n = F.value;
                o.playground.object.entity.getLineBreak() && (n = P.value), null != /[\u4E00-\u9FFF]/.exec(n) && (e = "KoPub Batang", a.value = e, entrylms.alert(Lang.Menus.not_supported_text))
            }
            o.playground.object.entity.setFontType(e)
        };
        for (var s = 0; s < o.fonts.length; s++) {
            var i = o.fonts[s], l = o.createElement("option");
            l.value = i.family, l.innerHTML = i.name, a.appendChild(l)
        }
        this.fontName_ = a, r.appendChild(a);
        var c = o.createElement("ul");
        c.addClass("entryPlayground_text_buttons"), n.appendChild(c);
        var u = o.createElement("li");
        u.addClass("entryPlaygroundTextAlignLeft"), u.bindOnClick(function (t) {
            o.playground.setFontAlign(o.TEXT_ALIGN_LEFT)
        }), c.appendChild(u), this.alignLeftBtn = u;
        var p = o.createElement("li");
        p.addClass("entryPlaygroundTextAlignCenter"), p.bindOnClick(function (t) {
            o.playground.setFontAlign(o.TEXT_ALIGN_CENTER)
        }), c.appendChild(p), this.alignCenterBtn = p;
        var _ = o.createElement("li");
        _.addClass("entryPlaygroundTextAlignRight"), _.bindOnClick(function (t) {
            o.playground.setFontAlign(o.TEXT_ALIGN_RIGHT)
        }), c.appendChild(_), this.alignRightBtn = _;
        var d = o.createElement("li");
        c.appendChild(d);
        var y = o.createElement("a");
        d.appendChild(y), y.bindOnClick(function () {
            var t = o.playground.object.entity.toggleFontBold() || !1;
            g.src = t ? o.mediaFilePath + "text_button_bold_true.png" : o.mediaFilePath + "text_button_bold_false.png"
        });
        var g = o.createElement("img", "entryPlaygroundText_boldImage");
        y.appendChild(g), g.src = o.mediaFilePath + "text_button_bold_false.png";
        var h = o.createElement("li");
        c.appendChild(h);
        var m = o.createElement("a");
        h.appendChild(m), m.bindOnClick(function () {
            var t = !o.playground.object.entity.getUnderLine() || !1;
            b.src = o.mediaFilePath + "text_button_underline_" + t + ".png", o.playground.object.entity.setUnderLine(t)
        });
        var b = o.createElement("img", "entryPlaygroundText_underlineImage");
        m.appendChild(b), b.src = o.mediaFilePath + "text_button_underline_false.png";
        var f = o.createElement("li");
        c.appendChild(f);
        var E = o.createElement("a");
        f.appendChild(E), E.bindOnClick(function () {
            var t = o.playground.object.entity.toggleFontItalic();
            v.src = t ? o.mediaFilePath + "text_button_italic_true.png" : o.mediaFilePath + "/text_button_italic_false.png"
        });
        var v = o.createElement("img", "entryPlaygroundText_italicImage");
        E.appendChild(v), v.src = o.mediaFilePath + "text_button_italic_false.png";
        var k = o.createElement("li");
        c.appendChild(k);
        var T = o.createElement("a");
        k.appendChild(T), T.bindOnClick(function () {
            var t = !o.playground.object.entity.getStrike() || !1;
            o.playground.object.entity.setStrike(t), w.src = o.mediaFilePath + "text_button_strike_" + t + ".png"
        });
        var w = o.createElement("img", "entryPlaygroundText_strikeImage");
        T.appendChild(w), w.src = o.mediaFilePath + "text_button_strike_false.png";
        var B = o.createElement("li");
        c.appendChild(B);
        var L = o.createElement("a");
        B.appendChild(L), L.bindOnClick(function () {
            o.playground.toggleColourChooser("foreground")
        });
        var R = o.createElement("img", "playgroundTextColorButtonImg");
        L.appendChild(R), R.src = o.mediaFilePath + "text_button_color_false.png";
        var S = o.createElement("li");
        c.appendChild(S);
        var C = o.createElement("a");
        S.appendChild(C), C.bindOnClick(function () {
            o.playground.toggleColourChooser("background")
        });
        var D = o.createElement("img", "playgroundTextBgButtonImg");
        C.appendChild(D), D.src = o.mediaFilePath + "text_button_background_false.png";
        var O = o.createElement("div");
        O.addClass("entryPlayground_fgColorDiv");
        var A = o.createElement("div");
        A.addClass("entryPlayground_bgColorDiv"), L.appendChild(O), C.appendChild(A);
        var x = o.createElement("div");
        x.addClass("entryPlaygroundTextColoursWrapper"), this.coloursWrapper = x, L.appendChild(x);
        var M = o.getColourCodes();
        for (s = 0; s < M.length; s++) (N = o.createElement("div")).addClass("modal_colour"), N.setAttribute("colour", M[s]), N.style.backgroundColor = M[s], 0 === s && N.addClass("modalColourTrans"), N.bindOnClick(function (t) {
            o.playground.setTextColour(t.target.getAttribute("colour"))
        }), x.appendChild(N);
        x.style.display = "none";
        var I = o.createElement("div");
        for (I.addClass("entryPlaygroundTextBackgroundsWrapper"), this.backgroundsWrapper = I, C.appendChild(I), s = 0; s < M.length; s++) {
            var N;
            (N = o.createElement("div")).addClass("modal_colour"), N.setAttribute("colour", M[s]), N.style.backgroundColor = M[s], 0 === s && N.addClass("modalColourTrans"), N.bindOnClick(function (t) {
                o.playground.setBackgroundColour(t.target.getAttribute("colour"))
            }), I.appendChild(N)
        }
        I.style.display = "none";
        var F = o.createElement("input");
        F.addClass("entryPlayground_textBox");
        var V = function () {
            var t = o.getElementsByClassName("entryPlaygroundPainterAttrFontName")[0];
            "Nanum Pen Script" != t.value && "Jeju Hallasan" != t.value || null == /[\u4E00-\u9FFF]/.exec(this.value) || (t.value = "KoPub Batang", o.playground.object.entity.setFontType("KoPub Batang"), entrylms.alert(Lang.Menus.not_supported_text)), o.playground.object.setText(this.value), o.playground.object.entity.setText(this.value)
        };
        F.onkeyup = V, F.onchange = V, F.addEventListener("focusin", function () {
            F.prevText = F.value
        }), F.onblur = function () {
            F.value !== F.prevText && o.do("editText", F.value, F.prevText)
        }, this.textEditInput = F, e.appendChild(F);
        var P = o.createElement("textarea");
        P.addClass("entryPlayground_textArea"), P.style.display = "none", P.onkeyup = V, P.onchange = V, P.addEventListener("focusin", function () {
            P.prevText = P.value
        }), P.onblur = function () {
            P.value !== P.prevText && o.do("editText", P.value, P.prevText)
        }, this.textEditArea = P, e.appendChild(P);
        var z = o.createElement("div");
        z.addClass("entryPlaygroundFontSizeWrapper"), e.appendChild(z), this.fontSizeWrapper = z;
        var H = o.createElement("div");
        H.addClass("entryPlaygroundFontSizeSlider"), z.appendChild(H);
        var U = o.createElement("div");
        U.addClass("entryPlaygroundFontSizeIndicator"), H.appendChild(U), this.fontSizeIndiciator = U;
        var j = o.createElement("div");
        j.addClass("entryPlaygroundFontSizeKnob"), H.appendChild(j), this.fontSizeKnob = j;
        var G = o.createElement("div");
        G.addClass("entryPlaygroundFontSizeLabel"), G.innerHTML = Lang.General.font_size, z.appendChild(G);
        var W = !1, K = 0;
        j.onmousedown = function (t) {
            W = !0, K = $(H).offset().left
        }, j.addEventListener("touchstart", function (t) {
            W = !0, K = $(H).offset().left
        }), document.addEventListener("mousemove", function (t) {
            if (W) {
                var e = t.pageX - K;
                e = Math.max(e, 5), e = Math.min(e, 88), j.style.left = e + "px", e /= .88, U.style.width = e + "%", o.playground.object.entity.setFontSize(e)
            }
        }), document.addEventListener("touchmove", function (t) {
            if (W) {
                var e = t.touches[0].pageX - K;
                e = Math.max(e, 5), e = Math.min(e, 88), j.style.left = e + "px", e /= .88, U.style.width = e + "%", o.playground.object.entity.setFontSize(e)
            }
        }), document.addEventListener("mouseup", function (t) {
            W = !1
        }), document.addEventListener("touchend", function (t) {
            W = !1
        });
        var Q = o.createElement("div");
        Q.addClass("entryPlaygroundLinebreakWrapper"), e.appendChild(Q);
        var X = o.createElement("hr");
        X.addClass("entryPlaygroundLinebreakHorizontal"), Q.appendChild(X);
        var Y = o.createElement("div");
        Y.addClass("entryPlaygroundLinebreakButtons"), Q.appendChild(Y);
        var J = o.createElement("img");
        J.bindOnClick(function () {
            o.playground.toggleLineBreak(!1), tt.innerHTML = Lang.Menus.linebreak_off_desc_1, nt.innerHTML = Lang.Menus.linebreak_off_desc_2, rt.innerHTML = Lang.Menus.linebreak_off_desc_3
        }), J.src = o.mediaFilePath + "text-linebreak-off-true.png", Y.appendChild(J), this.linebreakOffImage = J;
        var q = o.createElement("img");
        q.bindOnClick(function () {
            o.playground.toggleLineBreak(!0), tt.innerHTML = Lang.Menus.linebreak_on_desc_1, nt.innerHTML = Lang.Menus.linebreak_on_desc_2, rt.innerHTML = Lang.Menus.linebreak_on_desc_3
        }), q.src = o.mediaFilePath + "text-linebreak-on-false.png", Y.appendChild(q), this.linebreakOnImage = q;
        var Z = o.createElement("div");
        Z.addClass("entryPlaygroundLinebreakDescription"), Q.appendChild(Z);
        var tt = o.createElement("p");
        tt.innerHTML = Lang.Menus.linebreak_off_desc_1, Z.appendChild(tt);
        var et = o.createElement("ul");
        Z.appendChild(et);
        var nt = o.createElement("li");
        nt.innerHTML = Lang.Menus.linebreak_off_desc_2, et.appendChild(nt);
        var rt = o.createElement("li");
        rt.innerHTML = Lang.Menus.linebreak_off_desc_3, et.appendChild(rt)
    }, r.generateSoundView = function (t) {
        if ("workspace" == o.type) (e = o.createElement("div", "entryAddSound")).addClass("entryPlaygroundAddSound"), e.bindOnClick(function (t) {
            !o.container || o.container.isSceneObjectsExist() ? o.do("playgroundClickAddSound") : o.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.add_object_alert_msg)
        }), (n = o.createElement("div", "entryAddSoundInner")).addClass("entryPlaygroundAddSoundInner"), n.innerHTML = Lang.Workspace.sound_add, e.appendChild(n), t.appendChild(e), (r = o.createElement("ul", "entrySoundList")).addClass("entryPlaygroundSoundList"), $ && $(r).sortable({
            start: function (t, e) {
                e.item.data("start_pos", e.item.index())
            }, stop: function (t, e) {
                var n = e.item.data("start_pos"), r = e.item.index();
                o.playground.moveSound(n, r)
            }, axis: "y"
        }), t.appendChild(r), this.soundListView_ = r, this._soundAddButton = n; else if ("phone" == o.type) {
            var e, n, r;
            (e = o.createElement("div", "entryAddSound")).addClass("entryPlaygroundAddSoundPhone"), e.bindOnClick(function (t) {
                o.dispatchEvent("openSoundManager")
            }), (n = o.createElement("div", "entryAddSoundInner")).addClass("entryPlaygroundAddSoundInnerPhone"), n.innerHTML = Lang.Workspace.sound_add, e.appendChild(n), t.appendChild(e), (r = o.createElement("ul", "entrySoundList")).addClass("entryPlaygroundSoundListPhone"), $ && $(r).sortable({
                start: function (t, e) {
                    e.item.data("start_pos", e.item.index())
                }, stop: function (t, e) {
                    var n = e.item.data("start_pos"), r = e.item.index();
                    o.playground.moveSound(n, r)
                }, axis: "y"
            }), t.appendChild(r), this.soundListView_ = r
        }
    }, r.injectObject = function (t) {
        if (!t) return this.changeViewMode("code"), void(this.object = null);
        if (t !== this.object) {
            this.object && this.object.toggleInformation(!1), this.object = t;
            var e = t.objectType;
            this.setMenu(e), this.injectCode();
            var n = this.tabViewElements;
            "sprite" == e && o.pictureEditable ? (n.text && n.text.addClass("entryRemove"), n.picture && n.picture.removeClass("entryRemove")) : "textBox" == e && (n.picture && n.picture.addClass("entryRemove"), n.text && n.text.removeClass("entryRemove"));
            var r = this.viewMode_;
            "default" == r ? this.changeViewMode("code") : "variable" == r ? this.changeViewMode("variable") : "picture" != r && "text" != r || "textBox" != e ? "text" != r && "picture" != r || "sprite" != e ? "sound" == r && this.changeViewMode("sound") : this.changeViewMode("picture") : this.changeViewMode("text"), this.blockMenu && this.blockMenu.clearRendered(), this.reloadPlayground()
        }
    }, r.injectCode = function () {
        var t = o.getMainWS();
        if (t) {
            var e = this.object, n = t.vimBoard;
            n && o.textCodingEnable && !n._parser._onError && (n._changedObject = e, n._currentScene = e.scene);
            var r = t.getBoard(), a = o.engine, s = a && a.isState("run") ? void 0 : r.adjustThreadsPosition.bind(r);
            t.changeBoardCode(e.script, s)
        }
    }, r.injectPicture = function () {
        var t = this.pictureListView_;
        if (t) {
            for (; t.hasChildNodes();) t.removeChild(t.lastChild);
            if (this.object) {
                var e = document.createDocumentFragment();
                (this.object.pictures || []).forEach(function (t, n) {
                    !t.view && o.playground.generatePictureElement(t);
                    var r = t.view;
                    r.orderHolder.innerHTML = n + 1, e.appendChild(r)
                }), t.appendChild(e), this.selectPicture(this.object.selectedPicture)
            } else o.dispatchEvent("pictureClear")
        }
    }, r.addPicture = function (t, e) {
        var n = o.cloneSimpleObject(t);
        !0 === e && delete n.id, delete n.view, (t = o.Utils.copy(n)).id || (t.id = o.generateHash()), t.name = o.getOrderedName(t.name, this.object.pictures), this.generatePictureElement(t), o.do("objectAddPicture", t.objectId || this.object.id, t), this.injectPicture(), this.selectPicture(t)
    }, r.setPicture = function (t) {
        var e = o.container.getPictureElement(t.id, t.objectId), n = $(e);
        if (e) {
            t.view = e, e.picture = t;
            var r = n.find("#t_" + t.id)[0];
            if (t.fileurl) r.style.backgroundImage = 'url("' + t.fileurl + '")'; else {
                var a = t.filename;
                r.style.backgroundImage = 'url("' + o.defaultPath + "/uploads/" + a.substring(0, 2) + "/" + a.substring(2, 4) + "/thumb/" + a + '.png")'
            }
            n.find("#s_" + t.id)[0].innerHTML = t.dimension.width + " X " + t.dimension.height
        }
        o.container.setPicture(t)
    }, r.downloadPicture = function (t) {
        var e = o.playground.object.getPicture(t);
        e.fileurl ? window.open("/api/sprite/download/entryjs/" + btoa(e.fileurl) + "/" + encodeURIComponent(e.name) + ".png") : window.open("/api/sprite/download/image/" + btoa(e.filename) + "/" + encodeURIComponent(e.name) + ".png")
    }, r.clonePicture = function (t) {
        var e = o.playground.object.getPicture(t);
        this.addPicture(e, !0)
    }, r.selectPicture = function (t) {
        for (var e, n = this.object.pictures, r = 0, a = n.length; r < a; r++) {
            var s = n[r], i = s.view;
            s.id === t.id ? i.addClass("entryPictureSelected") : i.removeClass("entryPictureSelected")
        }
        t && t.id && (e = o.container.selectPicture(t.id, t.objectId)), this.object.id === e && (t.objectId || (t.objectId = this.object.id), o.dispatchEvent("pictureSelected", t))
    }, r.movePicture = function (t, e) {
        this.object.pictures.splice(e, 0, this.object.pictures.splice(t, 1)[0]), this.injectPicture()
    }, r.injectText = function () {
        var t = this.object;
        if (t) {
            var e = t.entity, n = e.getText();
            this.textEditInput.value = n, this.textEditArea.value = n, $("#entryPainterAttrFontName").val(e.getFontName());
            var r = e.fontBold || !1;
            $("#entryPlaygroundText_boldImage").attr("src", o.mediaFilePath + "text_button_bold_" + r + ".png");
            var a = e.fontItalic || !1;
            $("#entryPlaygroundText_italicImage").attr("src", o.mediaFilePath + "text_button_italic_" + a + ".png");
            var s = e.getUnderLine() || !1;
            $("#entryPlaygroundText_underlineImage").attr("src", o.mediaFilePath + "text_button_underline_" + s + ".png");
            var i = e.getStrike() || !1;
            if ($("#entryPlaygroundText_strikeImage").attr("src", o.mediaFilePath + "text_button_strike_" + i + ".png"), e.colour && this.setTextColour(e.colour, !0), e.bgColor && this.setBackgroundColour(e.bgColor, !0), this.toggleLineBreak(e.getLineBreak()), e.getLineBreak()) {
                var l = Lang.Menus;
                $(".entryPlaygroundLinebreakDescription > p").html(l.linebreak_on_desc_1);
                var c = $(".entryPlaygroundLinebreakDescription > ul > li");
                c.eq(0).text(l.linebreak_on_desc_2), c.eq(1).text(l.linebreak_on_desc_3), this._setFontFontUI()
            }
            this.setFontAlign(e.getTextAlign())
        }
    }, r._setFontFontUI = function () {
        var t = this.object.entity.getFontSize();
        this.fontSizeIndiciator.style.width = t + "%", this.fontSizeKnob.style.left = .88 * t + "px"
    }, r.injectSound = function () {
        var t = this.soundListView_;
        if (t) {
            for (; t.hasChildNodes();) t.removeChild(t.lastChild);
            if (this.object) {
                var e = document.createDocumentFragment();
                (this.object.sounds || []).forEach(function (t, n) {
                    !t.view && o.playground.generateSoundElement(t);
                    var r = t.view;
                    r.orderHolder.innerHTML = n + 1, e.appendChild(r)
                }), t.appendChild(e)
            }
        }
    }, r.moveSound = function (t, e) {
        this.object.sounds.splice(e, 0, this.object.sounds.splice(t, 1)[0]), this.updateListViewOrder("sound")
    }, r.addSound = function (t, e, n) {
        var r = o.cloneSimpleObject(t);
        delete r.view, !0 === n && delete r.id, (t = o.Utils.copy(r)).id || (t.id = o.generateHash()), t.name = o.getOrderedName(t.name, this.object.sounds), this.generateSoundElement(t), o.do("objectAddSound", this.object.id, t), this.injectSound()
    }, r.downloadSound = function (t) {
        var e = o.playground.object.getSound(t);
        e.fileurl ? e.fileurl.indexOf("bark.mp3") > -1 ? window.open("/api/sprite/download/entryjs/" + btoa(e.fileurl) + "/" + encodeURIComponent(e.name + ".mp3")) : window.open(e.fileurl) : window.open("/api/sprite/download/sound/" + encodeURIComponent(e.filename) + "/" + encodeURIComponent(e.name))
    }, r.changeViewMode = function (t) {
        for (var e in this.tabViewElements) this.tabViewElements[e].removeClass("entryTabSelected");
        if ("default" != t && this.tabViewElements[t].addClass("entryTabSelected"), "variable" == t) return o.playground.toggleOnVariableView(), this.tabViewElements.code.removeClass("entryTabSelected"), void this.tabViewElements[t].addClass("entryTabSelected");
        var n = this.view_.children;
        for (e = 0; e < n.length; e++) {
            var r = n[e];
            r.id.toUpperCase().indexOf(t.toUpperCase()) > -1 ? r.removeClass("entryRemove") : r.addClass("entryRemove")
        }
        if (o.pictureEditable) if ("picture" == t) if (this.painter.show(), this.pictureView_.object && this.pictureView_.object == this.object) {
            if (this.object && this.pictureListView_ && !this.pictureListView_.hasChildNodes()) {
                var a = this.object.pictures;
                a && a.length && this.injectPicture()
            }
        } else this.pictureView_.object = this.object, this.injectPicture(); else this.painter.hide();
        if ("sound" == t) if (this.soundView_.object && this.soundView_.object == this.object) {
            if (this.object && this.soundListView_ && !this.soundListView_.hasChildNodes()) {
                var s = this.object.sounds;
                s && s.length && this.injectSound()
            }
        } else this.soundView_.object = this.object, this.injectSound();
        ("text" == t && "textBox" == this.object.objectType || this.textView_.object != this.object) && (this.textView_.object = this.object, this.injectText()), "code" == t && (this.resizeHandle_ && this.resizeHandle_.removeClass("entryRemove"), this.blockMenu.reDraw()), o.engine.isState("run") && this.curtainView_.removeClass("entryRemove"), this.viewMode_ = t, this.selectedViewMode = t, this.toggleOffVariableView()
    }, r.createVariableView = function () {
        var t = o.createElement("div");
        return o.type && "workspace" != o.type ? "phone" == o.type && t.addClass("entryVariablePanelPhone") : t.addClass("entryVariablePanelWorkspace"), this.variableViewWrapper_ = t, o.variableContainer.createDom(t), t
    }, r.toggleOnVariableView = function () {
        o.playground.changeViewMode("code"), this.hideBlockMenu(), o.variableContainer.updateList(), this.variableView_.removeClass("entryRemove"), this.resizeHandle_.removeClass("entryRemove"), this.viewMode_ = "variable", this.selectedViewMode = "variable"
    }, r.toggleOffVariableView = function () {
        this.showBlockMenu(), this.variableView_.addClass("entryRemove")
    }, r.editBlock = function () {
        var t = o.playground;
        o.stateManager && o.stateManager.addCommand("edit block", t, t.restoreBlock, t.object, t.object.getScriptText())
    }, r.mouseupBlock = function () {
        if (o.reporter) {
            var t = o.playground, e = t.object;
            o.reporter.report(new o.State("edit block mouseup", t, t.restoreBlock, e, e.getScriptText()))
        }
    }, r.restoreBlock = function (t, e) {
        o.playground, o.container.selectObject(t.id), o.stateManager && o.stateManager.addCommand("restore block", this, this.restoreBlock, this.object, this.object.getScriptText()), Blockly.Xml.textToDom(e)
    }, r.setMenu = function (t) {
        if (this.currentObjectType != t) {
            var e = this.blockMenu;
            e.unbanClass(this.currentObjectType, !0), e.banClass(t, !0), e.setMenu(!0), this.currentObjectType = t
        }
    }, r.hideTabs = function () {
        var t = ["picture", "text", "sound", "variable"];
        for (var e in t) this.hideTab([t[e]])
    }, r.hideTab = function (t) {
        this.tabViewElements[t] && (this.tabViewElements[t].addClass("hideTab"), this.tabViewElements[t].removeClass("showTab"))
    }, r.showTabs = function () {
        var t = ["picture", "text", "sound", "variable"];
        for (var e in t) this.showTab(t[e])
    }, r.showTab = function (t) {
        this.tabViewElements[t] && (this.tabViewElements[t].addClass("showTab"), this.tabViewElements[t].removeClass("hideTab"))
    }, r.initializeResizeHandle = function (t) {
        $(t).bind("mousedown touchstart", function (t) {
            o.playground.resizing = !0, o.documentMousemove && (o.playground.resizeEvent = o.documentMousemove.attach(this, function (t) {
                o.playground.resizing && o.resizeElement({menuWidth: t.clientX - o.interfaceState.canvasWidth})
            }))
        }), $(document).bind("mouseup touchend", function (t) {
            var e = o.playground.resizeEvent;
            e && (o.playground.resizing = !1, e.destroy(), delete o.playground.resizeEvent)
        })
    }, r.reloadPlayground = function () {
        var t = o.engine;
        t && t.isState("run") || this.mainWorkspace && this.mainWorkspace.dReDraw()
    }, r.flushPlayground = function () {
        if (this.object = null, o.playground && o.playground.view_) {
            this.injectPicture(), this.injectSound();
            var t = o.playground.mainWorkspace.getBoard();
            t.clear(), t.changeCode(null)
        }
    }, r.refreshPlayground = function () {
        o.playground && o.playground.view_ && ("picture" === this.getViewMode() && this.injectPicture(), "sound" === this.getViewMode() && this.injectSound())
    }, r.updateListViewOrder = function (t) {
        for (var e, n = 0, r = (e = "picture" == t ? this.pictureListView_.childNodes : this.soundListView_.childNodes).length; n < r; n++) e[n].orderHolder.innerHTML = n + 1
    }, r.generatePictureElement = function (t) {
        var e = o.createElement("li", t.id);
        t.view = e, e.addClass("entryPlaygroundPictureElement"), e.picture = t, e.bindOnClick(function (t) {
            o.playground.selectPicture(this.picture)
        }), o.Utils.disableContextmenu(t.view), o.ContextMenu.onContextmenu($(t.view), function () {
            var n = [{
                text: Lang.Workspace.context_rename, callback: function () {
                    s.focus()
                }
            }, {
                text: Lang.Workspace.context_duplicate, callback: function () {
                    o.playground.clonePicture(t.id)
                }
            }, {
                text: Lang.Workspace.context_remove, callback: function () {
                    o.playground.object.removePicture(t.id) ? (o.removeElement(e), o.dispatchEvent("removePicture", t), o.toast.success(Lang.Workspace.shape_remove_ok, t.name + " " + Lang.Workspace.shape_remove_ok_msg)) : o.toast.alert(Lang.Workspace.shape_remove_fail, Lang.Workspace.shape_remove_fail_msg)
                }
            }, {divider: !0}, {
                text: Lang.Workspace.context_download, callback: function () {
                    o.playground.downloadPicture(t.id)
                }
            }];
            o.ContextMenu.show(n, "workspace-contextmenu")
        });
        var n = o.createElement("div");
        n.addClass("entryPlaygroundPictureOrder"), e.orderHolder = n, e.appendChild(n);
        var r = o.createElement("div", "t_" + t.id);
        if (r.addClass("entryPlaygroundPictureThumbnail"), t.fileurl) r.style.backgroundImage = 'url("' + t.fileurl + '")'; else {
            var a = t.filename;
            r.style.backgroundImage = 'url("' + o.defaultPath + "/uploads/" + a.substring(0, 2) + "/" + a.substring(2, 4) + "/thumb/" + a + '.png")'
        }
        e.appendChild(r);
        var s = o.createElement("input");
        s.addClass("entryPlaygroundPictureName"), s.addClass("entryEllipsis"), s.picture = t, s.value = t.name, o.attachEventListener(s, "blur", function t() {
            if ("" === this.value.trim()) return o.deAttachEventListener(this, "blur", t), entrylms.alert(Lang.Workspace.enter_the_name), this.focus(), void o.attachEventListener(this, "blur", t);
            for (var e = $(".entryPlaygroundPictureName"), n = 0; n < e.length; n++) if (e.eq(n).val() == s.value && e[n] != this) return o.deAttachEventListener(this, "blur", t), entrylms.alert(Lang.Workspace.name_already_exists), this.focus(), void o.attachEventListener(this, "blur", t);
            var r = this.value;
            this.picture.name = r;
            var a = o.playground;
            if (a) {
                if (a.object) {
                    var i = a.object.getPicture(this.picture.id);
                    i && (i.name = r)
                }
                var l = a.painter;
                l && l.file && (l.file.name = r), a.reloadPlayground()
            }
            o.dispatchEvent("pictureNameChanged", this.picture)
        }), s.onkeypress = function (t) {
            13 == t.keyCode && this.blur()
        }, e.appendChild(s);
        var i = o.createElement("div", "s_" + t.id);
        i.addClass("entryPlaygroundPictureSize"), i.innerHTML = t.dimension.width + " X " + t.dimension.height, e.appendChild(i)
    }, r.generateSoundElement = function (t) {
        var e = o.createElement("sound", t.id);
        t.view = e, e.addClass("entryPlaygroundSoundElement"), e.sound = t, o.Utils.disableContextmenu(t.view), o.ContextMenu.onContextmenu($(t.view), function () {
            var n = [{
                text: Lang.Workspace.context_rename, callback: function () {
                    i.focus()
                }
            }, {
                text: Lang.Workspace.context_duplicate, callback: function () {
                    o.playground.addSound(t, !0, !0)
                }
            }, {
                text: Lang.Workspace.context_remove, callback: function () {
                    o.do("objectRemoveSound", o.playground.object.id, t) ? (o.removeElement(e), o.dispatchEvent("removeSound", t), o.toast.success(Lang.Workspace.sound_remove_ok, t.name + " " + Lang.Workspace.sound_remove_ok_msg)) : o.toast.alert(Lang.Workspace.sound_remove_fail, ""), o.removeElement(e)
                }
            }, {divider: !0}, {
                text: Lang.Workspace.context_download, callback: function () {
                    o.playground.downloadSound(t.id)
                }
            }];
            o.ContextMenu.show(n, "workspace-contextmenu")
        });
        var n = o.createElement("div");
        n.addClass("entryPlaygroundSoundOrder"), e.orderHolder = n, e.appendChild(n);
        var r = o.createElement("div");
        r.addClass("entryPlaygroundSoundThumbnail"), r.addClass("entryPlaygroundSoundPlay");
        var a, s = !1;
        r.addEventListener("click", function () {
            if (s) return s = !1, r.removeClass("entryPlaygroundSoundStop"), r.addClass("entryPlaygroundSoundPlay"), void a.stop();
            s = !0, r.removeClass("entryPlaygroundSoundPlay"), r.addClass("entryPlaygroundSoundStop"), (a = createjs.Sound.play(t.id)).addEventListener("complete", function (t) {
                r.removeClass("entryPlaygroundSoundStop"), r.addClass("entryPlaygroundSoundPlay"), s = !1
            }), a.addEventListener("loop", function (t) {
            }), a.addEventListener("failed", function (t) {
            })
        }), e.appendChild(r);
        var i = o.createElement("input");
        i.addClass("entryPlaygroundSoundName"), i.sound = t, i.value = t.name, o.attachEventListener(i, "blur", function t() {
            if ("" === this.value.trim()) return o.deAttachEventListener(this, "blur", t), entrylms.alert(Lang.Workspace.enter_the_name), this.focus(), void o.attachEventListener(this, "blur", t);
            for (var e = $(".entryPlaygroundSoundName"), n = 0; n < e.length; n++) if (e.eq(n).val() == i.value && e[n] != this) return o.deAttachEventListener(this, "blur", t), entrylms.alert(Lang.Workspace.name_already_exists), this.focus(), void o.attachEventListener(this, "blur", t);
            var r = this.value;
            this.sound.name = r, o.playground.reloadPlayground()
        }), i.onkeypress = function (t) {
            13 == t.keyCode && this.blur()
        }, e.appendChild(i);
        var l = o.createElement("div");
        l.addClass("entryPlaygroundSoundLength"), l.innerHTML = t.duration + " " + Lang.General.second, e.appendChild(l)
    }, r.toggleColourChooser = function (t) {
        "foreground" === t ? "none" === this.coloursWrapper.style.display ? (this.coloursWrapper.style.display = "block", this.backgroundsWrapper.style.display = "none") : this.coloursWrapper.style.display = "none" : "background" === t && ("none" === this.backgroundsWrapper.style.display ? (this.backgroundsWrapper.style.display = "block", this.coloursWrapper.style.display = "none") : this.backgroundsWrapper.style.display = "none")
    }, r.setTextColour = function (t, e) {
        this.object.entity.setColour(t), !0 !== e && this.toggleColourChooser("foreground"), $(".entryPlayground_fgColorDiv").css("backgroundColor", t), $("#playgroundTextColorButtonImg").attr("src", o.mediaFilePath + "text_button_color_true.png")
    }, r.setBackgroundColour = function (t, e) {
        this.object.entity.setBGColour(t), !0 !== e && this.toggleColourChooser("background"), $(".entryPlayground_bgColorDiv").css("backgroundColor", t), $("#playgroundTextBgButtonImg").attr("src", o.mediaFilePath + "text_button_background_true.png")
    }, r.isTextBGMode = function () {
        return this.isTextBGMode_
    }, r.checkVariables = function () {
        o.forEBS || (o.variableContainer.lists_.length ? this.blockMenu.unbanClass("listNotExist") : this.blockMenu.banClass("listNotExist"), o.variableContainer.variables_.length ? this.blockMenu.unbanClass("variableNotExist") : this.blockMenu.banClass("variableNotExist"))
    }, r.getViewMode = function () {
        return this.viewMode_
    }, r.updateHW = function () {
        var t = o.playground.mainWorkspace;
        if (t) {
            var e = t.blockMenu;
            if (e) {
                var n = o.hw;
                n && n.connected ? (e.banClass("arduinoDisconnected", !0), n.banHW(), n.hwModule ? (e.banClass("arduinoConnect", !0), e.unbanClass("arduinoConnected", !0), e.unbanClass(n.hwModule.name)) : (e.banClass("arduinoConnected", !0), e.unbanClass("arduinoConnect", !0))) : (e.banClass("arduinoConnected", !0), e.banClass("arduinoConnect", !0), e.unbanClass("arduinoDisconnected", !0), o.hw.banHW()), e.hwCodeOutdated = !0, e._generateHwCode(!0), e.reDraw()
            }
        }
    }, r.toggleLineBreak = function (t) {
        var e = this.object;
        if (e && "textBox" == e.objectType) {
            var n = e.entity;
            t ? (n.setLineBreak(!0), $(".entryPlayground_textArea").css("display", "block"), $(".entryPlayground_textBox").css("display", "none"), this.linebreakOffImage.src = o.mediaFilePath + "text-linebreak-off-false.png", this.linebreakOnImage.src = o.mediaFilePath + "text-linebreak-on-true.png", this.fontSizeWrapper.removeClass("entryHide"), this._setFontFontUI()) : (n.setLineBreak(!1), $(".entryPlayground_textArea").css("display", "none"), $(".entryPlayground_textBox").css("display", "block"), this.linebreakOffImage.src = o.mediaFilePath + "text-linebreak-off-true.png", this.linebreakOnImage.src = o.mediaFilePath + "text-linebreak-on-false.png", this.fontSizeWrapper.addClass("entryHide"))
        }
    }, r.setFontAlign = function (t) {
        if ("textBox" == this.object.objectType) {
            switch (this.alignLeftBtn.removeClass("toggle"), this.alignCenterBtn.removeClass("toggle"), this.alignRightBtn.removeClass("toggle"), t) {
                case o.TEXT_ALIGN_LEFT:
                    this.alignLeftBtn.addClass("toggle");
                    break;
                case o.TEXT_ALIGN_CENTER:
                    this.alignCenterBtn.addClass("toggle");
                    break;
                case o.TEXT_ALIGN_RIGHT:
                    this.alignRightBtn.addClass("toggle")
            }
            this.object.entity.setTextAlign(t)
        }
    }, r.hideBlockMenu = function () {
        this.mainWorkspace.getBlockMenu().hide()
    }, r.showBlockMenu = function () {
        this.mainWorkspace.getBlockMenu().show()
    }, r.getDom = function (t) {
        if (t.length >= 1) switch (t.shift()) {
            case"tabViewElements":
                return this.tabViewElements[t.shift()];
            case"blockMenu":
                return this.blockMenu.getDom(t);
            case"board":
                return this.board.getDom(t);
            case"pictureAddButton":
                return this._pictureAddButton;
            case"soundAddButton":
                return this._soundAddButton
        }
    }, r.applyTabOption = function () {
        this.textboxTab.addClass("entryRemove"), this.pictureTab.addClass("entryRemove"), this.soundTab.addClass("entryRemove"), this.variableTab.addClass("entryRemove"), o.pictureEditable && (this.pictureTab.removeClass("entryRemove"), this.textboxTab.removeClass("entryRemove")), o.soundEditable && this.soundTab.removeClass("entryRemove"), o.hasVariableManager && this.variableTab.removeClass("entryRemove")
    }
}, function (t, e, n) {
    "use strict";
    Entry.Pdf = function (t) {
        this.generateView(t)
    };
    var r = Entry.Pdf.prototype;
    r.generateView = function (t) {
        var e = Entry.createElement("div", "entryPdfWorkspace");
        e.addClass("entryRemove"), this._view = e;
        var n = "/pdfjs/web/viewer.html";
        t && "" != t && (n += "?file=" + t);
        var r = Entry.createElement("iframe", "entryPdfIframeWorkspace");
        r.setAttribute("id", "pdfViewIframe"), r.setAttribute("frameborder", 0), r.setAttribute("src", n), e.appendChild(r)
    }, r.getView = function () {
        return this._view
    }, r.resize = function () {
        var t = document.getElementById("entryContainerWorkspaceId"), e = document.getElementById("pdfViewIframe"),
            n = t.offsetWidth;
        e.width = n + "px", e.height = 9 * n / 16 + "px"
    }
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Painter = function (t) {
        this.view = t, this.baseUrl = Entry.painterBaseUrl || "/lib/literallycanvas/lib/img", this.file = {
            id: Entry.generateHash(),
            name: "새그림",
            modified: !1,
            mode: "new"
        }, this._keyboardEvents = [], Entry.addEventListener("pictureImport", this.addPicture.bind(this)), Entry.addEventListener("run", this.detachKeyboardEvents.bind(this)), Entry.addEventListener("stop", this.attachKeyboardEvents.bind(this)), $("body").on("mouseup", ".active li", function () {
            $(".painterTopHeader.active").removeClass("active")
        }), this.clipboard = null
    }, (o = Entry.Painter.prototype).initialize = function () {
        if (!this.lc) {
            var t = this, e = t.baseUrl, n = new Image;
            n.src = e + "/transparent-pattern.png", t.lc = LC.init(t.view, {
                imageURLPrefix: e,
                zoomMax: 3,
                zoomMin: .5,
                toolbarPosition: "bottom",
                imageSize: {width: 960, height: 540},
                backgroundShapes: [LC.createShape("Rectangle", {
                    x: 0,
                    y: 0,
                    width: 960,
                    height: 540,
                    strokeWidth: 0,
                    strokeColor: "transparent"
                })]
            }), n.onload = function () {
                t.lc.repaintLayer("background")
            };
            var r = function (e) {
                e && (e.shape && !e.opts && e.shape.isPass || e.opts && e.opts.isPass) ? Entry.do("processPicture", e, t.lc) : Entry.do("editPicture", e, t.lc), t.file.modified = !0
            };
            t.lc.on("clear", r), t.lc.on("remove", r), t.lc.on("shapeEdit", r), t.lc.on("shapeSave", r), t.lc.on("toolChange", t.updateEditMenu.bind(t)), t.lc.on("lc-pointerdrag", t.stagemousemove.bind(t)), t.lc.on("lc-pointermove", t.stagemousemove.bind(t)), t.initTopBar(), t.updateEditMenu(), t.attachKeyboardEvents()
        }
    }, o.show = function () {
        this.lc || this.initialize(), this.isShow = !0
    }, o.hide = function () {
        this.isShow = !1
    }, o.changePicture = function (t) {
        if (!this.file || this.file.id !== t.id) if (this.file.modified) {
            if (this.isConfirm) return;
            this.isConfirm = !0;
            var e = !1;
            "run" === Entry.engine.state && (Entry.engine.toggleStop(), e = !0), entrylms.confirm(Lang.Menus.save_modified_shape).then(function (n) {
                this.isConfirm = !1, !0 === n ? this.file_save(!0) : this.file.modified = !1, e ? Entry.playground.injectPicture() : this.afterModified(t)
            }.bind(this))
        } else this.afterModified(t)
    }, o.afterModified = function (t) {
        var e = this.file;
        e.modified = !1, this.lc.clear(!1), e.id = t.id || Entry.generateHash(), e.name = t.name, e.mode = "edit", e.objectId = t.objectId, this.addPicture(t, !0), this.lc.undoStack = [], Entry.stateManager.removeAllPictureCommand()
    }, o.addPicture = function (t, e) {
        var n = new Image;
        t.fileurl ? n.src = t.fileurl : n.src = Entry.defaultPath + "/uploads/" + t.filename.substring(0, 2) + "/" + t.filename.substring(2, 4) + "/image/" + t.filename + ".png";
        var r = t.dimension, o = LC.createShape("Image", {x: 480, y: 270, width: r.width, height: r.height, image: n});
        this.lc.saveShape(o, !e), n.onload = function () {
            this.lc.setTool(this.lc.tools.SelectShape), this.lc.tool.setShape(this.lc, o)
        }.bind(this)
    }, o.copy = function () {
        if ("SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape) {
            var t = this.lc.tool.selectedShape;
            this.clipboard = {className: t.className, data: t.toJSON()}, this.updateEditMenu()
        }
    }, o.cut = function () {
        if ("SelectShape" === this.lc.tool.name && this.lc.tool.selectedShape) {
            this.copy();
            var t = this.lc.tool.selectedShape;
            this.lc.removeShape(t), this.lc.tool.setShape(this.lc, null)
        }
    }, o.paste = function () {
        if (this.clipboard) {
            var t = this.lc.addShape(this.clipboard);
            this.lc.setTool(this.lc.tools.SelectShape), this.lc.tool.setShape(this.lc, t)
        }
    }, o.updateEditMenu = function () {
        var t = "SelectShape" === this.lc.tool.name ? "block" : "none";
        this._cutButton.style.display = t, this._copyButton.style.display = t, this._pasteButton.style.display = this.clipboard ? "block" : "none"
    }, o.file_save = function (t) {
        this.lc.trigger("dispose");
        var e = this.lc.getImage().toDataURL();
        this.file_ = JSON.parse((0, a.default)(this.file)), Entry.dispatchEvent("saveCanvasImage", {
            file: this.file_,
            image: e,
            task: t
        }), this.file.modified = !1
    }, o.newPicture = function () {
        var t = {
            dimension: {height: 1, width: 1},
            fileurl: Entry.mediaFilePath + "_1x1.png",
            name: Lang.Workspace.new_picture
        };
        t.id = Entry.generateHash(), this.file && this.file.objectId && (t.objectId = this.file.objectId), Entry.playground.addPicture(t, !0)
    }, o._keyboardPressControl = function (t) {
        if (this.isShow && !Entry.Utils.isInInput(t)) {
            var e = t.keyCode || t.which, n = t.ctrlKey;
            8 == e || 46 == e ? (this.cut(), t.preventDefault()) : n && (67 == e ? this.copy() : 88 == e && this.cut()), n && 86 == e && this.paste(), this.lc.trigger("keyDown", t)
        }
    }, o._keyboardUpControl = function (t) {
        this.isShow && !Entry.Utils.isInInput(t) && this.lc.trigger("keyUp", t)
    }, o.initTopBar = function () {
        var t = this, e = Entry.createElement, n = e(document.getElementById("canvas-top-menu"));
        n.addClass("entryPlaygroundPainterTop"), n.addClass("entryPainterTop");
        var r = e("nav", "entryPainterTopMenu");
        r.addClass("entryPlaygroundPainterTopMenu"), n.appendChild(r);
        var o = $(r);
        o.on("mouseenter", ".painterTopHeader", function () {
            $(this).addClass("active")
        }), o.on("mouseleave", ".painterTopHeader", function (t) {
            $(this).removeClass("active")
        });
        var a = e("ul");
        r.appendChild(a);
        var s = e("li");
        s.addClass("painterTopHeader"), a.appendChild(s);
        var i = e("a", "entryPainterTopMenuFileNew");
        i.bindOnClick(t.newPicture.bind(this)), i.addClass("entryPlaygroundPainterTopMenuFileNew"), i.innerHTML = Lang.Workspace.new_picture, s.appendChild(i);
        var l = e("li", "entryPainterTopMenuFile");
        l.addClass("entryPlaygroundPainterTopMenuFile painterTopHeader"), l.innerHTML = Lang.Workspace.painter_file, a.appendChild(l);
        var c = e("ul");
        l.appendChild(c);
        var u = e("li");
        c.appendChild(u);
        var p = e("a", "entryPainterTopMenuFileSave");
        p.bindOnClick(function () {
            t.file_save(!1)
        }), p.addClass("entryPainterTopMenuFileSave"), p.innerHTML = Lang.Workspace.painter_file_save, u.appendChild(p);
        var _ = e("li");
        c.appendChild(_);
        var d = e("a", "entryPainterTopMenuFileSaveAs");
        d.bindOnClick(function () {
            t.file.mode = "new", t.file_save(!1)
        }), d.addClass("entryPlaygroundPainterTopMenuFileSaveAs"), d.innerHTML = Lang.Workspace.painter_file_saveas, _.appendChild(d);
        var y = e("li", "entryPainterTopMenuEdit");
        y.addClass("entryPlaygroundPainterTopMenuEdit painterTopHeader"), y.innerHTML = Lang.Workspace.painter_edit, a.appendChild(y);
        var g = e("ul");
        y.appendChild(g);
        var h = e("li");
        g.appendChild(h);
        var m = e("a", "entryPainterTopMenuEditImportLink");
        m.bindOnClick(function () {
            Entry.dispatchEvent("openPictureImport")
        }), m.addClass("entryPainterTopMenuEditImport"), m.innerHTML = Lang.Workspace.get_file, h.appendChild(m);
        var b = e("li");
        g.appendChild(b);
        var f = e("a", "entryPainterTopMenuEditCopy");
        f.bindOnClick(function () {
            t.copy()
        }), f.addClass("entryPlaygroundPainterTopMenuEditCopy"), f.innerHTML = Lang.Workspace.copy_file, b.appendChild(f), this._copyButton = b;
        var E = e("li");
        g.appendChild(E);
        var v = e("a", "entryPainterTopMenuEditCut");
        v.bindOnClick(function () {
            t.cut()
        }), v.addClass("entryPlaygroundPainterTopMenuEditCut"), v.innerHTML = Lang.Workspace.cut_picture, E.appendChild(v), this._cutButton = E;
        var k = e("li");
        g.appendChild(k);
        var T = e("a", "entryPainterTopMenuEditPaste");
        T.bindOnClick(function () {
            t.paste()
        }), T.addClass("entryPlaygroundPainterTopMenuEditPaste"), T.innerHTML = Lang.Workspace.paste_picture, k.appendChild(T), this._pasteButton = k;
        var w = e("li");
        g.appendChild(w);
        var B = e("a", "entryPainterTopMenuEditEraseAll");
        B.addClass("entryPlaygroundPainterTopMenuEditEraseAll"), B.innerHTML = Lang.Workspace.remove_all, B.bindOnClick(function () {
            t.lc.clear()
        }), w.appendChild(B);
        var L = e("div", "entryPainterTopStageXY");
        this.painterTopStageXY = L, L.addClass("entryPlaygroundPainterTopStageXY"), n.appendChild(L), Entry.addEventListener("pictureSelected", this.changePicture.bind(this))
    }, o.stagemousemove = function (t) {
        this.painterTopStageXY.textContent = "x:" + t.x.toFixed(1) + ", y:" + t.y.toFixed(1)
    }, o.attachKeyboardEvents = function () {
        this.detachKeyboardEvents();
        var t = this._keyboardEvents, e = Entry.keyPressed;
        e && t.push(e.attach(this, this._keyboardPressControl)), (e = Entry.keyUpped) && t.push(e.attach(this, this._keyboardUpControl))
    }, o.detachKeyboardEvents = function () {
        var t = this._keyboardEvents;
        if (t && t.length) for (; t.length;) {
            var e = t.pop();
            e.destroy && e.destroy()
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.EntryObject = function (t) {
        var e = this;
        if (t) {
            this.id = t.id, this.name = t.name || t.sprite.name, this.text = t.text || this.name, this.objectType = t.objectType || "sprite", this.script = new Entry.Code(t.script || [], this), this.pictures = Entry.Utils.copy(t.sprite.pictures || []), this.sounds = Entry.Utils.copy(t.sprite.sounds || []), this.sounds.forEach(function (t) {
                t.id || (t.id = Entry.generateHash()), Entry.initSound(t)
            }), this.lock = !!t.lock && t.lock, this.isEditing = !1, "sprite" == this.objectType && (this.selectedPicture = t.selectedPictureId ? this.getPicture(t.selectedPictureId) : this.pictures[0]), this.scene = Entry.scene.getSceneById(t.scene) || Entry.scene.selectedScene, this.setRotateMethod(t.rotateMethod), this.entity = new Entry.EntityObject(this), this.entity.injectModel(this.selectedPicture ? this.selectedPicture : null, t.entity ? t.entity : this.initEntity(t)), this.clonedEntities = [], Entry.stage.loadObject(this);
            var n = this.entity.id, r = Entry.container.cachePicture.bind(Entry.container), o = this.pictures;
            for (var a in o) !function (t) {
                t.objectId = e.id, t.id || (t.id = Entry.generateHash());
                var o = new Image;
                Entry.Loader.addQueue(), o.onload = function (e) {
                    delete this.triedCnt, r(t.id + n, this), Entry.Loader.removeQueue(), this.onload = null
                }, o.onerror = function (e) {
                    this.triedCnt ? this.triedCnt < 3 ? (this.triedCnt++, this.src = Entry.mediaFilePath + "_1x1.png") : (delete this.triedCnt, Entry.Loader.removeQueue(), this.onerror = null) : ("invisible" !== Entry.type && console.log("err=", t.name, "load failed"), this.triedCnt = 1, this.src = s(t))
                }, o.src = s(t)
            }(this.pictures[a]);
            Entry.requestUpdate = !0
        }

        function s(t) {
            if (t.fileurl) return t.fileurl;
            var e = t.filename;
            return Entry.defaultPath + "/uploads/" + e.substring(0, 2) + "/" + e.substring(2, 4) + "/image/" + e + ".png"
        }

        this._isContextMenuEnabled = !0
    }, function (t) {
        t.generateView = function () {
            var t = Entry.type;
            return "workspace" === t ? function () {
                var t = this, e = this.id, n = Entry.createElement("li", e);
                document.createDocumentFragment("div").appendChild(n), n.addClass("entryContainerListElementWorkspace"), Entry.Utils.disableContextmenu(n);
                var r = null;
                $(n).bind("mousedown touchstart", function (n) {
                    Entry.container.getObject(e) && Entry.do("containerSelectObject", e);
                    var o = $(document), a = n.type, s = !1;
                    if (Entry.Utils.isRightButton(n)) return n.stopPropagation(), Entry.documentMousedown.notify(n), s = !0, void t._rightClick(n);
                    var i = {x: n.clientX, y: n.clientY};
                    "touchstart" !== a || s || (n.stopPropagation(), Entry.documentMousedown.notify(n), r = setTimeout(function () {
                        r && (r = null, t._rightClick(n))
                    }, 1e3), o.bind("mousemove.object touchmove.object", function (t) {
                        t.stopPropagation(), i && Math.sqrt(Math.pow(t.pageX - i.x, 2) + Math.pow(t.pageY - i.y, 2)) > 5 && r && (clearTimeout(r), r = null)
                    }), o.bind("mouseup.object touchend.object", function (t) {
                        t.stopPropagation(), o.unbind(".object"), r && (clearTimeout(r), r = null)
                    }))
                }), this.view_ = n;
                var o = Entry.createElement("ul");
                o.addClass("objectInfoView"), Entry.objectEditable || o.addClass("entryHide");
                var a = Entry.createElement("li");
                a.addClass("objectInfo_visible"), this.entity.getVisible() || a.addClass("objectInfo_unvisible"), a.bindOnClick(function (e) {
                    if (!Entry.engine.isState("run")) {
                        var n = t.entity;
                        n.setVisible(!n.getVisible()) ? this.removeClass("objectInfo_unvisible") : this.addClass("objectInfo_unvisible")
                    }
                });
                var s = Entry.createElement("li");
                s.addClass("objectInfo_unlock"), this.getLock() && s.addClass("objectInfo_lock"), s.bindOnClick(function (e) {
                    Entry.engine.isState("run") || (t.setLock(!t.getLock()) ? this.addClass("objectInfo_lock") : this.removeClass("objectInfo_lock"), t.updateInputViews(t.getLock()))
                }), o.appendChild(a), o.appendChild(s), this.view_.appendChild(o);
                var i = Entry.createElement("div");
                i.addClass("entryObjectThumbnailWorkspace"), this.view_.appendChild(i), this.thumbnailView_ = i;
                var l = Entry.createElement("div");
                l.addClass("entryObjectWrapperWorkspace"), this.view_.appendChild(l);
                var c = Entry.createElement("input");
                c.bindOnClick(function (t) {
                    t.preventDefault(), this.readOnly || (this.focus(), this.select())
                }), c.addClass("entryObjectNameWorkspace"), l.appendChild(c), this.nameView_ = c, c.setAttribute("readonly", !0), this.nameView_.onblur = function (e) {
                    var n = this.value;
                    t.getName() !== n && (Entry.do("objectNameEdit", t.id, n), Entry.playground.reloadPlayground())
                }, this.nameView_.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, this.nameView_.value = this.name;
                var u = Entry.createElement("div");
                if (u.addClass("entryObjectEditWorkspace"), this.editView_ = u, this.view_.appendChild(u), $(u).mousedown(function (e) {
                        e.stopPropagation(), Entry.documentMousedown.notify(e), Entry.do("objectEditButtonClick", t.id)
                    }), $(u).mouseup(function (e) {
                        t.isEditing && t.nameView_.select()
                    }), Entry.objectEditable && Entry.objectDeletable) {
                    var p = Entry.createElement("div");
                    p.addClass("entryObjectDeleteWorkspace"), this.deleteView_ = p, this.view_.appendChild(p), p.bindOnClick(function (e) {
                        Entry.engine.isState("run") || Entry.container.removeObject(t)
                    })
                }
                var _ = Entry.createElement("div");
                _.addClass("entryObjectInformationWorkspace"), this.isInformationToggle = !1, l.appendChild(_), this.informationView_ = _;
                var d = Entry.createElement("div");
                d.addClass("entryObjectRotationWrapperWorkspace"), this.view_.appendChild(d);
                var y = Entry.createElement("span");
                y.addClass("entryObjectCoordinateWorkspace"), d.appendChild(y);
                var g = Entry.createElement("span");
                g.addClass("entryObjectCoordinateSpanWorkspace"), g.innerHTML = "X:";
                var h = Entry.createElement("input");
                h.addClass("entryObjectCoordinateInputWorkspace"), h.setAttribute("readonly", !0), h.bindOnClick(function (t) {
                    t.stopPropagation(), this.select()
                });
                var m = Entry.createElement("span");
                m.addClass("entryObjectCoordinateSpanWorkspace"), m.innerHTML = "Y:";
                var b = Entry.createElement("input");
                b.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right"), b.bindOnClick(function (t) {
                    t.stopPropagation(), this.select()
                }), b.setAttribute("readonly", !0);
                var f = Entry.createElement("span");
                f.addClass("entryObjectCoordinateSizeWorkspace"), f.innerHTML = Lang.Workspace.Size + " : ";
                var E = Entry.createElement("input");
                E.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size"), E.bindOnClick(function (t) {
                    t.stopPropagation(), this.select()
                }), E.setAttribute("readonly", !0), y.appendChild(g), y.appendChild(h), y.appendChild(m), y.appendChild(b), y.appendChild(f), y.appendChild(E), y.xInput_ = h, y.yInput_ = b, y.sizeInput_ = E, this.coordinateView_ = y, h.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, h.onblur = function (e) {
                    Entry.Utils.isNumber(h.value) && t.entity.setX(Number(h.value)), t.updateCoordinateView(), Entry.stage.updateObject()
                }, b.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, b.onblur = function (e) {
                    Entry.Utils.isNumber(b.value) && t.entity.setY(Number(b.value)), t.updateCoordinateView(), Entry.stage.updateObject()
                }, E.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, E.onblur = function (e) {
                    Entry.Utils.isNumber(E.value) && t.entity.setSize(Number(E.value)), t.updateCoordinateView(), Entry.stage.updateObject()
                };
                var v = Entry.createElement("div");
                v.addClass("entryObjectRotateLabelWrapperWorkspace"), this.view_.appendChild(v), this.rotateLabelWrapperView_ = v;
                var k = Entry.createElement("span");
                k.addClass("entryObjectRotateSpanWorkspace"), k.innerHTML = Lang.Workspace.rotation + " : ";
                var T = Entry.createElement("input");
                T.addClass("entryObjectRotateInputWorkspace"), T.setAttribute("readonly", !0), T.bindOnClick(function (t) {
                    t.stopPropagation(), this.select()
                }), this.rotateSpan_ = k, this.rotateInput_ = T;
                var w = Entry.createElement("span");
                w.addClass("entryObjectDirectionSpanWorkspace"), w.innerHTML = Lang.Workspace.direction + " : ";
                var B = Entry.createElement("input");
                B.addClass("entryObjectDirectionInputWorkspace"), B.setAttribute("readonly", !0), B.bindOnClick(function (t) {
                    t.stopPropagation(), this.select()
                }), this.directionInput_ = B, v.appendChild(k), v.appendChild(T), v.appendChild(w), v.appendChild(B), v.rotateInput_ = T, v.directionInput_ = B, T.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, T.onblur = function (e) {
                    var n = T.value;
                    -1 != n.indexOf("˚") && (n = n.substring(0, n.indexOf("˚"))), Entry.Utils.isNumber(n) && t.entity.setRotation(Number(n)), t.updateRotationView(), Entry.stage.updateObject()
                }, B.onkeypress = function (e) {
                    13 == e.keyCode && t.editObjectValues(!1)
                }, B.onblur = function (e) {
                    var n = B.value;
                    -1 != n.indexOf("˚") && (n = n.substring(0, n.indexOf("˚"))), Entry.Utils.isNumber(n) && t.entity.setDirection(Number(n)), t.updateRotationView(), Entry.stage.updateObject()
                };
                var L = Entry.createElement("div");
                L.addClass("rotationMethodWrapper"), d.appendChild(L), this.rotationMethodWrapper_ = L;
                var R = Entry.createElement("span");
                R.addClass("entryObjectRotateMethodLabelWorkspace"), L.appendChild(R), R.innerHTML = Lang.Workspace.rotate_method + " : ";
                var S = Entry.createElement("div");
                S.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeAWorkspace"), this.rotateModeAView_ = S, L.appendChild(S), S.bindOnClick(function (e) {
                    Entry.engine.isState("run") || t.getLock() || (t.initRotateValue("free"), t.setRotateMethod("free"))
                });
                var C = Entry.createElement("div");
                C.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeBWorkspace"), this.rotateModeBView_ = C, L.appendChild(C), C.bindOnClick(function (e) {
                    Entry.engine.isState("run") || t.getLock() || (t.initRotateValue("vertical"), t.setRotateMethod("vertical"))
                });
                var D = Entry.createElement("div");
                return D.addClass("entryObjectRotateModeWorkspace entryObjectRotateModeCWorkspace"), this.rotateModeCView_ = D, L.appendChild(D), D.bindOnClick(function (e) {
                    Entry.engine.isState("run") || t.getLock() || (t.initRotateValue("none"), t.setRotateMethod("none"))
                }), this.updateThumbnailView(), this.updateRotateMethodView(), this.updateInputViews(), this.updateCoordinateView(!0), this.updateRotationView(!0), this.view_
            }.call(this) : "phone" === t ? function () {
                var t = Entry.createElement("li", this.id);
                if (t.addClass("entryContainerListElementWorkspace"), t.object = this, t.bindOnClick(function (t) {
                        Entry.container.getObject(this.id) && Entry.container.selectObject(this.id)
                    }), $) {
                    var e = this;
                    context.attach("#" + this.id, [{
                        text: Lang.Workspace.context_rename,
                        href: "/",
                        action: function (t) {
                            t.preventDefault()
                        }
                    }, {
                        text: Lang.Workspace.context_duplicate, href: "/", action: function (t) {
                            t.preventDefault(), Entry.container.addCloneObject(e)
                        }
                    }, {
                        text: Lang.Workspace.context_remove, href: "/", action: function (t) {
                            t.preventDefault(), Entry.container.removeObject(e)
                        }
                    }])
                }
                this.view_ = t;
                var n = Entry.createElement("ul");
                n.addClass("objectInfoView");
                var r = Entry.createElement("li");
                r.addClass("objectInfo_visible");
                var o = Entry.createElement("li");
                o.addClass("objectInfo_lock"), n.appendChild(r), n.appendChild(o), this.view_.appendChild(n);
                var a = Entry.createElement("div");
                a.addClass("entryObjectThumbnailWorkspace"), this.view_.appendChild(a), this.thumbnailView_ = a;
                var s = Entry.createElement("div");
                s.addClass("entryObjectWrapperWorkspace"), this.view_.appendChild(s);
                var i = Entry.createElement("input");
                if (i.addClass("entryObjectNameWorkspace"), s.appendChild(i), this.nameView_ = i, this.nameView_.entryObject = this, this.nameView_.onblur = function () {
                        this.entryObject.name = this.value, Entry.playground.reloadPlayground()
                    }, this.nameView_.onkeypress = function (t) {
                        13 == t.keyCode && h.editObjectValues(!1)
                    }, this.nameView_.value = this.name, Entry.objectEditable && Entry.objectDeletable) {
                    var l = Entry.createElement("div");
                    l.addClass("entryObjectDeletePhone"), l.object = this, this.deleteView_ = l, this.view_.appendChild(l), l.bindOnClick(function (t) {
                        Entry.engine.isState("run") || Entry.container.removeObject(this.object)
                    })
                }
                var c = Entry.createElement("button");
                c.addClass("entryObjectEditPhone"), c.object = this, c.bindOnClick(function (t) {
                    var e = Entry.container.getObject(this.id);
                    e && (Entry.container.selectObject(e.id), Entry.playground.injectObject(e))
                }), this.view_.appendChild(c);
                var u = Entry.createElement("div");
                u.addClass("entryObjectInformationWorkspace"), u.object = this, this.isInformationToggle = !1, s.appendChild(u), this.informationView_ = u;
                var p = Entry.createElement("div");
                p.addClass("entryObjectRotateLabelWrapperWorkspace"), this.view_.appendChild(p), this.rotateLabelWrapperView_ = p;
                var _ = Entry.createElement("span");
                _.addClass("entryObjectRotateSpanWorkspace"), _.innerHTML = Lang.Workspace.rotation + " : ";
                var d = Entry.createElement("input");
                d.addClass("entryObjectRotateInputWorkspace"), this.rotateSpan_ = _, this.rotateInput_ = d;
                var y = Entry.createElement("span");
                y.addClass("entryObjectDirectionSpanWorkspace"), y.innerHTML = Lang.Workspace.direction + " : ";
                var g = Entry.createElement("input");
                g.addClass("entryObjectDirectionInputWorkspace"), this.directionInput_ = g, p.appendChild(_), p.appendChild(d), p.appendChild(y), p.appendChild(g), p.rotateInput_ = d, p.directionInput_ = g;
                var h = this;
                d.onkeypress = function (t) {
                    if (13 == t.keyCode) {
                        var e = d.value;
                        -1 != e.indexOf("˚") && (e = e.substring(0, e.indexOf("˚"))), Entry.Utils.isNumber(e) && h.entity.setRotation(Number(e)), h.updateRotationView(), d.blur()
                    }
                }, d.onblur = function (t) {
                    h.entity.setRotation(h.entity.getRotation()), Entry.stage.updateObject()
                }, g.onkeypress = function (t) {
                    if (13 == t.keyCode) {
                        var e = g.value;
                        -1 != e.indexOf("˚") && (e = e.substring(0, e.indexOf("˚"))), Entry.Utils.isNumber(e) && h.entity.setDirection(Number(e)), h.updateRotationView(), g.blur()
                    }
                }, g.onblur = function (t) {
                    h.entity.setDirection(h.entity.getDirection()), Entry.stage.updateObject()
                };
                var m = Entry.createElement("div");
                m.addClass("entryObjectRotationWrapperWorkspace"), m.object = this, this.view_.appendChild(m);
                var b = Entry.createElement("span");
                b.addClass("entryObjectCoordinateWorkspace"), m.appendChild(b);
                var f = Entry.createElement("span");
                f.addClass("entryObjectCoordinateSpanWorkspace"), f.innerHTML = "X:";
                var E = Entry.createElement("input");
                E.addClass("entryObjectCoordinateInputWorkspace");
                var v = Entry.createElement("span");
                v.addClass("entryObjectCoordinateSpanWorkspace"), v.innerHTML = "Y:";
                var k = Entry.createElement("input");
                k.addClass("entryObjectCoordinateInputWorkspace entryObjectCoordinateInputWorkspace_right");
                var T = Entry.createElement("span");
                T.addClass("entryObjectCoordinateSpanWorkspace"), T.innerHTML = Lang.Workspace.Size;
                var w = Entry.createElement("input");
                w.addClass("entryObjectCoordinateInputWorkspace", "entryObjectCoordinateInputWorkspace_size"), b.appendChild(f), b.appendChild(E), b.appendChild(v), b.appendChild(k), b.appendChild(T), b.appendChild(w), b.xInput_ = E, b.yInput_ = k, b.sizeInput_ = w, this.coordinateView_ = b;
                h = this;
                E.onkeypress = function (t) {
                    13 == t.keyCode && (Entry.Utils.isNumber(E.value) && h.entity.setX(Number(E.value)), h.updateCoordinateView(), h.blur())
                }, E.onblur = function (t) {
                    h.entity.setX(h.entity.getX()), Entry.stage.updateObject()
                }, k.onkeypress = function (t) {
                    13 == t.keyCode && (Entry.Utils.isNumber(k.value) && h.entity.setY(Number(k.value)), h.updateCoordinateView(), h.blur())
                }, k.onblur = function (t) {
                    h.entity.setY(h.entity.getY()), Entry.stage.updateObject()
                };
                var B = Entry.createElement("div");
                B.addClass("rotationMethodWrapper"), m.appendChild(B), this.rotationMethodWrapper_ = B;
                var L = Entry.createElement("span");
                L.addClass("entryObjectRotateMethodLabelWorkspace"), B.appendChild(L), L.innerHTML = Lang.Workspace.rotate_method + " : ";
                var R = Entry.createElement("div");
                R.addClass("entryObjectRotateModeWorkspace"), R.addClass("entryObjectRotateModeAWorkspace"), R.object = this, this.rotateModeAView_ = R, B.appendChild(R), R.bindOnClick(function (t) {
                    Entry.engine.isState("run") || this.object.setRotateMethod("free")
                });
                var S = Entry.createElement("div");
                S.addClass("entryObjectRotateModeWorkspace"), S.addClass("entryObjectRotateModeBWorkspace"), S.object = this, this.rotateModeBView_ = S, B.appendChild(S), S.bindOnClick(function (t) {
                    Entry.engine.isState("run") || this.object.setRotateMethod("vertical")
                });
                var C = Entry.createElement("div");
                return C.addClass("entryObjectRotateModeWorkspace"), C.addClass("entryObjectRotateModeCWorkspace"), C.object = this, this.rotateModeCView_ = C, B.appendChild(C), C.bindOnClick(function (t) {
                    Entry.engine.isState("run") || this.object.setRotateMethod("none")
                }), this.updateThumbnailView(), this.updateCoordinateView(), this.updateRotateMethodView(), this.updateInputViews(), this.view_
            }.call(this) : void 0
        }, t.setName = function (t) {
            Entry.assert("string" == typeof t, "object name must be string"), this.name = t, this.nameView_ && (this.nameView_.value = t)
        }, t.getName = function () {
            return this.name
        }, t.setText = function (t) {
            Entry.assert("string" == typeof t, "object text must be string"), this.text = t
        }, t.setScript = function (t) {
            this.script = t
        }, t.getScriptText = function () {
            return this.script.stringify()
        }, t.initEntity = function (t) {
            var e = {};
            if (e.x = e.y = 0, e.rotation = 0, e.direction = 90, "sprite" == this.objectType) {
                var n, r = t.sprite.pictures[0].dimension;
                e.regX = r.width / 2, e.regY = r.height / 2;
                var o = t.sprite.category.main;
                n = "background" == o || "new" == o ? Math.max(270 / r.height, 480 / r.width) : "new" == o ? 1 : 200 / (r.width + r.height), e.scaleX = e.scaleY = n, e.width = r.width, e.height = r.height
            } else if ("textBox" == this.objectType) if (e.regX = 25, e.regY = 12, e.scaleX = e.scaleY = 1.5, e.width = 50, e.height = 24, e.text = t.text, t.options) {
                var a = t.options, s = "", i = a.fontSize, l = void 0 === i ? 20 : i, c = a.textAlign,
                    u = void 0 === c ? 0 : c, p = a.scaleX, _ = void 0 === p ? 1.5 : p, d = a.regX, y = a.regY,
                    g = a.width, h = a.height;
                a.bold && (s += "bold "), a.italic && (s += "italic "), e.underLine = a.underLine, e.strike = a.strike, "string" == typeof a.font ? e.font = a.font : e.font = s + (l + "px ") + a.font.family, e.colour = a.colour, e.bgColor = a.bgColor || a.background, e.lineBreak = a.lineBreak, e.textAlign = u, e.scaleX = e.scaleY = _, a.lineBreak && (e.width = g || 256, e.height = h || .5625 * e.width, e.regX = d || e.width / 2, e.regY = y || e.height / 2)
            } else e.underLine = !1, e.strike = !1, e.font = "20px Nanum Gothic", e.colour = "#000000", e.bgColor = "#ffffff";
            return e
        }, t.updateThumbnailView = function () {
            var t = this.thumbnailView_, e = this.entity.picture, n = this.objectType;
            if ("sprite" == n) if (e.fileurl) t.style.backgroundImage = 'url("' + e.fileurl + '")'; else {
                var r = e.filename;
                t.style.backgroundImage = 'url("' + Entry.defaultPath + "/uploads/" + r.substring(0, 2) + "/" + r.substring(2, 4) + "/thumb/" + r + '.png")'
            } else if ("textBox" == n) {
                var o = Entry.mediaFilePath + "/text_icon.png";
                t.style.backgroundImage = "url(" + o + ")"
            }
        }, t.updateCoordinateView = function (t) {
            if (this.isSelected() || t) {
                var e = this.coordinateView_;
                if (e && e.xInput_ && e.yInput_) {
                    var n = e.xInput_.value, r = e.yInput_.value, o = e.sizeInput_.value, a = this.entity,
                        s = a.getX(1), i = a.getY(1), l = a.getSize(1);
                    n != s && (e.xInput_.value = s), r != i && (e.yInput_.value = i), o != l && (e.sizeInput_.value = l)
                }
            }
        }, t.updateRotationView = function (t) {
            if (this.isSelected() && this.view_ || t) {
                var e = this.getRotateMethod(), n = this.entity;
                "free" == e ? (this.rotateSpan_.removeClass("entryRemove"), this.rotateInput_.removeClass("entryRemove"), this.rotateInput_.value = n.getRotation(1) + "˚", this.directionInput_.value = n.getDirection(1) + "˚") : (this.rotateSpan_.addClass("entryRemove"), this.rotateInput_.addClass("entryRemove"), this.directionInput_.value = n.getDirection(1) + "˚")
            }
        }, t.select = function (t) {
            console.log(this)
        }, t.addPicture = function (t, e) {
            t.objectId = this.id, void 0 === e ? this.pictures.push(t) : this.pictures.splice(e, 0, t), Entry.playground.injectPicture(this)
        }, t.removePicture = function (t) {
            var e = this.pictures;
            if (e.length < 2) return !1;
            var n = Entry.playground, r = this.getPicture(t), o = e.indexOf(r);
            return e.splice(o, 1), r === this.selectedPicture && n.selectPicture(e[0]), Entry.container.unCachePictures(this.entity, r), n.injectPicture(this), n.reloadPlayground(), !0
        }, t.getPicture = function (t) {
            if (!t) return this.selectedPicture;
            t = (t + "").trim();
            for (var e = this.pictures, n = e.length, r = 0; r < n; r++) if (e[r].id == t) return e[r];
            for (r = 0; r < n; r++) if (e[r].name == t) return e[r];
            var o = Entry.parseNumber(t);
            return (!1 !== o || "boolean" != typeof o) && n >= o && o > 0 ? e[o - 1] : null
        }, t.getPictureIndex = function (t) {
            var e = this.getPicture(t);
            return this.pictures.indexOf(e)
        }, t.setPicture = function (t) {
            for (var e in this.pictures) {
                var n = this.pictures[e];
                if (t.id === n.id) return void(this.pictures[e] = t)
            }
            throw new Error("No picture found")
        }, t.getPrevPicture = function (t) {
            var e = this.pictures, n = this.getPictureIndex(t);
            return e[0 === n ? e.length - 1 : --n]
        }, t.getNextPicture = function (t) {
            var e = this.pictures, n = e.length, r = this.getPictureIndex(t);
            return e[r == n - 1 ? 0 : ++r]
        }, t.selectPicture = function (t) {
            var e = this.getPicture(t);
            if (!e) throw new Error("No picture with pictureId : " + t);
            this.selectedPicture = e, this.entity.setImage(e), this.updateThumbnailView()
        }, t.addSound = function (t, e) {
            t.id || (t.id = Entry.generateHash()), Entry.initSound(t, e), void 0 === e ? this.sounds.push(t) : this.sounds.splice(e, 0, t), Entry.playground.injectSound(this)
        }, t.removeSound = function (t) {
            var e, n;
            n = this.getSound(t), e = this.sounds.indexOf(n), this.sounds.splice(e, 1), Entry.playground.reloadPlayground(), Entry.playground.injectSound(this)
        }, t.getRotateMethod = function () {
            return this.rotateMethod || (this.rotateMethod = "free"), this.rotateMethod
        }, t.setRotateMethod = function (t) {
            t = t || "free", this.rotateMethod = t, this.updateRotateMethodView();
            var e = Entry.stage;
            e.selectedObject && e.selectedObject.entity && (e.updateObject(), e.updateHandle())
        }, t.initRotateValue = function (t) {
            if (this.rotateMethod !== t) {
                var e = this.entity, n = e.direction;
                e.direction = void 0 !== n ? n : 90, e.rotation = 0, e.flip = !1
            }
        }, t.updateRotateMethodView = function () {
            if (this.rotateModeAView_) {
                this.rotateModeAView_.removeClass("selected"), this.rotateModeBView_.removeClass("selected"), this.rotateModeCView_.removeClass("selected");
                var t = this.rotateMethod;
                "free" == t ? this.rotateModeAView_.addClass("selected") : "vertical" == t ? this.rotateModeBView_.addClass("selected") : this.rotateModeCView_.addClass("selected"), this.updateRotationView()
            }
        }, t.toggleInformation = function (t) {
            this.setRotateMethod(this.getRotateMethod()), void 0 === t && (t = this.isInformationToggle = !this.isInformationToggle), t ? this.view_.addClass("informationToggle") : this.view_.removeClass("informationToggle")
        }, t.addCloneEntity = function (t, e, n) {
            if (!(this.clonedEntities.length > Entry.maxCloneLimit)) {
                var r = new Entry.EntityObject(this);
                r.isClone = !0, e = e || this.entity, r.injectModel(e.picture || null, e.toJSON()), r.snapshot_ = e.snapshot_, e.effect && (r.effect = Entry.cloneSimpleObject(e.effect), r.applyFilter()), Entry.engine.raiseEventOnEntity(r, [r, "when_clone_start"]), r.isStarted = !0, this.addCloneVariables(this, r, e ? e.variables : null, e ? e.lists : null), this.clonedEntities.push(r);
                var o = Entry.stage.selectedObjectContainer.getChildIndex(e.object);
                o -= (e.shapes.length ? 1 : 0) + e.stamps.length, Entry.stage.loadEntity(r, o), e.brush && Entry.setCloneBrush(r, e.brush)
            }
        }, t.initializeSplitter = function (t) {
            var e = Entry.container;
            t.onmousedown = function (t) {
                e.disableSort(), e.splitterEnable = !0
            }, document.addEventListener("mousemove", function (t) {
                e.splitterEnable && Entry.resizeElement({canvasWidth: t.x || t.clientX})
            }), document.addEventListener("mouseup", function (t) {
                e.splitterEnable = !1, e.enableSort()
            })
        }, t.isSelected = function () {
            return this.isSelected_
        }, t.toJSON = function (t) {
            var e = {};
            return e.id = t ? Entry.generateHash() : this.id, e.name = this.name, "textBox" == this.objectType && (e.text = this.text), e.script = this.getScriptText(), e.objectType = this.objectType, e.rotateMethod = this.getRotateMethod(), e.scene = this.scene.id, e.sprite = {
                pictures: Entry.getPicturesJSON(this.pictures, t),
                sounds: Entry.getSoundsJSON(this.sounds, t)
            }, "sprite" == this.objectType && (e.selectedPictureId = e.sprite.pictures[this.pictures.indexOf(this.selectedPicture)].id), e.lock = this.lock, e.entity = this.entity.toJSON(), e
        }, t.destroy = function () {
            this.entity && this.entity.destroy(), this.view_ && Entry.removeElement(this.view_)
        }, t.getSound = function (t) {
            t = String(t).trim();
            for (var e = this.sounds, n = e.length, r = 0; r < n; r++) if (e[r].id == t) return e[r];
            for (r = 0; r < n; r++) if (e[r].name == t) return e[r];
            var o = Entry.parseNumber(t);
            return (!1 !== o || "boolean" != typeof o) && n >= o && o > 0 ? e[o - 1] : null
        }, t.addCloneVariables = function (t, e, n, r) {
            e.variables = [], e.lists = [], n || (n = Entry.findObjsByKey(Entry.variableContainer.variables_, "object_", t.id)), r || (r = Entry.findObjsByKey(Entry.variableContainer.lists_, "object_", t.id));
            for (var o = 0; o < n.length; o++) e.variables.push(n[o].clone());
            for (o = 0; o < r.length; o++) e.lists.push(r[o].clone())
        }, t.getLock = function () {
            return this.lock
        }, t.setLock = function (t) {
            return this.lock = t, Entry.stage.updateObject(), t
        }, t.updateInputViews = function (t) {
            t = t || this.getLock();
            var e = [this.nameView_, this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
            (t || !0 !== e[0].getAttribute("readonly")) && (e.forEach(function (t) {
                t.removeClass("selectedEditingObject"), t.setAttribute("readonly", !1)
            }), this.isEditing = !1)
        }, t.editObjectValues = function (t) {
            var e;
            e = this.getLock() ? [this.nameView_] : [this.coordinateView_.xInput_, this.coordinateView_.yInput_, this.rotateInput_, this.directionInput_, this.coordinateView_.sizeInput_];
            var n = this.nameView_;
            if (t && !this.isEditing) {
                var r = $(n);
                $(e).removeClass("selectedNotEditingObject"), r.removeClass("selectedNotEditingObject"), r.removeAttr("readonly"), n.addClass("selectedEditingObject");
                for (var o = 0; o < e.length; o++) $(e[o]).removeAttr("readonly"), e[o].addClass("selectedEditingObject");
                this.isEditing = !0
            } else e.forEach(function (t) {
                t.blur(!0)
            }), n.blur(!0), this.blurAllInput(), this.isEditing = !1
        }, t.blurAllInput = function () {
            $(".selectedEditingObject").removeClass("selectedEditingObject");
            var t = this.coordinateView_;
            [this.nameView_, t.xInput_, t.yInput_, this.rotateInput_, this.directionInput_, t.sizeInput_].forEach(function (t) {
                t.addClass("selectedNotEditingObject"), t.setAttribute("readonly", !0)
            })
        }, t.getClonedEntities = function () {
            return this.clonedEntities.concat()
        }, t.clearExecutor = function () {
            this.script.clearExecutors();
            for (var t = this.clonedEntities, e = t.length - 1; e >= 0; e--) t[e].removeClone(!0);
            this.entity.removeStamps()
        }, t._rightClick = function (t) {
            if (this.isContextMenuEnabled()) {
                var e = this, n = Entry.container, r = [{
                    text: Lang.Workspace.context_rename, callback: function (t) {
                        var n;
                        t.stopPropagation(), (n = e).setLock(!1), n.editObjectValues(!0), n.nameView_.select()
                    }
                }, {
                    text: Lang.Workspace.context_duplicate,
                    enable: !Entry.engine.isState("run"),
                    callback: function () {
                        n.addCloneObject(e)
                    }
                }, {
                    text: Lang.Workspace.context_remove, callback: function () {
                        Entry.dispatchEvent("removeObject", e), n.removeObject(e)
                    }
                }, {
                    text: Lang.Workspace.copy_file, callback: function () {
                        n.setCopiedObject(e)
                    }
                }, {
                    text: Lang.Blocks.Paste_blocks,
                    enable: !Entry.engine.isState("run") && !!n.copiedObject,
                    callback: function () {
                        var t = Entry.container;
                        t.copiedObject ? t.addCloneObject(t.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste)
                    }
                }, {divider: !0}, {
                    text: Lang.Blocks.export_object, callback: function () {
                        Entry.dispatchEvent("exportObject", e)
                    }
                }];
                t = Entry.Utils.convertMouseEvent(t), Entry.ContextMenu.show(r, "workspace-contextmenu", {
                    x: t.clientX,
                    y: t.clientY
                })
            }
        }, t.enableContextMenu = function () {
            this._isContextMenuEnabled = !0
        }, t.disableContextMenu = function () {
            this._isContextMenuEnabled = !1
        }, t.isContextMenuEnabled = function () {
            return this._isContextMenuEnabled && Entry.objectEditable
        }, t.toggleEditObject = function () {
            this.isEditing || Entry.engine.isState("run") || (this.editObjectValues(!0), Entry.playground.object !== this && Entry.container.selectObject(this.id))
        }, t.getDom = function (t) {
            if (!t || 0 === t.length) return this.view_;
            if (t.length >= 1) switch (t.shift()) {
                case"editButton":
                    return this.editView_
            }
        }
    }(Entry.EntryObject.prototype)
}, function (t, e, n) {
    n(34)("observable")
}, function (t, e, n) {
    n(34)("asyncIterator")
}, function (t, e, n) {
    var r = n(20), o = n(22), a = n(8), s = n(47), i = n(11), l = n(83), c = Object.getOwnPropertyDescriptor;
    e.f = n(9) ? c : function (t, e) {
        if (t = a(t), e = s(e, !0), l) try {
            return c(t, e)
        } catch (t) {
        }
        if (i(t, e)) return o(!r.f.call(t, e), t[e])
    }
}, function (t, e, n) {
    var r = n(8), o = n(63).f, a = {}.toString,
        s = "object" == typeof window && window && Object.getOwnPropertyNames ? Object.getOwnPropertyNames(window) : [];
    t.exports.f = function (t) {
        return s && "[object Window]" == a.call(t) ? function (t) {
            try {
                return o(t)
            } catch (t) {
                return s.slice()
            }
        }(t) : o(r(t))
    }
}, function (t, e, n) {
    var r = n(21);
    t.exports = Array.isArray || function (t) {
        return "Array" == r(t)
    }
}, function (t, e, n) {
    var r = n(12), o = n(40), a = n(20);
    t.exports = function (t) {
        var e = r(t), n = o.f;
        if (n) for (var s, i = n(t), l = a.f, c = 0; i.length > c;) l.call(t, s = i[c++]) && e.push(s);
        return e
    }
}, function (t, e, n) {
    var r = n(12), o = n(8);
    t.exports = function (t, e) {
        for (var n, a = o(t), s = r(a), i = s.length, l = 0; i > l;) if (a[n = s[l++]] === e) return n
    }
}, function (t, e, n) {
    "use strict";
    var r = n(4), o = n(11), a = n(9), s = n(6), i = n(68), l = n(64).KEY, c = n(15), u = n(42), p = n(25), _ = n(28),
        d = n(2), y = n(35), g = n(34), h = n(232), m = n(231), b = n(230), f = n(10), E = n(8), v = n(47), k = n(22),
        T = n(67), w = n(229), B = n(228), L = n(7), R = n(12), S = B.f, C = L.f, D = w.f, O = r.Symbol, A = r.JSON,
        x = A && A.stringify, M = d("_hidden"), I = d("toPrimitive"), N = {}.propertyIsEnumerable,
        F = u("symbol-registry"), V = u("symbols"), P = u("op-symbols"), z = Object.prototype,
        H = "function" == typeof O, U = r.QObject, j = !U || !U.prototype || !U.prototype.findChild,
        G = a && c(function () {
            return 7 != T(C({}, "a", {
                get: function () {
                    return C(this, "a", {value: 7}).a
                }
            })).a
        }) ? function (t, e, n) {
            var r = S(z, e);
            r && delete z[e], C(t, e, n), r && t !== z && C(z, e, r)
        } : C, W = function (t) {
            var e = V[t] = T(O.prototype);
            return e._k = t, e
        }, K = H && "symbol" == typeof O.iterator ? function (t) {
            return "symbol" == typeof t
        } : function (t) {
            return t instanceof O
        }, Q = function (t, e, n) {
            return t === z && Q(P, e, n), f(t), e = v(e, !0), f(n), o(V, e) ? (n.enumerable ? (o(t, M) && t[M][e] && (t[M][e] = !1), n = T(n, {enumerable: k(0, !1)})) : (o(t, M) || C(t, M, k(1, {})), t[M][e] = !0), G(t, e, n)) : C(t, e, n)
        }, X = function (t, e) {
            f(t);
            for (var n, r = m(e = E(e)), o = 0, a = r.length; a > o;) Q(t, n = r[o++], e[n]);
            return t
        }, Y = function (t) {
            var e = N.call(this, t = v(t, !0));
            return !(this === z && o(V, t) && !o(P, t)) && (!(e || !o(this, t) || !o(V, t) || o(this, M) && this[M][t]) || e)
        }, $ = function (t, e) {
            if (t = E(t), e = v(e, !0), t !== z || !o(V, e) || o(P, e)) {
                var n = S(t, e);
                return !n || !o(V, e) || o(t, M) && t[M][e] || (n.enumerable = !0), n
            }
        }, J = function (t) {
            for (var e, n = D(E(t)), r = [], a = 0; n.length > a;) o(V, e = n[a++]) || e == M || e == l || r.push(e);
            return r
        }, q = function (t) {
            for (var e, n = t === z, r = D(n ? P : E(t)), a = [], s = 0; r.length > s;) !o(V, e = r[s++]) || n && !o(z, e) || a.push(V[e]);
            return a
        };
    H || (i((O = function () {
        if (this instanceof O) throw TypeError("Symbol is not a constructor!");
        var t = _(arguments.length > 0 ? arguments[0] : void 0), e = function (n) {
            this === z && e.call(P, n), o(this, M) && o(this[M], t) && (this[M][t] = !1), G(this, t, k(1, n))
        };
        return a && j && G(z, t, {configurable: !0, set: e}), W(t)
    }).prototype, "toString", function () {
        return this._k
    }), B.f = $, L.f = Q, n(63).f = w.f = J, n(20).f = Y, n(40).f = q, a && !n(26) && i(z, "propertyIsEnumerable", Y, !0), y.f = function (t) {
        return W(d(t))
    }), s(s.G + s.W + s.F * !H, {Symbol: O});
    for (var Z = "hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","), tt = 0; Z.length > tt;) d(Z[tt++]);
    for (var et = R(d.store), nt = 0; et.length > nt;) g(et[nt++]);
    s(s.S + s.F * !H, "Symbol", {
        for: function (t) {
            return o(F, t += "") ? F[t] : F[t] = O(t)
        }, keyFor: function (t) {
            if (K(t)) return h(F, t);
            throw TypeError(t + " is not a symbol!")
        }, useSetter: function () {
            j = !0
        }, useSimple: function () {
            j = !1
        }
    }), s(s.S + s.F * !H, "Object", {
        create: function (t, e) {
            return void 0 === e ? T(t) : X(T(t), e)
        },
        defineProperty: Q,
        defineProperties: X,
        getOwnPropertyDescriptor: $,
        getOwnPropertyNames: J,
        getOwnPropertySymbols: q
    }), A && s(s.S + s.F * (!H || c(function () {
        var t = O();
        return "[null]" != x([t]) || "{}" != x({a: t}) || "{}" != x(Object(t))
    })), "JSON", {
        stringify: function (t) {
            if (void 0 !== t && !K(t)) {
                for (var e, n, r = [t], o = 1; arguments.length > o;) r.push(arguments[o++]);
                return "function" == typeof(e = r[1]) && (n = e), !n && b(e) || (e = function (t, e) {
                    if (n && (e = n.call(this, t, e)), !K(e)) return e
                }), r[1] = e, x.apply(A, r)
            }
        }
    }), O.prototype[I] || n(13)(O.prototype, I, O.prototype.valueOf), p(O, "Symbol"), p(Math, "Math", !0), p(r.JSON, "JSON", !0)
}, function (t, e, n) {
    n(233), n(62), n(227), n(226), t.exports = n(1).Symbol
}, function (t, e, n) {
    t.exports = {default: n(234), __esModule: !0}
}, function (t, e) {
    t.exports = function (t, e) {
        return {value: e, done: !!t}
    }
}, function (t, e) {
    t.exports = function () {
    }
}, function (t, e, n) {
    "use strict";
    var r = n(237), o = n(236), a = n(14), s = n(8);
    t.exports = n(69)(Array, "Array", function (t, e) {
        this._t = s(t), this._i = 0, this._k = e
    }, function () {
        var t = this._t, e = this._k, n = this._i++;
        return !t || n >= t.length ? (this._t = void 0, o(1)) : o(0, "keys" == e ? n : "values" == e ? t[n] : [n, t[n]])
    }, "values"), a.Arguments = a.Array, r("keys"), r("values"), r("entries")
}, function (t, e, n) {
    var r = n(7), o = n(10), a = n(12);
    t.exports = n(9) ? Object.defineProperties : function (t, e) {
        o(t);
        for (var n, s = a(e), i = s.length, l = 0; i > l;) r.f(t, n = s[l++], e[n]);
        return t
    }
}, function (t, e, n) {
    "use strict";
    var r = n(67), o = n(22), a = n(25), s = {};
    n(13)(s, n(2)("iterator"), function () {
        return this
    }), t.exports = function (t, e, n) {
        t.prototype = r(s, {next: o(1, n)}), a(t, e + " Iterator")
    }
}, function (t, e, n) {
    var r = n(44), o = n(46);
    t.exports = function (t) {
        return function (e, n) {
            var a, s, i = String(o(e)), l = r(n), c = i.length;
            return l < 0 || l >= c ? t ? "" : void 0 : (a = i.charCodeAt(l)) < 55296 || a > 56319 || l + 1 === c || (s = i.charCodeAt(l + 1)) < 56320 || s > 57343 ? t ? i.charAt(l) : a : t ? i.slice(l, l + 2) : s - 56320 + (a - 55296 << 10) + 65536
        }
    }
}, function (t, e, n) {
    n(17), n(24), t.exports = n(35).f("iterator")
}, function (t, e, n) {
    t.exports = {default: n(242), __esModule: !0}
}, function (t, e, n) {
    "use strict";
    var r, o, a = (r = n(5)) && r.__esModule ? r : {default: r};
    Entry.HWMonitor = function (t) {
        this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>')), this._hwModule = t;
        var e = this;
        Entry.addEventListener("windowResized", function () {
            var t = e._hwModule.monitorTemplate.mode;
            "both" == t && (e.resize(), e.resizeList()), "list" == t ? e.resizeList() : e.resize()
        }), Entry.addEventListener("hwModeChange", function () {
            e.changeMode()
        }), this.changeOffset = 0, this.scale = .5, this._listPortViews = {}
    }, (o = Entry.HWMonitor.prototype).initView = function () {
        this.svgDom = Entry.Dom($('<svg id="hwMonitor" width="100%" height="100%"version="1.1" xmlns="http://www.w3.org/2000/svg"></svg>'))
    }, o.generateView = function () {
        this.snap = Entry.SVG("hwMonitor"), this._svgGroup = this.snap.elem("g"), this._portMap = {
            n: [],
            e: [],
            s: [],
            w: []
        };
        var t = this._hwModule.monitorTemplate, e = {
            href: Entry.mediaFilePath + t.imgPath,
            x: -t.width / 2,
            y: -t.height / 2,
            width: t.width,
            height: t.height
        };
        this._portViews = {}, this.hwView = this._svgGroup.elem("image"), this.hwView = this.hwView.attr(e), this._template = t;
        var n = t.ports;
        this.pathGroup = null, this.pathGroup = this._svgGroup.elem("g");
        var r = [];
        for (var o in n) {
            var a = n[o], s = this.generatePortView(a, "_svgGroup");
            this._portViews[o] = s, r.push(s)
        }
        r.sort(function (t, e) {
            return t.box.x - e.box.x
        });
        var i = this._portMap;
        r.map(function (t) {
            ((Math.atan2(-t.box.y, t.box.x) / Math.PI + 2) % 2 < 1 ? i.n : i.s).push(t)
        }), this.resize()
    }, o.toggleMode = function (t) {
        var e = this._hwModule.monitorTemplate;
        "list" == t ? (e.TempPort = null, this._hwModule.monitorTemplate.ports && (this._hwModule.monitorTemplate.TempPort = this._hwModule.monitorTemplate.ports, this._hwModule.monitorTemplate.listPorts = this.addPortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._svgGroup && $(this._svgGroup).remove(), $(this._pathGroup).remove(), this._hwModule.monitorTemplate.mode = "list", this.generateListView()) : (this._hwModule.monitorTemplate.TempPort && (this._hwModule.monitorTemplate.ports = this._hwModule.monitorTemplate.TempPort, this._hwModule.monitorTemplate.listPorts = this.removePortEle(this._hwModule.monitorTemplate.listPorts, this._hwModule.monitorTemplate.ports)), $(this._svglistGroup).remove(), this._hwModule.monitorTemplate.mode = "both", this.generateListView(), this.generateView())
    }, o.setHwmonitor = function (t) {
        this._hwmodule = t
    }, o.changeMode = function (t) {
        if ("both" == this._hwModule.monitorTemplate.mode) this.toggleMode("list"); else {
            if ("list" != this._hwModule.monitorTemplate.mode) return;
            this.toggleMode("both")
        }
    }, o.addPortEle = function (t, e) {
        if ("object" != (void 0 === e ? "undefined" : (0, a.default)(e))) return t;
        for (var n in e) t[n] = e[n];
        return t
    }, o.removePortEle = function (t, e) {
        if ("object" != (void 0 === e ? "undefined" : (0, a.default)(e))) return t;
        for (var n in e) delete t[n];
        return t
    }, o.generateListView = function () {
        this._portMapList = {n: []}, this._svglistGroup = null, this.listsnap = Entry.SVG("hwMonitor"), this._svglistGroup = this.listsnap.elem("g");
        var t = this._hwModule.monitorTemplate;
        this._template = t;
        var e = t.listPorts;
        this.pathGroup = this._svglistGroup.elem("g");
        var n = [];
        for (var r in e) {
            var o = e[r], a = this.generatePortView(o, "_svglistGroup");
            this._listPortViews[r] = a, n.push(a)
        }
        var s = this._portMapList;
        n.map(function (t) {
            s.n.push(t)
        }), this.resizeList()
    }, o.generatePortView = function (t, e) {
        var n, r = this[e].elem("g");
        r.addClass("hwComponent"), n = this.pathGroup.elem("path").attr({
            d: "m0,0",
            fill: "none",
            stroke: "input" === t.type ? "#00979d" : "#A751E3",
            "stroke-width": 3
        });
        var o = r.elem("rect").attr({
            x: 0,
            y: 0,
            width: 150,
            height: 22,
            rx: 4,
            ry: 4,
            fill: "#fff",
            stroke: "#a0a1a1"
        }), a = r.elem("text").attr({
            x: 4,
            y: 12,
            fill: "#000",
            class: "hwComponentName",
            "alignment-baseline": "central"
        });
        a.textContent = t.name;
        var s = a.getComputedTextLength(), i = (r.elem("rect").attr({
            x: s + 8,
            y: 2,
            width: 30,
            height: 18,
            rx: 9,
            ry: 9,
            fill: "input" === t.type ? "#00979d" : "#A751E3"
        }), r.elem("text").attr({
            x: s + 13,
            y: 12,
            fill: "#fff",
            class: "hwComponentValue",
            "alignment-baseline": "central"
        }));
        i.textContent = 0, s += 40, o.attr({width: s});
        var l = {
            group: r,
            value: i,
            type: t.type,
            path: n,
            box: {x: t.pos.x - this._template.width / 2, y: t.pos.y - this._template.height / 2, width: s},
            width: s
        };
        return this._hwModule.monitorTemplate.mode, l
    }, o.getView = function () {
        return this.svgDom
    }, o.update = function () {
        var t = Entry.hw.portData, e = Entry.hw.sendQueue, n = (e.readablePort, this._hwModule.monitorTemplate.mode),
            r = this._hwModule.monitorTemplate.keys || [], o = [];
        if ("list" == n) o = this._listPortViews; else if ("both" == n) {
            if (o = this._listPortViews, this._portViews) for (var a in this._portViews) o[a] = this._portViews[a]
        } else o = this._portViews;
        if (e) for (var a in e) 0 != e[a] && o[a] && (o[a].type = "output");
        for (var s in o) {
            var i = o[s];
            if ("input" == i.type) {
                var l = t[s];
                r.length > 0 ? ($.each(r, function (t, e) {
                    if (!$.isPlainObject(l)) return !1;
                    l = l[e] || 0
                }), i.value.textContent = l || 0, i.group.getElementsByTagName("rect")[1].attr({fill: "#00979D"})) : (i.value.textContent = l || 0, i.group.getElementsByTagName("rect")[1].attr({fill: "#00979D"}))
            } else l = e[s], r.length > 0 ? ($.each(r, function (t, e) {
                if (!$.isPlainObject(l)) return !1;
                l = l[e] || 0
            }), i.value.textContent = l || 0, i.group.getElementsByTagName("rect")[1].attr({fill: "#A751E3"})) : (i.value.textContent = l || 0, i.group.getElementsByTagName("rect")[1].attr({fill: "#A751E3"}))
        }
    }, o.resize = function () {
        if (this.hwView && this.hwView.attr({transform: "scale(" + this.scale + ")"}), this.svgDom) var t = this.svgDom.get(0).getBoundingClientRect();
        this._hwModule.monitorTemplate.mode, this._svgGroup.attr({transform: "translate(" + t.width / 2 + "," + t.height / 1.8 + ")"}), this._rect = t, this._template.height <= 0 || t.height <= 0 || (this.scale = this._template.height * (t.height / this._template.height) / 1e3, this.scale, this.align())
    }, o.resizeList = function () {
        var t = this.svgDom.get(0).getBoundingClientRect();
        this._svglistGroup.attr({transform: "translate(" + t.width / 2 + "," + t.height / 2 + ")"}), this._rect = t, this.alignList()
    }, o.align = function () {
        var t = [];
        t = this._portMap.s.concat(), this._alignNS(t, this._template.height * (this.scale / 3) + 5, 27), t = this._portMap.n.concat(), this._alignNS(t, -this._template.height * this.scale / 3 - 32, -27)
    }, o.alignList = function () {
        this._hwModule.monitorTemplate.mode;
        for (var t = {}, e = (t = this._hwModule.monitorTemplate.listPorts).length, n = 0; n < t.length; n++) t[n].group.attr({transform: "translate(" + this._template.width * (n / e - .5) + "," + (-this._template.width / 2 - 30) + ")"});
        t = this._portMapList.n.concat(), this._alignNSList(t, -this._template.width * this.scale / 2 - 32, -27)
    }, o._alignNS = function (t, e, n) {
        t.length;
        for (var r = -this._rect.width / 2, o = this._rect.width / 2, a = this._rect.width, s = 0, i = (this._hwModule.monitorTemplate.mode, 0); i < t.length; i++) s += t[i].width + 5;
        for (s < o - r && (o = s / 2 + 3, r = -s / 2 - 3); t.length > 1;) {
            var l = t.shift(), c = t.pop(), u = r, p = o, _ = n;
            s <= o - r ? (r += l.width + 5, o -= c.width + 5, _ = 0) : 0 === t.length ? o = 6 + (r = (r + o) / 2 - 3) : (r = Math.max(r, -a / 2 + l.width) + 15, o = Math.min(o, a / 2 - c.width) - 15), this._movePort(l, r, e, u), this._movePort(c, o, e, p), s -= l.width + c.width + 10, e += _
        }
        t.length && this._movePort(t[0], (o + r - t[0].width) / 2, e, 100)
    }, o._alignNSList = function (t, e) {
        t.length;
        for (var n = this._rect.width, r = (this._rect.height, -this._rect.width / 2 + 10), o = -this._rect.height / 2 + 10, a = 0; a < t.length; a++) t[a].width;
        var s = 0, i = 0, l = r, c = 0, u = 0, p = 0;
        for (a = 0; a < t.length; a++) {
            u = t[a], a != t.length - 1 && (p = t[a + 1]), i += u.width;
            var _ = r;
            c = o + 30 * s, u.group.attr({transform: "translate(" + _ + "," + c + ")"}), r += u.width + 10, i > n - (u.width + p.width / 2.2) && (s += 1, r = l, i = 0)
        }
    }, o._movePort = function (t, e, n, r) {
        var o, a = e, s = t.box.x * this.scale, i = t.box.y * this.scale;
        e > r ? (a = e - t.width, o = e > s && s > r ? "M" + s + "," + n + "L" + s + "," + i : "M" + (e + r) / 2 + "," + n + "l0," + (i > n ? 28 : -3) + "H" + s + "L" + s + "," + i) : o = e < s && s < r ? "m" + s + "," + n + "L" + s + "," + i : "m" + (r + e) / 2 + "," + n + "l0," + (i > n ? 28 : -3) + "H" + s + "L" + s + "," + i, t.group.attr({transform: "translate(" + a + "," + n + ")"}), t.path.attr({d: o})
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                functionAddButton: {
                    skeleton: "basic_button",
                    color: "#eee",
                    isNotFor: ["functionInit"],
                    params: [{type: "Text", text: Lang.Workspace.function_create, color: "#333", align: "center"}],
                    def: {type: "functionAddButton"},
                    events: {
                        mousedown: [function () {
                            Entry.variableContainer.createFunction()
                        }]
                    }
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                variableAddButton: {
                    skeleton: "basic_button",
                    color: "#eee",
                    params: [{type: "Text", text: Lang.Workspace.variable_create, color: "#333", align: "center"}],
                    def: {type: "variableAddButton"},
                    events: {
                        mousedown: [function () {
                            Entry.variableContainer.openVariableAddPanel("variable")
                        }]
                    },
                    syntax: {js: [], py: [""]}
                },
                listAddButton: {
                    skeleton: "basic_button",
                    color: "#eee",
                    params: [{type: "Text", text: Lang.Workspace.create_list_block, color: "#333", align: "center"}],
                    def: {type: "listAddButton"},
                    events: {
                        mousedown: [function () {
                            Entry.variableContainer.openVariableAddPanel("list")
                        }]
                    }
                },
                ask_and_wait: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/variable_03.png",
                        size: 12
                    }],
                    events: {
                        viewAdd: [function () {
                            Entry.container && Entry.container.showProjectAnswer()
                        }], viewDestroy: [function (t, e) {
                            Entry.container && Entry.container.hideProjectAnswer(t, e)
                        }]
                    },
                    def: {params: [{type: "text", params: [Lang.Blocks.block_hi]}, null], type: "ask_and_wait"},
                    pyHelpDef: {params: [{type: "text", params: ["A&value"]}, null], type: "ask_and_wait"},
                    paramsKeyMap: {VALUE: 0},
                    class: "ask",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = Entry.container.inputValue, r = Entry.stage.inputField, o = e.getValue("VALUE", e);
                        if (!o) throw new Error("message can not be empty");
                        return n.sprite == t && r && !r._isHidden ? e : n.sprite != t && e.isInit ? (t.dialog && t.dialog.remove(), delete e.isInit, e.callReturn()) : n.complete && n.sprite == t && r._isHidden && e.isInit ? (t.dialog && t.dialog.remove(), delete n.complete, delete e.isInit, e.callReturn()) : (o = Entry.convertToRoundedDecimals(o, 3), Entry.stage.showInputField(), new Entry.Dialog(t, o, "ask"), n.script = e, n.sprite = t, n.complete = !1, e.isInit = !0, e)
                    },
                    syntax: {js: [], py: ["Entry.input(%1)"]}
                },
                get_canvas_input_value: {
                    color: "#E457DC",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.VARIABLE_get_canvas_input_value, color: "#fff"}],
                    events: {
                        viewAdd: [function () {
                            Entry.container && Entry.container.showProjectAnswer()
                        }], viewDestroy: [function (t, e) {
                            Entry.container && Entry.container.hideProjectAnswer(t, e)
                        }]
                    },
                    def: {params: [null], type: "get_canvas_input_value"},
                    class: "ask",
                    isNotFor: [],
                    func: function (t, e) {
                        return Entry.container.getInputValue()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            template: "%1",
                            syntax: "Entry.answer()",
                            blockType: "param",
                            textParams: [{type: "Text", text: "Entry.answer()", color: "#fff"}]
                        }]
                    }
                },
                set_visible_answer: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                        value: "SHOW",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        viewAdd: [function (t) {
                            Entry.container && Entry.container.showProjectAnswer()
                        }], viewDestroy: [function (t, e) {
                            Entry.container && Entry.container.hideProjectAnswer(t, e)
                        }]
                    },
                    def: {params: ["HIDE", null], type: "set_visible_answer"},
                    pyHelpDef: {params: ["A&value", null], type: "set_visible_answer"},
                    paramsKeyMap: {BOOL: 0},
                    class: "ask",
                    isNotFor: [],
                    func: function (t, e) {
                        return "HIDE" == e.getField("BOOL", e) ? Entry.container.inputValue.setVisible(!1) : Entry.container.inputValue.setVisible(!0), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.answer_view(%1)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                                value: "SHOW",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnStringValueLowerCase,
                                codeMap: "Entry.CodeMap.Entry.set_visible_answer[0]"
                            }]
                        }]
                    }
                },
                get_variable: {
                    color: "#E457DC",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "variables",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Text", text: Lang.Blocks.VARIABLE_get_variable_1, color: "white"}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null], type: "get_variable"},
                    pyHelpDef: {params: ["A&value"], type: "get_variable"},
                    paramsKeyMap: {VARIABLE: 0},
                    class: "variable",
                    isNotFor: ["variableNotExist"],
                    func: function (t, e) {
                        var n = e.getField("VARIABLE", e);
                        return Entry.variableContainer.getVariable(n, t).getValue()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%1",
                            passTest: !0,
                            keyOption: "get_variable",
                            blockType: "param",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }]
                        }]
                    }
                },
                change_variable: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "variables",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/variable_03.png",
                        size: 12
                    }],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, {type: "text", params: ["10"]}, null], type: "change_variable"},
                    pyHelpDef: {
                        params: ["A&value", {type: "text", params: ["B&value"]}, null],
                        type: "change_variable"
                    },
                    paramsKeyMap: {VARIABLE: 0, VALUE: 1},
                    class: "variable",
                    isNotFor: ["variableNotExist"],
                    func: function (t, e) {
                        var n = e.getField("VARIABLE", e), r = e.getValue("VALUE", e), o = 0;
                        if (0 == r && "boolean" == typeof r) throw new Error("Type is not correct");
                        var a, s = Entry.variableContainer.getVariable(n, t), i = s.getValue();
                        return Entry.Utils.isNumber(r) && s.isNumber() ? (r = Entry.parseNumber(r), i = Entry.parseNumber(i), o = Entry.getMaxFloatPoint([r, s.getValue()]), a = new BigNumber(r).plus(i).toNumber().toFixed(o)) : a = "" + i + r, s.setValue(a), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%1 += %2",
                            passTest: !0,
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, {type: "Block", accept: "string"}]
                        }, {
                            syntax: "%1 = %1 + %2",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                set_variable: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "variables",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/variable_03.png",
                        size: 12
                    }],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, {type: "text", params: ["10"]}, null], type: "set_variable"},
                    pyHelpDef: {params: ["A&value", {type: "text", params: ["B&value"]}, null], type: "set_variable"},
                    paramsKeyMap: {VARIABLE: 0, VALUE: 1},
                    class: "variable",
                    isNotFor: ["variableNotExist"],
                    func: function (t, e) {
                        var n = e.getField("VARIABLE", e), r = e.getValue("VALUE", e);
                        return Entry.variableContainer.getVariable(n, t).setValue(r), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%1 = %2",
                            passTest: !0,
                            blockType: "variable",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                show_variable: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "variables",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "show_variable"},
                    pyHelpDef: {params: ["A&value", null], type: "show_variable"},
                    paramsKeyMap: {VARIABLE: 0},
                    class: "variable_visibility",
                    isNotFor: ["variableNotExist"],
                    func: function (t, e) {
                        var n = e.getField("VARIABLE", e), r = Entry.variableContainer.getVariable(n, t);
                        return r.setVisible(!0), r.updateView(), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.show_variable(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                hide_variable: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "variables",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "hide_variable"},
                    pyHelpDef: {params: ["A&value", null], type: "hide_variable"},
                    paramsKeyMap: {VARIABLE: 0},
                    class: "variable_visibility",
                    isNotFor: ["variableNotExist"],
                    func: function (t, e) {
                        var n = e.getField("VARIABLE", e);
                        return Entry.variableContainer.getVariable(n, t).setVisible(!1), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.hide_variable(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "variables",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                value_of_index_from_list: {
                    color: "#E457DC",
                    fontColor: "#fff",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_value_of_index_from_list_1,
                        color: "white"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_value_of_index_from_list_2,
                        color: "white"
                    }, {type: "Block", isListIndex: !0, accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_value_of_index_from_list_3,
                        color: "white"
                    }],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {
                        params: [null, null, null, {type: "number", params: ["1"]}],
                        type: "value_of_index_from_list"
                    },
                    pyHelpDef: {
                        params: [null, "A&value", null, {type: "number", params: ["B&value"]}],
                        type: "value_of_index_from_list"
                    },
                    paramsKeyMap: {LIST: 1, INDEX: 3},
                    class: "list_element",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getValue("INDEX", e),
                            o = Entry.variableContainer.getList(n, t);
                        if (r = Entry.getListRealIndex(r, o), !o.array_ || !Entry.Utils.isNumber(r) || r > o.array_.length) throw new Error("can not insert value to array");
                        return o.array_[r - 1].data
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2[%4]",
                            passTest: !0,
                            blockType: "param",
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, void 0, {type: "Block", accept: "string", paramType: "index"}]
                        }]
                    }
                },
                add_value_to_list: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [{type: "text", params: ["10"]}, null, null], type: "add_value_to_list"},
                    pyHelpDef: {
                        params: [{type: "text", params: ["B&value"]}, "A&value", null],
                        type: "add_value_to_list"
                    },
                    paramsKeyMap: {VALUE: 0, LIST: 1},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getValue("VALUE", e),
                            o = Entry.variableContainer.getList(n, t);
                        return o.array_ || (o.array_ = []), o.array_.push({data: r}), o.updateView(), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            passTest: !0,
                            syntax: "%2.append(%1)",
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }]
                        }]
                    }
                },
                remove_value_from_list: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", isListIndex: !0, accept: "string"}, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [{type: "number", params: ["1"]}, null, null], type: "remove_value_from_list"},
                    pyHelpDef: {
                        params: [{type: "number", params: ["B&value"]}, "A&value", null],
                        type: "remove_value_from_list"
                    },
                    paramsKeyMap: {VALUE: 0, LIST: 1},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getValue("VALUE", e),
                            o = Entry.variableContainer.getList(n, t);
                        if (!o.array_ || !Entry.Utils.isNumber(r) || r > o.array_.length) throw new Error("can not remove value from array");
                        return o.array_.splice(r - 1, 1), o.updateView(), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2.pop(%1)",
                            passTest: !0,
                            textParams: [{
                                type: "Block",
                                accept: "string",
                                paramType: "index"
                            }, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }]
                        }]
                    }
                },
                insert_value_to_list: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Block", isListIndex: !0, accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/variable_03.png",
                        size: 12
                    }],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {
                        params: [{type: "text", params: ["10"]}, null, {type: "text", params: ["1"]}, null],
                        type: "insert_value_to_list"
                    },
                    pyHelpDef: {
                        params: [{type: "text", params: ["C&value"]}, "A&value", {
                            type: "text",
                            params: ["B&value"]
                        }, null], type: "insert_value_to_list"
                    },
                    paramsKeyMap: {DATA: 0, LIST: 1, INDEX: 2},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getValue("DATA", e), o = e.getValue("INDEX", e),
                            a = Entry.variableContainer.getList(n, t);
                        if (!a.array_ || !Entry.Utils.isNumber(o) || 0 == o || o > a.array_.length + 1) throw new Error("can not insert value to array");
                        return a.array_.splice(o - 1, 0, {data: r}), a.updateView(), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2.insert(%3, %1)",
                            passTest: !0,
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, {type: "Block", accept: "string", paramType: "index"}]
                        }]
                    }
                },
                change_value_list_index: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Block", isListIndex: !0, accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {
                        params: [null, {type: "text", params: ["1"]}, {type: "text", params: ["10"]}, null],
                        type: "change_value_list_index"
                    },
                    pyHelpDef: {
                        params: ["A&value", {type: "text", params: ["B&value"]}, {
                            type: "text",
                            params: ["C&value"]
                        }, null], type: "change_value_list_index"
                    },
                    paramsKeyMap: {LIST: 0, INDEX: 1, DATA: 2},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getValue("DATA", e), o = e.getValue("INDEX", e),
                            a = Entry.variableContainer.getList(n, t);
                        if (!a.array_ || !Entry.Utils.isNumber(o) || o > a.array_.length) throw new Error("can not insert value to array");
                        return a.array_[o - 1].data = r, a.updateView(), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%1[%2] = %3",
                            passTest: !0,
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, {type: "Block", accept: "string", paramType: "index"}, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                length_of_list: {
                    color: "#E457DC",
                    fontColor: "#fff",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_length_of_list_1,
                        color: "white"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Text", text: Lang.Blocks.VARIABLE_length_of_list_2, color: "white"}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, null, null], type: "length_of_list"},
                    pyHelpDef: {params: [null, "A&value", null], type: "length_of_list"},
                    paramsKeyMap: {LIST: 1},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e);
                        return Entry.variableContainer.getList(n, t).array_.length
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "len(%2)",
                            blockType: "param",
                            passTest: !0,
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }]
                        }]
                    }
                },
                is_included_in_list: {
                    color: "#E457DC",
                    fontColor: "#fff",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_is_included_in_list_1,
                        color: "white"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Text", text: Lang.Blocks.VARIABLE_is_included_in_list_2, color: "white"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.VARIABLE_is_included_in_list_3, color: "white"}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {
                        params: [null, null, null, {type: "text", params: ["10"]}, null],
                        type: "is_included_in_list"
                    },
                    pyHelpDef: {
                        params: [null, "B&value", null, {type: "text", params: ["A&value"]}, null],
                        type: "is_included_in_list"
                    },
                    paramsKeyMap: {LIST: 1, DATA: 3},
                    class: "list",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e), r = e.getStringValue("DATA", e),
                            o = Entry.variableContainer.getList(n, t);
                        if (!o) return !1;
                        for (var a = o.array_, s = 0, i = a.length; s < i; s++) if (a[s].data.toString() == r.toString()) return !0;
                        return !1
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%4 in %2",
                            blockType: "param",
                            passTest: !0,
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnRawStringKey
                            }, void 0, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                show_list: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "show_list"},
                    pyHelpDef: {params: ["A&value", null], type: "show_list"},
                    paramsKeyMap: {LIST: 0},
                    class: "list_visibility",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e);
                        return Entry.variableContainer.getList(n).setVisible(!0), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.show_list(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                hide_list: {
                    color: "#E457DC",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "lists",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_VARIABLE
                    }, {type: "Indicator", img: "block_icon/variable_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_variableRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_variableRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "hide_list"},
                    pyHelpDef: {params: ["A&value", null], type: "hide_list"},
                    paramsKeyMap: {LIST: 0},
                    class: "list_visibility",
                    isNotFor: ["listNotExist"],
                    func: function (t, e) {
                        var n = e.getField("LIST", e);
                        return Entry.variableContainer.getList(n).setVisible(!1), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.hide_list(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "lists",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_VARIABLE,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                calc_basic: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Dropdown",
                        options: [["+", "PLUS"], ["-", "MINUS"], ["x", "MULTI"], ["/", "DIVIDE"]],
                        value: "PLUS",
                        fontSize: 11,
                        noArrow: !0
                    }, {type: "Block", accept: "string"}],
                    events: {},
                    def: {
                        params: [{type: "number", params: ["10"]}, "PLUS", {type: "number", params: ["10"]}],
                        type: "calc_basic"
                    },
                    pyHelpDef: {
                        params: [{type: "number", params: ["A&value"]}, "PLUS", {
                            type: "number",
                            params: ["B&value"]
                        }], type: "calc_basic"
                    },
                    defs: [{
                        params: [{type: "number", params: ["10"]}, "PLUS", {type: "number", params: ["10"]}],
                        type: "calc_basic"
                    }, {
                        params: [{type: "number", params: ["10"]}, "MINUS", {type: "number", params: ["10"]}],
                        type: "calc_basic"
                    }, {
                        params: [{type: "number", params: ["10"]}, "MULTI", {type: "number", params: ["10"]}],
                        type: "calc_basic"
                    }, {
                        params: [{type: "number", params: ["10"]}, "DIVIDE", {type: "number", params: ["10"]}],
                        type: "calc_basic"
                    }],
                    paramsKeyMap: {LEFTHAND: 0, OPERATOR: 1, RIGHTHAND: 2},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("OPERATOR", e), r = e.getNumberValue("LEFTHAND", e),
                            o = e.getNumberValue("RIGHTHAND", e);
                        if ("PLUS" == n) {
                            var a = e.getValue("LEFTHAND", e), s = e.getValue("RIGHTHAND", e);
                            return Entry.Utils.isNumber(a) || (r = a), Entry.Utils.isNumber(s) || (o = s), "number" == typeof r && "number" == typeof o ? new BigNumber(r).plus(o).toNumber() : r + o
                        }
                        return r = new BigNumber(r), "MINUS" == n ? r.minus(o).toNumber() : "MULTI" == n ? r.times(o).toNumber() : r.dividedBy(o).toNumber()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "(%1 %2 %3)",
                            template: "%1 %2 %3",
                            keyOption: "calc_basic",
                            blockType: "param",
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "Dropdown",
                                options: [["+", "PLUS"], ["-", "MINUS"], ["x", "MULTI"], ["/", "DIVIDE"]],
                                value: "PLUS",
                                fontSize: 11,
                                noArrow: !0,
                                converter: Entry.block.converters.returnOperator,
                                paramType: "operator"
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                calc_rand: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_calc_rand_1, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_calc_rand_2, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_calc_rand_3, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "number", params: ["0"]}, null, {type: "number", params: ["10"]}, null],
                        type: "calc_rand"
                    },
                    pyHelpDef: {
                        params: [null, {type: "number", params: ["A&value"]}, null, {
                            type: "number",
                            params: ["B&value"]
                        }, null], type: "calc_rand"
                    },
                    paramsKeyMap: {LEFTHAND: 1, RIGHTHAND: 3},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("LEFTHAND", e), r = e.getStringValue("RIGHTHAND", e),
                            o = Math.min(n, r), a = Math.max(n, r), s = Entry.isFloat(n);
                        return Entry.isFloat(r) || s ? (Math.random() * (a - o) + o).toFixed(2) : Math.floor(Math.random() * (a - o + 1) + o)
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "random.randint(%2, %4)",
                            blockType: "param",
                            textParams: [null, {
                                type: "Block",
                                accept: "string",
                                paramType: "integer"
                            }, null, {type: "Block", accept: "string", paramType: "integer"}, null]
                        }, {
                            syntax: "random.uniform(%2, %4)",
                            blockType: "param",
                            textParams: [null, {
                                type: "Block",
                                accept: "string",
                                paramType: "float"
                            }, null, {type: "Block", accept: "string", paramType: "float"}, null]
                        }]
                    }
                },
                coordinate_mouse: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_coordinate_mouse_1,
                        color: "#3D3D3D"
                    }, {
                        type: "Dropdown",
                        options: [["x", "x"], ["y", "y"]],
                        value: "x",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_coordinate_mouse_2, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null, null, null], type: "coordinate_mouse"},
                    pyHelpDef: {params: [null, "A&value", null], type: "coordinate_mouse"},
                    paramsKeyMap: {VALUE: 1},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        return "x" === e.getField("VALUE", e) ? Number(Entry.stage.mouseCoordinate.x) : Number(Entry.stage.mouseCoordinate.y)
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.value_of_mouse_pointer(%2)",
                            blockType: "param",
                            textParams: [{
                                type: "Text",
                                text: Lang.Blocks.CALC_coordinate_mouse_1,
                                color: "#3D3D3D"
                            }, {
                                type: "Dropdown",
                                options: [["x", "x"], ["y", "y"]],
                                value: "x",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.coordinate_mouse[1]"
                            }, {type: "Text", text: Lang.Blocks.CALC_coordinate_mouse_2, color: "#3D3D3D"}]
                        }]
                    }
                },
                coordinate_object: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_coordinate_object_1,
                        color: "#3D3D3D"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "spritesWithSelf",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_coordinate_object_2, color: "#3D3D3D"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_coordinate_x_value, "x"], [Lang.Blocks.CALC_coordinate_y_value, "y"], [Lang.Blocks.CALC_coordinate_rotation_value, "rotation"], [Lang.Blocks.CALC_coordinate_direction_value, "direction"], [Lang.Blocks.CALC_coordinate_size_value, "size"], [Lang.Blocks.CALC_picture_index, "picture_index"], [Lang.Blocks.CALC_picture_name, "picture_name"]],
                        value: "x",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }],
                    events: {},
                    def: {params: [null, null, null, null], type: "coordinate_object"},
                    pyHelpDef: {params: [null, "A&value", null, "B&value"], type: "coordinate_object"},
                    paramsKeyMap: {VALUE: 1, COORDINATE: 3},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        var n, r = e.getField("VALUE", e);
                        switch (n = "self" == r ? t : Entry.container.getEntity(r), e.getField("COORDINATE", e)) {
                            case"x":
                                return n.getX();
                            case"y":
                                return n.getY();
                            case"rotation":
                                return n.getRotation();
                            case"direction":
                                return n.getDirection();
                            case"picture_index":
                                return (o = n.parent.pictures).indexOf(n.picture) + 1;
                            case"size":
                                return Number(n.getSize().toFixed(1));
                            case"picture_name":
                                var o;
                                return (o = n.parent.pictures)[o.indexOf(n.picture)].name
                        }
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.value_of_object(%2, %4)",
                            blockType: "param",
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "spritesWithSelf",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnObjectOrStringValue,
                                codeMap: "Entry.CodeMap.Entry.coordinate_object[1]"
                            }, void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_coordinate_x_value, "x"], [Lang.Blocks.CALC_coordinate_y_value, "y"], [Lang.Blocks.CALC_coordinate_rotation_value, "rotation"], [Lang.Blocks.CALC_coordinate_direction_value, "direction"], [Lang.Blocks.CALC_coordinate_size_value, "size"], [Lang.Blocks.CALC_picture_index, "picture_index"], [Lang.Blocks.CALC_picture_name, "picture_name"]],
                                value: "x",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.coordinate_object[3]"
                            }]
                        }]
                    }
                },
                get_sound_volume: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_get_sound_volume, color: "#3D3D3D"}, {
                        type: "Text",
                        text: "",
                        color: "#3D3D3D"
                    }],
                    events: {},
                    def: {params: [null, null], type: "get_sound_volume"},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        return 100 * createjs.Sound.getVolume()
                    },
                    syntax: {js: [], py: [{syntax: "Entry.value_of_sound_volume()", blockType: "param"}]}
                },
                quotient_and_mod: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_quotient_and_mod_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.CALC_quotient_and_mod_2,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.CALC_quotient_and_mod_3,
                        color: "#3D3D3D"
                    }, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_quotient_and_mod_sub_1, "QUOTIENT"], [Lang.Blocks.CALC_quotient_and_mod_sub_2, "MOD"]],
                        value: "QUOTIENT",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: ["10"]}, null, {
                            type: "text",
                            params: ["10"]
                        }, null, null], type: "quotient_and_mod"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "text",
                            params: ["B&value"]
                        }, null, null], type: "quotient_and_mod"
                    },
                    paramsKeyMap: {LEFTHAND: 1, RIGHTHAND: 3, OPERATOR: 5},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("LEFTHAND", e), r = e.getNumberValue("RIGHTHAND", e);
                        if (isNaN(n) || isNaN(r)) throw new Error;
                        return "QUOTIENT" == e.getField("OPERATOR", e) ? Math.floor(n / r) : n % r
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "(%2 // %4)",
                            template: "%2 // %4",
                            params: [null, null, null, null, null, "QUOTIENT"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, {
                                type: "Block",
                                accept: "string"
                            }, void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_quotient_and_mod_sub_1, "QUOTIENT"], [Lang.Blocks.CALC_quotient_and_mod_sub_2, "MOD"]],
                                value: "QUOTIENT",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValue
                            }]
                        }, {
                            syntax: "(%2 % %4)",
                            template: "%2 % %4",
                            params: [null, null, null, null, null, "MOD"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, {
                                type: "Block",
                                accept: "string"
                            }, void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_quotient_and_mod_sub_1, "QUOTIENT"], [Lang.Blocks.CALC_quotient_and_mod_sub_2, "MOD"]],
                                value: "QUOTIENT",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValue
                            }]
                        }]
                    }
                },
                calc_operation: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_calc_operation_of_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.CALC_calc_operation_of_2,
                        color: "#3D3D3D"
                    }, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_calc_operation_square, "square"], [Lang.Blocks.CALC_calc_operation_root, "root"], [Lang.Blocks.CALC_calc_operation_sin, "sin"], [Lang.Blocks.CALC_calc_operation_cos, "cos"], [Lang.Blocks.CALC_calc_operation_tan, "tan"], [Lang.Blocks.CALC_calc_operation_asin, "asin_radian"], [Lang.Blocks.CALC_calc_operation_acos, "acos_radian"], [Lang.Blocks.CALC_calc_operation_atan, "atan_radian"], [Lang.Blocks.CALC_calc_operation_log, "log"], [Lang.Blocks.CALC_calc_operation_ln, "ln"], [Lang.Blocks.CALC_calc_operation_unnatural, "unnatural"], [Lang.Blocks.CALC_calc_operation_floor, "floor"], [Lang.Blocks.CALC_calc_operation_ceil, "ceil"], [Lang.Blocks.CALC_calc_operation_round, "round"], [Lang.Blocks.CALC_calc_operation_factorial, "factorial"], [Lang.Blocks.CALC_calc_operation_abs, "abs"]],
                        value: "square",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }],
                    events: {},
                    def: {params: [null, {type: "number", params: ["10"]}, null, null], type: "calc_operation"},
                    pyHelpDef: {
                        params: [null, {type: "number", params: ["A&value"]}, null, null],
                        type: "calc_operation"
                    },
                    paramsKeyMap: {LEFTHAND: 1, VALUE: 3},
                    class: "calc",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("LEFTHAND", e), r = e.getField("VALUE", e);
                        if (["asin_radian", "acos_radian"].indexOf(r) > -1 && (n > 1 || n < -1)) throw new Error("x range exceeded");
                        r.indexOf("_") && (r = r.split("_")[0]), ["sin", "cos", "tan"].indexOf(r) > -1 && (n = Entry.toRadian(n));
                        var o = 0;
                        switch (r) {
                            case"square":
                                o = n * n;
                                break;
                            case"factorial":
                                o = Entry.factorial(n);
                                break;
                            case"root":
                                o = Math.sqrt(n);
                                break;
                            case"log":
                                o = Math.log(n) / Math.LN10;
                                break;
                            case"ln":
                                o = Math.log(n);
                                break;
                            case"asin":
                            case"acos":
                            case"atan":
                                o = Entry.toDegrees(Math[r](n));
                                break;
                            case"unnatural":
                                o = new BigNumber(n).minus(Math.floor(n)).toNumber(), n < 0 && (o = 1 - o);
                                break;
                            default:
                                o = Math[r](n)
                        }
                        return o
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "(%2 ** 2)",
                            template: "%2 ** 2",
                            params: [null, null, null, "square"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.pow(%2)",
                            params: [null, null, null, "square"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.sqrt(%2)",
                            params: [null, null, null, "root"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", isListIndex: !0, accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.sin(%2)",
                            params: [null, null, null, "sin"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.cos(%2)",
                            params: [null, null, null, "cos"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.tan(%2)",
                            params: [null, null, null, "tan"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.asin(%2)",
                            params: [null, null, null, "asin_radian"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.acos(%2)",
                            params: [null, null, null, "acos_radian"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.atan(%2)",
                            params: [null, null, null, "atan_radian"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.log10(%2)",
                            params: [null, null, null, "log"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.log(%2)",
                            params: [null, null, null, "ln"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "%2 - math.floor(%2)",
                            params: [null, null, null, "unnatural"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.floor(%2)",
                            params: [null, null, null, "floor"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.ceil(%2)",
                            params: [null, null, null, "ceil"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.round(%2)",
                            params: [null, null, null, "round"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.factorial(%2)",
                            params: [null, null, null, "factorial"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }, {
                            syntax: "math.fabs(%2)",
                            params: [null, null, null, "abs"],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, null]
                        }]
                    }
                },
                get_project_timer_value: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_get_timer_value, color: "#3D3D3D"}, {
                        type: "Text",
                        text: "",
                        color: "#3D3D3D"
                    }],
                    events: {
                        viewAdd: [function () {
                            Entry.engine && Entry.engine.showProjectTimer()
                        }], viewDestroy: [function (t, e) {
                            Entry.engine && Entry.engine.hideProjectTimer(t, e)
                        }]
                    },
                    def: {params: [null, null], type: "get_project_timer_value"},
                    class: "calc_timer",
                    isNotFor: [],
                    func: function (t, e) {
                        return Entry.engine.projectTimer.getValue()
                    },
                    syntax: {js: [], py: [{syntax: "Entry.value_of_timer()", blockType: "param"}]}
                },
                choose_project_timer_action: {
                    color: "#FFD974",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_choose_project_timer_action_1,
                        color: "#000"
                    }, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_choose_project_timer_action_sub_1, "START"], [Lang.Blocks.CALC_choose_project_timer_action_sub_2, "STOP"], [Lang.Blocks.CALC_choose_project_timer_action_sub_3, "RESET"]],
                        value: "START",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {
                        type: "Text",
                        text: Lang.Blocks.CALC_choose_project_timer_action_2,
                        color: "#000"
                    }, {type: "Indicator", img: "block_icon/calc_01.png", size: 12}],
                    events: {
                        viewAdd: [function () {
                            Entry.engine && Entry.engine.showProjectTimer()
                        }], dataDestroy: [function (t) {
                            Entry.engine && Entry.engine.hideProjectTimer(t)
                        }]
                    },
                    def: {params: [null, "START", null, null], type: "choose_project_timer_action"},
                    pyHelpDef: {params: [null, "A&value", null, null], type: "choose_project_timer_action"},
                    paramsKeyMap: {ACTION: 1},
                    class: "calc_timer",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = Entry.engine, r = n.projectTimer, o = r.isPaused, a = r.isInit,
                            s = (new Date).getTime();
                        switch (e.getField("ACTION")) {
                            case"START":
                                a ? a && o && (r.pauseStart && (r.pausedTime += s - r.pauseStart), delete r.pauseStart, r.isPaused = !1) : n.startProjectTimer();
                                break;
                            case"STOP":
                                a && !o && (r.isPaused = !0, r.pauseStart = s);
                                break;
                            case"RESET":
                                n.resetTimer()
                        }
                        return e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            template: "%1 %2 %3",
                            syntax: "Entry.timer(%2)",
                            textParams: [{type: "Text", text: "Entry.timer(", color: "#000"}, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_choose_project_timer_action_sub_1, "START"], [Lang.Blocks.CALC_choose_project_timer_action_sub_2, "STOP"], [Lang.Blocks.CALC_choose_project_timer_action_sub_3, "RESET"]],
                                value: "START",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValueLowerCase,
                                codeMap: "Entry.CodeMap.Entry.choose_project_timer_action[1]"
                            }, {type: "Text", text: ")", color: "#000"}]
                        }]
                    }
                },
                set_visible_project_timer: {
                    color: "#FFD974",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_timer_visible_1, color: "#000"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                        value: "SHOW",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_timer_visible_2, color: "#000"}, {
                        type: "Indicator",
                        img: "block_icon/calc_01.png",
                        size: 12
                    }],
                    events: {
                        viewAdd: [function () {
                            Entry.engine && Entry.engine.showProjectTimer()
                        }], viewDestroy: [function (t, e) {
                            Entry.engine && Entry.engine.hideProjectTimer(t, e)
                        }]
                    },
                    def: {params: [null, "HIDE", null, null], type: "set_visible_project_timer"},
                    pyHelpDef: {params: [null, "A&value", null, null], type: "set_visible_project_timer"},
                    paramsKeyMap: {ACTION: 1},
                    class: "calc_timer",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("ACTION"), r = Entry.engine.projectTimer;
                        return "SHOW" == n ? r.setVisible(!0) : r.setVisible(!1), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            template: "%1 %2 %3",
                            syntax: "Entry.timer_view(%2)",
                            textParams: [{type: "Text", text: "Entry.timer_view(", color: "#000"}, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_timer_visible_show, "SHOW"], [Lang.Blocks.CALC_timer_visible_hide, "HIDE"]],
                                value: "SHOW",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValueLowerCase,
                                codeMap: "Entry.CodeMap.Entry.set_visible_project_timer[1]"
                            }, {type: "Text", text: ")", color: "#000"}]
                        }]
                    }
                },
                get_date: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_get_date_1, color: "#3D3D3D"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_get_date_year, "YEAR"], [Lang.Blocks.CALC_get_date_month, "MONTH"], [Lang.Blocks.CALC_get_date_day, "DAY"], [Lang.Blocks.CALC_get_date_hour, "HOUR"], [Lang.Blocks.CALC_get_date_minute, "MINUTE"], [Lang.Blocks.CALC_get_date_second, "SECOND"]],
                        value: "YEAR",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_get_date_2, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null, "YEAR", null], type: "get_date"},
                    pyHelpDef: {params: [null, "A&value", null], type: "get_date"},
                    paramsKeyMap: {VALUE: 1},
                    class: "calc_date",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e), r = new Date;
                        return "YEAR" == n ? r.getFullYear() : "MONTH" == n ? r.getMonth() + 1 : "DAY" == n ? r.getDate() : "HOUR" == n ? r.getHours() : "MINUTE" == n ? r.getMinutes() : r.getSeconds()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.value_of_current_time(%2)",
                            blockType: "param",
                            textParams: [void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_get_date_year, "YEAR"], [Lang.Blocks.CALC_get_date_month, "MONTH"], [Lang.Blocks.CALC_get_date_day, "DAY"], [Lang.Blocks.CALC_get_date_hour, "HOUR"], [Lang.Blocks.CALC_get_date_minute, "MINUTE"], [Lang.Blocks.CALC_get_date_second, "SECOND"]],
                                value: "YEAR",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValueLowerCase,
                                codeMap: "Entry.CodeMap.Entry.get_date[1]"
                            }]
                        }]
                    }
                },
                distance_something: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_distance_something_1,
                        color: "#3D3D3D"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "spritesWithMouse",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_distance_something_2, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null, null, null], type: "distance_something"},
                    pyHelpDef: {params: [null, "A&value", null], type: "distance_something"},
                    paramsKeyMap: {VALUE: 1},
                    class: "calc_distance",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e);
                        if ("mouse" == n) {
                            var r = Entry.stage.mouseCoordinate;
                            return Math.sqrt(Math.pow(t.getX() - r.x, 2) + Math.pow(t.getY() - r.y, 2))
                        }
                        var o = Entry.container.getEntity(n);
                        return Math.sqrt(Math.pow(t.getX() - o.getX(), 2) + Math.pow(t.getY() - o.getY(), 2))
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.value_of_distance_to(%2)",
                            blockType: "param",
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "spritesWithMouse",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.distance_something[1]"
                            }]
                        }]
                    }
                },
                get_sound_duration: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_get_sound_duration_1,
                        color: "#3D3D3D"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "sounds",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_get_sound_duration_2, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null, null, null], type: "get_sound_duration"},
                    pyHelpDef: {params: [null, "A&value", null], type: "get_sound_duration"},
                    paramsKeyMap: {VALUE: 1},
                    class: "calc_duration",
                    isNotFor: [],
                    func: function (t, e) {
                        for (var n = e.getField("VALUE", e), r = t.parent.sounds, o = 0; o < r.length; o++) if (r[o].id == n) return r[o].duration
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.value_of_sound_length_of(%2)",
                            blockType: "param",
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "sounds",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                get_user_name: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [],
                    events: {},
                    def: {params: [], type: "get_user_name"},
                    class: "calc_user",
                    isNotFor: [],
                    func: function (t, e) {
                        return window.user ? window.user.username : " "
                    },
                    syntax: {js: [], py: [{syntax: "Entry.value_of_username()", blockType: "param"}]}
                },
                length_of_string: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_length_of_string_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.CALC_length_of_string_2,
                        color: "#3D3D3D"
                    }],
                    events: {},
                    def: {params: [null, {type: "text", params: [Lang.Blocks.entry]}, null], type: "length_of_string"},
                    pyHelpDef: {params: [null, {type: "text", params: ["A&value"]}, null], type: "length_of_string"},
                    paramsKeyMap: {STRING: 1},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.getStringValue("STRING", e).length
                    },
                    syntax: {js: [], py: [{syntax: "len(%2)", blockType: "param", keyOption: "length_of_string"}]}
                },
                combine_something: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_combine_something_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_combine_something_2,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.VARIABLE_combine_something_3,
                        color: "#3D3D3D"
                    }],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: [Lang.Blocks.block_hi]}, null, {
                            type: "text",
                            params: [Lang.Blocks.entry]
                        }, null], type: "combine_something"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "text",
                            params: ["B&value"]
                        }, null], type: "combine_something"
                    },
                    paramsKeyMap: {VALUE1: 1, VALUE2: 3},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.getStringValue("VALUE1", e) + e.getStringValue("VALUE2", e)
                    },
                    syntax: {js: [], py: [{syntax: "(%2 + %4)", template: "%2 + %4", blockType: "param"}]}
                },
                char_at: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_char_at_1, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_char_at_2, color: "#3D3D3D"}, {
                        type: "Block",
                        isListIndex: !0,
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_char_at_3, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: [Lang.Blocks.hi_entry]}, null, {
                            type: "number",
                            params: ["1"]
                        }, null], type: "char_at"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "number",
                            params: ["B&value"]
                        }, null], type: "char_at"
                    },
                    paramsKeyMap: {LEFTHAND: 1, RIGHTHAND: 3},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("LEFTHAND", e), r = e.getNumberValue("RIGHTHAND", e) - 1;
                        if (r < 0 || r > n.length - 1) throw new Error;
                        return n[r]
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2[%4]",
                            blockType: "param",
                            textParams: [{
                                type: "Text",
                                text: Lang.Blocks.CALC_char_at_1,
                                color: "#3D3D3D"
                            }, {type: "Block", accept: "string"}, {
                                type: "Text",
                                text: Lang.Blocks.CALC_char_at_2,
                                color: "#3D3D3D"
                            }, {type: "Block", accept: "string", paramType: "index"}, {
                                type: "Text",
                                text: Lang.Blocks.CALC_char_at_3,
                                color: "#3D3D3D"
                            }],
                            keyOption: "char_at"
                        }]
                    }
                },
                substring: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_substring_1, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_substring_2, color: "#3D3D3D"}, {
                        type: "Block",
                        isListIndex: !0,
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_substring_3, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_substring_4, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: [Lang.Blocks.hi_entry]}, null, {
                            type: "number",
                            params: ["2"]
                        }, null, {type: "number", params: ["5"]}, null], type: "substring"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "number",
                            params: ["B&value"]
                        }, null, {type: "number", params: ["C&value"]}, null], type: "substring"
                    },
                    paramsKeyMap: {STRING: 1, START: 3, END: 5},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("STRING", e), r = e.getNumberValue("START", e) - 1,
                            o = e.getNumberValue("END", e) - 1, a = n.length - 1;
                        if (r < 0 || o < 0 || r > a || o > a) throw new Error;
                        return n.substring(Math.min(r, o), Math.max(r, o) + 1)
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2[%4:%6]",
                            blockType: "param",
                            textParams: [null, {type: "Block", accept: "string"}, null, {
                                type: "Block",
                                accept: "string",
                                paramType: "index"
                            }, null, {type: "Block", accept: "string"}, null]
                        }]
                    }
                },
                index_of_string: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_index_of_string_1, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_index_of_string_2, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_index_of_string_3, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: [Lang.Blocks.hi_entry]}, null, {
                            type: "text",
                            params: [Lang.Blocks.entry]
                        }, null], type: "index_of_string"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "text",
                            params: ["B&value"]
                        }, null], type: "index_of_string"
                    },
                    paramsKeyMap: {LEFTHAND: 1, RIGHTHAND: 3},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("LEFTHAND", e), r = e.getStringValue("RIGHTHAND", e);
                        return n.indexOf(r) + 1
                    },
                    syntax: {js: [], py: [{syntax: "%2.find(%4)", blockType: "param"}]}
                },
                replace_string: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.CALC_replace_string_1, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_replace_string_2, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_replace_string_3, color: "#3D3D3D"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Text", text: Lang.Blocks.CALC_replace_string_4, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: [Lang.Blocks.hi_entry]}, null, {
                            type: "text",
                            params: [Lang.Blocks.hello]
                        }, null, {type: "text", params: [Lang.Blocks.nice]}, null], type: "replace_string"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, {
                            type: "text",
                            params: ["B&value"]
                        }, null, {type: "text", params: ["C&value"]}, null], type: "replace_string"
                    },
                    paramsKeyMap: {STRING: 1, OLD_WORD: 3, NEW_WORD: 5},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.getStringValue("STRING", e).replace(new RegExp(e.getStringValue("OLD_WORD", e), "gm"), e.getStringValue("NEW_WORD", e))
                    },
                    syntax: {js: [], py: [{syntax: "%2.replace(%4, %6)", blockType: "param"}]}
                },
                change_string_case: {
                    color: "#FFD974",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.CALC_change_string_case_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "string"}, {
                        type: "Text",
                        text: Lang.Blocks.CALC_change_string_case_2,
                        color: "#3D3D3D"
                    }, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.CALC_change_string_case_sub_1, "toUpperCase"], [Lang.Blocks.CALC_change_string_case_sub_2, "toLowerCase"]],
                        value: "toUpperCase",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_CALC
                    }, {type: "Text", text: Lang.Blocks.CALC_change_string_case_3, color: "#3D3D3D"}],
                    events: {},
                    def: {
                        params: [null, {type: "text", params: ["Hello Entry!"]}, null, null, null],
                        type: "change_string_case"
                    },
                    pyHelpDef: {
                        params: [null, {type: "text", params: ["A&value"]}, null, null, null],
                        type: "change_string_case"
                    },
                    paramsKeyMap: {STRING: 1, CASE: 3},
                    class: "calc_string",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.getStringValue("STRING", e)[e.getField("CASE", e)]()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "%2.upper()",
                            params: [null, null, null, "toUpperCase", null],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_change_string_case_sub_1, "toUpperCase"], [Lang.Blocks.CALC_change_string_case_sub_2, "toLowerCase"]],
                                value: "toUpperCase",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValue
                            }]
                        }, {
                            syntax: "%2.lower()",
                            params: [null, null, null, "toLowerCase", null],
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "string"}, void 0, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.CALC_change_string_case_sub_1, "toUpperCase"], [Lang.Blocks.CALC_change_string_case_sub_2, "toLowerCase"]],
                                value: "toUpperCase",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_CALC,
                                converter: Entry.block.converters.returnStringValue
                            }]
                        }]
                    }
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                is_clicked: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{type: "Text", text: Lang.Blocks.JUDGEMENT_is_clicked, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null], type: "is_clicked"},
                    class: "boolean_input",
                    isNotFor: [],
                    func: function (t, e) {
                        return Entry.stage.isClick
                    },
                    syntax: {js: [], py: [{syntax: "Entry.is_mouse_clicked()", blockType: "param"}]}
                },
                is_press_some_key: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{type: "Keyboard", value: 81}, {
                        type: "Text",
                        text: Lang.Blocks.JUDGEMENT_is_press_some_key_2,
                        color: "#3D3D3D"
                    }],
                    events: {},
                    def: {params: [null, null], type: "is_press_some_key"},
                    pyHelpDef: {params: ["A&value", null], type: "is_press_some_key"},
                    paramsKeyMap: {VALUE: 0},
                    class: "boolean_input",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = Number(e.getField("VALUE", e));
                        return Entry.pressedKeys.indexOf(n) >= 0
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.is_key_pressed(%1)",
                            blockType: "param",
                            textParams: [{
                                type: "Keyboard",
                                value: "81",
                                converter: Entry.block.converters.keyboardCode
                            }]
                        }]
                    }
                },
                reach_something: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.JUDGEMENT_reach_something_1,
                        color: "#3D3D3D"
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "collision",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_JUDGE
                    }, {type: "Text", text: Lang.Blocks.JUDGEMENT_reach_something_2, color: "#3D3D3D"}],
                    events: {},
                    def: {params: [null, null, null], type: "reach_something"},
                    pyHelpDef: {params: [null, "A&value", null], type: "reach_something"},
                    paramsKeyMap: {VALUE: 1},
                    class: "boolean_collision",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!t.getVisible()) return !1;
                        var n = e.getField("VALUE", e), r = t.object, o = /wall/.test(n), a = ndgmr.checkPixelCollision;
                        if (o) {
                            var s = Entry.stage.wall;
                            switch (n) {
                                case"wall":
                                    return !!(a(r, s.up, .2, !0) || a(r, s.down, .2, !0) || a(r, s.left, .2, !0) || a(r, s.right, .2, !0));
                                case"wall_up":
                                    return !!a(r, s.up, .2, !0);
                                case"wall_down":
                                    return !!a(r, s.down, .2, !0);
                                case"wall_right":
                                    return !!a(r, s.right, .2, !0);
                                case"wall_left":
                                    return !!a(r, s.left, .2, !0)
                            }
                        } else {
                            if ("mouse" == n) {
                                var i = Entry.stage.canvas, l = r.globalToLocal(i.mouseX, i.mouseY);
                                return r.hitTest(l.x, l.y)
                            }
                            var c = Entry.container.getEntity(n);
                            if ("textBox" == c.type || "textBox" == t.type) {
                                var u = c.object.getTransformedBounds(), p = r.getTransformedBounds();
                                if (Entry.checkCollisionRect(p, u)) return !0;
                                for (var _ = 0, d = (y = c.parent.clonedEntities).length; _ < d; _++) if (!(g = y[_]).isStamp && g.getVisible() && Entry.checkCollisionRect(p, g.object.getTransformedBounds())) return !0
                            } else {
                                if (c.getVisible() && a(r, c.object, .2, !0)) return !0;
                                var y;
                                for (_ = 0, d = (y = c.parent.clonedEntities).length; _ < d; _++) {
                                    var g;
                                    if (!(g = y[_]).isStamp && g.getVisible() && a(r, g.object, .2, !0)) return !0
                                }
                            }
                        }
                        return !1
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.is_touched(%2)",
                            blockType: "param",
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "collision",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_JUDGE,
                                converter: Entry.block.converters.returnObjectOrStringValue,
                                codeMap: "Entry.CodeMap.Entry.reach_something[1]"
                            }]
                        }]
                    }
                },
                boolean_basic_operator: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Dropdown",
                        options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                        value: "EQUAL",
                        fontSize: 11,
                        noArrow: !0
                    }, {type: "Block", accept: "string"}],
                    events: {},
                    def: {
                        params: [{type: "text", params: ["10"]}, "EQUAL", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    },
                    pyHelpDef: {
                        params: [{type: "text", params: ["A&value"]}, "EQUAL", {
                            type: "text",
                            params: ["B&value"]
                        }], type: "boolean_basic_operator"
                    },
                    defs: [{
                        params: [{type: "text", params: ["10"]}, "EQUAL", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    }, {
                        params: [{type: "text", params: ["10"]}, "GREATER", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    }, {
                        params: [{type: "text", params: ["10"]}, "LESS", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    }, {
                        params: [{type: "text", params: ["10"]}, "GREATER_OR_EQUAL", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    }, {
                        params: [{type: "text", params: ["10"]}, "LESS_OR_EQUAL", {type: "text", params: ["10"]}],
                        type: "boolean_basic_operator"
                    }],
                    paramsKeyMap: {LEFTHAND: 0, OPERATOR: 1, RIGHTHAND: 2},
                    class: "boolean_compare",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("OPERATOR", e), r = e.getValue("LEFTHAND", e),
                            o = e.getValue("RIGHTHAND", e);
                        switch (n) {
                            case"EQUAL":
                                return r == o;
                            case"GREATER":
                                return Number(r) > Number(o);
                            case"LESS":
                                return Number(r) < Number(o);
                            case"GREATER_OR_EQUAL":
                                return Number(r) >= Number(o);
                            case"LESS_OR_EQUAL":
                                return Number(r) <= Number(o)
                        }
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "(%1 %2 %3)",
                            template: "%1 %2 %3",
                            keyOption: "boolean_basic_operator",
                            blockType: "param",
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "Dropdown",
                                options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                                value: "EQUAL",
                                fontSize: 11,
                                noArrow: !0,
                                converter: Entry.block.converters.returnOperator
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                boolean_and_or: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{type: "Block", accept: "boolean"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.JUDGEMENT_boolean_and, "AND"], [Lang.Blocks.JUDGEMENT_boolean_or, "OR"]],
                        value: "AND",
                        fontSize: 11
                    }, {type: "Block", accept: "boolean"}],
                    events: {},
                    def: {params: [{type: "True"}, "AND", {type: "True"}], type: "boolean_and_or"},
                    defs: [{
                        params: [{type: "True"}, "AND", {type: "True"}],
                        type: "boolean_and_or"
                    }, {params: [{type: "True"}, "OR", {type: "False"}], type: "boolean_and_or"}],
                    pyHelpDef: {
                        params: [{type: "boolean_shell", params: ["A"]}, "AND", {
                            type: "boolean_shell",
                            params: ["B"]
                        }], type: "boolean_and_or"
                    },
                    paramsKeyMap: {LEFTHAND: 0, OPERATOR: 1, RIGHTHAND: 2},
                    func: function (t, e) {
                        var n = e.getField("OPERATOR", e), r = e.getBooleanValue("LEFTHAND", e),
                            o = e.getBooleanValue("RIGHTHAND", e);
                        return "AND" == n ? r && o : r || o
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "(%1 %2 %3)",
                            template: "%1 %2 %3",
                            blockType: "param",
                            textParams: [{type: "Block", accept: "boolean"}, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.JUDGEMENT_boolean_and, "AND"], [Lang.Blocks.JUDGEMENT_boolean_or, "OR"]],
                                converter: Entry.block.converters.returnOperator,
                                value: "AND",
                                fontSize: 11
                            }, {type: "Block", accept: "boolean"}]
                        }]
                    }
                },
                boolean_not: {
                    color: "#AEB8FF",
                    skeleton: "basic_boolean_field",
                    statements: [],
                    params: [{
                        type: "Text",
                        text: Lang.Blocks.JUDGEMENT_boolean_not_1,
                        color: "#3D3D3D"
                    }, {type: "Block", accept: "boolean"}, {
                        type: "Text",
                        text: Lang.Blocks.JUDGEMENT_boolean_not_2,
                        color: "#3D3D3D"
                    }],
                    events: {},
                    def: {params: [null, {type: "True"}, null], type: "boolean_not"},
                    pyHelpDef: {params: [null, {type: "boolean_shell"}, null], type: "boolean_not"},
                    paramsKeyMap: {VALUE: 1},
                    class: "boolean",
                    isNotFor: [],
                    func: function (t, e) {
                        return !e.getBooleanValue("VALUE")
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "not (%2)",
                            template: "not %2",
                            blockType: "param",
                            textParams: [void 0, {type: "Block", accept: "Boolean"}]
                        }]
                    }
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                sound_something_with_block: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "get_sounds"}, null], type: "sound_something_with_block"},
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, null],
                        type: "sound_something_with_block"
                    },
                    paramsKeyMap: {VALUE: 0},
                    class: "sound_play",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e), r = t.parent.getSound(n);
                        return r && Entry.Utils.addSoundInstances(createjs.Sound.play(r.id)), e.callReturn()
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.play_sound(%1)"}]}
                },
                sound_something_second_with_block: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {
                        params: [{type: "get_sounds", id: "95dw"}, {type: "number", params: ["1"]}, null],
                        type: "sound_something_second_with_block"
                    },
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, {
                            type: "number",
                            params: ["B&value"]
                        }, null], type: "sound_something_second_with_block"
                    },
                    paramsKeyMap: {VALUE: 0, SECOND: 1},
                    class: "sound_play",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e), r = e.getNumberValue("SECOND", e),
                            o = t.parent.getSound(n);
                        return o && Entry.Utils.addSoundInstances(createjs.Sound.play(o.id, {
                            startTime: 0,
                            duration: 1e3 * r
                        })), e.callReturn()
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.play_sound_for_sec(%1, %2)"}]}
                },
                sound_from_to: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/sound_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "get_sounds"}, {type: "text", params: ["1"]}, {
                            type: "text",
                            params: ["10"]
                        }, null], type: "sound_from_to"
                    },
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, {
                            type: "text",
                            params: ["B&value"]
                        }, {type: "text", params: ["C&value"]}, null], type: "sound_from_to"
                    },
                    paramsKeyMap: {VALUE: 0, START: 1, END: 2},
                    class: "sound_play",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e), r = t.parent.getSound(n);
                        if (r) {
                            var o = 1e3 * e.getNumberValue("START", e), a = 1e3 * e.getNumberValue("END", e);
                            createjs.Sound.play(r.id, {
                                startTime: Math.min(o, a),
                                duration: Math.max(o, a) - Math.min(o, a)
                            })
                        }
                        return e.callReturn()
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.play_sound_from_to(%1, %2, %3)"}]}
                },
                sound_something_wait_with_block: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "get_sounds"}, null], type: "sound_something_wait_with_block"},
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, null],
                        type: "sound_something_wait_with_block"
                    },
                    paramsKeyMap: {VALUE: 0},
                    class: "sound_wait",
                    isNotFor: [],
                    func: function (t, e) {
                        if (e.isPlay) return 1 == e.playState ? e : (delete e.playState, delete e.isPlay, e.callReturn());
                        e.isPlay = !0, e.playState = 1;
                        var n = e.getStringValue("VALUE", e), r = t.parent.getSound(n);
                        if (r) {
                            var o = createjs.Sound.play(r.id);
                            Entry.Utils.addSoundInstances(o), setTimeout(function () {
                                e.playState = 0
                            }, 1e3 * r.duration)
                        }
                        return e
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.play_sound_and_wait(%1)"}]}
                },
                sound_something_second_wait_with_block: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {
                        params: [{type: "get_sounds"}, {type: "number", params: ["1"]}, null],
                        type: "sound_something_second_wait_with_block"
                    },
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, {
                            type: "number",
                            params: ["B&value"]
                        }, null], type: "sound_something_second_wait_with_block"
                    },
                    paramsKeyMap: {VALUE: 0, SECOND: 1},
                    class: "sound_wait",
                    isNotFor: [],
                    func: function (t, e) {
                        if (e.isPlay) return 1 == e.playState ? e : (delete e.isPlay, delete e.playState, e.callReturn());
                        e.isPlay = !0, e.playState = 1;
                        var n = e.getStringValue("VALUE", e), r = t.parent.getSound(n);
                        if (r) {
                            var o = createjs.Sound.play(r.id), a = e.getNumberValue("SECOND", e);
                            setTimeout(function () {
                                o.stop(), e.playState = 0
                            }, 1e3 * a), o.addEventListener("complete", function (t) {
                            })
                        }
                        return e
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.play_sound_for_sec_and_wait(%1, %2)"}]}
                },
                sound_from_to_and_wait: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/sound_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "get_sounds"}, {type: "text", params: ["1"]}, {
                            type: "text",
                            params: ["10"]
                        }, null], type: "sound_from_to_and_wait"
                    },
                    pyHelpDef: {
                        params: [{type: "get_sounds", params: ["A&value"]}, {
                            type: "text",
                            params: ["B&value"]
                        }, {type: "text", params: ["C&value"]}, null], type: "sound_from_to_and_wait"
                    },
                    paramsKeyMap: {VALUE: 0, START: 1, END: 2},
                    class: "sound_wait",
                    isNotFor: [],
                    func: function (t, e) {
                        if (e.isPlay) return 1 == e.playState ? e : (delete e.isPlay, delete e.playState, e.callReturn());
                        e.isPlay = !0, e.playState = 1;
                        var n = e.getStringValue("VALUE", e), r = t.parent.getSound(n);
                        if (r) {
                            var o = 1e3 * e.getNumberValue("START", e), a = 1e3 * e.getNumberValue("END", e),
                                s = Math.min(o, a), i = Math.max(o, a) - s;
                            createjs.Sound.play(r.id, {startTime: s, duration: i}), setTimeout(function () {
                                e.playState = 0
                            }, i)
                        }
                        return e
                    },
                    syntax: {js: [], py: ["Entry.play_sound_from_to_and_wait(%1, %2, %3)"]}
                },
                sound_volume_change: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "sound_volume_change"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "sound_volume_change"},
                    paramsKeyMap: {VALUE: 0},
                    class: "sound_volume",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e) / 100;
                        return (n += createjs.Sound.getVolume()) > 1 && (n = 1), n < 0 && (n = 0), createjs.Sound.setVolume(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_sound_volume(%1)"]}
                },
                sound_volume_set: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/sound_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "sound_volume_set"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "sound_volume_set"},
                    paramsKeyMap: {VALUE: 0},
                    class: "sound_volume",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e) / 100;
                        return n > 1 && (n = 1), n < 0 && (n = 0), createjs.Sound.setVolume(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_sound_volume(%1)"]}
                },
                sound_silent_all: {
                    color: "#A4D01D",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/sound_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "sound_silent_all"},
                    class: "sound_stop",
                    isNotFor: [],
                    func: function (t, e) {
                        return createjs.Sound.stop(), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.stop_sound()"]}
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                text_read: {
                    color: "#FFCA36",
                    fontColor: "#FFFFFF",
                    skeleton: "basic_string_field",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "textBoxWithSelf",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_TEXT
                    }, {type: "Indicator", img: "block_icon/text.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "text_read"},
                    pyHelpDef: {params: ["A&value", null], type: "text_read"},
                    paramsKeyMap: {VALUE: 0},
                    class: "text",
                    isNotFor: ["sprite"],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e), r = void 0;
                        if ("self" === n) {
                            if (console.log(t), "textBox" !== t.type) throw new Error("textBox가 아닙니다.");
                            r = t
                        } else r = Entry.container.getEntity(n);
                        var o = r.getText() || "";
                        return o.replace(/\n/gim, " ")
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.contents_of_textbox(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "textBoxWithSelf",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_TEXT,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.text_read[0]"
                            }]
                        }]
                    }
                },
                text_write: {
                    color: "#FFCA36",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/text.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "text", params: [Lang.Blocks.entry]}, null], type: "text_write"},
                    pyHelpDef: {params: [{type: "text", params: ["A&value"]}, null], type: "text_write"},
                    paramsKeyMap: {VALUE: 0},
                    class: "text",
                    isNotFor: ["sprite"],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e);
                        return t.setText(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.write_text(%1)"]}
                },
                text_append: {
                    color: "#FFCA36",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/text.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "text", params: [Lang.Blocks.entry]}, null], type: "text_append"},
                    pyHelpDef: {params: [{type: "text", params: ["A&value"]}, null], type: "text_append"},
                    paramsKeyMap: {VALUE: 0},
                    class: "text",
                    isNotFor: ["sprite"],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e);
                        return t.setText(t.getText() + "" + n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.append_text(%1)"]}
                },
                text_prepend: {
                    color: "#FFCA36",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/text.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "text", params: [Lang.Blocks.entry]}, null], type: "text_prepend"},
                    pyHelpDef: {params: [{type: "text", params: ["A&value"]}, null], type: "text_prepend"},
                    paramsKeyMap: {VALUE: 0},
                    class: "text",
                    isNotFor: ["sprite"],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE", e);
                        return t.setText(n + "" + t.getText()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.prepend_text(%1)"]}
                },
                text_flush: {
                    color: "#FFCA36",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/text.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "text_flush"},
                    class: "text",
                    isNotFor: ["sprite"],
                    func: function (t, e) {
                        return t.setText(""), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.clear_text()"]}
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                brush_stamp: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "brush_stamp"},
                    class: "stamp",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return t.addStamp(), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.stamp()"]}
                },
                start_drawing: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "start_drawing"},
                    class: "brush_control",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return Entry.setBasicBrush(t), t.brush.moveTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.start_drawing()"]}
                },
                stop_drawing: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "stop_drawing"},
                    class: "brush_control",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return t.brush && t.shapes.length && (t.brush.stop = !0), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.stop_drawing()"]}
                },
                set_color: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Color"}, {type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "set_color"},
                    pyHelpDef: {params: ["A&value"], type: "set_color"},
                    paramsKeyMap: {VALUE: 0},
                    class: "brush_color",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e);
                        if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush) {
                            var r = Entry.hex2rgb(n);
                            t.brush.rgb = r, t.brush.endStroke(), t.brush.beginStroke("rgba(" + r.r + "," + r.g + "," + r.b + "," + (1 - t.brush.opacity / 100) + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                        }
                        return e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.set_brush_color_to(%1)",
                            textParams: [{
                                type: "Color",
                                converter: Entry.block.converters.returnStringValueUpperCase,
                                codeMap: "Entry.CodeMap.Entry.set_color[0]"
                            }]
                        }]
                    }
                },
                set_random_color: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "set_random_color"},
                    class: "brush_color",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush) {
                            var n = Entry.generateRgb();
                            t.brush.rgb = n, t.brush.endStroke(), t.brush.beginStroke("rgba(" + n.r + "," + n.g + "," + n.b + "," + (1 - t.brush.opacity / 100) + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                        }
                        return e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_brush_color_to_random()"]}
                },
                change_thickness: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/brush_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["1"]}, null], type: "change_thickness"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "change_thickness"},
                    paramsKeyMap: {VALUE: 0},
                    class: "brush_thickness",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush && (t.brush.thickness += n, t.brush.thickness < 1 && (t.brush.thickness = 1), t.brush.setStrokeStyle(t.brush.thickness), t.brush.moveTo(t.getX(), -1 * t.getY())), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_brush_size(%1)"]}
                },
                set_thickness: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/brush_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["1"]}, null], type: "set_thickness"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "set_thickness"},
                    paramsKeyMap: {VALUE: 0},
                    class: "brush_thickness",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush && (t.brush.thickness = n, t.brush.setStrokeStyle(t.brush.thickness), t.brush.moveTo(t.getX(), -1 * t.getY())), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_brush_size(%1)"]}
                },
                change_brush_transparency: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/brush_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "change_brush_transparency"},
                    pyHelpDef: {
                        params: [{type: "number", params: ["A&value"]}, null],
                        type: "change_brush_transparency"
                    },
                    paramsKeyMap: {VALUE: 0},
                    class: "brush_opacity",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), n = Entry.adjustValueWithMaxMin(t.brush.opacity + n, 0, 100), t.brush) {
                            t.brush.opacity = n, t.brush.endStroke();
                            var r = t.brush.rgb;
                            t.brush.beginStroke("rgba(" + r.r + "," + r.g + "," + r.b + "," + (1 - t.brush.opacity / 100) + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                        }
                        return e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_brush_transparency(%1)"]}
                },
                set_brush_tranparency: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/brush_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["50"]}, null], type: "set_brush_tranparency"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "set_brush_tranparency"},
                    paramsKeyMap: {VALUE: 0},
                    class: "brush_opacity",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        if (t.brush && t.shapes.length || (Entry.setBasicBrush(t), t.brush.stop = !0), t.brush) {
                            t.brush.opacity = Entry.adjustValueWithMaxMin(n, 0, 100), t.brush.endStroke();
                            var r = t.brush.rgb;
                            t.brush.beginStroke("rgba(" + r.r + "," + r.g + "," + r.b + "," + (1 - t.brush.opacity / 100) + ")"), t.brush.moveTo(t.getX(), -1 * t.getY())
                        }
                        return e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_brush_transparency(%1)"]}
                },
                brush_erase_all: {
                    color: "#FF9E20",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "brush_erase_all"},
                    class: "brush_clear",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return t.eraseBrush && t.eraseBrush(), t.removeStamps(), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.clear_drawing()"]}
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                show: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "show"},
                    class: "visibility",
                    isNotFor: [],
                    func: function (t, e) {
                        return t.setVisible(!0), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.show()"]}
                },
                hide: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "hide"},
                    class: "visibility",
                    isNotFor: [],
                    func: function (t, e) {
                        return t.setVisible(!1), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.hide()"]}
                },
                dialog_time: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.speak, "speak"]],
                        value: "speak",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "text", params: [Lang.Blocks.block_hi]}, {
                            type: "number",
                            params: ["4"]
                        }, null, null], type: "dialog_time"
                    },
                    pyHelpDef: {
                        params: [{type: "text", params: ["A&value"]}, {
                            type: "number",
                            params: ["B&value"]
                        }, null, null], type: "dialog_time"
                    },
                    paramsKeyMap: {VALUE: 0, SECOND: 1, OPTION: 2},
                    class: "say",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        if (!e.isStart) {
                            var n = e.getNumberValue("SECOND", e), r = e.getValue("VALUE", e),
                                o = e.getField("OPTION", e);
                            e.isStart = !0, e.timeFlag = 1, "" === r ? r = "    " : "boolean" == typeof r ? r = r ? "True" : "False" : r += "", r = Entry.convertToRoundedDecimals(r, 3), new Entry.Dialog(t, r, o), t.syncDialogVisible(t.getVisible()), setTimeout(function () {
                                e.timeFlag = 0
                            }, 1e3 * n)
                        }
                        return 0 == e.timeFlag ? (delete e.timeFlag, delete e.isStart, t.dialog && t.dialog.remove(), e.callReturn()) : (t.dialog || (r = e.getStringValue("VALUE", e), o = e.getField("OPTION", e), r || "number" == typeof r || (r = "    "), r = Entry.convertToRoundedDecimals(r, 3), new Entry.Dialog(t, r, o), t.syncDialogVisible(t.getVisible())), e)
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.print_for_sec(%1, %2)",
                            params: [null, null, "speak"],
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "Block",
                                accept: "string"
                            }, {
                                type: "Dropdown",
                                options: [[Lang.Blocks.speak, "speak"]],
                                value: "speak",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                                converter: Entry.block.converters.returnStringValue
                            }]
                        }]
                    }
                },
                dialog: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.speak, "speak"]],
                        value: "speak",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [{type: "text", params: [Lang.Blocks.block_hi]}, null, null], type: "dialog"},
                    pyHelpDef: {params: [{type: "text", params: ["A&value"]}, null, null], type: "dialog"},
                    paramsKeyMap: {VALUE: 0, OPTION: 1},
                    class: "say",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getValue("VALUE", e);
                        "" === n ? n = "    " : "boolean" == typeof n ? n = n ? "True" : "False" : n += "";
                        var r = e.getField("OPTION", e);
                        return n = Entry.convertToRoundedDecimals(n, 3), new Entry.Dialog(t, n, r), t.syncDialogVisible(t.getVisible()), e.callReturn()
                    },
                    syntax: {js: [], py: [{syntax: "Entry.print(%1)", params: [null, "speak"]}]}
                },
                remove_dialog: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "remove_dialog"},
                    class: "say",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return t.dialog && t.dialog.remove(), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.clear_print()"]}
                },
                change_to_some_shape: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/looks_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "get_pictures", id: "z4jm"}, null], type: "change_to_some_shape"},
                    pyHelpDef: {
                        params: [{type: "get_pictures", params: ["A&value"]}, null],
                        type: "change_to_some_shape"
                    },
                    paramsKeyMap: {VALUE: 0},
                    class: "shape",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getStringValue("VALUE"), r = (Entry.parseNumber(n), t.parent.getPicture(n));
                        return t.setImage(r), e.callReturn()
                    },
                    syntax: {js: [], py: [{passTest: !0, syntax: "Entry.change_shape(%1)"}]}
                },
                change_to_next_shape: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.LOOKS_change_shape_next, "next"], [Lang.Blocks.LOOKS_change_shape_prev, "prev"]],
                        value: "next",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "change_to_next_shape"},
                    pyHelpDef: {params: ["A&value", null], type: "change_to_next_shape"},
                    paramsKeyMap: {DRIECTION: 0},
                    class: "shape",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n;
                        return n = "prev" !== e.getStringField("DRIECTION") ? t.parent.getNextPicture(t.picture.id) : t.parent.getPrevPicture(t.picture.id), t.setImage(n), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.change_shape_to(%1)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.LOOKS_change_shape_next, "next"], [Lang.Blocks.LOOKS_change_shape_prev, "prev"]],
                                value: "next",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.change_to_next_shape[0]"
                            }]
                        }]
                    }
                },
                add_effect_amount: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                        value: "color",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/looks_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [null, {type: "number", params: ["10"]}, null], type: "add_effect_amount"},
                    pyHelpDef: {
                        params: ["A&value", {type: "number", params: ["B&value"]}, null],
                        type: "add_effect_amount"
                    },
                    paramsKeyMap: {EFFECT: 0, VALUE: 1},
                    class: "effect",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                        return "color" == n ? (t.effect.hsv = r + t.effect.hsv, o = "hsv") : "brightness" == n ? (t.effect.brightness = r + t.effect.brightness, o = "brightness") : "transparency" == n && (t.effect.alpha = t.effect.alpha - r / 100, o = "alpha"), t.applyFilter(!0, [o]), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.add_effect(%1, %2)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                                value: "color",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.add_effect_amount[0]"
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                change_effect_amount: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                        value: "color",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/looks_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [null, {type: "number", params: ["100"]}, null], type: "change_effect_amount"},
                    pyHelpDef: {
                        params: ["A&value", {type: "number", params: ["B&value"]}, null],
                        type: "change_effect_amount"
                    },
                    paramsKeyMap: {EFFECT: 0, VALUE: 1},
                    class: "effect",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        var n = e.getField("EFFECT", e), r = e.getNumberValue("VALUE", e), o = "";
                        return "color" == n ? (t.effect.hsv = r, o = "hsv") : "brightness" == n ? (t.effect.brightness = r, o = "brightness") : "transparency" == n && (t.effect.alpha = 1 - r / 100, o = "alpha"), t.applyFilter(!0, [o]), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.set_effect(%1, %2)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.color, "color"], [Lang.Blocks.brightness, "brightness"], [Lang.Blocks.transparency, "transparency"]],
                                value: "color",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.change_effect_amount[0]"
                            }, {type: "Block", accept: "string"}]
                        }]
                    }
                },
                erase_all_effects: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "erase_all_effects"},
                    class: "effect",
                    isNotFor: ["textBox"],
                    func: function (t, e) {
                        return t.resetFilter(), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.clear_effect()"]}
                },
                change_scale_size: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/looks_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "change_scale_size"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "change_scale_size"},
                    paramsKeyMap: {VALUE: 0},
                    class: "scale",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setSize(t.getSize() + n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_size(%1)"]}
                },
                set_scale_size: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/looks_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["100"]}, null], type: "set_scale_size"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "set_scale_size"},
                    paramsKeyMap: {VALUE: 0},
                    class: "scale",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setSize(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_size(%1)"]}
                },
                flip_x: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "flip_x"},
                    class: "flip",
                    isNotFor: [],
                    func: function (t, e) {
                        return t.setScaleY(-1 * t.getScaleY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.flip_horizontal()"]}
                },
                flip_y: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "flip_y"},
                    class: "flip",
                    isNotFor: [],
                    func: function (t, e) {
                        return t.setScaleX(-1 * t.getScaleX()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.flip_vertical()"]}
                },
                change_object_index: {
                    color: "#EC4466",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.LOOKS_change_object_index_sub_1, "FRONT"], [Lang.Blocks.LOOKS_change_object_index_sub_2, "FORWARD"], [Lang.Blocks.LOOKS_change_object_index_sub_3, "BACKWARD"], [Lang.Blocks.LOOKS_change_object_index_sub_4, "BACK"]],
                        value: "FRONT",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_LOOKS
                    }, {type: "Indicator", img: "block_icon/looks_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "change_object_index"},
                    pyHelpDef: {params: ["A&value", null], type: "change_object_index"},
                    paramsKeyMap: {LOCATION: 0},
                    class: "z-index",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("LOCATION", e), r = Entry.stage.selectedObjectContainer,
                            o = r.getChildIndex(t.object), a = r.children.length - 1, s = o;
                        switch (n) {
                            case"FRONT":
                                s = a;
                                break;
                            case"FORWARD":
                                if (o === a) break;
                                var i = r.getChildAt(o + 1).entity;
                                s += (i.shapes.length ? 2 : 1) + i.stamps.length;
                                break;
                            case"BACKWARD":
                                s -= (t.shapes.length ? 2 : 1) + t.stamps.length;
                                var l = r.getChildAt(s);
                                if (!l) {
                                    s = 0;
                                    break
                                }
                                s -= ((l = l.entity).shapes.length ? 1 : 0) + l.stamps.length;
                                break;
                            case"BACK":
                                s = 0
                        }
                        return Entry.stage.setEntityIndex(t, s), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.send_layer_to(%1)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.LOOKS_change_object_index_sub_1, "FRONT"], [Lang.Blocks.LOOKS_change_object_index_sub_2, "FORWARD"], [Lang.Blocks.LOOKS_change_object_index_sub_3, "BACKWARD"], [Lang.Blocks.LOOKS_change_object_index_sub_4, "BACK"]],
                                value: "FRONT",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_LOOKS,
                                converter: Entry.block.converters.returnStringValueLowerCase,
                                codeMap: "Entry.CodeMap.Entry.change_object_index[0]"
                            }]
                        }]
                    }
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                move_direction: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "move_direction"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "move_direction"},
                    paramsKeyMap: {VALUE: 0},
                    class: "walk",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setX(t.getX() + n * Math.cos((t.getRotation() + t.getDirection() - 90) / 180 * Math.PI)), t.setY(t.getY() - n * Math.sin((t.getRotation() + t.getDirection() - 90) / 180 * Math.PI)), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.move_to_direction(%1)"]}
                },
                bounce_wall: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "bounce_wall"},
                    class: "walk",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = t.parent.getRotateMethod();
                        if ("free" == n) var r = (t.getRotation() + t.getDirection()).mod(360); else r = t.getDirection();
                        var o = Entry.Utils.COLLISION.NONE;
                        if (r < 90 && r >= 0 || r < 360 && r >= 270) o = t.collision == Entry.Utils.COLLISION.UP, !(s = ndgmr.checkPixelCollision(Entry.stage.wall.up, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), s && o && (s = !1), s ? ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection() + 180) : t.setDirection(180 - t.getDirection()), t.collision = Entry.Utils.COLLISION.UP) : (o = t.collision == Entry.Utils.COLLISION.DOWN, !(a = ndgmr.checkPixelCollision(Entry.stage.wall.down, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), a && o && (a = !1), a && ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection() + 180) : t.setDirection(180 - t.getDirection()), t.collision = Entry.Utils.COLLISION.DOWN)); else if (r < 270 && r >= 90) {
                            var a, s;
                            o = t.collision == Entry.Utils.COLLISION.DOWN, !(a = ndgmr.checkPixelCollision(Entry.stage.wall.down, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), a && o && (a = !1), a ? ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection() + 180) : t.setDirection(180 - t.getDirection()), t.collision = Entry.Utils.COLLISION.DOWN) : (o = t.collision == Entry.Utils.COLLISION.UP, !(s = ndgmr.checkPixelCollision(Entry.stage.wall.up, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), s && o && (s = !1), s && ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection() + 180) : t.setDirection(180 - t.getDirection()), t.collision = Entry.Utils.COLLISION.UP))
                        }
                        if (r < 360 && r >= 180) o = t.collision == Entry.Utils.COLLISION.LEFT, !(l = ndgmr.checkPixelCollision(Entry.stage.wall.left, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), l && o && (l = !1), l ? ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection()) : t.setDirection(360 - t.getDirection()), t.collision = Entry.Utils.COLLISION.LEFT) : (o = t.collision == Entry.Utils.COLLISION.RIGHT, !(i = ndgmr.checkPixelCollision(Entry.stage.wall.right, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), i && o && (i = !1), i && ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection()) : t.setDirection(360 - t.getDirection()), t.collision = Entry.Utils.COLLISION.RIGHT)); else if (r < 180 && r >= 0) {
                            var i, l;
                            o = t.collision == Entry.Utils.COLLISION.RIGHT, !(i = ndgmr.checkPixelCollision(Entry.stage.wall.right, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), i && o && (i = !1), i ? ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection()) : t.setDirection(360 - t.getDirection()), t.collision = Entry.Utils.COLLISION.RIGHT) : (o = t.collision == Entry.Utils.COLLISION.LEFT, !(l = ndgmr.checkPixelCollision(Entry.stage.wall.left, t.object, 0, !1)) && o && (t.collision = Entry.Utils.COLLISION.NONE), l && o && (l = !1), l && ("free" == n ? t.setRotation(-t.getRotation() - 2 * t.getDirection()) : t.setDirection(360 - t.getDirection()), t.collision = Entry.Utils.COLLISION.LEFT))
                        }
                        return e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.bounce_on_edge()"]}
                },
                move_x: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "move_x"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "move_x"},
                    paramsKeyMap: {VALUE: 0},
                    class: "move_relative",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setX(t.getX() + n), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_x(%1)"]}
                },
                move_y: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "move_y"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "move_y"},
                    paramsKeyMap: {VALUE: 0},
                    class: "move_relative",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setY(t.getY() + n), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_y(%1)"]}
                },
                move_xy_time: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "number", params: ["2"]}, {type: "number", params: ["10"]}, {
                            type: "number",
                            params: ["10"]
                        }, null], type: "move_xy_time"
                    },
                    pyHelpDef: {
                        params: [{type: "number", params: ["C&value"]}, {
                            type: "number",
                            params: ["A&value"]
                        }, {type: "number", params: ["B&value"]}, null], type: "move_xy_time"
                    },
                    paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2},
                    class: "move_relative",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!e.isStart) {
                            var n;
                            n = e.getNumberValue("VALUE1", e);
                            var r = e.getNumberValue("VALUE2", e), o = e.getNumberValue("VALUE3", e);
                            e.isStart = !0, e.frameCount = Math.max(Math.floor(n * Entry.FPS), 1), e.dX = r / e.frameCount, e.dY = o / e.frameCount, 1 == e.frameCount && a()
                        }
                        return 0 != e.frameCount ? (a(), e) : (delete e.isStart, delete e.frameCount, e.callReturn());

                        function a() {
                            t.setX(t.getX() + e.dX), t.setY(t.getY() + e.dY), e.frameCount--, t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY())
                        }
                    },
                    syntax: {js: [], py: ["Entry.add_xy_for_sec(%2, %3, %1)"]}
                },
                locate_x: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "locate_x"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "locate_x"},
                    paramsKeyMap: {VALUE: 0},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setX(n), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_x(%1)"]}
                },
                locate_y: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "locate_y"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "locate_y"},
                    paramsKeyMap: {VALUE: 0},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setY(n), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_y(%1)"]}
                },
                locate_xy: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {
                        params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, null],
                        type: "locate_xy"
                    },
                    pyHelpDef: {
                        params: [{type: "number", params: ["A&value"]}, {type: "number", params: ["B&value"]}],
                        type: "locate_xy"
                    },
                    paramsKeyMap: {VALUE1: 0, VALUE2: 1},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE1", e), r = e.getNumberValue("VALUE2", e);
                        return t.setX(n), t.setY(r), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_xy(%1, %2)"]}
                },
                locate_xy_time: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "number", params: ["2"]}, {type: "number", params: ["10"]}, {
                            type: "number",
                            params: ["10"]
                        }, null], type: "locate_xy_time"
                    },
                    pyHelpDef: {
                        params: [{type: "number", params: ["C&value"]}, {
                            type: "number",
                            params: ["A&value"]
                        }, {type: "number", params: ["B&value"]}, null], type: "locate_xy_time"
                    },
                    paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n;
                        return e.isStart || (n = e.getNumberValue("VALUE1", e), e.isStart = !0, e.frameCount = Math.max(Math.floor(n * Entry.FPS), 1), e.x = e.getNumberValue("VALUE2", e), e.y = e.getNumberValue("VALUE3", e), 1 == e.frameCount && r()), 0 != e.frameCount ? (r(), e) : (delete e.isStart, delete e.frameCount, e.callReturn());

                        function r() {
                            var n = e.x - t.getX(), r = e.y - t.getY();
                            n /= e.frameCount, r /= e.frameCount, t.setX(t.getX() + n), t.setY(t.getY() + r), e.frameCount--, t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY())
                        }
                    },
                    syntax: {js: [], py: ["Entry.set_xy_for_sec(%2, %3, %1)"]}
                },
                locate: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "spritesWithMouse",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_MOVING
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "locate"},
                    pyHelpDef: {params: ["A&value", null], type: "locate"},
                    paramsKeyMap: {VALUE: 0},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n, r, o = e.getField("VALUE", e);
                        if ("mouse" == o) n = Entry.stage.mouseCoordinate.x, r = Entry.stage.mouseCoordinate.y; else {
                            var a = Entry.container.getEntity(o);
                            n = a.getX(), r = a.getY()
                        }
                        return t.setX(Number(n)), t.setY(Number(r)), t.brush && !t.brush.stop && t.brush.lineTo(n, -1 * r), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.move_to(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "spritesWithMouse",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_MOVING,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.locate[0]"
                            }]
                        }]
                    }
                },
                locate_object_time: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "spritesWithMouse",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_MOVING
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {params: [{type: "number", params: ["2"]}, null, null], type: "locate_object_time"},
                    pyHelpDef: {params: [{type: "number", params: ["B&value"]}, "A&value"], type: "locate_object_time"},
                    paramsKeyMap: {VALUE: 0, TARGET: 1},
                    class: "move_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!e.isStart) {
                            var n, r, o, a = e.getField("TARGET", e);
                            n = e.getNumberValue("VALUE", e);
                            var s, i = Math.floor(n * Entry.FPS), l = Entry.stage.mouseCoordinate;
                            if (0 == i) return "mouse" == a ? (r = Number(l.x), o = Number(l.y)) : (r = (s = Entry.container.getEntity(a)).getX(), o = s.getY()), t.setX(r), t.setY(o), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn();
                            "mouse" == a ? (r = l.x - t.getX(), o = l.y - t.getY()) : (r = (s = Entry.container.getEntity(a)).getX() - t.getX(), o = s.getY() - t.getY()), e.isStart = !0, e.frameCount = i, e.dX = r / e.frameCount, e.dY = o / e.frameCount
                        }
                        return 0 != e.frameCount ? (t.setX(t.getX() + e.dX), t.setY(t.getY() + e.dY), e.frameCount--, t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e) : (delete e.isStart, delete e.frameCount, e.callReturn())
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.move_to_for_sec(%2, %1)",
                            textParams: [{type: "Block", accept: "string"}, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "spritesWithMouse",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_MOVING,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.locate_object_time[1]"
                            }]
                        }]
                    }
                },
                rotate_relative: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string", defaultType: "angle"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "angle", params: ["90"]}, null], type: "rotate_relative"},
                    pyHelpDef: {params: [{type: "angle", params: ["A&value"]}], type: "rotate_relative"},
                    paramsKeyMap: {VALUE: 0},
                    class: "rotate",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setRotation(n + t.getRotation()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_rotation(%1)"]}
                },
                direction_relative: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", defaultType: "angle", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "angle", params: ["90"]}, null], type: "direction_relative"},
                    pyHelpDef: {params: [{type: "angle", params: ["A&value"]}, null], type: "direction_relative"},
                    paramsKeyMap: {VALUE: 0},
                    class: "rotate",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setDirection(n + t.getDirection()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.add_direction(%1)"]}
                },
                rotate_by_time: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Block",
                        defaultType: "angle",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "number", params: ["2"]}, {type: "angle", params: ["90"]}, null],
                        type: "rotate_by_time"
                    },
                    pyHelpDef: {
                        params: [{type: "number", params: ["B&value"]}, {
                            type: "angle",
                            params: ["A&value"]
                        }, null], type: "rotate_by_time"
                    },
                    paramsKeyMap: {VALUE: 0, ANGLE: 1},
                    class: "rotate",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!e.isStart) {
                            var n;
                            n = e.getNumberValue("VALUE", e);
                            var r = e.getNumberValue("ANGLE", e);
                            e.isStart = !0, e.frameCount = Math.max(Math.floor(n * Entry.FPS), 1), e.dAngle = r / e.frameCount, 1 == e.frameCount && o()
                        }
                        return 0 != e.frameCount ? (o(), e) : (delete e.isStart, delete e.frameCount, e.callReturn());

                        function o() {
                            t.setRotation(t.getRotation() + e.dAngle), e.frameCount--
                        }
                    },
                    syntax: {js: [], py: ["Entry.add_rotation_for_sec(%2, %1)"]}
                },
                direction_relative_duration: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Block",
                        defaultType: "angle",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "text", params: ["2"]}, {type: "angle", params: ["90"]}, null],
                        type: "direction_relative_duration"
                    },
                    pyHelpDef: {
                        params: [{type: "text", params: ["B&value"]}, {
                            type: "angle",
                            params: ["A&value"]
                        }, null], type: "direction_relative_duration"
                    },
                    paramsKeyMap: {DURATION: 0, AMOUNT: 1},
                    class: "rotate",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!e.isStart) {
                            var n;
                            n = e.getNumberValue("DURATION", e);
                            var r = e.getNumberValue("AMOUNT", e);
                            e.isStart = !0, e.frameCount = Math.max(Math.floor(n * Entry.FPS), 1), e.dDirection = r / e.frameCount, 1 == e.frameCount && o()
                        }
                        return 0 != e.frameCount ? (o(), e) : (delete e.isStart, delete e.frameCount, delete e.dDirection, e.callReturn());

                        function o() {
                            t.setDirection(t.getDirection() + e.dDirection), e.frameCount--
                        }
                    },
                    syntax: {js: [], py: ["Entry.add_direction_for_sec(%2, %1)"]}
                },
                rotate_absolute: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", defaultType: "angle", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "angle", params: ["90"]}, null], type: "rotate_absolute"},
                    pyHelpDef: {params: [{type: "angle", params: ["A&value"]}, null], type: "rotate_absolute"},
                    paramsKeyMap: {VALUE: 0},
                    class: "rotate_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setRotation(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_rotation(%1)"]}
                },
                direction_absolute: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", defaultType: "angle", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/moving_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "angle", params: ["90"]}, null], type: "direction_absolute"},
                    pyHelpDef: {params: [{type: "angle", params: ["A&value"]}, null], type: "direction_absolute"},
                    paramsKeyMap: {VALUE: 0},
                    class: "rotate_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e);
                        return t.setDirection(n), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.set_direction(%1)"]}
                },
                see_angle_object: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "spritesWithMouse",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_MOVING
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "see_angle_object"},
                    pyHelpDef: {params: ["A&value", null], type: "see_angle_object"},
                    paramsKeyMap: {VALUE: 0},
                    class: "rotate_absolute",
                    isNotFor: [],
                    func: function (t, e) {
                        var n, r, o, a = e.getField("VALUE", e), s = t.getX(), i = t.getY();
                        if (t.parent.id == a) return e.callReturn();
                        if ("mouse" == a) n = Entry.stage.mouseCoordinate.x - s, r = Entry.stage.mouseCoordinate.y - i; else {
                            var l = Entry.container.getEntity(a);
                            n = l.getX() - s, r = l.getY() - i
                        }
                        o = 0 === n && 0 === r ? t.getDirection() + t.getRotation() : n >= 0 ? -Math.atan(r / n) / Math.PI * 180 + 90 : -Math.atan(r / n) / Math.PI * 180 + 270;
                        var c = t.getDirection() + t.getRotation();
                        return t.setRotation(t.getRotation() + o - c), e.callReturn()
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.look_at(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "spritesWithMouse",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_MOVING,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.see_angle_object[0]"
                            }]
                        }]
                    }
                },
                move_to_angle: {
                    color: "#A751E3",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", defaultType: "angle", accept: "string"}, {
                        type: "Block",
                        accept: "string"
                    }, {type: "Indicator", img: "block_icon/moving_03.png", size: 12}],
                    events: {},
                    def: {
                        params: [{type: "angle", params: ["90"]}, {type: "number", params: ["10"]}, null],
                        type: "move_to_angle"
                    },
                    pyHelpDef: {
                        params: [{type: "angle", params: ["B&value"]}, {
                            type: "number",
                            params: ["A&value"]
                        }, null], type: "move_to_angle"
                    },
                    paramsKeyMap: {ANGLE: 0, VALUE: 1},
                    class: "move_rotate",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getNumberValue("VALUE", e), r = e.getNumberValue("ANGLE", e);
                        return t.setX(t.getX() + n * Math.cos((r - 90) / 180 * Math.PI)), t.setY(t.getY() - n * Math.sin((r - 90) / 180 * Math.PI)), t.brush && !t.brush.stop && t.brush.lineTo(t.getX(), -1 * t.getY()), e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.move_to_degree(%2, %1)"]}
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                wait_second: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/flow_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["2"]}, null], type: "wait_second"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "wait_second"},
                    paramsKeyMap: {SECOND: 0},
                    class: "delay",
                    isNotFor: [],
                    func: function (t, e) {
                        if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                        e.isStart = !0, e.timeFlag = 1;
                        var n = e.getNumberValue("SECOND", e);
                        return n = 60 / (Entry.FPS || 60) * n * 1e3, setTimeout(function () {
                            e.timeFlag = 0
                        }, n), e
                    },
                    syntax: {js: [], py: [{syntax: "Entry.wait_for_sec(%1)"}]}
                },
                repeat_basic: {
                    color: "#498deb",
                    skeleton: "basic_loop",
                    statements: [{accept: "basic"}],
                    params: [{type: "Block", accept: "string"}, {
                        type: "Indicator",
                        img: "block_icon/flow_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "number", params: ["10"]}, null], type: "repeat_basic"},
                    pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "repeat_basic"},
                    paramsKeyMap: {VALUE: 0},
                    statementsKeyMap: {DO: 0},
                    class: "repeat",
                    isNotFor: [],
                    func: function (t, e) {
                        if (!e.isLooped) {
                            var n;
                            if (e.isLooped = !0, (n = e.getNumberValue("VALUE", e)) < 0) throw new Error(Lang.Blocks.FLOW_repeat_basic_errorMsg);
                            e.iterCount = Math.floor(n)
                        }
                        return 0 == e.iterCount || e.iterCount < 0 ? (delete e.isLooped, delete e.iterCount, e.callReturn()) : (e.iterCount--, e.getStatement("DO", e))
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "for i in range(%1):\n$1",
                            template: "for i in range(%1):",
                            idChar: ["i", "j", "k"]
                        }]
                    }
                },
                repeat_inf: {
                    color: "#498deb",
                    skeleton: "basic_loop",
                    statements: [{accept: "basic"}],
                    params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}, {
                        type: "Block",
                        accept: "Boolean"
                    }],
                    events: {},
                    def: {params: [null], type: "repeat_inf"},
                    pyHelpDef: {params: [null, {type: "boolean_shell", params: ["A"]}], type: "repeat_inf"},
                    statementsKeyMap: {DO: 0},
                    class: "repeat",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.isLooped = !0, e.getStatement("DO")
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "while True:\n$1",
                            template: "while %2\n:",
                            textParams: [void 0, {type: "Block", accept: "boolean"}]
                        }]
                    }
                },
                repeat_while_true: {
                    color: "#498deb",
                    skeleton: "basic_loop",
                    statements: [{accept: "basic"}],
                    params: [{type: "Block", accept: "boolean"}, {
                        type: "Dropdown",
                        options: [[Lang.Blocks.FLOW_repeat_while_true_until, "until"], [Lang.Blocks.FLOW_repeat_while_true_while, "while"]],
                        value: "until",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_FLOW
                    }, {type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [{type: "True"}, null, null], type: "repeat_while_true"},
                    pyHelpDef: {
                        params: [{type: "boolean_shell", params: ["A"]}, null, null],
                        type: "repeat_while_true"
                    },
                    paramsKeyMap: {BOOL: 0, OPTION: 1},
                    statementsKeyMap: {DO: 0},
                    class: "repeat",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getBooleanValue("BOOL", e);
                        return "until" == e.getField("OPTION", e) && (n = !n), e.isLooped = n, n ? e.getStatement("DO", e) : e.callReturn()
                    },
                    syntax: {js: [], py: [{syntax: "while %1 %2:\n$1", template: "while not %1:"}]}
                },
                stop_repeat: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "stop_repeat"},
                    class: "repeat",
                    isNotFor: [],
                    func: function (t, e) {
                        return this.executor.breakLoop()
                    },
                    syntax: {js: [], py: ["break"]}
                },
                _if: {
                    color: "#498deb",
                    skeleton: "basic_loop",
                    statements: [{accept: "basic"}],
                    params: [{type: "Block", accept: "boolean"}, {
                        type: "Indicator",
                        img: "block_icon/flow_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "True"}, null], type: "_if"},
                    pyHelpDef: {params: [{type: "boolean_shell", params: ["A"]}, null], type: "_if"},
                    paramsKeyMap: {BOOL: 0},
                    statementsKeyMap: {STACK: 0},
                    class: "condition",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.isCondition ? (delete e.isCondition, e.callReturn()) : e.getBooleanValue("BOOL", e) ? (e.isCondition = !0, e.getStatement("STACK", e)) : e.callReturn()
                    },
                    syntax: {js: [], py: [{syntax: "if %1:\n$1", template: "if %1:"}]}
                },
                if_else: {
                    color: "#498deb",
                    skeleton: "basic_double_loop",
                    statements: [{accept: "basic"}, {accept: "basic"}],
                    params: [{type: "Block", accept: "boolean"}, {
                        type: "Indicator",
                        img: "block_icon/flow_03.png",
                        size: 12
                    }, {type: "LineBreak"}],
                    events: {},
                    def: {params: [{type: "True"}, null], type: "if_else"},
                    pyHelpDef: {params: [{type: "boolean_shell", params: ["A"]}, null], type: "if_else"},
                    paramsKeyMap: {BOOL: 0},
                    statementsKeyMap: {STACK_IF: 0, STACK_ELSE: 1},
                    class: "condition",
                    isNotFor: [],
                    func: function (t, e) {
                        if (e.isCondition) return delete e.isCondition, e.callReturn();
                        var n = e.getBooleanValue("BOOL", e);
                        return e.isCondition = !0, n ? e.getStatement("STACK_IF", e) : e.getStatement("STACK_ELSE", e)
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "if %1:\n$1\nelse:\n$2",
                            template: "if %1: %3 else:",
                            textParams: [{type: "Block", accept: "boolean"}, void 0, {type: "LineBreak"}]
                        }]
                    }
                },
                wait_until_true: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Block", accept: "boolean"}, {
                        type: "Indicator",
                        img: "block_icon/flow_03.png",
                        size: 12
                    }],
                    events: {},
                    def: {params: [{type: "True"}, null], type: "wait_until_true"},
                    pyHelpDef: {params: [{type: "boolean_shell", params: ["A"]}, null], type: "wait_until_true"},
                    paramsKeyMap: {BOOL: 0},
                    class: "wait",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.getBooleanValue("BOOL", e) ? e.callReturn() : e
                    },
                    syntax: {js: [], py: ["Entry.wait_until(%1)"]}
                },
                stop_object: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.FLOW_stop_object_all, "all"], [Lang.Blocks.FLOW_stop_object_this_object, "thisOnly"], [Lang.Blocks.FLOW_stop_object_this_thread, "thisThread"], [Lang.Blocks.FLOW_stop_object_other_thread, "otherThread"], [Lang.Blocks.FLOW_stop_object_other_objects, "other_objects"]],
                        value: "all",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_FLOW
                    }, {type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "stop_object"},
                    pyHelpDef: {params: ["A&value", null], type: "stop_object"},
                    paramsKeyMap: {TARGET: 0},
                    class: "terminate",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = t.parent;
                        switch (e.getField("TARGET", e)) {
                            case"all":
                                return Entry.container.mapObject(function (t) {
                                    t.objectType && t.script.clearExecutors()
                                }), this.die();
                            case"thisOnly":
                                return n.script.clearExecutorsByEntity(t), this.die();
                            case"thisObject":
                                return n.script.clearExecutors(), this.die();
                            case"thisThread":
                                return this.die();
                            case"otherThread":
                                for (var r = this.executor, o = n.script, a = o.executors, s = t.id, i = 0; i < a.length; i++) {
                                    var l = a[i];
                                    l !== r && l.entity.id === s && (o.removeExecutor(l), --i)
                                }
                                return e.callReturn();
                            case"other_objects":
                                return Entry.container.mapObject(function (t) {
                                    t.objectType && t !== n && t.script.clearExecutors()
                                }), e.callReturn()
                        }
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.stop_code(%1)",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.FLOW_stop_object_all, "all"], [Lang.Blocks.FLOW_stop_object_this_object, "thisOnly"], [Lang.Blocks.FLOW_stop_object_this_thread, "thisThread"], [Lang.Blocks.FLOW_stop_object_other_thread, "otherThread"], [Lang.Blocks.FLOW_stop_object_other_objects, "other_objects"]],
                                value: "all",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_FLOW,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.stop_object[0]"
                            }]
                        }]
                    }
                },
                restart_project: {
                    color: "#498deb",
                    skeleton: "basic_without_next",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "restart_project"},
                    class: "terminate",
                    isNotFor: [],
                    func: function (t, e) {
                        Entry.engine.toggleStop(), Entry.engine.toggleRun()
                    },
                    syntax: {js: [], py: ["Entry.start_again()"]}
                },
                when_clone_start: {
                    color: "#498deb",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_clone.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "when_clone_start"},
                    class: "clone",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "when_clone_start",
                    syntax: {js: [], py: [{syntax: "def when_make_clone():", blockType: "event"}]}
                },
                create_clone: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "clone",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_FLOW
                    }, {type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "create_clone"},
                    pyHelpDef: {params: ["A&value", null], type: "create_clone"},
                    paramsKeyMap: {VALUE: 0},
                    class: "clone",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e), r = e.callReturn();
                        return "self" == n ? t.parent.addCloneEntity(t.parent, t, null) : Entry.container.getObject(n).addCloneEntity(t.parent, null, null), r
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.make_clone_of(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "clone",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_FLOW,
                                converter: Entry.block.converters.returnStringKey,
                                codeMap: "Entry.CodeMap.Entry.create_clone[0]"
                            }]
                        }]
                    }
                },
                delete_clone: {
                    color: "#498deb",
                    skeleton: "basic_without_next",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "delete_clone"},
                    class: "clone",
                    isNotFor: [],
                    func: function (t, e) {
                        return t.isClone ? (t.removeClone(), this.die()) : e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.remove_this_clone()"]}
                },
                remove_all_clones: {
                    color: "#498deb",
                    skeleton: "basic",
                    statements: [],
                    params: [{type: "Indicator", img: "block_icon/flow_03.png", size: 12}],
                    events: {},
                    def: {params: [null], type: "remove_all_clones"},
                    class: "clone",
                    isNotFor: [],
                    func: function (t, e) {
                        var n = t.parent.getClonedEntities();
                        return n.map(function (t) {
                            t.removeClone()
                        }), n = null, e.callReturn()
                    },
                    syntax: {js: [], py: ["Entry.remove_all_clone()"]}
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    t.exports = {
        getBlocks: function () {
            return {
                when_run_button_click: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_play.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "when_run_button_click"},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "start",
                    syntax: {js: [], py: [{syntax: "def when_start():", blockType: "event"}]}
                },
                when_some_key_pressed: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_keyboard.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }, {type: "Keyboard", value: "81"}],
                    events: {},
                    def: {params: [null, "81"], type: "when_some_key_pressed"},
                    pyHelpDef: {params: [null, "A&value"], type: "when_some_key_pressed"},
                    paramsKeyMap: {VALUE: 1},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "keyPress",
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "def when_press_key(%2):",
                            passTest: !0,
                            blockType: "event",
                            textParams: [void 0, {
                                type: "Keyboard",
                                value: "81",
                                converter: Entry.block.converters.keyboardCode1
                            }]
                        }]
                    }
                },
                mouse_clicked: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_mouse.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "mouse_clicked"},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "mouse_clicked",
                    syntax: {js: [], py: [{syntax: "def when_click_mouse_on():", blockType: "event"}]}
                },
                mouse_click_cancled: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_mouse.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "mouse_click_cancled"},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "mouse_click_cancled",
                    syntax: {js: [], py: [{syntax: "def when_click_mouse_off():", blockType: "event"}]}
                },
                when_object_click: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_mouse.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "when_object_click"},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "when_object_click",
                    syntax: {js: [], py: [{syntax: "def when_click_object_on():", blockType: "event"}]}
                },
                when_object_click_canceled: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_mouse.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "when_object_click_canceled"},
                    class: "event",
                    isNotFor: [],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "when_object_click_canceled",
                    syntax: {js: [], py: [{syntax: "def when_click_object_off():", blockType: "event"}]}
                },
                when_message_cast: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_signal.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }, {
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "messages",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_START
                    }],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_messageRefs", t)
                        }], viewDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_messageRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "when_message_cast"},
                    pyHelpDef: {params: [null, "A&value"], type: "when_message_cast"},
                    paramsKeyMap: {VALUE: 1},
                    class: "message",
                    isNotFor: ["message"],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "when_message_cast",
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "def when_get_signal(%2):",
                            blockType: "event",
                            passTest: !0,
                            textParams: [void 0, {
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "messages",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_START,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                message_cast: {
                    color: "#3BBD70",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "messages",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_START
                    }, {type: "Indicator", img: "block_icon/start_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_messageRefs", t)
                        }], viewDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_messageRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "message_cast"},
                    pyHelpDef: {params: ["A&value", null], type: "message_cast"},
                    paramsKeyMap: {VALUE: 0},
                    class: "message",
                    isNotFor: ["message"],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e), r = Entry.variableContainer.messages_,
                            o = Entry.isExist(n, "id", r);
                        if ("null" == n || !o) throw new Error("value can not be null or undefined");
                        setTimeout(function () {
                            Entry.engine.raiseMessage(n)
                        })
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.send_signal(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "messages",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_START,
                                converter: Entry.block.converters.returnStringKey,
                                paramType: "signal"
                            }, void 0]
                        }]
                    }
                },
                message_cast_wait: {
                    color: "#3BBD70",
                    skeleton: "basic",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "messages",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_START
                    }, {type: "Indicator", img: "block_icon/start_03.png", size: 12}],
                    events: {
                        dataAdd: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.addRef("_messageRefs", t)
                        }], dataDestroy: [function (t) {
                            var e = Entry.variableContainer;
                            e && e.removeRef("_messageRefs", t)
                        }]
                    },
                    def: {params: [null, null], type: "message_cast_wait"},
                    pyHelpDef: {params: ["A&value", null], type: "message_cast_wait"},
                    paramsKeyMap: {VALUE: 0},
                    class: "message",
                    isNotFor: ["message"],
                    func: function (t, e) {
                        if (e.runningScript) {
                            for (var n = (l = e.runningScript).length, r = 0; r < n; r++) (c = l.shift()) && !c.isEnd() && l.push(c);
                            return l.length ? e : e.callReturn()
                        }
                        var o = e.getField("VALUE", e), a = Entry.variableContainer.messages_,
                            s = Entry.isExist(o, "id", a);
                        if ("null" == o || !s) throw new Error("value can not be null or undefined");
                        for (var i = Entry.engine.raiseMessage(o), l = []; i.length;) {
                            var c;
                            (c = i.shift()) && (l = l.concat(c))
                        }
                        return e.runningScript = l, e
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.send_signal_wait(%1)",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "messages",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_START,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                when_scene_start: {
                    color: "#3BBD70",
                    skeleton: "basic_event",
                    statements: [],
                    params: [{
                        type: "Indicator",
                        img: "block_icon/start_icon_scene_1_2.png",
                        size: 17,
                        position: {x: 0, y: -2}
                    }],
                    events: {},
                    def: {params: [null], type: "when_scene_start"},
                    class: "scene",
                    isNotFor: ["scene"],
                    func: function (t, e) {
                        return e.callReturn()
                    },
                    event: "when_scene_start",
                    syntax: {js: [], py: [{syntax: "def when_start_scene():", blockType: "event"}]}
                },
                start_scene: {
                    color: "#3BBD70",
                    skeleton: "basic_without_next",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "scenes",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_START
                    }, {type: "Indicator", img: "block_icon/start_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "start_scene"},
                    pyHelpDef: {params: ["A&value", null], type: "start_scene"},
                    paramsKeyMap: {VALUE: 0},
                    class: "scene",
                    isNotFor: ["scene"],
                    func: function (t, e) {
                        var n = e.getField("VALUE", e), r = Entry.scene.getSceneById(n);
                        return r && (Entry.scene.selectScene(r), Entry.engine.fireEvent("when_scene_start")), null
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.start_scene(%1)",
                            blockType: "last",
                            textParams: [{
                                type: "DropdownDynamic",
                                value: null,
                                menuName: "scenes",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_START,
                                converter: Entry.block.converters.returnStringKey
                            }]
                        }]
                    }
                },
                start_neighbor_scene: {
                    color: "#3BBD70",
                    skeleton: "basic_without_next",
                    statements: [],
                    params: [{
                        type: "Dropdown",
                        options: [[Lang.Blocks.SCENE_start_scene_next, "next"], [Lang.Blocks.SCENE_start_scene_pre, "pre"]],
                        value: "next",
                        fontSize: 11,
                        arrowColor: EntryStatic.ARROW_COLOR_START
                    }, {type: "Indicator", img: "block_icon/start_03.png", size: 12}],
                    events: {},
                    def: {params: [null, null], type: "start_neighbor_scene"},
                    pyHelpDef: {params: ["A&value", null], type: "start_neighbor_scene"},
                    paramsKeyMap: {OPERATOR: 0},
                    class: "scene",
                    isNotFor: ["scene"],
                    func: function (t, e) {
                        var n, r = Entry.scene.selectedScene, o = Entry.scene.getScenes(), a = o.indexOf(r);
                        return "next" == e.getField("OPERATOR", e) ? a + 1 < o.length && (n = Entry.scene.getSceneById(o[a + 1].id)) && (Entry.scene.selectScene(n), Entry.engine.fireEvent("when_scene_start")) : a > 0 && (n = Entry.scene.getSceneById(o[a - 1].id)) && (Entry.scene.selectScene(n), Entry.engine.fireEvent("when_scene_start")), null
                    },
                    syntax: {
                        js: [],
                        py: [{
                            syntax: "Entry.start_scene_of(%1)",
                            blockType: "last",
                            textParams: [{
                                type: "Dropdown",
                                options: [[Lang.Blocks.SCENE_start_scene_next, "next"], [Lang.Blocks.SCENE_start_scene_pre, "pre"]],
                                value: "next",
                                fontSize: 11,
                                arrowColor: EntryStatic.ARROW_COLOR_START,
                                converter: Entry.block.converters.returnStringValue,
                                codeMap: "Entry.CodeMap.Entry.start_neighbor_scene[0]"
                            }]
                        }]
                    }
                },
                check_object_property: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "%1 가 %2 %3 %4 %5 %6",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "sprites",
                        fontSize: 11
                    }, {
                        type: "Dropdown",
                        options: [["언젠가", 0], ["지금", 1]],
                        value: "0",
                        fontSize: 11
                    }, {
                        type: "Dropdown",
                        options: [["x", "x"], ["y", "y"], ["크기", "size"], ["방향", "rotation"], ["이동 방향", "direction"], ["텍스트", "text"]],
                        value: "x",
                        fontSize: 11
                    }, {
                        type: "Dropdown",
                        options: [["=", "EQUAL"], [">", "GREATER"], ["<", "LESS"], ["≥", "GREATER_OR_EQUAL"], ["≤", "LESS_OR_EQUAL"]],
                        value: "EQUAL",
                        fontSize: 11,
                        noArrow: !0
                    }, {type: "Block", accept: "string"}, {type: "Indicator", color: "#6B6B6B", size: 12}],
                    events: {},
                    def: {params: [null], type: "check_object_property"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        var n = Entry.container.getObject(this.block.params[0]), r = this.block.params[1],
                            o = this.block.params[2], a = this.getParam(4);
                        o = o[0].toUpperCase() + o.substr(1);
                        var s, i = n.entity["get" + o].call(n.entity);
                        switch (this.block.params[3]) {
                            case"EQUAL":
                                s = i == a;
                                break;
                            case"GREATER":
                                s = Number(i) > Number(a);
                                break;
                            case"LESS":
                                s = Number(i) < Number(a);
                                break;
                            case"GREATER_OR_EQUAL":
                                s = Number(i) >= Number(a);
                                break;
                            case"LESS_OR_EQUAL":
                                s = Number(i) <= Number(a)
                        }
                        if (!s) return 0 == r ? Entry.STATIC.BREAK : void this.die()
                    }
                },
                check_block_execution: {
                    color: "#7C7C7C",
                    skeleton: "basic_loop",
                    template: "%1 에서 아래 블록이 %2 %3 번 실행되었는가 %4",
                    statements: [{accept: "basic"}],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "sprites",
                        fontSize: 11
                    }, {
                        type: "Dropdown",
                        options: [["비슷하게", 0], ["똑같이", 1]],
                        value: "16",
                        fontSize: 11
                    }, {type: "TextInput", value: 1}, {type: "Indicator", color: "#6B6B6B", size: 12}],
                    events: {},
                    def: {params: [null, 0], type: "check_block_execution"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        if (this.listener) return 0 === this.remainCheck ? void this.listener.destroy() : Entry.STATIC.BREAK;
                        var n = Entry.container.getObject(this.block.params[0]).script, r = this.block.params[1],
                            o = this.block.statements[0].getBlocks(), a = null;
                        this.remainCheck = Number(this.block.params[2]);
                        var s = 0;
                        return this.listener = n.watchEvent.attach(this, function (t) {
                            t = t.concat();
                            for (var e, n = !0; t.length && s < o.length;) e = t.shift(), n && e === a || (0 === r && o[s].type === e.type ? s++ : 1 === r && o[s].isSameParamWith(e) ? s++ : s = 0, n = !1);
                            a = e, s === o.length && (this.remainCheck = this.remainCheck - 1, s = 0)
                        }), Entry.STATIC.BREAK
                    }
                },
                switch_scope: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "%1 오브젝트 기준으로 실행하기 %2",
                    statements: [],
                    params: [{
                        type: "DropdownDynamic",
                        value: null,
                        menuName: "sprites",
                        fontSize: 11
                    }, {type: "Indicator", color: "#6B6B6B", size: 12}],
                    events: {},
                    def: {params: [null], type: "switch_scope"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        var n = Entry.container.getObject(this.block.params[0]);
                        this.executor.entity = n.entity
                    }
                },
                is_answer_submited: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "대답을 입력 받을때 까지 기다리기 %1",
                    statements: [],
                    params: [{type: "Indicator", color: "#6B6B6B", size: 12}],
                    events: {},
                    def: {params: [null], type: "is_answer_submited"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        if (!this.isSubmitted) {
                            if (!1 === this.isSubmitted) return Entry.STATIC.BREAK;
                            var n = function () {
                                r.isSubmitted = !0
                            };
                            this.isSubmitted = !1;
                            var r = this;
                            return Entry.addEventListener("answerSubmitted", n), Entry.STATIC.BREAK
                        }
                        Entry.removeEventListener("answerSubmitted", n)
                    }
                },
                check_lecture_goal: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "목표 %1 %2 ( %3 ) %4",
                    statements: [],
                    params: [{type: "TextInput", value: 0}, {
                        type: "Dropdown",
                        options: [["달성", 1], ["실패", 0]],
                        fontSize: 11
                    }, {type: "Dropdown", options: [["공식", 1], ["비공식", 0]], value: 1, fontSize: 11}, {
                        type: "Indicator",
                        color: "#6B6B6B",
                        size: 12
                    }],
                    events: {
                        dataAdd: [function (t) {
                            Entry.registerAchievement(t)
                        }]
                    },
                    def: {params: [0, 1, 1], type: "check_lecture_goal"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        Entry.targetChecker.achieveCheck(this.block.params[1], this.block.params[0] + "")
                    }
                },
                check_variable_by_name: {
                    color: "#7C7C7C",
                    skeleton: "basic_string_field",
                    template: "%1 이름의 변수",
                    statements: [],
                    params: [{type: "TextInput", value: "?"}],
                    events: {},
                    def: {params: ["변수"], type: "check_variable_by_name"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        var n = this.block.params[0] + "", r = Entry.variableContainer.getVariableByName(n);
                        return r ? r.getValue() : void 0
                    }
                },
                show_prompt: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "%1 안내하기 %2",
                    statements: [],
                    params: [{type: "TextInput", value: ""}, {type: "Indicator", color: "#6B6B6B", size: 12}],
                    events: {},
                    def: {params: [" "], type: "show_prompt"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        Entry.targetChecker && Entry.targetChecker.showStatusMessage(this.block.params[0])
                    }
                },
                check_goal_success: {
                    color: "#7C7C7C",
                    skeleton: "basic_boolean_field",
                    template: "목표 %1 이 성공?",
                    statements: [],
                    params: [{type: "TextInput", value: ""}],
                    events: {},
                    def: {params: ["0"], type: "check_goal_success"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        var n = this.block.params[0] + "";
                        return Entry.targetChecker.checkGoal(n)
                    }
                },
                wildcard_string: {
                    color: "#7C7C7C",
                    skeleton: "basic_string_field",
                    template: "    *    ",
                    fontColor: "#fff",
                    statements: [],
                    params: [],
                    events: {},
                    def: {params: [], type: "wildcard_string"},
                    paramsKeyMap: {VALUE: 0},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                    }
                },
                wildcard_boolean: {
                    color: "#7C7C7C",
                    skeleton: "basic_boolean_field",
                    template: "    *    ",
                    fontColor: "#fff",
                    statements: [],
                    params: [],
                    events: {},
                    def: {params: [], type: "wildcard_boolean"},
                    paramsKeyMap: {},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                    }
                },
                register_score: {
                    color: "#7C7C7C",
                    skeleton: "basic",
                    template: "%1를 %2로 정하기 %3",
                    statements: [],
                    params: [{type: "TextInput", value: "score"}, {type: "TextInput", value: "1"}, {
                        type: "Indicator",
                        color: "#6B6B6B",
                        size: 12
                    }],
                    events: {},
                    def: {params: ["score", 1], type: "register_score"},
                    class: "checker",
                    isNotFor: ["checker"],
                    func: function (t, e) {
                        var n = {};
                        return n[this.block.params[0]] = this.block.params[1], "undefined" != typeof entrylms && entrylms.emit("registerScore", n), e.callReturn()
                    }
                }
            }
        }
    }
}, function (t, e) {
    t.exports = function () {
        return !1
    }
}, function (t, e) {
    t.exports = function (t) {
        return t
    }
}, function (t, e) {
    t.exports = function (t, e, n) {
        switch (n.length) {
            case 0:
                return t.call(e);
            case 1:
                return t.call(e, n[0]);
            case 2:
                return t.call(e, n[0], n[1]);
            case 3:
                return t.call(e, n[0], n[1], n[2])
        }
        return t.apply(e, n)
    }
}, function (t, e, n) {
    var r = n(258), o = Math.max;
    t.exports = function (t, e, n) {
        return e = o(void 0 === e ? t.length - 1 : e, 0), function () {
            for (var a = arguments, s = -1, i = o(a.length - e, 0), l = Array(i); ++s < i;) l[s] = a[e + s];
            s = -1;
            for (var c = Array(e + 1); ++s < e;) c[s] = a[s];
            return c[e] = n(l), r(t, this, c)
        }
    }
}, function (t, e) {
    t.exports = function (t) {
        return t
    }
}, function (t, e, n) {
    var r = n(260), o = n(259), a = n(257);
    t.exports = function (t, e) {
        return a(o(t, e, r), t + "")
    }
}, function (t, e, n) {
    var r = n(261), o = n(256);
    t.exports = function (t) {
        return r(function (e, n) {
            var r = -1, a = n.length, s = a > 1 ? n[a - 1] : void 0, i = a > 2 ? n[2] : void 0;
            for (s = t.length > 3 && "function" == typeof s ? (a--, s) : void 0, i && o(n[0], n[1], i) && (s = a < 3 ? void 0 : s, a = 1), e = Object(e); ++r < a;) {
                var l = n[r];
                l && t(e, l, r, s)
            }
            return e
        })
    }
}, function (t, e, n) {
    var r = n(79), o = n(37);
    t.exports = function (t, e, n, a) {
        var s = !n;
        n || (n = {});
        for (var i = -1, l = e.length; ++i < l;) {
            var c = e[i], u = a ? a(n[c], t[c], c, n, t) : void 0;
            void 0 === u && (u = t[c]), s ? o(n, c, u) : r(n, c, u)
        }
        return n
    }
}, function (t, e, n) {
    var r = n(263), o = n(70);
    t.exports = function (t) {
        return r(t, o(t))
    }
}, function (t, e) {
    t.exports = function () {
        return !1
    }
}, function (t, e, n) {
    var r = n(73), o = n(75), a = n(72), s = Function.prototype, i = Object.prototype, l = s.toString,
        c = i.hasOwnProperty, u = l.call(Object);
    t.exports = function (t) {
        if (!a(t) || "[object Object]" != r(t)) return !1;
        var e = o(t);
        if (null === e) return !0;
        var n = c.call(e, "constructor") && e.constructor;
        return "function" == typeof n && n instanceof n && l.call(n) == u
    }
}, function (t, e) {
    t.exports = function () {
        return !1
    }
}, function (t, e) {
    t.exports = function (t) {
        return "number" == typeof t && t > -1 && t % 1 == 0 && t <= 9007199254740991
    }
}, function (t, e, n) {
    var r = n(74), o = n(268);
    t.exports = function (t) {
        return null != t && o(t.length) && !r(t)
    }
}, function (t, e, n) {
    var r = n(269), o = n(72);
    t.exports = function (t) {
        return o(t) && r(t)
    }
}, function (t, e) {
    t.exports = function () {
        return !1
    }
}, function (t, e) {
    t.exports = function () {
        return !1
    }
}, function (t, e) {
    t.exports = function (t, e) {
        return function (n) {
            return t(e(n))
        }
    }
}, function (t, e, n) {
    var r = n(18), o = Object.create, a = function () {
        function t() {
        }

        return function (e) {
            if (!r(e)) return {};
            if (o) return o(e);
            t.prototype = e;
            var n = new t;
            return t.prototype = void 0, n
        }
    }();
    t.exports = a
}, function (t, e, n) {
    var r = n(274), o = n(75), a = n(272);
    t.exports = function (t) {
        return "function" != typeof t.constructor || a(t) ? {} : r(o(t))
    }
}, function (t, e) {
    t.exports = function (t, e) {
        var n = -1, r = t.length;
        for (e || (e = Array(r)); ++n < r;) e[n] = t[n];
        return e
    }
}, function (t, e, n) {
    var r = n(76).Uint8Array;
    t.exports = r
}, function (t, e, n) {
    var r = n(277);
    t.exports = function (t) {
        var e = new t.constructor(t.byteLength);
        return new r(e).set(new r(t)), e
    }
}, function (t, e, n) {
    var r = n(278);
    t.exports = function (t, e) {
        var n = e ? r(t.buffer) : t.buffer;
        return new t.constructor(n, t.byteOffset, t.length)
    }
}, function (t, e, n) {
    (function (e) {
        var n = "object" == typeof e && e && e.Object === Object && e;
        t.exports = n
    }).call(this, n(49))
}, function (t, e) {
    t.exports = function (t) {
        return t.webpackPolyfill || (t.deprecate = function () {
        }, t.paths = [], t.children || (t.children = []), Object.defineProperty(t, "loaded", {
            enumerable: !0,
            get: function () {
                return t.l
            }
        }), Object.defineProperty(t, "id", {
            enumerable: !0, get: function () {
                return t.i
            }
        }), t.webpackPolyfill = 1), t
    }
}, function (t, e, n) {
    (function (t) {
        var r = n(76), o = "object" == typeof e && e && !e.nodeType && e,
            a = o && "object" == typeof t && t && !t.nodeType && t, s = a && a.exports === o ? r.Buffer : void 0,
            i = s ? s.allocUnsafe : void 0;
        t.exports = function (t, e) {
            if (e) return t.slice();
            var n = t.length, r = i ? i(n) : new t.constructor(n);
            return t.copy(r), r
        }
    }).call(this, n(281)(t))
}, function (t, e, n) {
    var r = n(77), o = n(282), a = n(279), s = n(276), i = n(275), l = n(271), c = n(78), u = n(270), p = n(267),
        _ = n(74), d = n(18), y = n(266), g = n(265), h = n(71), m = n(264);
    t.exports = function (t, e, n, b, f, E, v) {
        var k = h(t, n), T = h(e, n), w = v.get(T);
        if (w) r(t, n, w); else {
            var B = E ? E(k, T, n + "", t, e, v) : void 0, L = void 0 === B;
            if (L) {
                var R = c(T), S = !R && p(T), C = !R && !S && g(T);
                B = T, R || S || C ? c(k) ? B = k : u(k) ? B = s(k) : S ? (L = !1, B = o(T, !0)) : C ? (L = !1, B = a(T, !0)) : B = [] : y(T) || l(T) ? (B = k, l(k) ? B = m(k) : (!d(k) || b && _(k)) && (B = i(T))) : L = !1
            }
            L && (v.set(T, B), f(B, T, b, E, v), v.delete(T)), r(t, n, B)
        }
    }
}, function (t, e) {
    t.exports = function (t) {
        return function (e, n, r) {
            for (var o = -1, a = Object(e), s = r(e), i = s.length; i--;) {
                var l = s[t ? i : ++o];
                if (!1 === n(a[l], l, a)) break
            }
            return e
        }
    }
}, function (t, e, n) {
    var r = n(284)();
    t.exports = r
}, function (t, e, n) {
    var r = n(27);
    t.exports = function (t, e) {
        var n = this.__data__, o = r(n, t);
        return o < 0 ? (++this.size, n.push([t, e])) : n[o][1] = e, this
    }
}, function (t, e, n) {
    var r = n(27);
    t.exports = function (t) {
        return r(this.__data__, t) > -1
    }
}, function (t, e, n) {
    var r = n(27);
    t.exports = function (t) {
        var e = this.__data__, n = r(e, t);
        return n < 0 ? void 0 : e[n][1]
    }
}, function (t, e, n) {
    var r = n(27), o = Array.prototype.splice;
    t.exports = function (t) {
        var e = this.__data__, n = r(e, t);
        return !(n < 0 || (n == e.length - 1 ? e.pop() : o.call(e, n, 1), --this.size, 0))
    }
}, function (t, e) {
    t.exports = function () {
        this.__data__ = [], this.size = 0
    }
}, function (t, e, n) {
    var r = n(290), o = n(289), a = n(288), s = n(287), i = n(286);

    function l(t) {
        var e = -1, n = null == t ? 0 : t.length;
        for (this.clear(); ++e < n;) {
            var r = t[e];
            this.set(r[0], r[1])
        }
    }

    l.prototype.clear = r, l.prototype.delete = o, l.prototype.get = a, l.prototype.has = s, l.prototype.set = i, t.exports = l
}, function (t, e, n) {
    var r = n(291), o = n(77), a = n(285), s = n(283), i = n(18), l = n(70), c = n(71);
    t.exports = function t(e, n, u, p, _) {
        e !== n && a(n, function (a, l) {
            if (i(a)) _ || (_ = new r), s(e, n, l, u, t, p, _); else {
                var d = p ? p(c(e, l), a, l + "", e, n, _) : void 0;
                void 0 === d && (d = a), o(e, l, d)
            }
        }, l)
    }
}, function (t, e, n) {
    var r = n(292), o = n(262)(function (t, e, n) {
        r(t, e, n)
    });
    t.exports = o
}, function (t, e) {
    t.exports = function (t, e) {
        return null == t ? void 0 : t[e]
    }
}, function (t, e, n) {
    var r = n(294);
    t.exports = function (t, e, n) {
        var o = null == t ? void 0 : r(t, e);
        return void 0 === o ? n : o
    }
}, function (t, e) {
    t.exports = function (t) {
        return t
    }
}, function (t, e) {
    var n = /^(?:0|[1-9]\d*)$/;
    t.exports = function (t, e) {
        var r = typeof t;
        return !!(e = null == e ? 9007199254740991 : e) && ("number" == r || "symbol" != r && n.test(t)) && t > -1 && t % 1 == 0 && t < e
    }
}, function (t, e, n) {
    var r = n(78);
    t.exports = function () {
        if (!arguments.length) return [];
        var t = arguments[0];
        return r(t) ? t : [t]
    }
}, function (t, e) {
    t.exports = function (t, e) {
        return null == t ? void 0 : t[e]
    }
}, function (t, e, n) {
    var r = n(299), o = function () {
        try {
            var t = r(Object, "defineProperty");
            return t({}, "", {}), t
        } catch (t) {
        }
    }();
    t.exports = o
}, function (t, e, n) {
    var r = n(79), o = n(298), a = n(297), s = n(18), i = n(296);
    t.exports = function (t, e, n, l) {
        if (!s(t)) return t;
        for (var c = -1, u = (e = o(e, t)).length, p = u - 1, _ = t; null != _ && ++c < u;) {
            var d = i(e[c]), y = n;
            if (c != p) {
                var g = _[d];
                void 0 === (y = l ? l(g, d, _) : void 0) && (y = s(g) ? g : a(e[c + 1]) ? [] : {})
            }
            r(_, d, y), _ = _[d]
        }
        return t
    }
}, function (t, e, n) {
    var r = n(301);
    t.exports = function (t, e, n) {
        return null == t ? t : r(t, e, n)
    }
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r, o = (r = n(38)) && r.__esModule ? r : {default: r};
    e.default = function () {
        function t(t, e) {
            for (var n = 0; n < e.length; n++) {
                var r = e[n];
                r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), (0, o.default)(t, r.key, r)
            }
        }

        return function (e, n, r) {
            return n && t(e.prototype, n), r && t(e, r), e
        }
    }()
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0, e.default = function (t, e) {
        if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function")
    }
}, function (t, e, n) {
    var r = n(6);
    r(r.S + r.F * !n(9), "Object", {defineProperty: n(7).f})
}, function (t, e, n) {
    n(305);
    var r = n(1).Object;
    t.exports = function (t, e, n) {
        return r.defineProperty(t, e, n)
    }
}, function (t, e, n) {
    "use strict";
    e.__esModule = !0;
    var r, o = (r = n(38)) && r.__esModule ? r : {default: r};
    e.default = function (t, e, n) {
        return e in t ? (0, o.default)(t, e, {value: n, enumerable: !0, configurable: !0, writable: !0}) : t[e] = n, t
    }
}, function (t, e, n) {
    "use strict";
    var r = l(n(3)), o = l(n(0)), a = l(n(307)), s = l(n(304)), i = l(n(303));

    function l(t) {
        return t && t.__esModule ? t : {default: t}
    }

    var c = n(302), u = n(295), p = n(293);
    Entry.Microbit = new (function () {
        function t() {
            (0, s.default)(this, t), this.url = "http://microbit.org/ko/", this.imageName = "microbit.png", this.title = {
                en: "Microbit",
                ko: "마이크로빗"
            }, this.name = "microbit", this.blockIds = {}, this.isExecBlock = !1, this.cacheValues = [], this.cacheIndex = 0, this.radioTime = 0
        }

        return (0, i.default)(t, [{
            key: "getHashKey", value: function () {
                var t = (new Date).getSeconds().toString(16);
                return 1 === t.length && (t += (16 * Math.random() | 0).toString(16)), Entry.generateHash() + t
            }
        }, {
            key: "setZero", value: function () {
                Entry.hw.sendQueue = (0, a.default)({}, this.getHashKey(), {type: "RST"}), Entry.hw.update(), this.blockIds = {}, this.isExecBlock = !1, this.execTimeFlag = !1, this.radioTime = 0
            }
        }, {
            key: "sendMessage", value: function (t) {
                var e = t.socket, n = t.sendQueue, a = void 0 === n ? {} : n;
                if (!_.isEmpty(a)) {
                    var s = (0, o.default)(a), i = this.getHashKey();
                    e.emit("message", {data: (0, r.default)(a), mode: e.mode, type: "utf8", key: i}, function (t) {
                        t === i && s.forEach(function (t) {
                            delete a[t]
                        })
                    })
                }
            }
        }, {
            key: "asyncFlowControl", value: function (t, e) {
                t.script;
                var n = t.data;
                if (!this.isExecBlock && !e.isStart) {
                    var r = this.getHashKey();
                    return this.isExecBlock = !0, e.isStart = !0, e.timeFlag = 1, this.nowBlockId = r, this.blockIds[r] = !1, p(Entry.hw.sendQueue, (0, a.default)({}, r, n)), Entry.hw.update(), setTimeout(function () {
                        e.timeFlag = 0
                    }), !1
                }
                return !(!this.blockIds[this.nowBlockId] || 0 !== e.timeFlag || (delete this.blockIds[this.nowBlockId], delete e.isStart, this.execTimeFlag = 0, this.execTimeFlag = void 0, this.isExecBlock = !1, Entry.engine.isContinue = !1, 0))
            }
        }, {
            key: "postCallReturn", value: function (t) {
                var e = t.script;
                if (!this.asyncFlowControl(t, e)) return Entry.STATIC.BREAK
            }
        }, {
            key: "checkValue", value: function (t) {
                var e = t.script, n = t.key, r = (e.entity, e.executor.scope), o = r.cacheValue,
                    a = u(void 0 === o ? {} : o, n);
                if (a) return a;
                if (!this.asyncFlowControl(t, r)) throw new Entry.Utils.AsyncError
            }
        }, {
            key: "afterSend", value: function (t) {
            }
        }, {
            key: "afterReceive", value: function (t) {
                var e = t.blockId, n = void 0 === e ? "" : e, r = t.RADIO;
                n in this.blockIds ? this.blockIds[n] = !0 : r && Entry.engine.isState("run") && r.time > this.radioTime && (this.radioTime = r.time, Entry.engine.fireEvent("MicrobitRadioReceive"))
            }
        }]), t
    }()), Entry.Microbit.getBlocks = function () {
        return {
            microbit_led_toggle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "LED의 X:%1 Y:%2 %3 %4",
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"], ["반전", "toggle"]],
                    value: "on",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                class: "MicrobitLed",
                isNotFor: ["microbit"],
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["0"]}],
                    type: "microbit_led_toggle"
                },
                paramsKeyMap: {X: 0, Y: 1, VALUE: 2},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = e.getNumberValue("X"), o = e.getNumberValue("Y");
                    r = Math.max(0, r), r = Math.min(4, r), o = Math.max(0, o);
                    var a = {type: "SET_LED", data: {x: r, y: o = Math.min(4, o), value: n}};
                    return Entry.Microbit.postCallReturn({script: e, data: a})
                }
            },
            microbit_get_led: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "LED의 X:%1 Y:%2 상태값",
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                class: "MicrobitLed",
                isNotFor: ["microbit"],
                def: {params: [{type: "text", params: ["0"]}, {type: "text", params: ["0"]}], type: "microbit_get_led"},
                paramsKeyMap: {X: 0, Y: 1},
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y");
                    n = Math.max(0, n), n = Math.min(4, n), r = Math.max(0, r);
                    var o = {type: "GET_LED", data: {x: n, y: r = Math.min(4, r)}},
                        a = Entry.Microbit.checkValue({script: e, data: o, key: "LED." + n + "." + r});
                    if (!a) {
                        a = u(Entry.hw.portData, ["LED"]);
                        var s = e.executor.scope;
                        s.cacheValue || (s.cacheValue = {}), c(s.cacheValue, "LED." + n + "." + r, a)
                    }
                    return a
                }
            },
            microbit_show_string: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 출력하기 %2",
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                class: "MicrobitLed",
                isNotFor: ["microbit"],
                def: {params: [{type: "text", params: ["Hello!"]}], type: "microbit_show_string"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getStringValue("VALUE"), r = {
                        type: "SET_STRING",
                        data: {value: n = n.replace(/[^A-Za-z0-9_\`\~\!\@\#\$\%\^\&\*\(\)\-\=\+\\\{\}\[\]\'\"\;\:\<\,\>\.\?\/\s]/gim, "")}
                    };
                    return Entry.Microbit.postCallReturn({script: e, data: r})
                }
            },
            microbit_show_image: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 아이콘 출력하기 %2",
                params: [{
                    type: "Dropdown",
                    options: [["하트", 0], ["행복함", 4], ["삼각형", 32], ["사각형", 37], ["다이아몬드", 35]],
                    value: 0,
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                class: "MicrobitLed",
                isNotFor: ["microbit"],
                def: {type: "microbit_show_image"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = {type: "SET_IMAGE", data: {value: e.getField("VALUE")}};
                    return Entry.Microbit.postCallReturn({script: e, data: n})
                }
            },
            microbit_get_analog: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_string_field",
                statements: [],
                template: "아날로그 핀 %1번 센서값",
                params: [{type: "Dropdown", options: [["P0", 7], ["P1", 8], ["P2", 9]], value: 7, fontSize: 11}],
                events: {},
                class: "MicrobitAnalog",
                isNotFor: ["microbit"],
                def: {type: "microbit_get_analog"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = {type: "GET_ANALOG", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_ANALOG." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_ANALOG"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_ANALOG." + n, o)
                    }
                    return o
                }
            },
            microbit_get_analog_map: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_string_field",
                statements: [],
                template: "아날로그 핀 %1번 센서값의 범위를 %2~%3 에서 %4~%5 (으)로 바꾼값",
                params: [{
                    type: "Dropdown",
                    options: [["P0", 7], ["P1", 8], ["P2", 9]],
                    value: 7,
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}],
                events: {},
                class: "MicrobitAnalog",
                isNotFor: ["microbit"],
                def: {
                    params: [null, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1023"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["100"]}],
                    type: "microbit_get_analog_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                func: function (t, e) {
                    var n = e.getField("PORT"), r = {type: "GET_ANALOG", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_ANALOG." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_ANALOG"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_ANALOG." + n, o)
                    }
                    var s = e.getNumberValue("VALUE2", e), i = e.getNumberValue("VALUE3", e),
                        l = e.getNumberValue("VALUE4", e), p = e.getNumberValue("VALUE5", e),
                        _ = e.getValue("VALUE4", e), d = e.getValue("VALUE5", e), y = !1;
                    if ((Entry.Utils.isNumber(_) && _.indexOf(".") > -1 || Entry.Utils.isNumber(d) && d.indexOf(".") > -1) && (y = !0), s > i) {
                        var g = s;
                        s = i, i = g
                    }
                    return l > p && (g = l, l = p, p = g), o -= s, o *= (p - l) / (i - s), o += l, o = Math.min(p, o), o = Math.max(l, o), y ? Math.round(100 * o) / 100 : Math.round(o)
                }
            },
            microbit_get_digital: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "디지털 핀 %1번 센서값",
                params: [{type: "Dropdown", options: [["P0", 7], ["P1", 8], ["P2", 9]], value: 7, fontSize: 11}],
                events: {},
                class: "MicrobitDigital",
                isNotFor: ["microbit"],
                def: {type: "microbit_get_digital"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = {type: "GET_DIGITAL", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_DIGITAL." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_DIGITAL"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_DIGITAL." + n, o)
                    }
                    return o
                }
            },
            microbit_get_button: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "%1버튼을 눌렀는가?",
                params: [{type: "Dropdown", options: [["A", 1], ["B", 2]], value: 1, fontSize: 11}],
                events: {},
                class: "MicrobitButton",
                isNotFor: ["microbit"],
                def: {type: "microbit_get_button"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = {type: "GET_BUTTON", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_BUTTON." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_BUTTON"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_BUTTON." + n, o)
                    }
                    return o
                }
            },
            microbit_get_sensor: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1 센서값",
                params: [{
                    type: "Dropdown",
                    options: [["빛", "lightLevel"], ["온도", "temperature"], ["자기", "compassHeading"]],
                    value: "temperature",
                    fontSize: 11
                }],
                events: {},
                class: "MicrobitSensor",
                isNotFor: ["microbit"],
                def: {type: "microbit_get_sensor"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = {type: "GET_SENSOR", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_SENSOR." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_SENSOR"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_SENSOR." + n, o)
                    }
                    return o
                }
            },
            microbit_get_accelerometer: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_string_field",
                statements: [],
                template: "가속도 센서 %1의 값",
                params: [{
                    type: "Dropdown",
                    options: [["x축", 0], ["y축", 1], ["z축", 2], ["크기", 3]],
                    value: "x",
                    fontSize: 11
                }],
                events: {},
                class: "MicrobitAccelerometer",
                isNotFor: ["microbit"],
                def: {type: "microbit_get_accelerometer"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = {type: "GET_ACCELEROMETER", data: {value: n}},
                        o = Entry.Microbit.checkValue({script: e, data: r, key: "GET_ACCELEROMETER." + n});
                    if (!o) {
                        o = u(Entry.hw.portData, ["GET_ACCELEROMETER"]);
                        var a = e.executor.scope;
                        a.cacheValue || (a.cacheValue = {}), c(a.cacheValue, "GET_ACCELEROMETER." + n, o)
                    }
                    return o
                }
            },
            microbit_play_note: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic",
                statements: [],
                template: "%1음을 %2박자 연주하기 %3",
                params: [{
                    type: "Dropdown",
                    options: [["Low C", 131], ["Low C#", 139], ["Low D", 147], ["Low Eb", 156], ["Low E", 165], ["Low F", 175], ["Low F#", 185], ["Low G", 196], ["Low G#", 208], ["Low A", 220], ["Low Bb", 233], ["Low B", 247], ["Middle C", 262], ["Middle C#", 277], ["Middle D", 294], ["Middle Eb", 311], ["Middle E", 330], ["Middle F", 349], ["Middle F#", 370], ["Middle G", 392], ["Middle G#", 415], ["Middle A", 440], ["Middle Bb", 466], ["Middle B", 494], ["High C", 523], ["High C#", 555], ["High D", 587], ["High Eb", 622], ["High E", 659], ["High F", 698], ["High F#", 740], ["High G", 784], ["High G#", 831], ["High A", 880], ["High Bb", 932], ["High B", 988]],
                    value: 262,
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", 1], ["1/2", 2], ["1/4", 4], ["1/8", 8], ["1/16", 16], ["2", 32], ["4", 64]],
                    value: 1,
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                class: "MicrobitNote",
                isNotFor: ["microbit"],
                def: {type: "microbit_play_note"},
                paramsKeyMap: {NOTE: 0, BEAT: 1},
                func: function (t, e) {
                    var n = {type: "PLAY_NOTE", data: {note: e.getField("NOTE"), beat: e.getField("BEAT")}};
                    return Entry.Microbit.postCallReturn({script: e, data: n})
                }
            },
            microbit_change_bpm: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic",
                statements: [],
                template: "연주 속도를 %1BPM 만큼 바꾸기 %2",
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                class: "MicrobitNote",
                isNotFor: ["microbit"],
                def: {params: [{type: "number", params: [20]}], type: "microbit_change_bpm"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = {type: "CHANGE_BPM", data: {value: e.getNumberValue("VALUE")}};
                    return Entry.Microbit.postCallReturn({script: e, data: n})
                }
            },
            microbit_set_bpm: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic",
                statements: [],
                template: "연주 속도를 %1BPM으로 정하기 %2",
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                class: "MicrobitNote",
                isNotFor: ["microbit"],
                def: {params: [{type: "number", params: [120]}], type: "microbit_set_bpm"},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = {type: "SET_BPM", data: {value: e.getNumberValue("VALUE")}};
                    return Entry.Microbit.postCallReturn({script: e, data: n})
                }
            },
            microbit_radio_receive_event: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_event",
                statements: [],
                template: "%1라디오를 수신했을 때",
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_hardware.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }],
                def: {params: [], type: "microbit_radio_receive_event"},
                paramsKeyMap: {},
                class: "MicrobitRadio",
                isNotFor: ["microbit"],
                event: "MicrobitRadioReceive",
                func: function (t, e) {
                    return e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.FunBoard = {
        name: "funboard",
        url: "http://www.thinkfunedu.com",
        imageName: "funboard.png",
        title: {en: "funboard", ko: "펀보드"},
        Static: {
            FUNBOARD_BLOCK_COLOR: "#00979D",
            FUNBOARD_ARROW_COLOR_HW: "#00979D",
            FUNBOARD_FONT_COLOR: "#000f0f",
            FUNBOARD_LED_ON: 255,
            BUTTON_PRESS_VALUE: 0,
            FUNBOARD_MATRIX_STRING_MAX: 5,
            DELAY_SECOND: .1,
            ANALOG_STATE_PERCENT: .5,
            MATRIX_REGISTED_SYMBOL_TOTAL: 10
        },
        setZero: function () {
            Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[13] = {
                type: Entry.FunBoard.sensorTypes.ETC,
                data: Entry.FunBoard.EventTypes.RESET,
                time: (new Date).getTime()
            };
            for (var t = 0; t < 5e4; t++) ;
            for (Entry.hw.update(), delete Entry.hw.sendQueue[13], t = 0; t < 5e5; t++) ;
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].type = Entry.FunBoard.sensorTypes.ETC, Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        toByte: function (t) {
            var e = t;
            return Entry.FunBoard._str2bin(e)
        },
        EventTypes: {
            BUZZER_ON: 1,
            BUZZER_OFF: 2,
            MATRIX_OFF_ALL: 3,
            MATRIX_ON_ALL: 4,
            MATRIX_INTENSITY: 5,
            MATRIX_SCROLL_DIR: 6,
            MATRIX_SCROLL_RAPID: 7,
            MATRIX_SYMBOL_OUT: 8,
            RESET: 13,
            SET_ROW_COL: 3,
            SET_ROW1: 4,
            SET_COL1: 5,
            STR_OUT_NO_SCROLL: 6,
            STR_OUT_LEFT: 7,
            STR_OUT_UP: 8,
            STR_OUT_RIGHT: 9,
            STR_OUT_DOWN: 10,
            STR_OUT_DEFAULT: 11,
            CHAR_OUT: 12,
            SET_64: 13
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            ETC: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            rxBLUETOOTH: 9,
            MATRIX: 10,
            txBLUETOOTH: 11,
            MATRIX64: 12
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        PORT_MAP: {
            rx: 0,
            tx: 1,
            matrix_cs: 2,
            matrix_data: 3,
            matrix_clk: 4,
            up_bt: 5,
            down_bt: 6,
            left_bt: 7,
            right_bt: 8,
            buzzer: 9,
            led_red: 10,
            led_yellow: 11,
            led_green: 12,
            led_blue: 13,
            slide: 0,
            cds: 1,
            mic: 2,
            space_touchbt: 3,
            enter_touchbt: 4,
            escape_touchbt: 5
        },
        get_analog_value_map: function (t, e, n, r, o, a) {
            var s = t, i = (n = n, r = r, o = o, a = a, String(o)), l = String(a), c = !1;
            if ((Entry.Utils.isNumber(i) && i.indexOf(".") > -1 || Entry.Utils.isNumber(l) && l.indexOf(".") > -1) && (c = !0), n > r) {
                var u = n;
                n = r, r = u
            }
            return o > a && (u = o, o = a, a = u), s -= n, s *= (a - o) / (r - n), s += o, s = Math.min(a, s), s = Math.max(o, s), c ? Math.round(100 * s) / 100 : Math.round(s)
        },
        bt_pressed: function (t, e) {
            return t >= 5 ? e > 100 ? 0 : 1 : e > 0 ? 1 : 0
        },
        sleep: function (t) {
            for (var e = new Date, n = e.getTime() + t; ;) if ((e = new Date).getTime() > n) return
        },
        MinMax: function (t, e, n) {
            var r = t;
            return r = Math.max(r, e), Math.min(r, n)
        },
        get_char_index: function (t, e) {
            if (t < 0 || t >= e.length) return 62;
            var n = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz !?#$%&*+-/~^_@<>=()[]{},.:;'`\\|".indexOf(e[t]);
            return n >= 0 ? n : 62
        },
        strwith01: function (t, e) {
            for (var n = -1, r = "", o = 0; o < t; o++) n = -1, o < t && (n = "1#*".indexOf(e[o])), r = n < 0 ? r.concat("0") : r.concat("1");
            return r
        },
        str2byte: function (t) {
            for (var e = 0, n = t.length - 1; n >= 0; n--) e += t[n] * Math.pow(2, 8 - (n + 1));
            return e
        },
        _str2bin: function (t) {
            for (var e = Array(), n = 0; n < 8 * t.length; n += 8) e[n >> 5] |= (255 & t.charCodeAt(n / 8)) << n % 32;
            return e
        }
    }, Entry.FunBoard.getBlocks = function () {
        return {
            funboard_list_pushbutton_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_bt_up, "1"], [Lang.Blocks.FUNBOARD_bt_down, "2"], [Lang.Blocks.FUNBOARD_bt_left, "3"], [Lang.Blocks.FUNBOARD_bt_right, "4"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_touchbutton_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_touchbt_up, "1"], [Lang.Blocks.FUNBOARD_touchbt_down, "2"], [Lang.Blocks.FUNBOARD_touchbt_left, "3"], [Lang.Blocks.FUNBOARD_touchbt_right, "4"], [Lang.Blocks.FUNBOARD_touchbt_space, "5"], [Lang.Blocks.FUNBOARD_touchbt_enter, "6"], [Lang.Blocks.FUNBOARD_touchbt_escape, "7"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_analogsensor_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_sensor_slide, "1"], [Lang.Blocks.FUNBOARD_sensor_cds, "2"], [Lang.Blocks.FUNBOARD_sensor_mic, "3"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_2_state_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_sensor_state_1, "1"], [Lang.Blocks.FUNBOARD_sensor_state_2, "2"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_ledcolor_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_led_color_red, "1"], [Lang.Blocks.FUNBOARD_led_color_yellow, "2"], [Lang.Blocks.FUNBOARD_led_color_green, "3"], [Lang.Blocks.FUNBOARD_led_color_blue, "4"], [Lang.Blocks.FUNBOARD_led_color_all, "5"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_ledcolor_pwm_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_led_color_red, "1"], [Lang.Blocks.FUNBOARD_led_color_yellow, "2"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_onoff_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_do_on, "1"], [Lang.Blocks.FUNBOARD_do_off, "0"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            funboard_list_digital_octave: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                }
            },
            funboard_list_digital_tone: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                }
            },
            funboard_list_matrix_rows: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {ROW: 0},
                func: function (t, e) {
                    return e.getField("ROW")
                }
            },
            funboard_list_matrix_row_or_column: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_row_tag, "1"], [Lang.Blocks.FUNBOARD_column_tag, "2"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {WHAT: 0},
                func: function (t, e) {
                    return e.getField("WHAT")
                }
            },
            funboard_list_matrix_scroll_option: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.FUNBOARD_scroll_no, "1"], [Lang.Blocks.FUNBOARD_scroll_left, "2"], [Lang.Blocks.FUNBOARD_scroll_right, "4"], [Lang.Blocks.FUNBOARD_scroll_up, "3"], [Lang.Blocks.FUNBOARD_scroll_down, "5"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {RET: 0},
                func: function (t, e) {
                    return e.getField("RET")
                }
            },
            funboard_list_matrix_char: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"], ["E", "E"], ["F", "F"], ["G", "G"], ["H", "H"], ["I", "I"], ["J", "J"], ["K", "K"], ["L", "L"], ["M", "M"], ["N", "N"], ["O", "O"], ["P", "P"], ["Q", "Q"], ["R", "R"], ["S", "S"], ["T", "T"], ["U", "U"], ["V", "V"], ["W", "W"], ["X", "X"], ["Y", "Y"], ["Z", "Z"], ["a", "a"], ["b", "b"], ["c", "c"], ["d", "d"], ["e", "e"], ["f", "f"], ["g", "g"], ["h", "h"], ["i", "i"], ["j", "j"], ["k", "k"], ["l", "l"], ["m", "m"], ["n", "n"], ["o", "o"], ["p", "p"], ["q", "q"], ["r", "r"], ["s", "s"], ["t", "t"], ["u", "u"], ["v", "v"], ["w", "w"], ["x", "x"], ["y", "y"], ["z", "z"], [" ", " "], ["!", "!"], ["?", "?"], ["#", "#"], ["$", "$"], ["%", "%"], ["&", "&"], ["*", "*"], ["+", "+"], ["-", "-"], ["/", "/"], ["~", "~"], ["^", "^"], ["_", "_"], ["@", "@"], ["<", "<"], [">", ">"], ["=", "="], ["(", "("], [")", ")"], ["[", "["], ["]", "]"], ["{", "{"], ["}", "}"], [",", ","], [".", "."], [":", ":"], [";", ";"], ["'", "'"], ["`", "`"], ["\\", "\\"], ["|", "|"]],
                    value: "A",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {RET: 0},
                func: function (t, e) {
                    return e.getField("RET")
                }
            },
            funboard_what_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "funboard_list_pushbutton_basic"}], type: "funboard_what_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = 0, r = e.getNumberValue("PORT");
                    1 == r ? n = Entry.FunBoard.PORT_MAP.up_bt : 2 == r ? n = Entry.FunBoard.PORT_MAP.down_bt : 3 == r ? n = Entry.FunBoard.PORT_MAP.left_bt : 4 == r && (n = Entry.FunBoard.PORT_MAP.right_bt);
                    var o, a = Entry.hw.portData.DIGITAL;
                    return o = a && a[n] || 0, 0 == Entry.FunBoard.Static.BUTTON_PRESS_VALUE ? o > 0 ? 0 : 1 : o > 0 ? 1 : 0
                },
                syntax: {js: [], py: []}
            },
            funboard_what_touch_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "funboard_list_touchbutton_basic"}], type: "funboard_what_touch_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = 0, r = e.getNumberValue("PORT");
                    1 == r ? n = Entry.FunBoard.PORT_MAP.up_bt : 2 == r ? n = Entry.FunBoard.PORT_MAP.down_bt : 3 == r ? n = Entry.FunBoard.PORT_MAP.left_bt : 4 == r ? n = Entry.FunBoard.PORT_MAP.right_bt : 5 == r ? n = Entry.FunBoard.PORT_MAP.space_touchbt : 6 == r ? n = Entry.FunBoard.PORT_MAP.enter_touchbt : 7 == r && (n = Entry.FunBoard.PORT_MAP.escape_touchbt);
                    var o = 0;
                    if (r >= 5) {
                        var a = Entry.hw.portData.ANALOG;
                        o = a && a[n] || 0
                    } else {
                        var s = Entry.hw.portData.DIGITAL;
                        o = s && s[n] || 0
                    }
                    return 0 == Entry.FunBoard.Static.BUTTON_PRESS_VALUE ? o > 0 ? 0 : 1 : o > 0 ? 1 : 0
                },
                syntax: {js: [], py: []}
            },
            funboard_get_digital_button_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "funboard_list_pushbutton_basic"}], type: "funboard_get_digital_button_value"},
                paramsKeyMap: {PORT: 0},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = 0, r = e.getNumberValue("PORT");
                    1 == r ? n = Entry.FunBoard.PORT_MAP.up_bt : 2 == r ? n = Entry.FunBoard.PORT_MAP.down_bt : 3 == r ? n = Entry.FunBoard.PORT_MAP.left_bt : 4 == r && (n = Entry.FunBoard.PORT_MAP.right_bt);
                    var o = Entry.hw.portData.DIGITAL, a = 0;
                    return a = o && o[n] || 0, 0 == Entry.FunBoard.Static.BUTTON_PRESS_VALUE && (a = a ? 0 : 1), a
                },
                syntax: {js: [], py: []}
            },
            funboard_get_touch_button_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "funboard_list_touchbutton_basic"}], type: "funboard_get_touch_button_value"},
                paramsKeyMap: {PORT: 0},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = 0, r = e.getNumberValue("PORT");
                    1 == r ? n = Entry.FunBoard.PORT_MAP.up_bt : 2 == r ? n = Entry.FunBoard.PORT_MAP.down_bt : 3 == r ? n = Entry.FunBoard.PORT_MAP.left_bt : 4 == r ? n = Entry.FunBoard.PORT_MAP.right_bt : 5 == r ? n = Entry.FunBoard.PORT_MAP.space_touchbt : 6 == r ? n = Entry.FunBoard.PORT_MAP.enter_touchbt : 7 == r && (n = Entry.FunBoard.PORT_MAP.escape_touchbt);
                    var o = 0;
                    if (r >= 5) {
                        var a = Entry.hw.portData.ANALOG;
                        o = a && a[n] || 0, o = a && a[n] || 0, 0 == Entry.FunBoard.Static.BUTTON_PRESS_VALUE && (o = o ? 0 : 1)
                    } else {
                        var s = Entry.hw.portData.DIGITAL;
                        o = s && s[n] || 0, 0 == Entry.FunBoard.Static.BUTTON_PRESS_VALUE && (o = o ? 0 : 1)
                    }
                    return o
                },
                syntax: {js: [], py: []}
            },
            funboard_get_number_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "funboard_list_analogsensor_basic"}], type: "funboard_get_number_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = 0, r = e.getValue("PORT", e);
                    1 == r ? n = Entry.FunBoard.PORT_MAP.slide : 2 == r ? n = Entry.FunBoard.PORT_MAP.cds : 3 == r && (n = Entry.FunBoard.PORT_MAP.mic);
                    var o = Entry.hw.portData.ANALOG;
                    return o && o[n] || 0
                },
                syntax: {js: [], py: []}
            },
            funboard_get_analog_sensor_2state: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "funboard_list_analogsensor_basic"}, {type: "funboard_list_2_state_basic"}],
                    type: "funboard_get_analog_sensor_2state"
                },
                paramsKeyMap: {PORT: 0, STATE: 1},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n, r = e.getValue("PORT", e), o = e.getValue("STATE", e), a = 0;
                    1 == r ? a = Entry.FunBoard.PORT_MAP.slide : 2 == r ? a = Entry.FunBoard.PORT_MAP.cds : 3 == r && (a = Entry.FunBoard.PORT_MAP.mic);
                    var s = Entry.hw.portData.ANALOG, i = s && s[a] || 0;
                    n = 0 + Math.max(0, Math.abs(1023) * Entry.FunBoard.Static.ANALOG_STATE_PERCENT);
                    var l = 0;
                    return 1 == o ? i < n && (l = 1) : i > n && (l = 1), l
                },
                syntax: {js: [], py: []}
            },
            funboard_convert_scale: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "funboard_list_analogsensor_basic"}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["1023"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["100"]
                    }], type: "funboard_convert_scale"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "funboardget",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = 0;
                    1 == n ? r = Entry.FunBoard.PORT_MAP.slide : 2 == n ? r = Entry.FunBoard.PORT_MAP.cds : 3 == n && (r = Entry.FunBoard.PORT_MAP.mic);
                    var o = e.getNumberValue("VALUE2", e), a = e.getNumberValue("VALUE3", e),
                        s = e.getNumberValue("VALUE4", e), i = e.getNumberValue("VALUE5", e),
                        l = e.getValue("VALUE4", e), c = e.getValue("VALUE5", e), u = !1;
                    (Entry.Utils.isNumber(l) && l.indexOf(".") > -1 || Entry.Utils.isNumber(c) && c.indexOf(".") > -1) && (u = !0);
                    var p = Entry.hw.portData.ANALOG, _ = p && p[r] || 0;
                    if (o > a) {
                        var d = o;
                        o = a, a = d
                    }
                    return s > i && (d = s, s = i, i = d), _ -= o, _ *= (i - s) / (a - o), _ += s, _ = Math.min(i, _), _ = Math.max(s, _), u ? Math.round(100 * _) / 100 : Math.round(_)
                },
                syntax: {js: [], py: []}
            },
            funboard_set_digital_buzzer: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_bzr.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "funboard_list_digital_octave"}, {type: "funboard_list_digital_tone"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "funboard_set_digital_buzzer"
                },
                paramsKeyMap: {OCTAVE: 0, NOTE: 1, DURATION: 2},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = Entry.FunBoard.PORT_MAP.buzzer, r = e.getNumberValue("DURATION"),
                        o = e.getNumberValue("OCTAVE") - 1, a = 0;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.hw.sendQueue.SET[n] = {
                        type: Entry.FunBoard.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var s = e.getValue("NOTE");
                    return Entry.Utils.isNumber(s) || (s = Entry.FunBoard.toneTable[s]), s < 0 ? s = 0 : s > 12 && (s = 12), r < 0 && (r = 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), 0 === r ? (Entry.hw.sendQueue.SET[n] = {
                        type: Entry.FunBoard.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn()) : (o < 0 ? o = 0 : o > 8 && (o = 8), 0 != s && (a = Entry.FunBoard.toneMap[s][o]), r *= 1e3, e.isStart = !0, e.timeFlag = 1, Entry.hw.sendQueue.SET[n] = {
                        type: Entry.FunBoard.sensorTypes.TONE,
                        data: {value: a, duration: r},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, r + 32), e)
                },
                syntax: {js: [], py: []}
            },
            funboard_buzzer_second: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_bzr.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_onoff_basic"}, {type: "text", params: ["1"]}, null],
                    type: "funboard_buzzer_second"
                },
                paramsKeyMap: {ONOFF: 0, DURATION: 1},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("ONOFF"), r = e.getNumberValue("DURATION"), o = Math.ceil(r);
                    if (o < 1) return e.callReturn();
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var a;
                    a = "1" == n ? Entry.FunBoard.EventTypes.BUZZER_ON : Entry.FunBoard.EventTypes.BUZZER_OFF, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[a] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: o,
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var s = o;
                    return s = 60 / (Entry.FPS || 60) * s * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: []}
            },
            funboard_buzzer_tone_simple: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_c, "C"], [Lang.Blocks.XBOT_d, "D"], [Lang.Blocks.XBOT_e, "E"], [Lang.Blocks.XBOT_f, "F"], [Lang.Blocks.XBOT_g, "G"], [Lang.Blocks.XBOT_a, "A"], [Lang.Blocks.XBOT_b, "B"]],
                    value: "C",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_bzr.png",
                    size: 12
                }],
                events: {},
                def: {params: [null, "4", {type: "text", params: ["0.5"]}, null], type: "funboard_buzzer_tone_simple"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = e.getStringField("NOTE", e),
                        r = (e.getStringField("OCTAVE", e), e.getNumberValue("VALUE", e), 255);
                    "C" == n ? r = 39 : "D" == n ? r = 75 : "E" == n ? r = 111 : "F" == n ? r = 147 : "G" == n ? r = 183 : "A" == n ? r = 219 : "B" == n && (r = 255);
                    var o = Entry.FunBoard.PORT_MAP.buzzer;
                    return Entry.hw.sendQueue[o] = r, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            funboard_buzzer_onoff: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_bzr.png",
                    size: 11
                }],
                events: {},
                def: {params: [{type: "funboard_list_onoff_basic"}, null], type: "funboard_buzzer_onoff"},
                paramsKeyMap: {ONOFF: 0},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("ONOFF");
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var r, o = Math.floor(122 * Math.random()) + 1;
                    r = "1" == n ? Entry.FunBoard.EventTypes.BUZZER_ON : Entry.FunBoard.EventTypes.BUZZER_OFF, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[r] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: o,
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var a = Entry.FPS || 60, s = Math.max(1, 3 * Entry.FunBoard.Static.DELAY_SECOND);
                    return s = 60 / a * (s = Entry.FunBoard.Static.DELAY_SECOND) * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: []}
            },
            funboard_color_led_onoff: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_led.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_ledcolor_basic"}, {type: "funboard_list_onoff_basic"}, null],
                    type: "funboard_color_led_onoff"
                },
                paramsKeyMap: {VALUE: 0, ONOFF: 1},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = e.getValue("ONOFF");
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = 0, a = 0, s = 0, i = 0;
                    "1" == r ? (o = 0, a = 0, s = 0, i = 0, 1 === n ? o = 255 : 2 === n ? a = 255 : 3 === n ? s = 255 : 4 === n ? i = 255 : 5 === n && (o = 255, a = 255, s = 255, i = 255), o > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_red] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: o,
                        time: (new Date).getTime()
                    }), a > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_yellow] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: a,
                        time: (new Date).getTime()
                    }), s > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_green] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: s,
                        time: (new Date).getTime()
                    }), i > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_blue] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: i,
                        time: (new Date).getTime()
                    })) : (o = 255, a = 255, s = 255, i = 255, 1 === n ? o = 0 : 2 === n ? a = 0 : 3 === n ? s = 0 : 4 === n ? i = 0 : 5 === n && (o = 0, a = 0, s = 0, i = 0), o < 1 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_red] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: o,
                        time: (new Date).getTime()
                    }), a < 1 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_yellow] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: a,
                        time: (new Date).getTime()
                    }), s < 1 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_green] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: s,
                        time: (new Date).getTime()
                    }), i < 1 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_blue] = {
                        type: Entry.FunBoard.sensorTypes.DIGITAL,
                        data: i,
                        time: (new Date).getTime()
                    })), e.isStart = !0, e.timeFlag = 1;
                    var l = Entry.FPS || 60, c = Entry.FunBoard.Static.DELAY_SECOND;
                    return c = 60 / l * c * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, c), e
                },
                syntax: {js: [], py: []}
            },
            funboard_color_led_on_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_led.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_ledcolor_pwm_basic"}, {type: "text", params: ["100"]}, null],
                    type: "funboard_color_led_on_pwm"
                },
                pyHelpDef: {
                    params: [null, {type: "number", params: ["A&value"]}, null],
                    type: "funboard_color_led_on_pwm"
                },
                paramsKeyMap: {VALUE: 0, PERCENT: 1},
                class: "funboardset",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = e.getNumberValue("PERCENT");
                    r = Entry.FunBoard.MinMax(r, 0, 100);
                    var o = Math.round(Entry.FunBoard.Static.FUNBOARD_LED_ON * (r / 100));
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var a = 0, s = 0;
                    1 === n ? a = o : 2 === n && (s = o), a > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_red] = {
                        type: Entry.FunBoard.sensorTypes.PWM,
                        data: a,
                        time: (new Date).getTime()
                    }), s > 0 && (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[Entry.FunBoard.PORT_MAP.led_yellow] = {
                        type: Entry.FunBoard.sensorTypes.PWM,
                        data: s,
                        time: (new Date).getTime()
                    }), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_intensity: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["100"]}, null], type: "funboard_dotmatrix_intensity"},
                pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "funboard_color_led_on_pwm"},
                paramsKeyMap: {PERCENT: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PERCENT");
                    if (n = Entry.FunBoard.MinMax(n, 0, 100), n += 1, e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var r = Entry.FunBoard.EventTypes.MATRIX_INTENSITY;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[r] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: n,
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var o = Entry.FPS || 60, a = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    return a = 60 / o * a * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, a), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_scroll_option: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_matrix_scroll_option"}, null],
                    type: "funboard_dotmatrix_scroll_option"
                },
                paramsKeyMap: {OPTION: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("OPTION", e);
                    if (n.length < 1) return e.callReturn();
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var r = Entry.FunBoard.EventTypes.MATRIX_SCROLL_DIR;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var o = Entry.FPS || 60, a = Entry.FunBoard.Static.DELAY_SECOND;
                    return a = 60 / o * a * 1e3, Entry.hw.sendQueue.SET[r] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: n,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_scroll_rapid: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["100"]}, null], type: "funboard_dotmatrix_scroll_rapid"},
                pyHelpDef: {params: [{type: "number", params: ["A&value"]}, null], type: "funboard_color_led_on_pwm"},
                paramsKeyMap: {PERCENT: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PERCENT");
                    if (n = Entry.FunBoard.MinMax(n, 0, 100), n += 1, e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var r = Entry.FunBoard.EventTypes.MATRIX_SCROLL_RAPID;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[r] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: n,
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var o = Entry.FPS || 60, a = Entry.FunBoard.Static.DELAY_SECOND;
                    return a = 60 / o * a * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, a), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_onoff: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {params: [{type: "funboard_list_onoff_basic"}, null], type: "funboard_dotmatrix_onoff"},
                paramsKeyMap: {ONOFF: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("ONOFF", e), r = Math.floor(122 * Math.random()) + 1;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.MATRIX_OFF_ALL;
                    "1" == n && (o = Entry.FunBoard.EventTypes.MATRIX_ON_ALL), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var a = Entry.FPS || 60, s = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    return s = 60 / a * s * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: r,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_char_display: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {params: [{type: "funboard_list_matrix_char"}, null], type: "funboard_dotmatrix_char_display"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    if (n.length < 1) return e.callReturn();
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var r = Entry.FunBoard.EventTypes.CHAR_OUT, o = [];
                    if ("string" == typeof n) for (var a = 0; a < 1; a++) o[a] = Entry.FunBoard.toByte(n[a]); else o[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var s = Entry.FPS || 60, i = 1.5 * Entry.FunBoard.Static.DELAY_SECOND;
                    return i = 60 / s * i * 1e3, Entry.hw.sendQueue.SET[r] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: o[0],
                            text1: o[1],
                            text2: o[2],
                            text3: o[3],
                            text4: o[4],
                            text5: o[5],
                            text6: o[6],
                            text7: o[7],
                            text8: o[8],
                            text9: o[9],
                            text10: o[10],
                            text11: o[11],
                            text12: o[12],
                            text13: o[13],
                            text14: o[14],
                            text15: o[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, i), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_string_display: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["A"]}, null], type: "funboard_dotmatrix_string_display"},
                pyHelpDef: {
                    params: [{type: "text", params: ["A&value"]}, null],
                    type: "funboard_dotmatrix_string_display"
                },
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    if (n.length < 1) return e.callReturn();
                    var r = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.STR_OUT_DEFAULT, a = [];
                    if ("string" == typeof n) for (var s = 0; s < r; s++) a[s] = Entry.FunBoard.toByte(n[s]); else a[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = r * Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_string_display_scroll: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["A"]}, {type: "funboard_list_matrix_scroll_option"}, null],
                    type: "funboard_dotmatrix_string_display_scroll"
                },
                pyHelpDef: {
                    params: [{type: "text", params: ["A&value"]}, {type: "text", params: ["A&value"]}, null],
                    type: "funboard_dotmatrix_string_display_scroll"
                },
                paramsKeyMap: {VALUE: 0, SCROLL: 1},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e), r = e.getValue("SCROLL", e);
                    if (n.length < 1) return e.callReturn();
                    var o = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var a = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL;
                    "1" == r ? a = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL : "2" == r ? a = Entry.FunBoard.EventTypes.STR_OUT_LEFT : "3" == r ? a = Entry.FunBoard.EventTypes.STR_OUT_UP : "4" == r ? a = Entry.FunBoard.EventTypes.STR_OUT_RIGHT : "5" == r && (a = Entry.FunBoard.EventTypes.STR_OUT_DOWN);
                    var s = [];
                    if ("string" == typeof n) for (var i = 0; i < o; i++) s[i] = Entry.FunBoard.toByte(n[i]); else s[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[a] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: s[0],
                            text1: s[1],
                            text2: s[2],
                            text3: s[3],
                            text4: s[4],
                            text5: s[5],
                            text6: s[6],
                            text7: s[7],
                            text8: s[8],
                            text9: s[9],
                            text10: s[10],
                            text11: s[11],
                            text12: s[12],
                            text13: s[13],
                            text14: s[14],
                            text15: s[15]
                        },
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var l = o;
                    return l = 60 / (Entry.FPS || 60) * l * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_symbol: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["♥", "1"], ["♡", "2"], ["↑", "3"], ["↓", "4"], ["←", "5"], ["→", "6"], ["■", "7"], ["◆", "8"], ["●", "9"], ["※", "10"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {params: [null, null], type: "funboard_dotmatrix_symbol"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getField("VALUE"), r = parseInt(n);
                    if (r < 1 || r > Entry.FunBoard.Static.MATRIX_REGISTED_SYMBOL_TOTAL) return e.callReturn();
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.MATRIX_SYMBOL_OUT;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.ETC,
                        data: r,
                        time: (new Date).getTime()
                    }, e.isStart = !0, e.timeFlag = 1;
                    var a = Entry.FPS || 60, s = 1 * Entry.FunBoard.Static.DELAY_SECOND;
                    return s = 60 / a * s * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_num: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {params: [null, null], type: "funboard_dotmatrix_num"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getField("VALUE");
                    if (parseInt(n) < 0 || n.length < 1) return e.callReturn();
                    var r = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL, a = [];
                    if ("string" == typeof n) for (var s = 0; s < r; s++) a[s] = Entry.FunBoard.toByte(n[s]); else a[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = r * Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_big_eng: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"], ["E", "E"], ["F", "F"], ["G", "G"], ["H", "H"], ["I", "I"], ["J", "J"], ["K", "K"], ["L", "L"], ["M", "M"], ["N", "N"], ["O", "O"], ["P", "P"], ["Q", "Q"], ["R", "R"], ["S", "S"], ["T", "T"], ["U", "U"], ["V", "V"], ["W", "W"], ["X", "X"], ["Y", "Y"], ["Z", "Z"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {params: [null, null], type: "funboard_dotmatrix_big_eng"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getField("VALUE");
                    if (n.length < 1) return e.callReturn();
                    var r = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL, a = [];
                    if ("string" == typeof n) for (var s = 0; s < r; s++) a[s] = Entry.FunBoard.toByte(n[s]); else a[0] = n;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = r * Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_small_eng: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["a", "a"], ["b", "b"], ["c", "c"], ["d", "d"], ["e", "e"], ["f", "f"], ["g", "g"], ["h", "h"], ["i", "i"], ["j", "j"], ["k", "k"], ["l", "l"], ["m", "m"], ["n", "n"], ["o", "o"], ["p", "p"], ["q", "q"], ["r", "r"], ["s", "s"], ["t", "t"], ["u", "u"], ["v", "v"], ["w", "w"], ["x", "x"], ["y", "y"], ["z", "z"]],
                    value: "a",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {params: [null, null], type: "funboard_dotmatrix_small_eng"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getField("VALUE");
                    if (n.length < 1) return e.callReturn();
                    var r = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL, a = [];
                    if ("string" == typeof n) for (var s = 0; s < r; s++) a[s] = Entry.FunBoard.toByte(n[s]); else a[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = r * Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_extra_char: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["!", "!"], ["?", "?"], ["#", "#"], ["$", "$"], ["%", "%"], ["&", "&"], ["*", "*"], ["+", "+"], ["-", "-"], ["/", "/"], ["~", "~"], ["^", "^"], ["_", "_"], ["@", "@"], ["<", "<"], [">", ">"], ["=", "="]],
                    value: "!",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {params: [null, null], type: "funboard_dotmatrix_extra_char"},
                paramsKeyMap: {VALUE: 0},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getField("VALUE");
                    if (n.length < 1) return e.callReturn();
                    var r = Math.min(n.length, Entry.FunBoard.Static.FUNBOARD_MATRIX_STRING_MAX);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = Entry.FunBoard.EventTypes.STR_OUT_NO_SCROLL, a = [];
                    if ("string" == typeof n) for (var s = 0; s < r; s++) a[s] = Entry.FunBoard.toByte(n[s]); else a[0] = n[0];
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = r * Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * l * 1e3, Entry.hw.sendQueue.SET[o] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_1row: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_matrix_rows"}, {type: "text", params: ["00000000"]}, null],
                    type: "funboard_dotmatrix_1row"
                },
                paramsKeyMap: {WHAT: 0, BIT8: 1},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    for (var n = e.getNumberValue("WHAT"), r = e.getStringValue("BIT8", e), o = -1, a = "", s = 0; s < 8; s++) o = -1, s < r.length && (o = "1#*".indexOf(r[s])), a = o < 0 ? a.concat("0") : a.concat("1");
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var i = Entry.FunBoard.EventTypes.SET_ROW1, l = [];
                    l[0] = n, l[1] = Entry.FunBoard.toByte(a[0]), l[2] = Entry.FunBoard.toByte(a[1]), l[3] = Entry.FunBoard.toByte(a[2]), l[4] = Entry.FunBoard.toByte(a[3]), l[5] = Entry.FunBoard.toByte(a[4]), l[6] = Entry.FunBoard.toByte(a[5]), l[7] = Entry.FunBoard.toByte(a[6]), l[8] = Entry.FunBoard.toByte(a[7]), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var c = Entry.FPS || 60, u = Entry.FunBoard.Static.DELAY_SECOND;
                    return u = 60 / c * 50, Entry.hw.sendQueue.SET[i] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: l[0],
                            text1: l[1],
                            text2: l[2],
                            text3: l[3],
                            text4: l[4],
                            text5: l[5],
                            text6: l[6],
                            text7: l[7],
                            text8: l[8],
                            text9: l[9],
                            text10: l[10],
                            text11: l[11],
                            text12: l[12],
                            text13: l[13],
                            text14: l[14],
                            text15: l[15]
                        },
                        value: 0,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, u), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_1column: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_ledx.png",
                    size: 11
                }],
                events: {},
                def: {
                    params: [{type: "funboard_list_matrix_rows"}, {type: "text", params: ["00000000"]}, null],
                    type: "funboard_dotmatrix_1column"
                },
                paramsKeyMap: {WHAT: 0, BIT8: 1},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    for (var n = e.getNumberValue("WHAT"), r = e.getStringValue("BIT8", e), o = -1, a = "", s = 0; s < 8; s++) o = -1, s < r.length && (o = "1#*".indexOf(r[s])), a = o < 0 ? a.concat("0") : a.concat("1");
                    var i = Entry.FunBoard.EventTypes.SET_COL1;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var l = [];
                    l[0] = n, l[1] = Entry.FunBoard.toByte(a[0]), l[2] = Entry.FunBoard.toByte(a[1]), l[3] = Entry.FunBoard.toByte(a[2]), l[4] = Entry.FunBoard.toByte(a[3]), l[5] = Entry.FunBoard.toByte(a[4]), l[6] = Entry.FunBoard.toByte(a[5]), l[7] = Entry.FunBoard.toByte(a[6]), l[8] = Entry.FunBoard.toByte(a[7]), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var c = Entry.FPS || 60, u = Entry.FunBoard.Static.DELAY_SECOND;
                    return u = 60 / c * 50, Entry.hw.sendQueue.SET[i] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: l[0],
                            text1: l[1],
                            text2: l[2],
                            text3: l[3],
                            text4: l[4],
                            text5: l[5],
                            text6: l[6],
                            text7: l[7],
                            text8: l[8],
                            text9: l[9],
                            text10: l[10],
                            text11: l[11],
                            text12: l[12],
                            text13: l[13],
                            text14: l[14],
                            text15: l[15]
                        },
                        value: 0,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, u), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_1row_1column: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {
                    params: [{type: "funboard_list_matrix_rows"}, {type: "funboard_list_matrix_row_or_column"}, {
                        type: "text",
                        params: ["00000000"]
                    }, null], type: "funboard_dotmatrix_1row_1column"
                },
                paramsKeyMap: {WHAT: 0, HOW: 1, BIT8: 2},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    for (var n = e.getNumberValue("WHAT"), r = e.getNumberValue("HOW"), o = e.getStringValue("BIT8", e), a = -1, s = "", i = 0; i < 8; i++) a = -1, i < o.length && (a = "1#*".indexOf(o[i])), s = a < 0 ? s.concat("0") : s.concat("1");
                    var l = Entry.FunBoard.EventTypes.SET_ROW1;
                    if ("2" == r && (l = Entry.FunBoard.EventTypes.SET_COL1), e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var c = [];
                    c[0] = n, c[1] = Entry.FunBoard.toByte(s[0]), c[2] = Entry.FunBoard.toByte(s[1]), c[3] = Entry.FunBoard.toByte(s[2]), c[4] = Entry.FunBoard.toByte(s[3]), c[5] = Entry.FunBoard.toByte(s[4]), c[6] = Entry.FunBoard.toByte(s[5]), c[7] = Entry.FunBoard.toByte(s[6]), c[8] = Entry.FunBoard.toByte(s[7]), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var u = Entry.FPS || 60, p = Entry.FunBoard.Static.DELAY_SECOND;
                    return p = 60 / u * 50, Entry.hw.sendQueue.SET[l] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: c[0],
                            text1: c[1],
                            text2: c[2],
                            text3: c[3],
                            text4: c[4],
                            text5: c[5],
                            text6: c[6],
                            text7: c[7],
                            text8: c[8],
                            text9: c[9],
                            text10: c[10],
                            text11: c[11],
                            text12: c[12],
                            text13: c[13],
                            text14: c[14],
                            text15: c[15]
                        },
                        value: 0,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, p), e
                },
                syntax: {js: [], py: []}
            },
            funboard_dotmatrix_set: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_ledx.png", size: 11}],
                events: {},
                def: {
                    params: [{type: "funboard_list_matrix_rows"}, {type: "funboard_list_matrix_rows"}, {type: "funboard_list_onoff_basic"}, null],
                    type: "funboard_dotmatrix_set"
                },
                paramsKeyMap: {ROW: 0, COL: 1, ONOFF: 2},
                class: "funboardsetmatrix",
                isNotFor: ["funboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("ROW"), r = e.getNumberValue("COL"), o = e.getValue("ONOFF"),
                        a = Entry.FunBoard.EventTypes.SET_ROW_COL;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var s = [];
                    s[0] = n, s[1] = r, s[2] = o, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var i = Entry.FPS || 60, l = Entry.FunBoard.Static.DELAY_SECOND;
                    return l = 60 / i * 50, Entry.hw.sendQueue.SET[a] = {
                        type: Entry.FunBoard.sensorTypes.MATRIX,
                        data: {
                            text0: s[0],
                            text1: s[1],
                            text2: s[2],
                            text3: s[3],
                            text4: s[4],
                            text5: s[5],
                            text6: s[6],
                            text7: s[7],
                            text8: s[8],
                            text9: s[9],
                            text10: s[10],
                            text11: s[11],
                            text12: s[12],
                            text13: s[13],
                            text14: s[14],
                            text15: s[15]
                        },
                        value: 0,
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    "use static";
    Entry.Creamo = {
        name: "creamo",
        url: "http://www.creamo.co.kr",
        imageName: "creamo.png",
        title: {en: "creamo", ko: "크리모"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            DC_MOTOR_LEFT: 9,
            DC_MOTOR_RIGHT: 10
        },
        monitorTemplate: {
            imgPath: "hw/arduino.png",
            width: 200,
            height: 200,
            listPorts: {
                1: {name: Lang.Hw.port_en + " LED1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                2: {name: Lang.Hw.port_en + " LED2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 13 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a0: {name: Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a1: {name: Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " A5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.Creamo.getBlocks = function () {
        return {
            creamo_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["creamo"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "creamo_get_number_sensor_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["creamo.get_number_sensor_value(%1)"]}
            },
            creamo_get_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["7", "7"], ["8", "8"], ["12", "12"]],
                    value: "7",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [["7", "7"], ["8", "8"], ["12", "12"]],
                            value: "7",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW
                        }],
                        keyOption: "arduino_get_port_number"
                    }]
                }
            },
            creamo_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["creamo"],
                def: {params: [{type: "creamo_get_port_number"}, null, null], type: "creamo_toggle_led"},
                class: "arduino_set",
                syntax: {js: [], py: ["creamo.toggle_led(%1)"]}
            },
            creamo_toggle_motor: {
                parent: "arduino_toggle_led",
                isNotFor: ["creamo"],
                def: {params: [{type: "creamo_motor_port_number"}, null, null], type: "creamo_toggle_motor"},
                class: "arduino_set",
                syntax: {js: [], py: ["creamo.toggle_led(%1)"]}
            },
            creamo_motor_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["6", "6"], ["9", "9"]],
                    value: "6",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [["6", "6"], ["9", "9"]],
                            value: "6",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW
                        }],
                        keyOption: "arduino_get_port_number"
                    }]
                }
            },
            creamo_toggle_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "creamo_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "creamo_toggle_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "arduino_set",
                isNotFor: ["creamo"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "creamo.set_pin_digital(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            creamo_get_pwm_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["5", "5"], ["6", "6"], ["9", "9"]],
                    value: "5",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [["5", "5"], ["6", "6"], ["9", "9"]],
                            value: "3",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }],
                        keyOption: "arduino_get_pwm_port_number"
                    }]
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.mechatro = {
        name: "mechatro",
        url: "http://cafe.naver.com/easybread",
        imageName: "mechatronics_4d.png",
        title: {en: "4D Mechatronics", ko: "4D 메카트로닉스"},
        setZero: function () {
            Entry.hw.sendQueue = {}, Entry.hw.sendQueue.entryStop = 0, Entry.hw.update(), Entry.hw.update(), Entry.hw.sendQueue = {}
        },
        monitorTemplate: {
            imgPath: "hw/transparent.png",
            width: 605,
            height: 434,
            listPorts: {
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                14: {name: Lang.Hw.port_en + " a0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                15: {name: Lang.Hw.port_en + " a1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                16: {name: Lang.Hw.port_en + " a2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                17: {name: Lang.Hw.port_en + " a3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                18: {name: Lang.Hw.port_en + " a4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                19: {name: Lang.Hw.port_en + " a5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                20: {name: Lang.Hw.port_en + " a6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                21: {name: Lang.Hw.port_en + " a7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                M3: {name: Lang.Hw.port_en + " MA 모터 속도", type: "input", pos: {x: 0, y: 0}},
                M11: {name: Lang.Hw.port_en + " MB 모터 속도", type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        },
        state: {THRESHOLD: [50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50, 50]},
        portMode: {
            SET_G_DEVICE: 128,
            COM_ALIVE: 128,
            COM_INIT_DEVICE: 129,
            COM_STANDBY_DEVICE: 130,
            COM_NO_TONE: 131,
            COM_SET_BLUE_PW: 132,
            SET_DIGITAL_OUT: 144,
            SET_G_MOTOR: 160,
            SET_MOTOR_SPEED: 160,
            SET_MOTOR_CURRENT: 176,
            SET_G_SERVO_PWM_TON: 192,
            SET_SERVO_POSITION: 192,
            SET_SERVO_SPEED: 200,
            SET_PWM: 208,
            SET_TONE: 216,
            SET_G_INPUT: 224,
            SET_ANALOG_IN: 224,
            SET_DIGITAL_IN: 232,
            SET_ULTRASONIC: 240
        },
        transferModeValue: function (t, e, n) {
            var r = "m" + t;
            Entry.hw.portData[r] !== e ? (Entry.hw.sendQueue[r] = e, Entry.hw.sendQueue[t] = n, Entry.hw.update(), delete Entry.hw.sendQueue[r], delete Entry.hw.sendQueue[t]) : (Entry.hw.sendQueue[t] = n, Entry.hw.update(), delete Entry.hw.sendQueue[t])
        },
        transferValue: function (t, e) {
            Entry.hw.sendQueue[t] = e, Entry.hw.update(), delete Entry.hw.sendQueue[t]
        },
        transferMode: function (t, e) {
            var n = "m" + t;
            Entry.hw.portData[n] !== e && (Entry.hw.sendQueue[n] = e, Entry.hw.update(), delete Entry.hw.sendQueue[n])
        }
    }, Entry.mechatro.getBlocks = function () {
        return {
            mechatro_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"], ["A2", "16"], ["A3", "17"], ["A4", "18"], ["A5", "19"], ["A6", "20"], ["A7", "21"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "mechatro_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "MechatroGet",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    if (!Entry.hw.connected) return 0;
                    var n, r, o = e.getNumberField("PORT", e), a = "m" + o;
                    return n = o > 14 ? Entry.mechatro.portMode.SET_ANALOG_IN : Entry.mechatro.portMode.SET_DIGITAL_IN, Entry.hw.portData[a] !== n && (Entry.hw.sendQueue[a] = n, Entry.hw.update(), delete Entry.hw.sendQueue[a]), void 0 !== Entry.hw.portData[o] ? (r = Entry.hw.portData[o], o > 14 && (r = r > Entry.mechatro.state.THRESHOLD[o] ? 1 : 0), r) : 0
                },
                syntax: {js: [], py: ["mechatro.get_digital(%1)"]}
            },
            mechatro_get_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A2", "16"], ["A3", "17"], ["A4", "18"], ["A5", "19"], ["A6", "20"], ["A7", "21"]],
                    value: "16",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "mechatro_get_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "MechatroGet",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = "m" + n, o = Entry.mechatro.portMode.SET_ANALOG_IN;
                    return Entry.hw.portData[r] !== o && (Entry.hw.sendQueue[r] = o, Entry.hw.update(), delete Entry.hw.sendQueue[r]), void 0 !== Entry.hw.portData[n] ? Entry.hw.portData[n] : 0
                },
                syntax: {js: [], py: ["mechatro.sensor_value(%1)"]}
            },
            mechatro_set_threshold: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A2", "16"], ["A3", "17"], ["A4", "18"], ["A5", "19"], ["A6", "20"], ["A7", "21"]],
                    value: "16",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["10~90"]}, null], type: "mechatro_set_threshold"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "MechatroGet",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = e.getValue("VALUE");
                    return Entry.Utils.isNumber(r) || (r = 0), r = Math.max(r, 10), r = Math.min(r, 90), Entry.mechatro.state.THRESHOLD[n] = r, e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.set_threshold(%1, %2)"]}
            },
            mechatro_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"]],
                    value: "4",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "mechatro_get_ultrasonic_value"},
                paramsKeyMap: {TIRG: 0, ECHO: 1},
                class: "MechatroGet",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    if (!Entry.hw.connected) return 0;
                    var n = e.getNumberField("TIRG", e), r = e.getNumberField("ECHO", e),
                        o = Entry.mechatro.portMode.SET_ULTRASONIC;
                    return Entry.mechatro.transferModeValue(n, o, r), void 0 !== Entry.hw.portData[n] ? Entry.hw.portData[n] : 0
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.ultrasonicRead(%1, %2)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            mechatro_set_digital: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "1"], ["끄기", "0"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "mechatro_set_digital"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "Mechatro_d_out",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = Entry.mechatro.portMode.SET_DIGITAL_OUT,
                        o = e.getNumberField("OPERATOR");
                    return Entry.mechatro.transferModeValue(n, r, o), e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.set_digital(%1, %2)"]}
            },
            mechatro_set_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D5", "5"], ["D6", "6"]],
                    value: "5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["0~100"]}, null], type: "mechatro_set_pwm"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "Mechatro_d_out",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = Entry.mechatro.portMode.SET_PWM, o = e.getValue("VALUE");
                    return Entry.Utils.isNumber(o) || (o = 0), o = Math.max(o, 0), o = Math.min(o, 100), Entry.mechatro.transferModeValue(n, r, o), e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.mechatro_set_pwm(%1, %2)"]}
            },
            mechatro_set_tone_time: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["무음", "0"], ["도", "1"], ["도#(레♭)", "2"], ["레", "3"], ["레#(미♭)", "4"], ["미", "5"], ["파", "6"], ["파#(솔♭)", "7"], ["솔", "8"], ["솔#(라♭)", "9"], ["라", "10"], ["라#(시♭)", "11"], ["시", "12"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, {type: "text", params: ["1"]}, null], type: "mechatro_set_tone_time"},
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "Mechatro_d_out",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = "m" + n;
                    if (e.isStart) return 1 == e.timeFlag ? e : (Entry.hw.sendQueue[r] = Entry.mechatro.portMode.COM_NO_TONE, delete Entry.hw.sendQueue[n], Entry.hw.update(), delete Entry.hw.sendQueue[r], delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getNumberValue("DURATION", e);
                    o < 0 && (o = 0);
                    var a = e.getNumberField("NOTE", e);
                    if (0 === o || 0 === a) return Entry.hw.sendQueue[r] = Entry.mechatro.portMode.COM_NO_TONE, Entry.hw.update(), delete Entry.hw.sendQueue[r], e.callReturn();
                    var s = e.getNumberField("OCTAVE", e);
                    return a = e.getNumberField("NOTE", e), o *= 1e3, e.isStart = !0, e.timeFlag = 1, Entry.hw.sendQueue[r] = Entry.mechatro.portMode.SET_TONE, Entry.hw.sendQueue[n] = s << 4 | a - 1, Entry.hw.update(), delete Entry.hw.sendQueue[r], delete Entry.hw.sendQueue[n], setTimeout(function () {
                        e.timeFlag = 0
                    }, o + 32), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "mechatro.tone_time(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            mechatro_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D4", "4"], ["D5", "5"], ["D6", "6"], ["D7", "7"], ["D10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["무음", "0"], ["도", "1"], ["도#(레♭)", "2"], ["레", "3"], ["레#(미♭)", "4"], ["미", "5"], ["파", "6"], ["파#(솔♭)", "7"], ["솔", "8"], ["솔#(라♭)", "9"], ["라", "10"], ["라#(시♭)", "11"], ["시", "12"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, null], type: "mechatro_set_tone"},
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2},
                class: "Mechatro_d_out",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n, r = e.getNumberField("PORT", e), o = e.getNumberField("NOTE", e),
                        a = e.getNumberField("OCTAVE", e) << 4 | (o = e.getNumberField("NOTE", e)) - 1;
                    return 0 === o ? (n = Entry.mechatro.portMode.COM_NO_TONE, Entry.mechatro.transferMode(r, n)) : (n = Entry.mechatro.portMode.SET_TONE, Entry.mechatro.transferModeValue(r, n, a)), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "mechatro.tone(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            mechatro_set_dc_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["MA", "3"], ["MB", "11"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["-100 ~ 100 사이값"]}, null],
                    type: "mechatro_set_dc_motor"
                },
                paramsKeyMap: {PORT: 0, SPEED: 1},
                class: "set_motor",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = e.getValue("SPEED");
                    return Entry.Utils.isNumber(r) || (r = 0), r = Math.round(r), r += 100, r = Math.max(r, 0), r = Math.min(r, 200), Entry.mechatro.transferValue(n, r), e.callReturn()
                }
            },
            mechatro_get_dc_motor_current: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Dropdown", options: [["MA", "14"], ["MB", "15"]], value: "14", fontSize: 11}],
                events: {},
                def: {params: [null], type: "mechatro_get_dc_motor_current"},
                paramsKeyMap: {PORT: 0},
                class: "MechatroGet",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = "m" + n, o = Entry.mechatro.portMode.SET_MOTOR_CURRENT;
                    return Entry.hw.portData[r] !== o && (Entry.hw.sendQueue[r] = o, Entry.hw.update(), delete Entry.hw.sendQueue[r]), void 0 !== Entry.hw.portData[n] ? Entry.hw.portData[n] : 0
                },
                syntax: {js: [], py: ["mechatro.mechatro_get_dc_motor_current(%1)"]}
            },
            mechatro_set_servo_position: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D5", "5"], ["D6", "6"], ["D10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["0~180"]}, null], type: "mechatro_set_servo_position"},
                paramsKeyMap: {PORT: 0, DEGREE: 1},
                class: "set_motor",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = Entry.mechatro.portMode.SET_SERVO_POSITION,
                        o = e.getValue("DEGREE");
                    return Entry.Utils.isNumber(o) || (o = 90), o = Math.max(o, 0), o = Math.min(o, 180), Entry.mechatro.transferModeValue(n, r, o), e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.mechatro_set_servo_position(%1, %2)"]}
            },
            mechatro_set_servo_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D2", "22"], ["D5", "23"], ["D6", "24"], ["D10", "25"]],
                    value: "22",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["1~255"]}, null], type: "mechatro_set_servo_speed"},
                paramsKeyMap: {PORT: 0, SPEED: 1},
                class: "set_motor",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = Entry.mechatro.portMode.SET_SERVO_SPEED,
                        o = e.getValue("SPEED");
                    return Entry.Utils.isNumber(o) || (o = 255), o = Math.max(o, 0), o = Math.min(o, 255), Entry.mechatro.transferModeValue(n, r, o), e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.mechatro_set_servo_speed(%1, %2)"]}
            },
            mechatro_set_blue_pw: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "number", params: ["1"]}, {type: "number", params: ["2"]}, {
                        type: "number",
                        params: ["3"]
                    }, {type: "number", params: ["4"]}, {
                        type: "Indicator",
                        img: "block_icon/hardware_03.png",
                        size: 12
                    }], type: "mechatro_set_blue_pw"
                },
                paramsKeyMap: {PW1: 0, PW2: 1, PW3: 2, PW4: 3},
                class: "Mechatro_blue",
                isNotFor: ["mechatro"],
                func: function (t, e) {
                    var n = Entry.mechatro.portMode.COM_SET_BLUE_PW,
                        r = 1e3 * e.getNumberValue("PW1") + 100 * e.getNumberValue("PW2") + 10 * e.getNumberValue("PW3") + e.getNumberValue("PW4");
                    return Entry.mechatro.transferModeValue(2, n, r), e.callReturn()
                },
                syntax: {js: [], py: ["mechatro.mechatro_set_pwm(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.playcode = {
        name: "playcode",
        url: "http://www.playcode.kr/product",
        imageName: "playcode.png",
        title: {en: "playcode", ko: "플레이코드"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        toByte: function (t) {
            switch (t) {
                case" ":
                    t = 32;
                    break;
                case"!":
                    t = 33;
                    break;
                case'"':
                    t = 34;
                    break;
                case"#":
                    t = 35;
                    break;
                case"$":
                    t = 36;
                    break;
                case"%":
                    t = 37;
                    break;
                case"&":
                    t = 38;
                    break;
                case"'":
                    t = 39;
                    break;
                case"(":
                    t = 40;
                    break;
                case")":
                    t = 41;
                    break;
                case"*":
                    t = 42;
                    break;
                case"+":
                    t = 43;
                    break;
                case",":
                    t = 44;
                    break;
                case"-":
                    t = 45;
                    break;
                case".":
                    t = 46;
                    break;
                case"/":
                    t = 47;
                    break;
                case"0":
                    t = 48;
                    break;
                case"1":
                    t = 49;
                    break;
                case"2":
                    t = 50;
                    break;
                case"3":
                    t = 51;
                    break;
                case"4":
                    t = 52;
                    break;
                case"5":
                    t = 53;
                    break;
                case"6":
                    t = 54;
                    break;
                case"7":
                    t = 55;
                    break;
                case"8":
                    t = 56;
                    break;
                case"9":
                    t = 57;
                    break;
                case":":
                    t = 58;
                    break;
                case";":
                    t = 59;
                    break;
                case"<":
                    t = 60;
                    break;
                case"=":
                    t = 61;
                    break;
                case">":
                    t = 62;
                    break;
                case"?":
                    t = 63;
                    break;
                case"@":
                    t = 64;
                    break;
                case"A":
                    t = 65;
                    break;
                case"B":
                    t = 66;
                    break;
                case"C":
                    t = 67;
                    break;
                case"D":
                    t = 68;
                    break;
                case"E":
                    t = 69;
                    break;
                case"F":
                    t = 70;
                    break;
                case"G":
                    t = 71;
                    break;
                case"H":
                    t = 72;
                    break;
                case"I":
                    t = 73;
                    break;
                case"J":
                    t = 74;
                    break;
                case"K":
                    t = 75;
                    break;
                case"L":
                    t = 76;
                    break;
                case"M":
                    t = 77;
                    break;
                case"N":
                    t = 78;
                    break;
                case"O":
                    t = 79;
                    break;
                case"P":
                    t = 80;
                    break;
                case"Q":
                    t = 81;
                    break;
                case"R":
                    t = 82;
                    break;
                case"S":
                    t = 83;
                    break;
                case"T":
                    t = 84;
                    break;
                case"U":
                    t = 85;
                    break;
                case"V":
                    t = 86;
                    break;
                case"W":
                    t = 87;
                    break;
                case"X":
                    t = 88;
                    break;
                case"Y":
                    t = 89;
                    break;
                case"Z":
                    t = 90;
                    break;
                case"[":
                    t = 91;
                    break;
                case"\\":
                    t = 92;
                    break;
                case"]":
                    t = 93;
                    break;
                case"^":
                    t = 94;
                    break;
                case"_":
                    t = 95;
                    break;
                case"`":
                    t = 96;
                    break;
                case"a":
                    t = 97;
                    break;
                case"b":
                    t = 98;
                    break;
                case"c":
                    t = 99;
                    break;
                case"d":
                    t = 100;
                    break;
                case"e":
                    t = 101;
                    break;
                case"f":
                    t = 102;
                    break;
                case"g":
                    t = 103;
                    break;
                case"h":
                    t = 104;
                    break;
                case"i":
                    t = 105;
                    break;
                case"j":
                    t = 106;
                    break;
                case"k":
                    t = 107;
                    break;
                case"l":
                    t = 108;
                    break;
                case"m":
                    t = 109;
                    break;
                case"n":
                    t = 110;
                    break;
                case"o":
                    t = 111;
                    break;
                case"p":
                    t = 112;
                    break;
                case"q":
                    t = 113;
                    break;
                case"r":
                    t = 114;
                    break;
                case"s":
                    t = 115;
                    break;
                case"t":
                    t = 116;
                    break;
                case"u":
                    t = 117;
                    break;
                case"v":
                    t = 118;
                    break;
                case"w":
                    t = 119;
                    break;
                case"x":
                    t = 120;
                    break;
                case"y":
                    t = 121;
                    break;
                case"z":
                    t = 122;
                    break;
                case"{":
                    t = 123;
                    break;
                case"|":
                    t = 124;
                    break;
                case"}":
                    t = 125;
                    break;
                case"~":
                    t = 126
            }
            return t
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            LIGHT: 9,
            MICROPHONE: 10
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        directionTable: {Forward: 0, Backward: 1},
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.playcode.getBlocks = function () {
        return {
            playcode_port_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            playcode_first_port_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            playcode_get_light_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "빛센서 : %1 포트 값",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "playcode_first_port_list"}], type: "playcode_get_light_value"},
                paramsKeyMap: {PORT: 0},
                class: "playcode_get",
                isNotFor: ["playcode"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.LIGHT;
                    return "A" === n[0] && (n = n.substring(1)), Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.playcode.sensorTypes.LIGHT] = {
                        port: [n],
                        data: 1,
                        time: (new Date).getTime()
                    }, r
                },
                syntax: {js: [], py: ["playcode.get_analog_value(%1)"]}
            },
            playcode_get_mic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "마이크센서 : %1 포트 값",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "playcode_first_port_list"}], type: "playcode_get_mic_value"},
                paramsKeyMap: {PORT: 0},
                class: "playcode_get",
                isNotFor: ["playcode"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.MIC;
                    return "A" === n[0] && (n = n.substring(1)), Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.playcode.sensorTypes.MICROPHONE] = {
                        port: [n],
                        data: 1,
                        time: (new Date).getTime()
                    }, r
                },
                syntax: {js: [], py: ["playcode.get_analog_value(%1)"]}
            },
            playcode_gpio: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "GPIO : %1포트에 %2 보내기 %3",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "playcode_port_list"}, null, null], type: "playcode_gpio"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "playcode_set",
                isNotFor: ["playcode"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = "on" == e.getField("OPERATOR") ? 1 : 0,
                        o = Entry.hw.sendQueue;
                    return o.SET || (o.SET = {}), o.SET[n] = {
                        type: Entry.playcode.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                },
                syntax: {js: [], py: ["playcode.playcode_gpio(%1)"]}
            },
            playcode_servo: {
                color: "#00979D",
                skeleton: "basic",
                template: "Servo : %1포트에 %2 보내기 %3",
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "playcode_first_port_list", params: [1]}, {type: "number", params: ["0"]}, null],
                    type: "playcode_servo"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "playcode_set",
                isNotFor: ["playcode"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.min(r, 180), r = Math.max(r, 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.playcode.sensorTypes.SERVO_PIN,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                }
            },
            playcode_speed: {
                color: "#00979D",
                skeleton: "basic",
                template: "Speed : %1포트에 %2 보내기 %3",
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "playcode_first_port_list", params: [1]}, {type: "number", params: ["0"]}, null],
                    type: "playcode_speed"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "playcode_set",
                isNotFor: ["playcode"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.min(r, 255), r = Math.max(r, 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.playcode.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Xbot = {
        PORT_MAP: {
            rightWheel: 0,
            leftWheel: 0,
            head: 90,
            armR: 90,
            armL: 90,
            analogD5: 127,
            analogD6: 127,
            D4: 0,
            D7: 0,
            D12: 0,
            D13: 0,
            ledR: 0,
            ledG: 0,
            ledB: 0,
            lcdNum: 0,
            lcdTxt: "                ",
            note: 262,
            duration: 0
        },
        setZero: function () {
            var t = Entry.Xbot.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update(), Entry.Xbot.removeAllTimeouts()
        },
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        name: "xbot_epor_edge",
        url: "http://xbot.co.kr/",
        imageName: "xbot.png",
        title: {ko: "엑스봇(원터치 동글/USB)", en: "XBOT(OneTouch Dongle/USB)"}
    }, Entry.Xbot.getBlocks = function () {
        return {
            xbot_digitalInput: {
                color: "#00979D",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_D2_digitalInput, "D2"], [Lang.Blocks.XBOT_D3_digitalInput, "D3"], [Lang.Blocks.XBOT_D11_digitalInput, "D11"]],
                    value: "D2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null], type: "xbot_digitalInput"},
                paramsKeyMap: {DEVICE: 0},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {js: [], py: ["Xbot.digital_input(%1)"]}
            },
            xbot_analogValue: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_CDS, "light"], [Lang.Blocks.XBOT_MIC, "mic"], [Lang.Blocks.XBOT_analog0, "adc0"], [Lang.Blocks.XBOT_analog1, "adc1"], [Lang.Blocks.XBOT_analog2, "adc2"], [Lang.Blocks.XBOT_analog3, "adc3"]],
                    value: "light",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "xbot_analogValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {js: [], py: ["Xbot.analog_value(%1)"]}
            },
            xbot_digitalOutput: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["LED", "D13"], ["D4", "D4"], ["D7", "D7"], ["D12 ", "D12"]],
                    value: "D13",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_High, "HIGH"], [Lang.Blocks.XBOT_Low, "LOW"]],
                    value: "HIGH",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "xbot_digitalOutput"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getStringField("VALUE", e);
                    return n.D13 = "D13" == r && "HIGH" == o ? 1 : 0, n.D4 = "D4" == r && "HIGH" == o ? 1 : 0, n.D7 = "D7" == r && "HIGH" == o ? 1 : 0, n.D12 = "D12" == r && "HIGH" == o ? 1 : 0, e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.digital_output(%1, %2)"]}
            },
            xbot_analogOutput: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D5", "analogD5"], ["D6", "analogD6"]],
                    value: "analogD5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["255"]}, null], type: "xbot_analogOutput"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return "analogD5" == r ? n.analogD5 = o : "analogD6" == r && (n.analogD6 = o), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.analog_output(%1, %2)"]}
            },
            xbot_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_Head, "head"], [Lang.Blocks.XBOT_ArmR, "right"], [Lang.Blocks.XBOT_ArmL, "left"]],
                    value: "head",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["90"]}, null], type: "xbot_servo"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "xbot_motor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return "head" == r ? n.head = o : "right" == r ? n.armR = o : "left" == r && (n.armL = o), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.servo(%1, %2)"]}
            },
            xbot_oneWheel: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_rightWheel, "rightWheel"], [Lang.Blocks.XBOT_leftWheel, "leftWheel"], [Lang.Blocks.XBOT_bothWheel, "bothWheel"]],
                    value: "rightWheel",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}, null], type: "xbot_oneWheel"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "xbot_motor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return "rightWheel" == r ? n.rightWheel = o : "leftWheel" == r ? n.leftWheel = o : n.rightWheel = n.leftWheel = o, e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.one_wheel(%1, %2)"]}
            },
            xbot_twoWheel: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["0"]}, null],
                    type: "xbot_twoWheel"
                },
                paramsKeyMap: {rightWheel: 0, leftWheel: 1},
                class: "xbot_motor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.rightWheel = e.getNumberValue("rightWheel"), n.leftWheel = e.getNumberValue("leftWheel"), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.two_wheel(%1, %2)"]}
            },
            xbot_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null], type: "xbot_rgb"
                },
                paramsKeyMap: {ledR: 0, ledG: 1, ledB: 2},
                class: "xbot_rgb",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.ledR = e.getNumberValue("ledR"), n.ledG = e.getNumberValue("ledG"), n.ledB = e.getNumberValue("ledB"), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.rgb(%1, %2, %3)"]}
            },
            xbot_rgb_picker: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Color"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "xbot_rgb_picker"},
                paramsKeyMap: {VALUE: 0},
                class: "xbot_rgb",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = e.getStringField("VALUE"), r = Entry.hw.sendQueue;
                    return r.ledR = parseInt(.3 * parseInt(n.substr(1, 2), 16)), r.ledG = parseInt(.3 * parseInt(n.substr(3, 2), 16)), r.ledB = parseInt(.3 * parseInt(n.substr(5, 2), 16)), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.rgb_picker(%1)"]}
            },
            xbot_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.XBOT_c, "C"], [Lang.Blocks.XBOT_d, "D"], [Lang.Blocks.XBOT_e, "E"], [Lang.Blocks.XBOT_f, "F"], [Lang.Blocks.XBOT_g, "G"], [Lang.Blocks.XBOT_a, "A"], [Lang.Blocks.XBOT_b, "B"]],
                    value: "C",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", {type: "text", params: ["0.5"]}, null], type: "xbot_buzzer"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.duration = 0, e.callReturn());
                    var r = e.getStringField("NOTE", e), o = e.getStringField("OCTAVE", e),
                        a = e.getNumberValue("VALUE", e), s = r + o;
                    n.note = "C2" == s ? 65 : "D2" == s ? 73 : "E2" == s ? 82 : "F2" == s ? 87 : "G2" == s ? 98 : "A2" == s ? 110 : "B2" == s ? 123 : "C3" == s ? 131 : "D3" == s ? 147 : "E3" == s ? 165 : "F3" == s ? 175 : "G3" == s ? 196 : "A3" == s ? 220 : "B3" == s ? 247 : "C4" == s ? 262 : "D4" == s ? 294 : "E4" == s ? 330 : "F4" == s ? 349 : "G4" == s ? 392 : "A4" == s ? 440 : "B4" == s ? 494 : "C5" == s ? 523 : "D5" == s ? 587 : "E5" == s ? 659 : "F5" == s ? 698 : "G5" == s ? 784 : "A5" == s ? 880 : "B5" == s ? 988 : "C6" == s ? 1047 : "D6" == s ? 1175 : "E6" == s ? 1319 : "F6" == s ? 1397 : "G6" == s ? 1568 : "A6" == s ? 1760 : "B6" == s ? 1976 : "C7" == s ? 2093 : "D7" == s ? 2349 : "E7" == s ? 2637 : "F7" == s ? 2794 : "G7" == s ? 3136 : "A7" == s ? 3520 : "B7" == s ? 3951 : 262, n.duration = 40 * a, e.isStart = !0, e.timeFlag = 1;
                    var i = setTimeout(function () {
                        e.timeFlag = 0, Entry.Xbot.removeTimeout(i)
                    }, 1e3 * a);
                    return Entry.Xbot.timeouts.push(i), e
                },
                syntax: {js: [], py: ["Xbot.buzzer(%1, %2, %3)"]}
            },
            xbot_lcd: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"]],
                    value: "0",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["Hello"]}, null], type: "xbot_lcd"},
                paramsKeyMap: {LINE: 0, VALUE: 1},
                class: "xbot_sensor",
                isNotFor: ["xbot_epor_edge"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberField("LINE", e), o = e.getStringValue("VALUE", e);
                    return 0 == r ? (n.lcdNum = 0, n.lcdTxt = o) : 1 == r && (n.lcdNum = 1, n.lcdTxt = o), e.callReturn()
                },
                syntax: {js: [], py: ["Xbot.lcd(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Turtle = {
        PORT_MAP: {
            module: "turtle",
            leftWheel: 0,
            rightWheel: 0,
            ledRed: 0,
            ledGreen: 0,
            ledBlue: 0,
            buzzer: 0,
            pulse: 0,
            pulseId: 0,
            note: 0,
            sound: 0,
            soundRepeat: 1,
            soundId: 0,
            lineTracerMode: 0,
            lineTracerModeId: 0,
            lineTracerGain: 5,
            lineTracerSpeed: 5,
            motionId: 0,
            motionType: 0,
            motionUnit: 0,
            motionSpeed: 0,
            motionValue: 0,
            motionRadius: 0
        },
        setZero: function () {
            var t = Entry.Turtle.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update();
            var r = Entry.Turtle;
            r.pulseId = 0, r.soundId = 0, r.lineTracerModeId = 0, r.motionId = 0, r.clickedId = -1, r.doubleClickedId = -1, r.longPressedId = -1, r.colorPatternId = -1, r.wheelStateId = -1, r.soundStateId = -1, r.lineTracerStateId = -1, r.tempo = 60, r.removeAllTimeouts()
        },
        pulseId: 0,
        soundId: 0,
        lineTracerModeId: 0,
        motionId: 0,
        clickedId: -1,
        doubleClickedId: -1,
        longPressedId: -1,
        colorPatternId: -1,
        wheelStateId: -1,
        soundStateId: -1,
        lineTracerStateId: -1,
        tempo: 60,
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        setModule: function (t) {
            t.module = "turtle"
        },
        setPulse: function (t, e) {
            this.pulseId = this.pulseId % 255 + 1, t.pulse = e, t.pulseId = this.pulseId
        },
        setSound: function (t, e, n) {
            "number" != typeof n && (n = 1), n < 0 && (n = -1), n && (this.soundId = this.soundId % 255 + 1, t.sound = e, t.soundRepeat = n, t.soundId = this.soundId)
        },
        setLineTracerMode: function (t, e) {
            this.lineTracerModeId = this.lineTracerModeId % 255 + 1, t.lineTracerMode = e, t.lineTracerModeId = this.lineTracerModeId
        },
        setMotion: function (t, e, n, r, o, a) {
            this.motionId = this.motionId % 255 + 1, t.motionType = e, t.motionUnit = n, t.motionSpeed = r, t.motionValue = o, t.motionRadius = a, t.motionId = this.motionId
        },
        setLedColor: function (t, e) {
            "RED" == e ? (t.ledRed = 255, t.ledGreen = 0, t.ledBlue = 0) : "ORANGE" == e ? (t.ledRed = 255, t.ledGreen = 63, t.ledBlue = 0) : "YELLOW" == e ? (t.ledRed = 255, t.ledGreen = 255, t.ledBlue = 0) : "GREEN" == e ? (t.ledRed = 0, t.ledGreen = 255, t.ledBlue = 0) : "CYAN" == e ? (t.ledRed = 0, t.ledGreen = 255, t.ledBlue = 255) : "BLUE" == e ? (t.ledRed = 0, t.ledGreen = 0, t.ledBlue = 255) : "VIOLET" == e ? (t.ledRed = 63, t.ledGreen = 0, t.ledBlue = 255) : "MAGENTA" == e ? (t.ledRed = 255, t.ledGreen = 0, t.ledBlue = 255) : "WHITE" == e && (t.ledRed = 255, t.ledGreen = 255, t.ledBlue = 255)
        },
        name: "turtle",
        url: "http://turtle.school",
        imageName: "turtle.png",
        title: {en: "Turtle", ko: "거북이"},
        monitorTemplate: {
            imgPath: "hw/turtle.png",
            width: 480,
            height: 354,
            listPorts: {
                colorNumber: {name: Lang.Blocks.ROBOID_color_number, type: "input", pos: {x: 0, y: 0}},
                accelerationX: {name: Lang.Blocks.ROBOID_acceleration_x, type: "input", pos: {x: 0, y: 0}},
                accelerationY: {name: Lang.Blocks.ROBOID_acceleration_y, type: "input", pos: {x: 0, y: 0}},
                accelerationZ: {name: Lang.Blocks.ROBOID_acceleration_z, type: "input", pos: {x: 0, y: 0}},
                buzzer: {name: Lang.Blocks.ROBOID_buzzer, type: "output", pos: {x: 0, y: 0}},
                note: {name: Lang.Blocks.ROBOID_note, type: "output", pos: {x: 0, y: 0}}
            },
            ports: {
                floor: {name: Lang.Blocks.ROBOID_floor, type: "input", pos: {x: 193, y: 342}},
                button: {name: Lang.Blocks.ROBOID_button, type: "input", pos: {x: 290, y: 30}},
                ledRed: {name: Lang.Blocks.ROBOID_head_color + " R", type: "output", pos: {x: 140, y: 280}},
                ledGreen: {name: Lang.Blocks.ROBOID_head_color + " G", type: "output", pos: {x: 140, y: 280}},
                ledBlue: {name: Lang.Blocks.ROBOID_head_color + " B", type: "output", pos: {x: 140, y: 280}},
                leftWheel: {name: Lang.Blocks.ROBOID_left_wheel, type: "output", pos: {x: 363, y: 319}},
                rightWheel: {name: Lang.Blocks.ROBOID_right_wheel, type: "output", pos: {x: 120, y: 86}}
            },
            mode: "both"
        }
    }, Entry.Turtle.getBlocks = function () {
        return {
            turtle_touching_color: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "2"], [Lang.Blocks.ROBOID_color_orange, "3"], [Lang.Blocks.ROBOID_color_yellow, "4"], [Lang.Blocks.ROBOID_color_green, "5"], [Lang.Blocks.ROBOID_color_sky_blue, "6"], [Lang.Blocks.ROBOID_color_blue, "7"], [Lang.Blocks.ROBOID_color_purple, "8"], [Lang.Blocks.ROBOID_color_black, "1"], [Lang.Blocks.ROBOID_color_white, "9"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "turtle_touching_color"},
                paramsKeyMap: {COLOR: 0},
                class: "turtle_sensor",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return Number(e.getField("COLOR")) - 1 == n.colorNumber
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.touching(%1)",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "2"], [Lang.Blocks.ROBOID_color_orange, "3"], [Lang.Blocks.ROBOID_color_yellow, "4"], [Lang.Blocks.ROBOID_color_green, "5"], [Lang.Blocks.ROBOID_color_sky_blue, "6"], [Lang.Blocks.ROBOID_color_blue, "7"], [Lang.Blocks.ROBOID_color_purple, "8"], [Lang.Blocks.ROBOID_color_black, "1"], [Lang.Blocks.ROBOID_color_white, "9"]],
                            value: "2",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.touching_colors"
                        }]
                    }]
                }
            },
            turtle_is_color_pattern: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "turtle_is_color_pattern"},
                paramsKeyMap: {COLOR1: 0, COLOR2: 1},
                class: "turtle_sensor",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return 10 * Number(e.getField("COLOR1")) + Number(e.getField("COLOR2")) == n.colorPattern
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.match_color_pattern(%1, %2)",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.pattern_colors"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                            value: "3",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.pattern_colors"
                        }]
                    }]
                }
            },
            turtle_button_state: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                    value: "clicked",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "turtle_button_state"},
                paramsKeyMap: {EVENT: 0},
                class: "turtle_sensor",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    return 1 == Entry.hw.portData[e.getField("EVENT")]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.clicked()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["clicked"]
                    }, {
                        syntax: "Turtle.double_clicked()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["doubleClicked"]
                    }, {
                        syntax: "Turtle.long_pressed()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["longPressed"]
                    }]
                }
            },
            turtle_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                    value: "colorNumber",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "turtle_value"},
                paramsKeyMap: {DEVICE: 0},
                class: "turtle_sensor",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.color_number()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["colorNumber"]
                    }, {
                        syntax: "Turtle.color_pattern()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["colorPattern"]
                    }, {
                        syntax: "Turtle.floor()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["floor"]
                    }, {
                        syntax: "Turtle.button()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["button"]
                    }, {
                        syntax: "Turtle.acceleration_x()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationX"]
                    }, {
                        syntax: "Turtle.acceleration_y()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationY"]
                    }, {
                        syntax: "Turtle.acceleration_z()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationZ"]
                    }]
                }
            },
            turtle_move_forward_unit: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "CM",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["6"]}, null, null], type: "turtle_move_forward_unit"},
                paramsKeyMap: {VALUE: 0, UNIT: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.wheelStateId != o.wheelStateId && (o.wheelStateId = r.wheelStateId, 0 == r.wheelState) ? (delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setLineTracerMode(n, 0);
                    var a = e.getField("UNIT"), s = 1;
                    "SEC" == a ? s = 2 : "PULSE" == a && (s = 3);
                    var i = e.getNumberValue("VALUE");
                    return o.setMotion(n, 1, s, 0, i, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.move_forward(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "CM",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }]
                    }]
                }
            },
            turtle_move_backward_unit: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "CM",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["6"]}, null, null], type: "turtle_move_backward_unit"},
                paramsKeyMap: {VALUE: 0, UNIT: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.wheelStateId != o.wheelStateId && (o.wheelStateId = r.wheelStateId, 0 == r.wheelState) ? (delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setLineTracerMode(n, 0);
                    var a = e.getField("UNIT"), s = 1;
                    "SEC" == a ? s = 2 : "PULSE" == a && (s = 3);
                    var i = e.getNumberValue("VALUE");
                    return o.setMotion(n, 2, s, 0, i, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.move_backward(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "CM",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }]
                    }]
                }
            },
            turtle_turn_unit_in_place: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["90"]}, null, null], type: "turtle_turn_unit_in_place"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1, UNIT: 2},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.wheelStateId != o.wheelStateId && (o.wheelStateId = r.wheelStateId, 0 == r.wheelState) ? (delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setLineTracerMode(n, 0);
                    var a = e.getField("DIRECTION"), s = e.getField("UNIT"), i = 1;
                    "SEC" == s ? i = 2 : "PULSE" == s && (i = 3);
                    var l = e.getNumberValue("VALUE");
                    return "LEFT" == a ? o.setMotion(n, 3, i, 0, l, 0) : o.setMotion(n, 4, i, 0, l, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.turn_left(%2, %3)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Turtle.turn_right(%2, %3)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }],
                        params: ["RIGHT"]
                    }]
                }
            },
            turtle_turn_unit_with_radius_in_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                    value: "HEAD",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["90"]}, null, {type: "text", params: ["6"]}, null, null],
                    type: "turtle_turn_unit_with_radius_in_direction"
                },
                paramsKeyMap: {DIRECTION: 0, VALUE: 1, UNIT: 2, RADIUS: 3, HEAD: 4},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.wheelStateId != o.wheelStateId && (o.wheelStateId = r.wheelStateId, 0 == r.wheelState) ? (delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setLineTracerMode(n, 0);
                    var a = e.getField("DIRECTION"), s = e.getField("UNIT"), i = 1;
                    "SEC" == s ? i = 2 : "PULSE" == s && (i = 3);
                    var l = e.getNumberValue("VALUE"), c = e.getField("HEAD"), u = e.getNumberValue("RADIUS");
                    return "LEFT" == a ? "HEAD" == c ? o.setMotion(n, 9, i, 0, l, u) : o.setMotion(n, 10, i, 0, l, u) : "HEAD" == c ? o.setMotion(n, 11, i, 0, l, u) : o.setMotion(n, 12, i, 0, l, u), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.swing_left(%2, %3, %4, %5)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Turtle.swing_right(%2, %3, %4, %5)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: ["RIGHT"]
                    }]
                }
            },
            turtle_pivot_around_wheel_unit_in_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                    value: "HEAD",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["90"]}, null, null, null],
                    type: "turtle_pivot_around_wheel_unit_in_direction"
                },
                paramsKeyMap: {DIRECTION: 0, VALUE: 1, UNIT: 2, HEAD: 3},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.wheelStateId != o.wheelStateId && (o.wheelStateId = r.wheelStateId, 0 == r.wheelState) ? (delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setLineTracerMode(n, 0);
                    var a = e.getField("DIRECTION"), s = e.getField("UNIT"), i = 1;
                    "SEC" == s ? i = 2 : "PULSE" == s && (i = 3);
                    var l = e.getNumberValue("VALUE"), c = e.getField("HEAD");
                    return "LEFT" == a ? "HEAD" == c ? o.setMotion(n, 5, i, 0, l, 0) : o.setMotion(n, 6, i, 0, l, 0) : "HEAD" == c ? o.setMotion(n, 7, i, 0, l, 0) : o.setMotion(n, 8, i, 0, l, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.pivot_left(%2, %3, %4)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Turtle.pivot_right(%2, %3, %4)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: ["RIGHT"]
                    }]
                }
            },
            turtle_change_wheels_by_left_right: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["10"]}, {type: "text", params: ["10"]}, null],
                    type: "turtle_change_wheels_by_left_right"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("LEFT"), o = e.getNumberValue("RIGHT"),
                        a = Entry.Turtle;
                    return a.setModule(n), a.setPulse(n, 0), a.setLineTracerMode(n, 0), a.setMotion(n, 0, 0, 0, 0, 0), n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + r : r, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.wheels_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_set_wheels_to_left_right: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["50"]}, {type: "text", params: ["50"]}, null],
                    type: "turtle_set_wheels_to_left_right"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Turtle;
                    return r.setModule(n), r.setPulse(n, 0), r.setLineTracerMode(n, 0), r.setMotion(n, 0, 0, 0, 0, 0), n.leftWheel = e.getNumberValue("LEFT"), n.rightWheel = e.getNumberValue("RIGHT"), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.wheels(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_change_wheel_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["10"]}, null], type: "turtle_change_wheel_by"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE"),
                        a = Entry.Turtle;
                    return a.setModule(n), a.setPulse(n, 0), a.setLineTracerMode(n, 0), a.setMotion(n, 0, 0, 0, 0, 0), "LEFT" == r ? n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o : "RIGHT" == r ? n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o : (n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.left_wheel_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["LEFT"]
                    }, {
                        syntax: "Turtle.right_wheel_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Turtle.wheels_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["BOTH"],
                        keyOption: "SAME"
                    }]
                }
            },
            turtle_set_wheel_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["50"]}, null], type: "turtle_set_wheel_to"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE"),
                        a = Entry.Turtle;
                    return a.setModule(n), a.setPulse(n, 0), a.setLineTracerMode(n, 0), a.setMotion(n, 0, 0, 0, 0, 0), "LEFT" == r ? n.leftWheel = o : "RIGHT" == r ? n.rightWheel = o : (n.leftWheel = o, n.rightWheel = o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.left_wheel(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["LEFT"]
                    }, {
                        syntax: "Turtle.right_wheel(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Turtle.wheels(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["BOTH"],
                        keyOption: "SAME"
                    }]
                }
            },
            turtle_follow_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_black, "10"], [Lang.Blocks.ROBOID_color_red, "11"], [Lang.Blocks.ROBOID_color_green, "13"], [Lang.Blocks.ROBOID_color_blue, "15"], [Lang.Blocks.ROBOID_color_any, "17"]],
                    value: "10",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "turtle_follow_line"},
                paramsKeyMap: {COLOR: 0},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Turtle;
                    r.setModule(n), n.leftWheel = 0, n.rightWheel = 0, r.setPulse(n, 0), r.setMotion(n, 0, 0, 0, 0, 0);
                    var o = Number(e.getField("COLOR"));
                    return r.setLineTracerMode(n, o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.follow_line(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_black, "10"], [Lang.Blocks.ROBOID_color_red, "11"], [Lang.Blocks.ROBOID_color_green, "13"], [Lang.Blocks.ROBOID_color_blue, "15"], [Lang.Blocks.ROBOID_color_any, "17"]],
                            value: "10",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.line_colors"
                        }]
                    }]
                }
            },
            turtle_follow_line_until: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "61"], [Lang.Blocks.ROBOID_color_yellow, "62"], [Lang.Blocks.ROBOID_color_green, "63"], [Lang.Blocks.ROBOID_color_sky_blue, "64"], [Lang.Blocks.ROBOID_color_blue, "65"], [Lang.Blocks.ROBOID_color_purple, "66"], [Lang.Blocks.ROBOID_color_any, "67"]],
                    value: "61",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "turtle_follow_line_until"},
                paramsKeyMap: {COLOR: 0},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.lineTracerStateId != o.lineTracerStateId && (o.lineTracerStateId = r.lineTracerStateId, 2 == r.lineTracerState) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(n, 0), e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setMotion(n, 0, 0, 0, 0, 0);
                    var a = Number(e.getField("COLOR"));
                    return o.setLineTracerMode(n, a), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.follow_black_line_until(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "61"], [Lang.Blocks.ROBOID_color_yellow, "62"], [Lang.Blocks.ROBOID_color_green, "63"], [Lang.Blocks.ROBOID_color_sky_blue, "64"], [Lang.Blocks.ROBOID_color_blue, "65"], [Lang.Blocks.ROBOID_color_purple, "66"], [Lang.Blocks.ROBOID_color_any, "67"]],
                            value: "61",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.target_colors"
                        }]
                    }]
                }
            },
            turtle_follow_line_until_black: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "71"], [Lang.Blocks.ROBOID_color_green, "73"], [Lang.Blocks.ROBOID_color_blue, "75"], [Lang.Blocks.ROBOID_color_any, "77"]],
                    value: "71",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "turtle_follow_line_until_black"},
                paramsKeyMap: {COLOR: 0},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.lineTracerStateId != o.lineTracerStateId && (o.lineTracerStateId = r.lineTracerStateId, 2 == r.lineTracerState) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(n, 0), e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setMotion(n, 0, 0, 0, 0, 0);
                    var a = Number(e.getField("COLOR"));
                    return o.setLineTracerMode(n, a), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.follow_line_until_black(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "71"], [Lang.Blocks.ROBOID_color_green, "73"], [Lang.Blocks.ROBOID_color_blue, "75"], [Lang.Blocks.ROBOID_color_any, "77"]],
                            value: "71",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.color_lines"
                        }]
                    }]
                }
            },
            turtle_cross_intersection: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "turtle_cross_intersection"},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    return o.setModule(n), e.isStart ? r.lineTracerStateId != o.lineTracerStateId && (o.lineTracerStateId = r.lineTracerStateId, 2 == r.lineTracerState) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(n, 0), e.callReturn()) : e : (e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setMotion(n, 0, 0, 0, 0, 0), o.setLineTracerMode(n, 40), e)
                },
                syntax: {js: [], py: [{syntax: "Turtle.intersection_forward()"}]}
            },
            turtle_turn_at_intersection: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                    value: "20",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "turtle_turn_at_intersection"},
                paramsKeyMap: {DIRECTION: 0},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.lineTracerStateId != o.lineTracerStateId && (o.lineTracerStateId = r.lineTracerStateId, 2 == r.lineTracerState) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(n, 0), e.callReturn()) : e;
                    e.isStart = !0, n.leftWheel = 0, n.rightWheel = 0, o.setPulse(n, 0), o.setMotion(n, 0, 0, 0, 0, 0);
                    var a = Number(e.getField("DIRECTION"));
                    return Entry.Turtle.setLineTracerMode(n, a), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.intersection_left()",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["20"]
                    }, {
                        syntax: "Turtle.intersection_right()",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["30"]
                    }, {
                        syntax: "Turtle.intersection_uturn()",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["50"]
                    }]
                }
            },
            turtle_set_following_speed_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["5", null], type: "turtle_set_following_speed_to"},
                paramsKeyMap: {SPEED: 0},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Turtle.setModule(n);
                    var r = Number(e.getField("SPEED"));
                    return n.lineTracerSpeed = r, n.lineTracerGain = r, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.line_tracer_speed(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            turtle_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "turtle_stop"},
                class: "turtle_wheel",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Turtle;
                    return r.setModule(n), n.leftWheel = 0, n.rightWheel = 0, r.setPulse(n, 0), r.setLineTracerMode(n, 0), r.setMotion(n, 0, 0, 0, 0, 0), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.stop()"}]}
            },
            turtle_set_head_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "RED"], [Lang.Blocks.ROBOID_color_orange, "ORANGE"], [Lang.Blocks.ROBOID_color_yellow, "YELLOW"], [Lang.Blocks.ROBOID_color_green, "GREEN"], [Lang.Blocks.ROBOID_color_sky_blue, "CYAN"], [Lang.Blocks.ROBOID_color_blue, "BLUE"], [Lang.Blocks.ROBOID_color_violet, "VIOLET"], [Lang.Blocks.ROBOID_color_purple, "MAGENTA"], [Lang.Blocks.ROBOID_color_white, "WHITE"]],
                    value: "RED",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "turtle_set_head_led_to"},
                paramsKeyMap: {COLOR: 0},
                class: "turtle_led",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("COLOR");
                    return Entry.Turtle.setModule(n), Entry.Turtle.setLedColor(n, r), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.led_color(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "RED"], [Lang.Blocks.ROBOID_color_orange, "ORANGE"], [Lang.Blocks.ROBOID_color_yellow, "YELLOW"], [Lang.Blocks.ROBOID_color_green, "GREEN"], [Lang.Blocks.ROBOID_color_sky_blue, "CYAN"], [Lang.Blocks.ROBOID_color_blue, "BLUE"], [Lang.Blocks.ROBOID_color_violet, "VIOLET"], [Lang.Blocks.ROBOID_color_purple, "MAGENTA"], [Lang.Blocks.ROBOID_color_white, "WHITE"]],
                            value: "RED",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.led_colors"
                        }]
                    }]
                }
            },
            turtle_change_head_led_by_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["10"]}, {type: "text", params: ["0"]}, {
                        type: "text",
                        params: ["0"]
                    }, null], type: "turtle_change_head_led_by_rgb"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2},
                class: "turtle_led",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Turtle.setModule(n);
                    var r = e.getNumberValue("RED"), o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return n.ledRed = void 0 != n.ledRed ? n.ledRed + r : r, n.ledGreen = void 0 != n.ledGreen ? n.ledGreen + o : o, n.ledBlue = void 0 != n.ledBlue ? n.ledBlue + a : a, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.led_by(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_set_head_led_to_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["0"]}, {
                        type: "text",
                        params: ["0"]
                    }, null], type: "turtle_set_head_led_to_rgb"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2},
                class: "turtle_led",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Turtle.setModule(n), n.ledRed = e.getNumberValue("RED"), n.ledGreen = e.getNumberValue("GREEN"), n.ledBlue = e.getNumberValue("BLUE"), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.led(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_clear_head_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "turtle_clear_head_led"},
                class: "turtle_led",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Turtle.setModule(n), n.ledRed = 0, n.ledGreen = 0, n.ledBlue = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.led(0)"}]}
            },
            turtle_play_sound_times: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}, null], type: "turtle_play_sound_times"},
                paramsKeyMap: {SOUND: 0, COUNT: 1},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Turtle.setModule(n), n.buzzer = 0, n.note = 0;
                    var r = Number(e.getField("SOUND")), o = e.getNumberValue("COUNT");
                    return o && Entry.Turtle.setSound(n, r, o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.sound(%1, %2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.sounds"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_play_sound_times_until_done: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}, null], type: "turtle_play_sound_times_until_done"},
                paramsKeyMap: {SOUND: 0, COUNT: 1},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Turtle;
                    if (o.setModule(n), e.isStart) return r.soundStateId != o.soundStateId && (o.soundStateId = r.soundStateId, 0 == r.soundState) ? (delete e.isStart, Entry.engine.isContinue = !1, e.callReturn()) : e;
                    e.isStart = !0, n.buzzer = 0, n.note = 0;
                    var a = Number(e.getField("SOUND")), s = e.getNumberValue("COUNT");
                    return s ? (o.setSound(n, a, s), e) : (o.sound = 0, o.soundRepeat = 1, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn())
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.sound_until_done(%1, %2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.sounds"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_change_buzzer_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["10"]}, null], type: "turtle_change_buzzer_by"},
                paramsKeyMap: {VALUE: 0},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Turtle.setModule(n);
                    var r = e.getNumberValue("VALUE");
                    return n.buzzer = void 0 != n.buzzer ? n.buzzer + r : r, n.note = 0, Entry.Turtle.setSound(n, 0), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.buzzer_by(%1)"}]}
            },
            turtle_set_buzzer_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1000"]}, null], type: "turtle_set_buzzer_to"},
                paramsKeyMap: {VALUE: 0},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Turtle.setModule(n), n.buzzer = e.getNumberValue("VALUE"), n.note = 0, Entry.Turtle.setSound(n, 0), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.buzzer(%1)"}]}
            },
            turtle_clear_sound: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "turtle_clear_sound"},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Turtle.setModule(n), n.buzzer = 0, n.note = 0, Entry.Turtle.setSound(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Turtle.sound(0)", params: [null]}, {
                        syntax: "Turtle.sound(Turtle.SOUND_OFF)",
                        params: [null]
                    }, {syntax: "Turtle.buzzer(0)", params: [null]}]
                }
            },
            turtle_play_note: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", null], type: "turtle_play_note"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberField("NOTE", e), o = e.getNumberField("OCTAVE", e);
                    return Entry.Turtle.setModule(n), n.buzzer = 0, r += 12 * (o - 1), n.note = r, Entry.Turtle.setSound(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.pitch(%1, %2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.notes"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            turtle_play_note_for_beats: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", {type: "text", params: ["0.5"]}, null], type: "turtle_play_note_for_beats"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Turtle;
                    if (r.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.note = 0, e.callReturn());
                    var o = e.getNumberField("NOTE", e), a = e.getNumberField("OCTAVE", e),
                        s = e.getNumberValue("VALUE", e);
                    o += 12 * (a - 1);
                    var i = 60 * s * 1e3 / r.tempo;
                    if (e.isStart = !0, e.timeFlag = 1, n.buzzer = 0, n.note = o, r.setSound(n, 0), i > 100) {
                        var l = setTimeout(function () {
                            n.note = 0, r.removeTimeout(l)
                        }, i - 100);
                        r.timeouts.push(l)
                    }
                    var c = setTimeout(function () {
                        e.timeFlag = 0, r.removeTimeout(c)
                    }, i);
                    return r.timeouts.push(c), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.note(%1, %2, %3)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.notes"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            turtle_rest_for_beats: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0.25"]}, null], type: "turtle_rest_for_beats"},
                paramsKeyMap: {VALUE: 0},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Turtle;
                    if (r.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var o = e.getNumberValue("VALUE");
                    o = 60 * o * 1e3 / r.tempo, n.buzzer = 0, n.note = 0, r.setSound(n, 0);
                    var a = setTimeout(function () {
                        e.timeFlag = 0, r.removeTimeout(a)
                    }, o);
                    return r.timeouts.push(a), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Turtle.note(0, %1)",
                        textParams: [{type: "Block", accept: "string"}],
                        keyOption: "0"
                    }, {
                        syntax: "Turtle.note(Turtle.NOTE_OFF, %1)",
                        textParams: [{type: "Block", accept: "string"}],
                        keyOption: "Turtle.NOTE_OFF"
                    }]
                }
            },
            turtle_change_tempo_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["20"]}, null], type: "turtle_change_tempo_by"},
                paramsKeyMap: {VALUE: 0},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.Turtle;
                    return n.setModule(Entry.hw.sendQueue), n.tempo += e.getNumberValue("VALUE"), n.tempo < 1 && (n.tempo = 1), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.tempo_by(%1)", textParams: [{type: "Block", accept: "string"}]}]}
            },
            turtle_set_tempo_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["60"]}, null], type: "turtle_set_tempo_to"},
                paramsKeyMap: {VALUE: 0},
                class: "turtle_sound",
                isNotFor: ["turtle"],
                func: function (t, e) {
                    var n = Entry.Turtle;
                    return n.setModule(Entry.hw.sendQueue), n.tempo = e.getNumberValue("VALUE"), n.tempo < 1 && (n.tempo = 1), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Turtle.tempo(%1)", textParams: [{type: "Block", accept: "string"}]}]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.trueRobot = {
        name: "trueRobot",
        url: "http://www.sigongmedia.co.kr",
        imageName: "truetrue.png",
        title: {en: "TrueTrueRobot", ko: "뚜루뚜루"},
        PORT_MAP: {
            singlemotor: 10,
            dualmotor: 10,
            colorled: 8,
            leds: 70,
            linetracer: 76,
            led_line: 5,
            leftWheel: 9,
            rightWheel: 10,
            allWheel: 11,
            colorRed: 0,
            colorGreen: 0,
            colorBlue: 0,
            ledPort: 0,
            dualPort: 11
        },
        setZero: function () {
            var t = Entry.trueRobot.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update()
        }
    }, Entry.trueRobot.getBlocks = function () {
        return {
            truetrue_get_linesensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["Left_Out", "L2"], ["Left_In", "L1"], ["Right_In", "R1"], ["Right_Out", "R2"]],
                    value: "Left_Out",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["L2"], type: "truetrue_get_linesensor"},
                paramsKeyMap: {position: 0},
                class: "trueRobot_sensor",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("position")]
                },
                syntax: {js: [], py: []}
            },
            truetrue_get_proxisensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["Left", "ProxiLeft"], ["Right", "ProxiRight"]],
                    value: "Left",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["ProxiLeft"], type: "truetrue_get_proxisensor"},
                paramsKeyMap: {position: 0},
                class: "trueRobot_sensor",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("position")]
                },
                syntax: {js: [], py: []}
            },
            truetrue_get_accsensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["X-axis", "AccX"], ["Y-axis", "AccY"], ["Z-axis", "AccZ"], ["Tilt", "AccStatus"]],
                    value: "X-axis",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["AccX"], type: "truetrue_get_accsensor"},
                paramsKeyMap: {position: 0},
                class: "trueRobot_sensor",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("position")]
                },
                syntax: {js: [], py: []}
            },
            truetrue_get_bottomcolorsensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["Red", "BColorRed"], ["Green", "BColorGreen"], ["Blue", "BColorBlue"], ["ColorKey", "BColorKey"]],
                    value: "Red",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["BColorRed"], type: "truetrue_get_bottomcolorsensor"},
                paramsKeyMap: {position: 0},
                class: "trueRobot_sensor",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("position")]
                },
                syntax: {js: [], py: []}
            },
            truetrue_get_frontcolorsensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["Left", "FColorLeftKey"], ["Right", "FColorRightKey"]],
                    value: "Left",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["FColorLeftKey"], type: "truetrue_get_frontcolorsensor"},
                paramsKeyMap: {position: 0},
                class: "trueRobot_sensor",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("position")]
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_singlemotor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["Left", "9"], ["Right", "10"]],
                    value: "Left",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["9", "0", null], type: "truetrue_set_singlemotor"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.singlemotor, r = e.getNumberValue("VALUE");
                    r = Math.round(r), r = Math.max(r, -100);
                    var o = 0, a = 0;
                    return (r = Math.min(r, 100)) < 0 ? (o = -1 * r, a = 1) : (o = r, a = 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: e.getNumberField("PORT"),
                        dataA: o,
                        dataB: a,
                        dataC: 0
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_dualmotor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["0", "0", "0", null], type: "truetrue_set_dualmotor"},
                paramsKeyMap: {leftValue: 0, rightValue: 1, delayValue: 2},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.dualmotor;
                    if (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, Entry.hw.sendQueue.SET[n] = {
                        port: Entry.trueRobot.PORT_MAP.dualPort,
                        dataA: 0,
                        dataB: 0,
                        dataC: 0
                    }, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var r = e.getNumberValue("leftValue");
                    r = Math.round(r), r = Math.max(r, -100), r = Math.min(r, 100);
                    var o = e.getNumberValue("rightValue");
                    o = Math.round(o), o = Math.max(o, -100), o = Math.min(o, 100);
                    var a = e.getNumberValue("delayValue");
                    a = Math.round(a), a = Math.max(a, -100), a = Math.min(a, 100), Entry.hw.sendQueue.SET[n] = {
                        port: Entry.trueRobot.PORT_MAP.dualPort,
                        dataA: r,
                        dataB: o,
                        dataC: a
                    };
                    var s = e.getNumberValue("delayValue");
                    return s = Math.round(s), s = Math.max(s, -100), s = Math.min(s, 100), s = 60 / (Entry.FPS || 60) * s * 1e3, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_colorled: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["0", "0", "0", null], type: "truetrue_set_colorled"},
                paramsKeyMap: {redColor: 0, greenColor: 1, blueColor: 2},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.colorled, r = e.getNumberValue("redColor");
                    r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255);
                    var o = e.getNumberValue("greenColor");
                    o = Math.round(o), o = Math.max(o, 0), o = Math.min(o, 255);
                    var a = e.getNumberValue("blueColor");
                    return a = Math.round(a), a = Math.max(a, 0), a = Math.min(a, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: Entry.trueRobot.PORT_MAP.colorled,
                        dataA: r,
                        dataB: o,
                        dataC: a
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_led_proxi: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["근접센서왼쪽", 9], ["근접센서오른쪽", 10]],
                    value: "근접센서왼쪽",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "켜기",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [9, "on", null], type: "truetrue_set_led_proxi"},
                paramsKeyMap: {PORT: 0, ONOFF: 1},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.leds, r = "on" == e.getField("ONOFF") ? 1 : 0;
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: e.getNumberField("PORT"),
                        dataA: r,
                        dataB: 7,
                        dataC: 7
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_led_colorsensor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["전면컬러센서", 3], ["바닥컬러센서", 4]],
                    value: "전면컬러센서",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "켜기",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [3, "on", null], type: "truetrue_set_led_colorsensor"},
                paramsKeyMap: {PORT: 0, ONOFF: 1},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.leds, r = "on" == e.getField("ONOFF") ? 1 : 0;
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: e.getNumberField("PORT"),
                        dataA: r,
                        dataB: 7,
                        dataC: 7
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_led_linesensor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "켜기",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["on", null], type: "truetrue_set_led_linesensor"},
                paramsKeyMap: {ONOFF: 0},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.leds, r = "on" == e.getField("ONOFF") ? 1 : 0;
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: Entry.trueRobot.PORT_MAP.led_line,
                        dataA: r,
                        dataB: 7,
                        dataC: 7
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            truetrue_set_linetracer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "켜기",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["on", null], type: "truetrue_set_linetracer"},
                paramsKeyMap: {ONOFF: 0},
                class: "trueRobot_control",
                isNotFor: ["trueRobot"],
                func: function (t, e) {
                    var n = Entry.trueRobot.PORT_MAP.linetracer, r = "on" == e.getField("ONOFF") ? 1 : 0;
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        port: Entry.trueRobot.PORT_MAP.led_line,
                        dataA: r,
                        dataB: 7,
                        dataC: 7
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.robotori = {
        PORT_MAP: {
            A0: 0,
            A1: 0,
            A2: 0,
            A3: 0,
            A4: 0,
            A5: 0,
            D2: 0,
            D3: 0,
            D10: 0,
            D11: 0,
            D12: 0,
            D13: 0,
            AOUT5: 0,
            AOUT6: 0,
            AOUT9: 0,
            SERVO: 90,
            rightMotor: 0,
            leftMotor: 0
        },
        setZero: function () {
            var t = Entry.robotori.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update(), Entry.robotori
        },
        name: "robotori",
        url: "http://www.robotori.com/",
        imageName: "robotori.png",
        title: {ko: "로보토리", en: "robotori"},
        monitorTemplate: {
            imgPath: "hw/robotori.png",
            width: 395,
            height: 372,
            listPorts: {
                A0: {name: "A0", type: "input", pos: {x: 0, y: 0}},
                A1: {name: "A1", type: "input", pos: {x: 0, y: 0}},
                A2: {name: "A2", type: "input", pos: {x: 0, y: 0}},
                A3: {name: "A3", type: "input", pos: {x: 0, y: 0}},
                A4: {name: "A4", type: "input", pos: {x: 0, y: 0}},
                A5: {name: "A5", type: "input", pos: {x: 0, y: 0}},
                D2: {name: "D2", type: "input", pos: {x: 0, y: 0}},
                D3: {name: "D3", type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.robotori.getBlocks = function () {
        return {
            robotori_digitalInput: {
                color: "#00979D",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_D2_Input, "D2"], [Lang.Blocks.robotori_D3_Input, "D3"]],
                    value: "D2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null], type: "robotori_digitalInput"},
                paramsKeyMap: {DEVICE: 0},
                class: "robotori_sensor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            robotori_analogInput: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_A0_Input, "A0"], [Lang.Blocks.robotori_A1_Input, "A1"], [Lang.Blocks.robotori_A2_Input, "A2"], [Lang.Blocks.robotori_A3_Input, "A3"], [Lang.Blocks.robotori_A4_Input, "A4"], [Lang.Blocks.robotori_A5_Input, "A5"]],
                    value: "A0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "robotori_analogInput"},
                paramsKeyMap: {DEVICE: 0},
                class: "robotori_sensor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            robotori_digitalOutput: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_D10_Output, "D10"], [Lang.Blocks.robotori_D11_Output, "D11"], [Lang.Blocks.robotori_D12_Output, "D12"], [Lang.Blocks.robotori_D13_Output, "D13"]],
                    value: "D10",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_On, "ON"], [Lang.Blocks.robotori_Off, "OFF"]],
                    value: "ON",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotori_digitalOutput"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "robotori_sensor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getStringField("VALUE", e);
                    return n.D10 = "D10" == r && "ON" == o ? 1 : 0, n.D11 = "D11" == r && "ON" == o ? 1 : 0, n.D12 = "D12" == r && "ON" == o ? 1 : 0, n.D13 = "D13" == r && "ON" == o ? 1 : 0, e.callReturn()
                }
            },
            robotori_analogOutput: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_analog5, "AOUT5"], [Lang.Blocks.robotori_analog6, "AOUT6"], [Lang.Blocks.robotori_analog9, "AOUT9"]],
                    value: "AOUT5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["255"]}, null], type: "robotori_analogOutput"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "robotori_sensor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return "AOUT5" == r ? n.AOUT5 = o : "AOUT6" == r ? n.AOUT6 = o : "AOUT9" == r && (n.AOUT9 = o), e.callReturn()
                }
            },
            robotori_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["90"]}, null], type: "robotori_servo"},
                paramsKeyMap: {SERVO: 0},
                class: "robotori_motor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.SERVO = e.getNumberValue("SERVO"), e.callReturn()
                }
            },
            robotori_dc_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_DC_rightmotor, "RIGHT_MOTOR"], [Lang.Blocks.robotori_DC_leftmotor, "LEFT_MOTOR"]],
                    value: "RIGHT_MOTOR",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotori_DC_STOP, "STOP"], [Lang.Blocks.robotori_DC_CW, "CW"], [Lang.Blocks.robotori_DC_CCW, "CCW"]],
                    value: "STOP",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotori_dc_direction"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "robotori_motor",
                isNotFor: ["robotori"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getStringField("VALUE", e);
                    return "RIGHT_MOTOR" == r && ("STOP" == o ? n.RIGHT_MOTOR = 255 : "CW" == o ? n.RIGHT_MOTOR = 0 : "CCW" == o && (n.RIGHT_MOTOR = 180)), "LEFT_MOTOR" == r && ("STOP" == o ? n.LEFT_MOTOR = 255 : "CW" == o ? n.LEFT_MOTOR = 0 : "CCW" == o && (n.LEFT_MOTOR = 180)), e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.Robotis_carCont = {
        INSTRUCTION: {NONE: 0, WRITE: 3, READ: 2},
        CONTROL_TABLE: {
            CM_LED: [67, 1],
            CM_SPRING_RIGHT: [69, 1, 69, 2],
            CM_SPRING_LEFT: [70, 1, 69, 2],
            CM_SWITCH: [71, 1],
            CM_SOUND_DETECTED: [86, 1],
            CM_SOUND_DETECTING: [87, 1],
            CM_IR_LEFT: [91, 2, 91, 4],
            CM_IR_RIGHT: [93, 2, 91, 4],
            CM_CALIBRATION_LEFT: [95, 2],
            CM_CALIBRATION_RIGHT: [97, 2],
            AUX_MOTOR_SPEED_LEFT: [152, 2],
            AUX_MOTOR_SPEED_RIGHT: [154, 2]
        },
        setZero: function () {
            Entry.hw.sendQueue.setZero = [1], this.update(), this.setRobotisData(null), Entry.hw.sendQueue.setZero = null, this.update(), this.setRobotisData([[Entry.Robotis_carCont.INSTRUCTION.WRITE, 152, 2, 0], [Entry.Robotis_carCont.INSTRUCTION.WRITE, 154, 2, 0]]), this.update()
        },
        name: "robotis_carCont",
        url: "http://www.robotis.com/index/product.php?cate_code=111310",
        imageName: "robotis_carCont.png",
        title: {ko: "로보티즈 로봇자동차", en: "Robotis Robot car"},
        delay: 40,
        postCallReturn: function (t, e, n) {
            return n <= 0 ? (this.setRobotisData(e), this.update(), t.callReturn()) : t.isStart ? 1 == t.timeFlag ? (this.setRobotisData(null), this.update(), t) : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, this.update(), t.callReturn()) : (t.isStart = !0, t.timeFlag = 1, this.setRobotisData(e), this.update(), setTimeout(function () {
                t.timeFlag = 0
            }, n), t)
        },
        wait: function (t, e) {
            Entry.hw.socket.send((0, o.default)(t));
            for (var n = (new Date).getTime(), r = n; r < n + e;) r = (new Date).getTime()
        },
        update: function () {
            Entry.hw.update();
            var t = Entry.hw.sendQueue.ROBOTIS_DATA;
            t && t.forEach(function (t) {
                t.send = !0
            }), this.setRobotisData(null)
        },
        filterSendData: function () {
            var t = Entry.hw.sendQueue.ROBOTIS_DATA;
            return t ? t.filter(function (t) {
                return !0 !== t.send
            }) : null
        },
        setRobotisData: function (t) {
            var e = this.filterSendData();
            Entry.hw.sendQueue.ROBOTIS_DATA = null == t ? e : e ? e.concat(t) : t
        }
    }, Entry.Robotis_openCM70 = {
        INSTRUCTION: {NONE: 0, WRITE: 3, READ: 2},
        CONTROL_TABLE: {
            CM_LED_R: [79, 1],
            CM_LED_G: [80, 1],
            CM_LED_B: [81, 1],
            CM_BUZZER_INDEX: [84, 1],
            CM_BUZZER_TIME: [85, 1],
            CM_SOUND_DETECTED: [86, 1],
            CM_SOUND_DETECTING: [87, 1],
            CM_USER_BUTTON: [26, 1],
            CM_MOTION: [66, 1],
            AUX_SERVO_POSITION: [152, 2],
            AUX_IR: [168, 2],
            AUX_TOUCH: [202, 1],
            AUX_TEMPERATURE: [234, 1],
            AUX_ULTRASONIC: [242, 1],
            AUX_MAGNETIC: [250, 1],
            AUX_MOTION_DETECTION: [258, 1],
            AUX_COLOR: [266, 1],
            AUX_CUSTOM: [216, 2],
            AUX_BRIGHTNESS: [288, 2],
            AUX_HYDRO_THEMO_HUMIDITY: [274, 1],
            AUX_HYDRO_THEMO_TEMPER: [282, 1],
            AUX_SERVO_MODE: [126, 1],
            AUX_SERVO_SPEED: [136, 2],
            AUX_MOTOR_SPEED: [136, 2],
            AUX_LED_MODULE: [210, 1]
        },
        IRS_MODULEWRITE: {PORT3: !1, PORT4: !1, PORT5: !1, PORT6: !1},
        SERVO_MODULEWRITE: {PORT3: !1, PORT4: !1, PORT5: !1, PORT6: !1},
        setZero: function () {
            Entry.hw.sendQueue.setZero = [1], Entry.Robotis_carCont.update(), Entry.Robotis_carCont.setRobotisData(null), Entry.hw.sendQueue.setZero = null, Entry.Robotis_carCont.update(), Entry.Robotis_carCont.setRobotisData([[Entry.Robotis_openCM70.INSTRUCTION.WRITE, 136, 12, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 79, 3, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 86, 1, 0], [Entry.Robotis_openCM70.INSTRUCTION.WRITE, 108, 4, 0]]), Entry.Robotis_carCont.update(), Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT3 = !1, Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT4 = !1, Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT5 = !1, Entry.Robotis_openCM70.IRS_MODULEWRITE.PORT6 = !1, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT3 = !1, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT4 = !1, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT5 = !1, Entry.Robotis_openCM70.SERVO_MODULEWRITE.PORT6 = !1
        },
        name: "robotis_openCM70",
        url: "http://www.robotis.com/index/product.php?cate_code=111310",
        imageName: "robotis_openCM70.png",
        title: {ko: "로보티즈 IoT", en: "Robotis Open CM70"},
        delay: 15
    }, Entry.Robotis_carCont.getBlocks = function () {
        return {
            robotis_carCont_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_cm_spring_left, "CM_SPRING_LEFT"], [Lang.Blocks.robotis_cm_spring_right, "CM_SPRING_RIGHT"], [Lang.Blocks.robotis_cm_switch, "CM_SWITCH"], [Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"], [Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"], [Lang.Blocks.robotis_cm_ir_left, "CM_IR_LEFT"], [Lang.Blocks.robotis_cm_ir_right, "CM_IR_RIGHT"], [Lang.Blocks.robotis_cm_calibration_left, "CM_CALIBRATION_LEFT"], [Lang.Blocks.robotis_cm_calibration_right, "CM_CALIBRATION_RIGHT"]],
                    value: "CM_SPRING_LEFT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "robotis_carCont_sensor_value"},
                paramsKeyMap: {SENSOR: 0},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n = Entry.Robotis_carCont.INSTRUCTION.READ, r = 0, o = 0, a = 0, s = 0,
                        i = e.getStringField("SENSOR");
                    if ("CM_SPRING_LEFT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[2], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_LEFT[3]) : "CM_SPRING_RIGHT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[2], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_SPRING_RIGHT[3]) : "CM_SWITCH" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_SWITCH[1]) : "CM_SOUND_DETECTED" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : "CM_SOUND_DETECTING" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_IR_LEFT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[2], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_LEFT[3]) : "CM_IR_RIGHT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[2], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_IR_RIGHT[3]) : "CM_CALIBRATION_LEFT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1]) : "CM_CALIBRATION_RIGHT" == i ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1]) : "CM_BUTTON_STATUS" == i && (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[0], o = Entry.Robotis_carCont.CONTROL_TABLE.CM_BUTTON_STATUS[1]), Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == a && Entry.hw.sendQueue.prevTime && new Date - Entry.hw.sendQueue.prevTime < 300) return Entry.hw.sendQueue.prevResult;
                    Entry.Robotis_carCont.setRobotisData([[n, r, o, 0, s]]), Entry.Robotis_carCont.update();
                    var l = Entry.hw.portData[a];
                    return Entry.hw.sendQueue.prevAddress = a, Entry.hw.sendQueue.prevTime = new Date, Entry.hw.sendQueue.prevResult = l, l
                },
                syntax: {js: [], py: ["Robotis.carcont_sensor_value(%1)"]}
            },
            robotis_carCont_cm_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotis_carCont_cm_led"},
                paramsKeyMap: {VALUE_LEFT: 0, VALUE_RIGHT: 1},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n, r, o = e.getField("VALUE_LEFT", e), a = e.getField("VALUE_RIGHT", e),
                        s = Entry.Robotis_carCont.INSTRUCTION.WRITE, i = 0;
                    n = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[0], r = Entry.Robotis_carCont.CONTROL_TABLE.CM_LED[1], 1 == o && 1 == a ? i = 9 : 1 == o && 0 == a && (i = 8), 0 == o && 1 == a && (i = 1);
                    var l = [[s, n, r, i]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_carCont.delay)
                },
                syntax: {js: [], py: ["Robotis.carcont_cm_led(%1, %2)"]}
            },
            robotis_carCont_cm_sound_detected_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "robotis_carCont_cm_sound_detected_clear"},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n = [[Entry.Robotis_carCont.INSTRUCTION.WRITE, Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_carCont.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]];
                    return Entry.Robotis_carCont.postCallReturn(e, n, Entry.Robotis_carCont.delay)
                },
                syntax: {js: [], py: ["Robotis.carcont_cm_sound_clear()"]}
            },
            robotis_carCont_aux_motor_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "number", params: ["500"]}, null],
                    type: "robotis_carCont_aux_motor_speed"
                },
                paramsKeyMap: {DIRECTION: 0, DIRECTION_ANGLE: 1, VALUE: 2},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n = e.getField("DIRECTION", e), r = e.getField("DIRECTION_ANGLE", e),
                        o = e.getNumberValue("VALUE"), a = Entry.Robotis_carCont.INSTRUCTION.WRITE, s = 0, i = 0;
                    "LEFT" == n ? (s = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0], i = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[1]) : (s = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[0], i = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_RIGHT[1]), "CW" == r ? (o += 1024) > 2047 && (o = 2047) : o > 1023 && (o = 1023);
                    var l = [[a, s, i, o]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_carCont.delay)
                },
                syntax: {js: [], py: ["Robotis.carcont_aux_motor_speed(%1, %2, %3)"]}
            },
            robotis_carCont_aux_motor_speed2: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "왼쪽 감속모터 속도를 %1, 출력값을 %2 (으)로 오른쪽 감속모터 속도를 %3, 출력값을 %4 (으)로 정하기 %5",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["500"]}, null, {type: "number", params: ["500"]}, null],
                    type: "robotis_carCont_aux_motor_speed2"
                },
                paramsKeyMap: {LEFT_ANGLE: 0, LEFT_VALUE: 1, RIGHT_ANGLE: 2, RIGHT_VALUE: 3},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n = Entry.Robotis_carCont.INSTRUCTION.WRITE,
                        r = Entry.Robotis_carCont.CONTROL_TABLE.AUX_MOTOR_SPEED_LEFT[0],
                        o = e.getField("LEFT_ANGLE", e), a = e.getNumberValue("LEFT_VALUE"),
                        s = e.getField("RIGHT_ANGLE", e), i = e.getNumberValue("RIGHT_VALUE");
                    a = Math.min(a, 1023), a = Math.max(a, 0), i = Math.min(i, 1023), i = Math.max(i, 0), "CW" === o && (a += 1024), "CW" === s && (i += 1024);
                    var l = [[n, r, 4, a + (i << 16)]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_carCont.delay)
                }
            },
            robotis_carCont_cm_calibration: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.General.left, "LEFT"], [Lang.General.right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["0"]}, null], type: "robotis_carCont_cm_calibration"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "robotis_carCont_cm",
                isNotFor: ["robotis_carCont"],
                func: function (t, e) {
                    var n = e.getField("DIRECTION", e), r = e.getNumberValue("VALUE"),
                        o = Entry.Robotis_carCont.INSTRUCTION.WRITE, a = 0, s = 0;
                    "LEFT" == n ? (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_LEFT[1]) : (a = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[0], s = Entry.Robotis_carCont.CONTROL_TABLE.CM_CALIBRATION_RIGHT[1]);
                    var i = [[o, a, s, r]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_carCont.delay)
                },
                syntax: {js: [], py: ["Robotis.carcont_cm_calibration(%1, %2)"]}
            }
        }
    }, Entry.Robotis_openCM70.getBlocks = function () {
        return {
            robotis_openCM70_cm_custom_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["BYTE", "BYTE"], ["WORD", "WORD"], ["DWORD", "DWORD"]],
                    value: "BYTE",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "number", params: ["0"]}, null], type: "robotis_openCM70_cm_custom_value"},
                paramsKeyMap: {VALUE: 0, SIZE: 1},
                class: "robotis_openCM70_custom",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    e.executor.scope;
                    var n, r, o, a = Entry.Robotis_openCM70.INSTRUCTION.READ, s = 0, i = e.getStringField("SIZE");
                    if ("BYTE" == i ? s = 1 : "WORD" == i ? s = 2 : "DWORD" == i && (s = 4), r = n = e.getNumberValue("VALUE"), o = s, Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == r && Entry.hw.sendQueue.prevTime && new Date - Entry.hw.sendQueue.prevTime < 200) return Entry.hw.sendQueue.prevResult;
                    Entry.Robotis_carCont.setRobotisData([[a, n, s, 0, o]]), Entry.Robotis_carCont.update();
                    var l = Entry.hw.portData[r];
                    return Entry.hw.sendQueue.prevAddress = r, Entry.hw.sendQueue.prevTime = new Date, Entry.hw.sendQueue.prevResult = l, l
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_custom_value(%1, %2)"]}
            },
            robotis_openCM70_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_cm_sound_detected, "CM_SOUND_DETECTED"], [Lang.Blocks.robotis_cm_sound_detecting, "CM_SOUND_DETECTING"], [Lang.Blocks.robotis_cm_user_button, "CM_USER_BUTTON"]],
                    value: "CM_SOUND_DETECTED",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "robotis_openCM70_sensor_value"},
                paramsKeyMap: {SENSOR: 0},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n = e.executor.scope;
                    n.isStart = !0, n.count = 0;
                    var r = Entry.Robotis_openCM70.INSTRUCTION.READ, o = 0, a = 0, s = 0, i = 0,
                        l = e.getStringField("SENSOR");
                    if ("CM_SOUND_DETECTED" == l ? (s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], i = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], o = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1]) : "CM_SOUND_DETECTING" == l ? (s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], i = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1], o = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[0], a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTING[1]) : "CM_USER_BUTTON" == l && (s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], i = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1], o = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[0], a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_USER_BUTTON[1]), s += 0 * i, Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == s && Entry.hw.sendQueue.prevTime && new Date - Entry.hw.sendQueue.prevTime < 200) return Entry.hw.sendQueue.prevResult;
                    Entry.Robotis_carCont.setRobotisData([[r, o, a, 0, i]]), Entry.Robotis_carCont.update();
                    var c = Entry.hw.portData[s];
                    return Entry.hw.sendQueue.prevAddress = s, Entry.hw.sendQueue.prevTime = new Date, Entry.hw.sendQueue.prevResult = c, c
                },
                syntax: {js: [], py: ["Robotis.opencm70_sensor_value(%1)"]}
            },
            robotis_openCM70_aux_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["3", "PORT_3"], ["4", "PORT_4"], ["5", "PORT_5"], ["6", "PORT_6"]],
                    value: "PORT_3",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_aux_servo_position, "AUX_SERVO_POSITION"], [Lang.Blocks.robotis_aux_ir, "AUX_IR"], [Lang.Blocks.robotis_aux_touch, "AUX_TOUCH"], [Lang.Blocks.robotis_aux_brightness, "AUX_BRIGHTNESS"], [Lang.Blocks.robotis_aux_hydro_themo_humidity, "AUX_HYDRO_THEMO_HUMIDITY"], [Lang.Blocks.robotis_aux_hydro_themo_temper, "AUX_HYDRO_THEMO_TEMPER"], [Lang.Blocks.robotis_aux_temperature, "AUX_TEMPERATURE"], [Lang.Blocks.robotis_aux_ultrasonic, "AUX_ULTRASONIC"], [Lang.Blocks.robotis_aux_magnetic, "AUX_MAGNETIC"], [Lang.Blocks.robotis_aux_motion_detection, "AUX_MOTION_DETECTION"], [Lang.Blocks.robotis_aux_color, "AUX_COLOR"], [Lang.Blocks.robotis_aux_custom, "AUX_CUSTOM"]],
                    value: "AUX_SERVO_POSITION",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "robotis_openCM70_aux_sensor_value"},
                paramsKeyMap: {PORT: 0, SENSOR: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    e.executor.scope;
                    var n = Entry.Robotis_openCM70.INSTRUCTION.READ, r = 0, o = 0, a = 0, s = 0,
                        i = e.getStringField("PORT"), l = e.getStringField("SENSOR"), c = 0;
                    if ("PORT_3" == i ? c = 2 : "PORT_4" == i ? c = 3 : "PORT_5" == i ? c = 4 : "PORT_6" == i && (c = 5), "AUX_SERVO_POSITION" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1]) : "AUX_IR" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_IR[1]) : "AUX_TOUCH" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TOUCH[1]) : "AUX_TEMPERATURE" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_TEMPERATURE[1]) : "AUX_BRIGHTNESS" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_BRIGHTNESS[1]) : "AUX_HYDRO_THEMO_HUMIDITY" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_HUMIDITY[1]) : "AUX_HYDRO_THEMO_TEMPER" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_HYDRO_THEMO_TEMPER[1]) : "AUX_ULTRASONIC" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_ULTRASONIC[1]) : "AUX_MAGNETIC" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MAGNETIC[1]) : "AUX_MOTION_DETECTION" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTION_DETECTION[1]) : "AUX_COLOR" == l ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_COLOR[1]) : "AUX_CUSTOM" == l && (a = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1], r = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0], o = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1]), r = a += c * s, Entry.hw.sendQueue.prevAddress && Entry.hw.sendQueue.prevAddress == a && Entry.hw.sendQueue.prevTime && new Date - Entry.hw.sendQueue.prevTime < 200) return Entry.hw.sendQueue.prevResult;
                    Entry.Robotis_carCont.setRobotisData([[n, r, o, 0, s]]), Entry.Robotis_carCont.update();
                    var u = Entry.hw.portData[a];
                    return Entry.hw.sendQueue.prevAddress = a, Entry.hw.sendQueue.prevTime = new Date, Entry.hw.sendQueue.prevResult = u, u
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_sensor_value(%1, %2)"]}
            },
            robotis_openCM70_cm_buzzer_index: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.General.note_a + "(0)", "0"], [Lang.General.note_a + "#(1)", "1"], [Lang.General.note_b + "(2)", "2"], [Lang.General.note_c + "(3)", "3"], [Lang.General.note_c + "#(4)", "4"], [Lang.General.note_d + "(5)", "5"], [Lang.General.note_d + "#(6)", "6"], [Lang.General.note_e + "(7)", "7"], [Lang.General.note_f + "(8)", "8"], [Lang.General.note_f + "#(9)", "9"], [Lang.General.note_g + "(10)", "10"], [Lang.General.note_g + "#(11)", "11"], [Lang.General.note_a + "(12)", "12"], [Lang.General.note_a + "#(13)", "13"], [Lang.General.note_b + "(14)", "14"], [Lang.General.note_c + "(15)", "15"], [Lang.General.note_c + "#(16)", "16"], [Lang.General.note_d + "(17)", "17"], [Lang.General.note_d + "#(18)", "18"], [Lang.General.note_e + "(19)", "19"], [Lang.General.note_f + "(20)", "20"], [Lang.General.note_f + "#(21)", "21"], [Lang.General.note_g + "(22)", "22"], [Lang.General.note_g + "#(23)", "23"], [Lang.General.note_a + "(24)", "24"], [Lang.General.note_a + "#(25)", "25"], [Lang.General.note_b + "(26)", "26"], [Lang.General.note_c + "(27)", "27"], [Lang.General.note_c + "#(28)", "28"], [Lang.General.note_d + "(29)", "29"], [Lang.General.note_d + "#(30)", "30"], [Lang.General.note_e + "(31)", "31"], [Lang.General.note_f + "(32)", "32"], [Lang.General.note_f + "#(33)", "33"], [Lang.General.note_g + "(34)", "34"], [Lang.General.note_g + "#(35)", "35"], [Lang.General.note_a + "(36)", "36"], [Lang.General.note_a + "#(37)", "37"], [Lang.General.note_b + "(38)", "38"], [Lang.General.note_c + "(39)", "39"], [Lang.General.note_c + "#(40)", "40"], [Lang.General.note_d + "(41)", "41"], [Lang.General.note_d + "#(42)", "42"], [Lang.General.note_e + "(43)", "43"], [Lang.General.note_f + "(44)", "44"], [Lang.General.note_f + "#(45)", "45"], [Lang.General.note_g + "(46)", "46"], [Lang.General.note_g + "#(47)", "47"], [Lang.General.note_a + "(48)", "48"], [Lang.General.note_a + "#(49)", "49"], [Lang.General.note_b + "(50)", "50"], [Lang.General.note_c + "(51)", "51"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["1"]}, null], type: "robotis_openCM70_cm_buzzer_index"},
                paramsKeyMap: {CM_BUZZER_INDEX: 0, CM_BUZZER_TIME: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r, o = e.getField("CM_BUZZER_INDEX", e), a = e.getNumberValue("CM_BUZZER_TIME", e),
                        s = Entry.Robotis_openCM70.INSTRUCTION.WRITE, i = 0;
                    n = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0], r = Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1], (i = parseInt(10 * a)) > 50 && (i = 50);
                    var l = [[s, n, r, i], [s, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], o]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, 1e3 * a + 100)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_buzzer_index(%1, %2)"]}
            },
            robotis_openCM70_cm_buzzer_melody: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"], ["16", "16"], ["17", "17"], ["18", "18"], ["19", "19"], ["20", "20"], ["21", "21"], ["22", "22"], ["23", "23"], ["24", "24"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "robotis_openCM70_cm_buzzer_melody"},
                paramsKeyMap: {CM_BUZZER_MELODY: 0},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n = e.getField("CM_BUZZER_MELODY", e), r = Entry.Robotis_openCM70.INSTRUCTION.WRITE,
                        o = [[r, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_TIME[1], 255], [r, Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_BUZZER_INDEX[1], n]];
                    return Entry.Robotis_carCont.postCallReturn(e, o, 1100)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_buzzer_melody(%1)"]}
            },
            robotis_openCM70_cm_sound_detected_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "robotis_openCM70_cm_sound_detected_clear"},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_SOUND_DETECTED[1], 0]];
                    return Entry.Robotis_carCont.postCallReturn(e, n, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_sound_clear()"]}
            },
            robotis_openCM70_cm_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_red_color, "CM_LED_R"], [Lang.Blocks.robotis_common_green_color, "CM_LED_G"], [Lang.Blocks.robotis_common_blue_color, "CM_LED_B"]],
                    value: "CM_LED_R",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_common_off, "0"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotis_openCM70_cm_led"},
                paramsKeyMap: {CM_LED: 0, VALUE: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n = e.getField("CM_LED", e), r = e.getField("VALUE", e),
                        o = Entry.Robotis_openCM70.INSTRUCTION.WRITE, a = 0, s = 0;
                    "CM_LED_R" == n ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_R[1]) : "CM_LED_G" == n ? (a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_G[1]) : "CM_LED_B" == n && (a = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[0], s = Entry.Robotis_openCM70.CONTROL_TABLE.CM_LED_B[1]);
                    var i = [[o, a, s, r]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_led(%1, %2)"]}
            },
            robotis_openCM70_cm_motion: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["1"]}, null], type: "robotis_openCM70_cm_motion"},
                paramsKeyMap: {VALUE: 0},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[0], Entry.Robotis_openCM70.CONTROL_TABLE.CM_MOTION[1], e.getNumberValue("VALUE", e)]];
                    return Entry.Robotis_carCont.postCallReturn(e, n, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_motion(%1)"]}
            },
            robotis_openCM70_aux_motor_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_1, "1"], [Lang.Blocks.robotis_common_port_2, "2"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "number", params: ["500"]}, null],
                    type: "robotis_openCM70_aux_motor_speed"
                },
                paramsKeyMap: {PORT: 0, DIRECTION_ANGLE: 1, VALUE: 2},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getField("DIRECTION_ANGLE", e),
                        a = e.getNumberValue("VALUE"), s = Entry.Robotis_openCM70.INSTRUCTION.WRITE, i = 0;
                    i = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[0], i += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_MOTOR_SPEED[1]), "CW" == o ? (a += 1024) > 2047 && (a = 2047) : a > 1023 && (a = 1023);
                    var l = [[s, i, n, a]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_motor_speed(%1, %2, %3)"]}
            },
            robotis_openCM70_aux_servo_mode: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]],
                    value: "3",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_wheel_mode, "0"], [Lang.Blocks.robotis_common_joint_mode, "1"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotis_openCM70_aux_servo_mode"},
                paramsKeyMap: {PORT: 0, MODE: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getField("MODE", e),
                        a = Entry.Robotis_openCM70.INSTRUCTION.WRITE, s = 0;
                    s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[0];
                    var i = [[a, s += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_MODE[1]), n, o]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_servo_mode(%1, %2)"]}
            },
            robotis_openCM70_aux_servo_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]],
                    value: "3",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_clockwhise, "CW"], [Lang.Blocks.robotis_common_counter_clockwhise, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "number", params: ["500"]}, null],
                    type: "robotis_openCM70_aux_servo_speed"
                },
                paramsKeyMap: {PORT: 0, DIRECTION_ANGLE: 1, VALUE: 2},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getField("DIRECTION_ANGLE", e),
                        a = e.getNumberValue("VALUE"), s = Entry.Robotis_openCM70.INSTRUCTION.WRITE, i = 0;
                    i = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[0], i += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_SPEED[1]), "CW" == o ? (a += 1024) > 2047 && (a = 2047) : a > 1023 && (a = 1023);
                    var l = [[s, i, n, a]];
                    return Entry.Robotis_carCont.postCallReturn(e, l, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_servo_speed(%1, %2, %3)"]}
            },
            robotis_openCM70_aux_servo_position: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["512"]}, null],
                    type: "robotis_openCM70_aux_servo_position"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getNumberValue("VALUE"),
                        a = Entry.Robotis_openCM70.INSTRUCTION.WRITE, s = 0;
                    s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[0], s += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_SERVO_POSITION[1]), o > 1023 ? o = 1023 : o < 0 && (o = 0);
                    var i = [[a, s, n, o]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_servo_position(%1, %2)"]}
            },
            robotis_openCM70_aux_led_module: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]],
                    value: "3",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_off, "0"], [Lang.Blocks.robotis_cm_led_right + Lang.Blocks.robotis_common_on, "1"], [Lang.Blocks.robotis_cm_led_left + Lang.Blocks.robotis_common_on, "2"], [Lang.Blocks.robotis_cm_led_both + Lang.Blocks.robotis_common_on, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "robotis_openCM70_aux_led_module"},
                paramsKeyMap: {PORT: 0, LED_MODULE: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getField("LED_MODULE", e),
                        a = Entry.Robotis_openCM70.INSTRUCTION.WRITE, s = 0;
                    s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[0];
                    var i = [[a, s += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_LED_MODULE[1]), n, o]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_led_module(%1, %2)"]}
            },
            robotis_openCM70_aux_custom: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.robotis_common_port_3, "3"], [Lang.Blocks.robotis_common_port_4, "4"], [Lang.Blocks.robotis_common_port_5, "5"], [Lang.Blocks.robotis_common_port_6, "6"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["0"]}, null], type: "robotis_openCM70_aux_custom"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "robotis_openCM70_cm",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n, r = e.getField("PORT", e), o = e.getNumberValue("VALUE"),
                        a = Entry.Robotis_openCM70.INSTRUCTION.WRITE, s = 0;
                    s = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[0];
                    var i = [[a, s += (r - 1) * (n = Entry.Robotis_openCM70.CONTROL_TABLE.AUX_CUSTOM[1]), n, o]];
                    return Entry.Robotis_carCont.postCallReturn(e, i, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_aux_custom(%1, %2)"]}
            },
            robotis_openCM70_cm_custom: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, null],
                    type: "robotis_openCM70_cm_custom"
                },
                paramsKeyMap: {ADDRESS: 0, VALUE: 1},
                class: "robotis_openCM70_custom",
                isNotFor: ["robotis_openCM70"],
                func: function (t, e) {
                    var n,
                        r = [[Entry.Robotis_openCM70.INSTRUCTION.WRITE, e.getNumberValue("ADDRESS"), (n = e.getNumberValue("VALUE")) > 65535 ? 4 : n > 255 ? 2 : 1, n]];
                    return Entry.Robotis_carCont.postCallReturn(e, r, Entry.Robotis_openCM70.delay)
                },
                syntax: {js: [], py: ["Robotis.opencm70_cm_custom(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Roborobo_Roduino = {
        name: "roborobo_roduino",
        url: "http://www.roborobo.co.kr",
        imageName: "roborobo_roduino.png",
        title: {ko: "로두이노", en: "Roduino"},
        INSTRUCTION: {
            DIGITAL_READ: 1,
            DIGITAL_SET_MODE: 2,
            DIGITAL_WRITE: 3,
            ANALOG_WRITE: 4,
            ANALOG_READ: 5,
            MOTOR: 6,
            COLOR: 7
        },
        setZero: function () {
            Entry.hw.sendQueue.colorPin = 0;
            for (var t = 0; t < 14; t++) Entry.hw.sendQueue[t] = 0;
            this.ColorPin = [0, 0, 0], Entry.hw.update()
        },
        ColorPin: [0, 0, 0]
    }, Entry.Roborobo_SchoolKit = {
        name: "roborobo_schoolkit",
        url: "http://www.roborobo.co.kr",
        imageName: "roborobo_schoolkit.png",
        title: {ko: "스쿨키트", en: "School Kit"},
        pinMode: {INPUT: 0, OUTPUT: 1, ANALOG: 2, PWM: 3, SERVO: 4},
        inputPort: {ir: 7, sound: 8, contact: 9, cds: 10},
        setZero: function () {
            Entry.hw.sendQueue.digitalPinMode = [], Entry.hw.sendQueue.servo = [!1, !1, !1, !1, !1];
            for (var t = 0; t < 14; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.digitalPinMode[t] = 0;
            Entry.hw.update()
        }
    }, Entry.Roborobo_Roduino.getBlocks = function () {
        return {
            roduino_on_block: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [null], type: "roduino_on_block"},
                paramsKeyMap: {},
                class: "roduino_value",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    return "1"
                }
            },
            roduino_off_block: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [null], type: "roduino_off_block"},
                paramsKeyMap: {},
                class: "roduino_value",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    return "0"
                }
            },
            roduino_get_analog_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]],
                    value: "0",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            roduino_get_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            roduino_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "roduino_get_analog_number"}], type: "roduino_get_analog_value"},
                paramsKeyMap: {VALUE: 0},
                class: "roduino_value",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    return Entry.hw.getAnalogPortValue(n)
                }
            },
            roduino_get_digital_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "roduino_get_port_number"}], type: "roduino_get_digital_value"},
                paramsKeyMap: {VALUE: 0},
                class: "roduino_value",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.DIGITAL_READ, Entry.hw.sendQueue[1] = n, Entry.hw.update(), Entry.hw.getDigitalPortValue(n - 2)
                }
            },
            roduino_get_color: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_color_red, "red"], [Lang.Blocks.roborobo_color_green, "green"], [Lang.Blocks.roborobo_color_blue, "blue"], [Lang.Blocks.roborobo_color_yellow, "yellow"]],
                    value: "red",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null], type: "roduino_get_color"},
                paramsKeyMap: {VALUE: 0},
                class: "roduino_value",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = 0, r = e.getField("VALUE", e),
                        o = [Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[0] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[1] - 2], Entry.hw.portData[Entry.Roborobo_Roduino.ColorPin[2] - 2]];
                    switch (r) {
                        case"red":
                            1 == o[0] && 0 == o[1] && 0 == o[2] && (n = 1);
                            break;
                        case"green":
                            0 == o[0] && 1 == o[1] && 0 == o[2] && (n = 1);
                            break;
                        case"blue":
                            0 == o[0] && 0 == o[1] && 1 == o[2] && (n = 1);
                            break;
                        case"yellow":
                            1 == o[0] && 1 == o[1] && 1 == o[2] && (n = 1)
                    }
                    return n
                }
            },
            roduino_set_digital: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "roduino_get_port_number"}, null, null], type: "roduino_set_digital"},
                paramsKeyMap: {VALUE: 0, OPERATOR: 1},
                class: "roduino_set",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e), r = "on" == e.getField("OPERATOR") ? 1 : 0;
                    return Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                }
            },
            roduino_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]],
                    value: "motor1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]],
                    value: "cw",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "roduino_motor"},
                paramsKeyMap: {MODE: 0, OPERATOR: 1},
                class: "roduino_set",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = 0, r = 0, o = 0, a = 0, s = e.getField("MODE"), i = e.getField("OPERATOR");
                    return "motor1" == s ? (n = 9, r = 10) : (n = 11, r = 12), "cw" == i ? (o = 1, a = 0) : "ccw" == i ? (o = 0, a = 1) : (o = 0, a = 0), Entry.hw.setDigitalPortValue(n, o), Entry.hw.setDigitalPortValue(r, a), e.callReturn()
                }
            },
            roduino_set_color_pin: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "number", params: ["2"]}, {type: "number", params: ["3"]}, {
                        type: "number",
                        params: ["4"]
                    }, null], type: "roduino_set_color_pin"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2},
                class: "roduino_set",
                isNotFor: ["roborobo_roduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("RED", e), r = e.getNumberValue("GREEN", e),
                        o = e.getNumberValue("BLUE", e);
                    return Entry.Roborobo_Roduino.ColorPin = [n, r, o], Entry.hw.sendQueue[0] = Entry.Roborobo_Roduino.INSTRUCTION.COLOR, Entry.hw.sendQueue.colorPin = n, Entry.hw.update(), e.callReturn()
                }
            }
        }
    }, Entry.Roborobo_SchoolKit.getBlocks = function () {
        return {
            schoolkit_on_block: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [null], type: "schoolkit_on_block"},
                paramsKeyMap: {},
                class: "schoolkit_value",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    return "1"
                }
            },
            schoolkit_off_block: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [null], type: "schoolkit_off_block"},
                paramsKeyMap: {},
                class: "schoolkit_value",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    return "0"
                }
            },
            schoolkit_get_out_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", 2], ["OUT2", 3], ["OUT3", 4], ["OUT4", 5], ["OUT5", 6]],
                    value: 2,
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getNumberField("PORT")
                }
            },
            schoolkit_get_servo_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", 2], ["OUT2", 3], ["OUT3", 4]],
                    value: 2,
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getNumberField("PORT")
                }
            },
            schoolkit_get_in_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["IN1", 7], ["IN2", 8], ["IN3", 9], ["IN4", 10], ["IN5", 11], ["IN6", 12], ["IN7", 13]],
                    value: 7,
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getNumberField("PORT")
                }
            },
            schoolkit_set_output: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_on, "on"], [Lang.Blocks.roborobo_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "schoolkit_get_out_port_number"}, null, null], type: "schoolkit_set_output"},
                paramsKeyMap: {VALUE: 0, OPERATOR: 1},
                class: "schoolkit_set",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e), r = "on" == e.getField("OPERATOR") ? 1 : 0;
                    return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.OUTPUT, Entry.hw.sendQueue[n] = r, e.callReturn()
                }
            },
            schoolkit_get_input_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "schoolkit_get_in_port_number"}], type: "schoolkit_get_input_value"},
                paramsKeyMap: {VALUE: 0},
                class: "schoolkit_value",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return Entry.hw.portData[n - 7]
                }
            },
            schoolkit_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_motor1, "motor1"], [Lang.Blocks.roborobo_motor2, "motor2"]],
                    value: "motor1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.roborobo_motor_CW, "cw"], [Lang.Blocks.roborobo_motor_CCW, "ccw"], [Lang.Blocks.roborobo_motor_stop, "stop"]],
                    value: "cw",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["0"]}, null, null], type: "schoolkit_motor"},
                paramsKeyMap: {MODE: 0, VALUE: 1, OPERATOR: 2},
                class: "schoolkit_set",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    var n, r = e.getField("MODE"), o = e.getField("OPERATOR"), a = e.getNumberValue("VALUE");
                    return n = "motor1" == r ? 0 : 1, a > 255 ? a = 255 : a < 0 && (a = 0), Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.PWM, Entry.hw.sendQueue.digitalPinMode[n + 7] = Entry.Roborobo_SchoolKit.pinMode.PWM, "cw" == o ? Entry.hw.sendQueue[n] = a : "ccw" == o ? Entry.hw.sendQueue[n] = -a : "stop" == o && (Entry.hw.sendQueue[n] = 0), e.callReturn()
                }
            },
            schoolkit_set_servo_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "schoolkit_get_servo_port_number"}, {type: "number", params: ["0"]}, null],
                    type: "schoolkit_set_servo_value"
                },
                paramsKeyMap: {PIN: 0, VALUE: 1},
                class: "schoolkit_set",
                isNotFor: ["roborobo_schoolkit"],
                func: function (t, e) {
                    var n = e.getNumberValue("PIN", e), r = e.getNumberValue("VALUE");
                    return Entry.hw.sendQueue.digitalPinMode || (Entry.hw.sendQueue.digitalPinMode = {}), Entry.hw.sendQueue.servo || (Entry.hw.sendQueue.servo = {}), Entry.hw.sendQueue.digitalPinMode[n] = Entry.Roborobo_SchoolKit.pinMode.SERVO, r < 0 ? r = 0 : r > 180 && (r = 180), Entry.hw.sendQueue.servo[n - 2] = !0, Entry.hw.sendQueue[n] = r, e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.NeobotSensorTheme = {
        name: "neobot_sensor_theme",
        url: "http://www.neobot.co.kr",
        imageName: "neobot_sensor_theme.png",
        title: {en: "NEOBOT Senosor Theme", ko: "네오봇 센서 테마"},
        LOCAL_MAP: ["IN1", "IN2", "IN3", "IR", "BAT"],
        REMOTE_MAP: ["OUT1", "OUT2", "OUT3", "DCR", "DCL", "SND", "FND", "OPT"],
        setZero: function () {
            for (var t in Entry.Neobot.REMOTE_MAP) Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[t]] = 0;
            Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/neobot_sensor_theme.png",
            width: 800,
            height: 800,
            listPorts: {},
            ports: {
                IN1: {name: "PORT1", type: "input", pos: {x: 145, y: 429}},
                IN2: {name: "PORT2", type: "input", pos: {x: 314, y: 429}},
                IN3: {name: "PORT3", type: "input", pos: {x: 484, y: 429}},
                BAT: {name: "PORT4", type: "input", pos: {x: 653, y: 429}}
            },
            mode: "both"
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Neobot = {
        name: "neobot",
        url: "http://www.neobot.co.kr",
        imageName: "neobot.png",
        title: {ko: "네오봇", en: "Neo Bot"},
        LOCAL_MAP: ["IN1", "IN2", "IN3", "IR", "BAT"],
        REMOTE_MAP: ["OUT1", "OUT2", "OUT3", "DCR", "DCL", "SND", "FND", "OPT"],
        setZero: function () {
            for (var t in Entry.Neobot.REMOTE_MAP) Entry.hw.sendQueue[Entry.Neobot.REMOTE_MAP[t]] = 0;
            Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/neobot.png",
            width: 700,
            height: 700,
            listPorts: {
                IR: {name: "리모컨", type: "input", pos: {x: 0, y: 0}},
                BAT: {name: "배터리", type: "input", pos: {x: 0, y: 0}},
                SND: {name: Lang.Hw.buzzer, type: "output", pos: {x: 0, y: 0}},
                FND: {name: "FND", type: "output", pos: {x: 0, y: 0}}
            },
            ports: {
                IN1: {name: "IN1", type: "input", pos: {x: 270, y: 200}},
                IN2: {name: "IN2", type: "input", pos: {x: 325, y: 200}},
                IN3: {name: "IN3", type: "input", pos: {x: 325, y: 500}},
                DCL: {name: "L-Motor", type: "output", pos: {x: 270, y: 500}},
                DCR: {name: "R-Motor", type: "output", pos: {x: 435, y: 500}},
                OUT1: {name: "OUT1", type: "output", pos: {x: 380, y: 200}},
                OUT2: {name: "OUT2", type: "output", pos: {x: 435, y: 200}},
                OUT3: {name: "OUT3", type: "output", pos: {x: 380, y: 500}}
            },
            mode: "both"
        }
    }, Entry.Neobot.getBlocks = function () {
        return {
            neobot_sensor_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                fontColor: "#fff",
                statements: [],
                template: "%1  값",
                params: [{
                    type: "Dropdown",
                    options: [["1번 포트", "IN1"], ["2번 포트", "IN2"], ["3번 포트", "IN3"], ["4번 포트", "BAT"], ["리모컨", "IR"], ["배터리", "BAT"]],
                    value: "IN1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "neobot_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "neobot_value",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("PORT");
                    return Entry.hw.portData[n]
                },
                syntax: {js: [], py: ["Neobot.sensor_value(%1)"]}
            },
            neobot_sensor_convert_scale: {
                color: "#00979D",
                skeleton: "basic_string_field",
                fontColor: "#fff",
                statements: [],
                template: "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 변환",
                params: [{
                    type: "Dropdown",
                    options: [["1번 포트", "IN1"], ["2번 포트", "IN2"], ["3번 포트", "IN3"], ["4번 포트", "BAT"], ["리모컨", "IR"], ["배터리", "BAT"]],
                    value: "IN1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["255"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["100"]}],
                    type: "neobot_sensor_convert_scale"
                },
                paramsKeyMap: {PORT: 0, OMIN: 1, OMAX: 2, MIN: 3, MAX: 4},
                class: "neobot_value",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("PORT"), r = Entry.hw.portData[n], o = e.getNumberValue("OMIN", e),
                        a = e.getNumberValue("OMAX", e), s = e.getNumberValue("MIN", e), i = e.getNumberValue("MAX", e);
                    if (o > a) {
                        var l = o;
                        o = a, a = l
                    }
                    return s > i && (l = s, s = i, i = l), r -= o, r *= (i - s) / (a - o), r += s, r = Math.min(i, r), r = Math.max(s, r), Math.round(r)
                }
            },
            neobot_sensor_color: {
                color: "#00979D",
                skeleton: "basic_string_field",
                fontColor: "#fff",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["흰색", 0], ["빨간색", 1], ["노란색", 2], ["녹색(연두)", 3], ["파란색", 4]],
                    value: "WHITE",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "neobot_sensor_color"},
                paramsKeyMap: {COLOR: 0},
                class: "neobot_value",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    return e.getNumberField("COLOR")
                },
                syntax: {js: [], py: ["Neobot.sensor_color(%1)"]}
            },
            neobot_equal_with_sensor: {
                color: "#00979D",
                fontColor: "#ffffff",
                skeleton: "basic_boolean_field",
                template: "%1 의 센서값이 %2",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1번 포트", "IN1"], ["2번 포트", "IN2"], ["3번 포트", "IN3"], ["4번 포트", "BAT"], ["리모컨", "IR"], ["배터리", "BAT"]],
                    value: "IN1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["흰색", 0], ["빨간색", 1], ["노란색", 2], ["녹색(연두)", 3], ["파란색", 4]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "neobot_equal_with_sensor"},
                paramsKeyMap: {SENSOR: 0, COLOR: 1},
                class: "neobot_value",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("SENSOR"), r = Entry.hw.portData[n], o = e.getNumberField("COLOR");
                    return r >= 10 && r <= 50 ? 0 == o : r >= 51 && r <= 90 ? 1 == o : r >= 91 && r <= 130 ? 2 == o : r >= 131 && r <= 170 ? 3 == o : r >= 171 && r <= 210 && 4 == o
                },
                syntax: {js: [], py: ["Entry.neobot_equal_check()"]}
            },
            get_motor_speed: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"], ["14", "14"], ["15", "15"]],
                    value: "15",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    return e.getStringField("VALUE")
                },
                syntax: {js: [], py: ["%1get_motor_speed#"]}
            },
            neobot_left_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "왼쪽 모터를 %1 %2 의 속도로 회전 %3",
                params: [{
                    type: "Dropdown",
                    options: [["앞으로", "16"], ["뒤로", "32"]],
                    value: "16",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "get_motor_speed", id: "m111"}, null], type: "neobot_left_motor"},
                paramsKeyMap: {DIRECTION: 0, SPEED: 1},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = Entry.parseNumber(e.getStringValue("SPEED")), r = e.getNumberField("DIRECTION");
                    return Entry.hw.sendQueue.DCL = n + r, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.turn_left(%1, %2)"]}
            },
            neobot_stop_left_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "왼쪽 모터를 정지 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "neobot_stop_left_motor"},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.DCL = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.stop_left()"]}
            },
            neobot_right_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "오른쪽 모터를 %1 %2 의 속도로 회전 %3",
                params: [{
                    type: "Dropdown",
                    options: [["앞으로", "16"], ["뒤로", "32"]],
                    value: "16",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "get_motor_speed", id: "m112"}, null], type: "neobot_right_motor"},
                paramsKeyMap: {DIRECTION: 0, SPEED: 1},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = Entry.parseNumber(e.getStringValue("SPEED")), r = e.getNumberField("DIRECTION");
                    return Entry.hw.sendQueue.DCR = n + r, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.turn_right(%1, %2)"]}
            },
            neobot_stop_right_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "오른쪽 모터를 정지 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "neobot_stop_right_motor"},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.DCR = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.stop_right()"]}
            },
            neobot_all_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "양쪽 모터를 %1 %2의 속도로 %3초 동안 회전 %4",
                params: [{
                    type: "Dropdown",
                    options: [["앞으로", "1"], ["뒤로", "2"], ["제자리에서 왼쪽 돌기", "3"], ["제자리에서 오른쪽 돌기", "4"], ["왼쪽으로 돌기", "5"], ["오른쪽으로 돌기", "6"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: ["1", {type: "get_motor_speed", id: "m113"}, {type: "number", params: ["0"]}],
                    type: "neobot_all_motor"
                },
                paramsKeyMap: {DIRECTION: 0, SPEED: 1, DURATION: 2},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    if (Entry.hw.sendQueue, e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.hw.sendQueue.DCL = 0, Entry.hw.sendQueue.DCR = 0, Entry.engine.isContinue = !1, e.callReturn());
                    var n = Entry.parseNumber(e.getStringValue("SPEED")), r = e.getNumberField("DIRECTION"),
                        o = e.getNumberValue("DURATION");
                    switch (o < 0 && (o = 0), r) {
                        case 1:
                            Entry.hw.sendQueue.DCL = 16 + n, Entry.hw.sendQueue.DCR = 16 + n;
                            break;
                        case 2:
                            Entry.hw.sendQueue.DCL = 32 + n, Entry.hw.sendQueue.DCR = 32 + n;
                            break;
                        case 3:
                            Entry.hw.sendQueue.DCL = 32 + n, Entry.hw.sendQueue.DCR = 16 + n;
                            break;
                        case 4:
                            Entry.hw.sendQueue.DCL = 16 + n, Entry.hw.sendQueue.DCR = 32 + n;
                            break;
                        case 5:
                            Entry.hw.sendQueue.DCL = 0, Entry.hw.sendQueue.DCR = 16 + n;
                            break;
                        case 6:
                            Entry.hw.sendQueue.DCL = 16 + n, Entry.hw.sendQueue.DCR = 0
                    }
                    return 0 === o ? e.callReturn() : (e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                        e.timeFlag = 0
                    }, 1e3 * o), e)
                }
            },
            neobot_stop_all_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "양쪽 모터를 정지 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "neobot_stop_all_motor"},
                class: "neobot_motor",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.DCL = 0, Entry.hw.sendQueue.DCR = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.run_motor(%1, %2, %3, %4)"]}
            },
            neobot_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 포트의 서보모터를 %2 도 이동 %3",
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", "OUT1"], ["OUT2", "OUT2"], ["OUT3", "OUT3"]],
                    value: "OUT1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "neobot_set_servo"},
                paramsKeyMap: {PORT: 0, DEGREE: 1},
                class: "neobot_output",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = e.getStringField("PORT", e), r = e.getNumberValue("DEGREE");
                    r < 0 ? r = 0 : r > 180 && (r = 180), Entry.hw.sendQueue[n] = r;
                    var o = n;
                    return 3 === o && (o = 4), Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT | o, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.servo_1(%1, %2)"]}
            },
            neobot_set_output: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 번 포트의 값을 %2 만큼 출력 %3",
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", "OUT1"], ["OUT2", "OUT2"], ["OUT3", "OUT3"], ["OUT4", "FND"]],
                    value: "OUT1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["255"]}, null], type: "neobot_set_output"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "neobot_output",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("PORT", e), r = e.getNumberValue("VALUE", e), o = n;
                    return r < 0 ? r = 0 : r > 255 && (r = 255), 3 === o && (o = 4), Entry.hw.sendQueue[n] = r, Entry.hw.sendQueue.OPT = Entry.hw.sendQueue.OPT & ~o, e.callReturn()
                },
                syntax: {js: [], py: ["Neobot.servo_2(%1, %2)"]}
            },
            neobot_set_fnd: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "FND에 %1 출력 %2",
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["0"]}, null], type: "neobot_set_fnd"},
                paramsKeyMap: {VALUE: 0},
                class: "neobot_output",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE", e);
                    return n > 99 && (n = 99), Entry.hw.sendQueue.FND = parseInt("0x" + n), Entry.hw.sendQueue.OPT = 8 | Entry.hw.sendQueue.OPT, e.callReturn()
                }
            },
            neobot_set_fnd_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "FND 출력 끄기 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "neobot_set_fnd_off"},
                paramsKeyMap: {VALUE: 0},
                class: "neobot_output",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.FND = parseInt("0x00"), Entry.hw.sendQueue.OPT = -9 & Entry.hw.sendQueue.OPT, e.callReturn()
                }
            },
            neobot_play_note_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "멜로디 %1 을(를) %2 옥타브로 %3 길이만큼 소리내기 %4",
                params: [{
                    type: "Dropdown",
                    options: [["무음", "0"], ["도", "1"], ["도#", "2"], ["레", "3"], ["레#", "4"], ["미", "5"], ["파", "6"], ["파#", "7"], ["솔", "8"], ["솔#", "9"], ["라", "10"], ["라#", "11"], ["시", "12"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["2분음표", "2"], ["4분음표", "4"], ["8분음표", "8"], ["16분음표", "16"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["1", "2", "4", null], type: "neobot_play_note_for"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, DURATION: 2},
                class: "neobot_note",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.hw.sendQueue.SND = 0, Entry.engine.isContinue = !1, e.callReturn());
                    var r = e.getNumberField("NOTE", e), o = e.getNumberField("OCTAVE", e),
                        a = e.getNumberField("DURATION", e), s = r > 0 ? r + 12 * o : 0;
                    return e.isStart = !0, e.timeFlag = 1, s > 65 && (s = 65), n.SND = s, setTimeout(function () {
                        e.timeFlag = 0
                    }, 1 / a * 2e3), e
                },
                syntax: {js: [], py: ["Neobot.play_note(%1, %2, %3)"]}
            },
            neobot_play_note_with_sensor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "컨트롤러에서 %1 센서의 %2 ~ %3 값으로 멜로디 연주하기 %4",
                params: [{
                    type: "Dropdown",
                    options: [["1번 포트", "IN1"], ["2번 포트", "IN2"], ["3번 포트", "IN3"], ["리모컨", "IR"], ["배터리", "BAT"]],
                    value: "IN1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, {type: "number", params: ["255"]}, null],
                    type: "neobot_play_note_with_sensor"
                },
                paramsKeyMap: {PORT: 0, MIN_VALUE: 1, MAX_VALUE: 2, VALUE: 3},
                class: "neobot_note",
                isNotFor: ["neobot"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("PORT", e), o = Entry.hw.portData[r],
                        a = e.getNumberValue("MIN_VALUE", e), s = e.getNumberValue("MAX_VALUE", e), i = 0, l = 72;
                    if (a > s) {
                        var c = a;
                        a = s, s = c
                    }
                    return i > l && (c = i, i = l, l = c), o -= a, o *= (l - i) / (s - a), o += i, o = Math.min(l, o), o = Math.max(i, o), o = Math.round(o), e.isStart ? 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.hw.sendQueue.SND = 0, Entry.engine.isContinue = !1, e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, o > 72 && (o = 72), n.SND = o, setTimeout(function () {
                        e.timeFlag = 0
                    }, 500), e)
                },
                syntax: {js: [], py: ["Neobot.play_note_with_sensor(%1, %2, %3)"]}
            },
            neobot_change_color_with_color_picker: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 LED의 색깔을 %2(으)로 정하기 %3",
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", "OUT1"], ["OUT2", "OUT2"], ["OUT3", "OUT3"], ["OUT4", "FND"]],
                    value: "OUT1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Color"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "neobot_change_color_with_color_picker"},
                paramsKeyMap: {PORT: 0, COLOR: 1, VALUE: 2},
                class: "neobot_output",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("PORT", e), r = e.getField("COLOR", e);
                    return Entry.hw.sendQueue[n] = r, e.callReturn()
                }
            },
            neobot_change_color_with_sensor_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 LED의 색깔을 %2 센서 값으로 바꾸기 %3",
                params: [{
                    type: "Dropdown",
                    options: [["OUT1", "OUT1"], ["OUT2", "OUT2"], ["OUT3", "OUT3"], ["OUT4", "FND"]],
                    value: "OUT1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["1번 포트", "IN1"], ["2번 포트", "IN2"], ["3번 포트", "IN3"], ["4번 포트", "BAT"], ["리모컨", "IR"], ["배터리", "BAT"]],
                    value: "IN1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "neobot_change_color_with_sensor_value"},
                paramsKeyMap: {PORT_OUT: 0, PORT_IN: 1, VALUE: 2},
                class: "neobot_output",
                isNotFor: ["neobot", "neobot_sensor_theme"],
                func: function (t, e) {
                    var n = e.getStringField("PORT_IN"), r = Entry.hw.portData[n], o = e.getStringField("PORT_OUT", e);
                    return Entry.hw.sendQueue[o] = r, e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(3)) && r.__esModule ? r : {default: r};
    Entry.MODI = {
        name: "modi",
        url: "http://www.luxrobo.com/",
        imageName: "modi.png",
        title: {ko: "모디", en: "MODI"},
        setZero: function () {
            Entry.hw.sendQueue.moduleValue = {
                led: [],
                motor: [],
                speaker: [],
                display: []
            }, Entry.hw.sendQueue.getProperty = {}, Entry.hw.getModule = {id: 0, property: 0}, Entry.hw.update()
        },
        initSend: function () {
            Entry.hw.sendQueue.moduleValue = {
                led: [],
                motor: [],
                speaker: [],
                display: []
            }, Entry.hw.sendQueue.getProperty = {}, Entry.hw.getModule = {id: 0, property: 0}, Entry.hw.update()
        },
        getModule: {id: 0, property: 0},
        microphoneList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.mic) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.mic.length; n++) e.mic[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        environmentList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.environment) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.environment.length; n++) e.environment[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        dialList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.dial) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.dial.length; n++) e.dial[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        gyroscopeList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.gyro) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.gyro.length; n++) e.gyro[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        buttonList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.button) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.button.length; n++) e.button[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        infraredList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.ir) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.ir.length; n++) e.ir[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        ultrasonicList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.ultrasonic) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.ultrasonic.length; n++) e.ultrasonic[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        motorList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.motor) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.motor.length; n++) e.motor[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        ledList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.led) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.led.length; n++) e.led[n] && t.push([n, n]);
            return t
        },
        speakerList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.speaker) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.speaker.length; n++) e.speaker[n] && t.push([n.toString(), n.toString()]);
            return t
        },
        displayList: function () {
            var t, e = Entry.hw.portData.module || {};
            if (void 0 === e.display) return [[Lang.Blocks.no_target, "null"]];
            t = [];
            for (var n = 0; n < e.display.length; n++) e.display[n] && t.push([n.toString(), n.toString()]);
            return t
        }
    }, Entry.MODI.getBlocks = function () {
        return {
            modi_microphone_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "마이크 %1번의 볼륨",
                params: [{type: "DropdownDynamic", value: null, fontSize: 11, menuName: Entry.MODI.microphoneList}],
                def: {params: [null], type: "modi_microphone_value"},
                paramsKeyMap: {name: 0},
                class: "microphone",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = JSON.parse(Entry.hw.portData.module.mic[n]);
                    return r.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), r.value[2] || (r.value[2] = 0), r.value[2]
                }
            },
            modi_environment_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "환경센서 %1번의 %2",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.environmentList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.modi_enviroment_temperature, 6], [Lang.Blocks.modi_enviroment_humidity, 7], [Lang.Blocks.modi_enviroment_illuminance, 2], [Lang.Blocks.modi_enviroment_red, 3], [Lang.Blocks.modi_enviroment_bule, 5], [Lang.Blocks.modi_enviroment_green, 4]],
                    fontSize: 11
                }],
                def: {params: [null, 6], type: "modi_environment_value"},
                paramsKeyMap: {name: 0, property: 1},
                class: "environment",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = e.getNumberField("property"),
                        o = JSON.parse(Entry.hw.portData.module.environment[n]);
                    return o.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), o.value[r] || (o.value[r] = 0), o.value[r]
                }
            },
            modi_dial_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "다이얼 %1번의 각도",
                params: [{type: "DropdownDynamic", value: null, fontSize: 11, menuName: Entry.MODI.dialList}],
                def: {params: [null], type: "modi_dial_value"},
                paramsKeyMap: {name: 0},
                class: "dial",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = JSON.parse(Entry.hw.portData.module.dial[n]);
                    return r.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), r.value[2] || (r.value[2] = 0), JSON.parse(Entry.hw.portData.module.dial[n]).id, r.value[2]
                }
            },
            modi_gyroscope_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "자이로센서 %1번의 %2",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.gyroscopeList
                }, {
                    type: "Dropdown",
                    options: [["Roll", 2], ["Pitch", 3], ["Yaw", 4], [Lang.Blocks.modi_gyroscope_xAcceleratior, 8], [Lang.Blocks.modi_gyroscope_yAcceleratior, 9], [Lang.Blocks.modi_gyroscope_zAcceleratior, 10]],
                    fontSize: 11
                }],
                def: {params: [null, 2], type: "modi_gyroscope_value"},
                paramsKeyMap: {name: 0, property: 1},
                class: "gyroscope",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = e.getNumberField("property"),
                        o = JSON.parse(Entry.hw.portData.module.gyro[n]);
                    return o.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), o.value[r] || (o.value[r] = 0), o.value[r]
                }
            },
            modi_button_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "버튼 %1번의 %2",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.buttonList
                }, {
                    type: "Dropdown",
                    options: [["Click", 2], ["Double Click", 3], ["Toggle", 5], ["Press", 4]],
                    fontSize: 11
                }],
                def: {params: [null, 2], type: "modi_button_value"},
                paramsKeyMap: {name: 0, property: 1},
                class: "button",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue && Entry.hw.sendQueue.getProperty || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getNumberField("property"),
                        o = (JSON.parse(Entry.hw.portData.module.button[n]).id, JSON.parse(Entry.hw.portData.module.button[n]));
                    return Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), o.value[r] ? o.value[r] : (o.value[r] = 0, 0)
                }
            },
            modi_button_true: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "눌림",
                def: {params: [null], type: "modi_button_true"},
                class: "button",
                isNotFor: ["modi"],
                func: function (t, e) {
                    return 100
                }
            },
            modi_button_false: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "안눌림",
                def: {params: [null], type: "modi_button_false"},
                class: "button",
                isNotFor: ["modi"],
                func: function (t, e) {
                    return 0
                }
            },
            modi_infrared_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "적외선 %1번 센서의 거리(%)",
                params: [{type: "DropdownDynamic", value: null, fontSize: 11, menuName: Entry.MODI.infraredList}],
                def: {params: [null], type: "modi_infrared_value"},
                paramsKeyMap: {name: 0},
                class: "infrared",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = JSON.parse(Entry.hw.portData.module.ir[n]);
                    return r.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), r.value[2] || (r.value[2] = 0), r.value[2]
                }
            },
            modi_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "초음파 %1번 센서의 거리(%)",
                params: [{type: "DropdownDynamic", value: null, fontSize: 11, menuName: Entry.MODI.ultrasonicList}],
                def: {params: [null], type: "modi_ultrasonic_value"},
                paramsKeyMap: {name: 0},
                class: "ultrasonic",
                isNotFor: ["modi"],
                func: function (t, e) {
                    var n = e.getStringField("name"), r = JSON.parse(Entry.hw.portData.module.ultrasonic[n]);
                    return r.id, Entry.hw.sendQueue.getProperty || Entry.MODI.initSend(), r.value[2] || (r.value[2] = 0), r.value[2]
                }
            },
            modi_set_motor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "모터 %1번 %2의 상단값은 %3 하단값은 %4 (으)로 정하기 %5",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.motorList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.modi_motor_angle, "MOTOR_ANGLE"], [Lang.Blocks.modi_motor_speed, "MOTOR_SPEED"], [Lang.Blocks.modi_motor_torque, "MOTOR_TORQUE"]],
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                def: {
                    params: [null, "MOTOR_ANGLE", {type: "number", params: ["100"]}, {
                        type: "number",
                        params: ["100"]
                    }], type: "modi_set_motor_value"
                },
                paramsKeyMap: {name: 0, property: 1, upper: 2, bottom: 3},
                class: "motor",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getStringField("property"), a = e.getNumberValue("upper"),
                        s = e.getNumberValue("bottom"), i = JSON.parse(Entry.hw.portData.module.motor[n]).id;
                    return Entry.hw.sendQueue.moduleValue.motor[n] = (0, o.default)({
                        module: r,
                        id: i,
                        value1: a,
                        value2: s
                    }), e.callReturn()
                }
            },
            modi_change_motor_upper_value: {
                color: "#00979D",
                skeleton: "basic",
                template: "모터 %1번 %2의 상단값을 %3만큼 바꾸기 %4",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.motorList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.modi_motor_angle, "MOTOR_ANGLE"], [Lang.Blocks.modi_motor_speed, "MOTOR_SPEED"], [Lang.Blocks.modi_motor_torque, "MOTOR_TORQUE"]],
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {
                    params: [null, "MOTOR_ANGLE", {type: "number", params: ["100"]}],
                    type: "modi_change_motor_upper_value"
                },
                paramsKeyMap: {name: 0, property: 1, value: 2},
                class: "motor",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getNumberValue("value"), a = e.getStringField("property"),
                        s = JSON.parse(Entry.hw.portData.module.motor[n]).id, i = Entry.hw.sendQueue.moduleValue, l = r;
                    return l > 100 ? l = 100 : l < 0 && "MOTOR_ANGLE" == a ? l = 0 : l < -100 && "MOTOR_ANGLE" != a && (l = -100), i.motor[n] = (0, o.default)({
                        module: a,
                        id: s,
                        value1: l,
                        value2: 0
                    }), e.callReturn()
                }
            },
            modi_change_motor_bottom_value: {
                color: "#00979D",
                skeleton: "basic",
                template: "모터 %1번 %2의 하단값을 %3만큼 바꾸기 %4",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.motorList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.modi_motor_angle, "MOTOR_ANGLE"], [Lang.Blocks.modi_motor_speed, "MOTOR_SPEED"], [Lang.Blocks.modi_motor_torque, "MOTOR_TORQUE"]],
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, "MOTOR_ANGLE", {type: "text", params: ["100"]}],
                    type: "modi_change_motor_bottom_value"
                },
                class: "motor",
                isNotFor: ["modi"],
                paramsKeyMap: {name: 0, property: 1, value: 2},
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getNumberValue("value"), a = e.getStringField("property"),
                        s = JSON.parse(Entry.hw.portData.module.motor[n]).id, i = Entry.hw.sendQueue.moduleValue, l = r;
                    return l > 100 ? l = 100 : l < 0 && "MOTOR_ANGLE" == a ? l = 0 : l < -100 && "MOTOR_ANGLE" != a && (l = -100), i.motor[n] = (0, o.default)({
                        module: a,
                        id: s,
                        value1: 0,
                        value2: l
                    }), e.callReturn()
                }
            },
            modi_clear_led: {
                color: "#00979D",
                skeleton: "basic",
                template: "LED %1번의 색 끄기 %2",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.ledList
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: [null], type: "modi_clear_led"},
                paramsKeyMap: {name: 0},
                class: "led",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = JSON.parse(Entry.hw.portData.module.led[n]).id;
                    return Entry.hw.sendQueue.moduleValue.led[n] = (0, o.default)({
                        module: "LED_RGB",
                        id: r,
                        value1: 0,
                        value2: 0,
                        value3: 0
                    }), e.callReturn()
                }
            },
            modi_set_led_rgb: {
                color: "#00979D",
                skeleton: "basic",
                template: "LED %1번 R %2 G %3 B %4  %5",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.ledList
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {
                    params: [null, {type: "number", params: ["100"]}, {
                        type: "number",
                        params: ["100"]
                    }, {type: "number", params: ["100"]}], type: "modi_set_led_rgb"
                },
                paramsKeyMap: {name: 0, rValue: 1, gValue: 2, bValue: 3},
                class: "led",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getNumberValue("rValue"), a = e.getNumberValue("gValue"),
                        s = e.getNumberValue("bValue"), i = JSON.parse(Entry.hw.portData.module.led[n]).id;
                    return Entry.hw.sendQueue.moduleValue.led[n] = (0, o.default)({
                        module: "LED_RGB",
                        id: i,
                        value1: r,
                        value2: a,
                        value3: s
                    }), e.callReturn()
                }
            },
            modi_set_led_color: {
                color: "#00979D",
                skeleton: "basic",
                template: "LED %1번 색 %2로 정하기 %3",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.ledList
                }, {type: "Color"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: [null], type: "modi_set_led_color"},
                paramsKeyMap: {name: 0, color: 1},
                class: "led",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getStringField("color");
                    r = r.substring(1, 7);
                    var a = parseInt(r, 16), s = Math.round((a >> 16 & 255) / 255 * 100),
                        i = Math.round((a >> 8 & 255) / 255 * 100), l = Math.round((255 & a) / 255 * 100),
                        c = JSON.parse(Entry.hw.portData.module.led[n]).id;
                    return Entry.hw.sendQueue.moduleValue.led[n] = (0, o.default)({
                        module: "LED_RGB",
                        id: c,
                        value1: s,
                        value2: i,
                        value3: l
                    }), e.callReturn()
                }
            },
            modi_set_basic_speaker: {
                color: "#00979D",
                skeleton: "basic",
                template: "스피커 %1번을 %2음으로 크기는 %3(으)로 정하기 %4",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.speakerList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.modi_speaker_F_PA_5, "F_PA_5"], [Lang.Blocks.modi_speaker_F_SOL_5, "F_SOL_5"], [Lang.Blocks.modi_speaker_F_RA_5, "F_RA_5"], [Lang.Blocks.modi_speaker_F_SO_5, "F_SO_5"], [Lang.Blocks.modi_speaker_F_PA_S_5, "F_PA_S_5"], [Lang.Blocks.modi_speaker_F_SOL_S_5, "F_SOL_S_5"], [Lang.Blocks.modi_speaker_F_RA_S_5, "F_RA_S_5"], [Lang.Blocks.modi_speaker_F_DO_6, "F_DO_6"], [Lang.Blocks.modi_speaker_F_RE_6, "F_RE_6"], [Lang.Blocks.modi_speaker_F_MI_6, "F_MI_6"], [Lang.Blocks.modi_speaker_F_PA_6, "F_PA_6"], [Lang.Blocks.modi_speaker_F_SOL_6, "F_SOL_6"], [Lang.Blocks.modi_speaker_F_RA_6, "F_RA_6"], [Lang.Blocks.modi_speaker_F_SO_6, "F_SO_6"], [Lang.Blocks.modi_speaker_F_DO_S_6, "F_DO_S_6"], [Lang.Blocks.modi_speaker_F_RE_S_6, "F_RE_S_6"], [Lang.Blocks.modi_speaker_F_PA_S_6, "F_PA_S_6"], [Lang.Blocks.modi_speaker_F_SOL_S_6, "F_SOL_S_6"], [Lang.Blocks.modi_speaker_F_RA_S_6, "F_RA_S_6"], [Lang.Blocks.modi_speaker_F_DO_7, "F_DO_7"], [Lang.Blocks.modi_speaker_F_RE_7, "F_RE_7"], [Lang.Blocks.modi_speaker_F_MI_7, "F_MI_7"], [Lang.Blocks.modi_speaker_F_DO_S_7, "F_DO_S_7"], [Lang.Blocks.modi_speaker_F_RE_S_7, "F_RE_S_7"]],
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "F_DO_6", {type: "number", params: ["100"]}], type: "modi_set_basic_speaker"},
                paramsKeyMap: {name: 0, frequence: 1, volume: 2},
                class: "speaker",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getStringField("frequence"),
                        a = e.getNumberValue("volume", e), s = JSON.parse(Entry.hw.portData.module.speaker[n]).id;
                    return Entry.hw.sendQueue.moduleValue.speaker[n] = (0, o.default)({
                        module: "SPEAKER_BUZZER",
                        id: s,
                        value1: r,
                        value2: a
                    }), e.callReturn()
                }
            },
            modi_set_custom_speaker: {
                color: "#00979D",
                skeleton: "basic",
                template: "스피커 %1번의 진동수는 %2 크기는 %3(으)로 정하기 %4",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.speakerList
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["100"]}],
                    type: "modi_set_custom_speaker"
                },
                paramsKeyMap: {name: 0, frequence: 1, volume: 2},
                class: "speaker",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getNumberValue("frequence"),
                        a = e.getNumberValue("volume", e), s = JSON.parse(Entry.hw.portData.module.speaker[n]).id;
                    return Entry.hw.sendQueue.moduleValue.speaker[n] = (0, o.default)({
                        module: "SPEAKER_BUZZER",
                        id: s,
                        value1: r,
                        value2: a
                    }), e.callReturn()
                }
            },
            modi_print_display_by_value: {
                color: "#00979D",
                skeleton: "basic",
                template: "디스플레이 %1번의 화면에 %2 보이기 %3",
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.MODI.displayList
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["text"]}], type: "modi_print_display_by_value"},
                paramsKeyMap: {name: 0, text: 1},
                class: "display",
                isNotFor: ["modi"],
                func: function (t, e) {
                    Entry.hw.sendQueue.moduleValue || Entry.MODI.initSend();
                    var n = e.getStringField("name"), r = e.getStringValue("text");
                    if (r.length > 27) return e.callReturn();
                    var a = JSON.parse(Entry.hw.portData.module.display[n]).id;
                    return Entry.hw.sendQueue.moduleValue.display[n] = (0, o.default)({
                        module: "DISPLAY_TEXT",
                        id: a,
                        value1: r
                    }), e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.Mechatronics_4D = {
        name: "mechatronics_4d",
        url: "http://4dblock.com/",
        imageName: "mechatronics_4d.png",
        title: {en: "4D Mechatronics", ko: "4D 메카트로닉스"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }
}, function (t, e, n) {
    "use strict";
    Entry.JDKit = {
        Cmd: {
            LED: 1,
            TUNE: 2,
            TUNEDUR: 3,
            ROLL: 4,
            PITCH: 5,
            YAW: 6,
            THROTTLE: 7,
            OPTION: 8,
            MOTOR0: 9,
            MOTOR1: 10,
            MOTOR2: 11,
            MOTOR3: 12
        },
        Sensor: {
            JOYSTICK_LLR: 1,
            JOYSTICK_LTB: 2,
            JOYSTICK_RLR: 3,
            JOYSTICK_RTB: 4,
            BUTTON: 5,
            DRONECONNECT: 6,
            ULTRASONIC: 7,
            GYRO_X: 8,
            GYRO_Y: 9,
            DRONEREADY: 10
        },
        setZero: function () {
            Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0], Entry.hw.update()
        },
        name: "JDKit",
        url: "http://www.junilab.co.kr",
        imageName: "jdkit.png",
        title: {en: "JDKit", ko: "제이디키트"},
        monitorTemplate: {
            imgPath: "hw/coconut.png",
            width: 256,
            height: 256,
            listPorts: {
                "CMD[1]": {name: Lang.Blocks.coconut_sensor_temperature, type: "input", pos: {x: 0, y: 0}},
                accelerationX: {name: Lang.Blocks.coconut_sensor_acceleration_x, type: "input", pos: {x: 0, y: 0}},
                accelerationY: {name: Lang.Blocks.coconut_sensor_acceleration_y, type: "input", pos: {x: 0, y: 0}},
                accelerationZ: {name: Lang.Blocks.coconut_sensor_acceleration_z, type: "input", pos: {x: 0, y: 0}}
            },
            ports: {
                leftProximityValue: {
                    name: Lang.Blocks.coconut_sensor_left_proximity,
                    type: "input",
                    pos: {x: 122, y: 156}
                },
                rightProximityValue: {
                    name: Lang.Blocks.coconut_sensor_right_proximity,
                    type: "input",
                    pos: {x: 10, y: 108}
                },
                leftFloorValue: {name: Lang.Blocks.coconut_sensor_left_floor, type: "input", pos: {x: 100, y: 234}},
                rightFloorValue: {name: Lang.Blocks.coconut_sensor_right_floor, type: "input", pos: {x: 13, y: 180}},
                light: {name: Lang.Blocks.coconut_sensor_light, type: "input", pos: {x: 56, y: 189}}
            },
            mode: "both"
        }
    }, Entry.JDKit.getBlocks = function () {
        return {
            jdkit_joystick: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_joystick_lefttopbottom, 1], [Lang.Blocks.jdkit_joystick_leftleftright, 2], [Lang.Blocks.jdkit_joystick_righttopbottom, 3], [Lang.Blocks.jdkit_joystick_rightleftright, 4]],
                    value: 1,
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "jdkit_joystick"},
                paramsKeyMap: {JOYSTICK: 0},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    var n = Entry.hw.portData.CMD, r = e.getField("JOYSTICK");
                    return 1 == r ? n[Entry.JDKit.Sensor.JOYSTICK_LTB] : 2 == r ? 100 - n[Entry.JDKit.Sensor.JOYSTICK_LLR] : 3 == r ? n[Entry.JDKit.Sensor.JOYSTICK_RTB] - 100 : 100 - n[Entry.JDKit.Sensor.JOYSTICK_RLR]
                },
                syntax: {js: [], py: []}
            },
            jdkit_button: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", 0], ["2", 1], ["3", 2], ["4", 3], ["5", 4], ["6", 5], ["7", 6], ["8", 7]],
                    value: 0,
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "jdkit_button"},
                paramsKeyMap: {BUTTON: 0},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    var n = Entry.hw.portData.CMD, r = e.getField("BUTTON");
                    return n[Entry.JDKit.Sensor.BUTTON] & 1 << r ? 0 : 1
                },
                syntax: {js: [], py: []}
            },
            jdkit_gyro: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_gyro_frontrear, 1], [Lang.Blocks.jdkit_gyro_leftright, 2]],
                    value: 1,
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "jdkit_gyro"},
                paramsKeyMap: {GYRO: 0},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    var n = Entry.hw.portData.CMD, r = e.getField("GYRO"), o = n[Entry.JDKit.Sensor.GYRO_X],
                        a = n[Entry.JDKit.Sensor.GYRO_Y];
                    return 1 == r ? a > 127 ? 1 + (255 ^ a) : -1 * a : o > 127 ? 1 + (255 ^ o) : -1 * o
                },
                syntax: {js: [], py: []}
            },
            jdkit_ultrasonic: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [null], type: "jdkit_ultrasonic"},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    return Entry.hw.portData.CMD[Entry.JDKit.Sensor.ULTRASONIC]
                },
                syntax: {js: [], py: []}
            },
            jdkit_connect: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [null], type: "jdkit_connect"},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    return Entry.hw.portData.CMD[Entry.JDKit.Sensor.DRONECONNECT]
                },
                syntax: {js: [], py: []}
            },
            jdkit_ready: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [null], type: "jdkit_ready"},
                class: "JDKit_Sensor",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    return Entry.hw.portData.CMD[Entry.JDKit.Sensor.DRONEREADY]
                },
                syntax: {js: [], py: []}
            },
            jdkit_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_led_color_green, 1], [Lang.Blocks.jdkit_led_color_orange, 2]],
                    value: 1,
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_led_turnon, 3], [Lang.Blocks.jdkit_led_turnoff, 4]],
                    value: 3,
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "jdkit_led"},
                paramsKeyMap: {COLOR: 0, ACTION: 1},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getField("COLOR", e), o = e.getField("ACTION", e);
                    return n[Entry.JDKit.Cmd.LED] = 1 == r ? 3 == o ? 1 | n[1] : 2 & n[1] : 3 == o ? 2 | n[1] : 1 & n[1], e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_tune: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_tune_do, 1], [Lang.Blocks.jdkit_tune_re, 2], [Lang.Blocks.jdkit_tune_mi, 3], [Lang.Blocks.jdkit_tune_fa, 4], [Lang.Blocks.jdkit_tune_sol, 5], [Lang.Blocks.jdkit_tune_la, 6], [Lang.Blocks.jdkit_tune_si, 7]],
                    value: 1,
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0.2", 2], ["0.4", 4], ["0.6", 6], ["0.8", 8], ["1", 10], ["2", 20], ["3", 30], ["4", 40], ["5", 50]],
                    value: 10,
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "jdkit_tune"},
                paramsKeyMap: {NOTE: 0, DURATION: 1},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getField("NOTE", e), o = e.getField("DURATION", e),
                        a = Entry.hw.sendQueue.noteCount;
                    return Entry.hw.sendQueue.noteCount = void 0 === a ? 1 : a + 1, n[Entry.JDKit.Cmd.TUNE] = r, n[Entry.JDKit.Cmd.TUNEDUR] = o, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_motor_lefttop, 1], [Lang.Blocks.jdkit_motor_leftbottom, 0], [Lang.Blocks.jdkit_motor_righttop, 2], [Lang.Blocks.jdkit_motor_rightbottom, 3]],
                    value: 1,
                    fontSize: 11
                }, {type: "Block", accept: "string", value: "15", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "jdkit_motor"},
                paramsKeyMap: {MOTOR: 0, POWER: 1},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getField("MOTOR", e), o = e.getNumberValue("POWER", e);
                    return n[Entry.JDKit.Cmd.MOTOR0 + r] = o > 100 ? 100 : o < 0 ? 0 : o, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_throttle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string", value: "0", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "jdkit_throttle"},
                paramsKeyMap: {THROTTLE: 0},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getNumberValue("THROTTLE", e);
                    return n[Entry.JDKit.Cmd.THROTTLE] = r > 200 ? 200 : r < 0 ? 0 : r, n[Entry.JDKit.Cmd.OPTION] = 1, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_altitude: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string", value: "0", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "jdkit_altitude"},
                paramsKeyMap: {ALTITUDE: 0},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getNumberValue("ALTITUDE", e);
                    return n[Entry.JDKit.Cmd.THROTTLE] = r > 200 ? 200 : r < 0 ? 0 : r, n[Entry.JDKit.Cmd.OPTION] = 5, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_rollpitch: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.jdkit_gyro_frontrear, 1], [Lang.Blocks.jdkit_gyro_leftright, 2]],
                    value: 1,
                    fontSize: 11
                }, {type: "Block", accept: "string", value: "0", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "jdkit_rollpitch"},
                paramsKeyMap: {DIR: 0, POWER: 1},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getField("DIR", e), o = e.getNumberValue("POWER", e);
                    return 1 == r ? n[Entry.JDKit.Cmd.PITCH] = o > 100 ? 200 : o < -100 ? 0 : o + 100 : n[Entry.JDKit.Cmd.ROLL] = o > 100 ? 200 : o < -100 ? 0 : o + 100, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_yaw: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string", value: "0", fontSize: 11}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [null], type: "jdkit_yaw"},
                paramsKeyMap: {YAW: 0},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]);
                    var n = Entry.hw.sendQueue.CMD, r = e.getNumberValue("YAW", e);
                    return n[Entry.JDKit.Cmd.YAW] = r > 25 ? 101 : r < -25 ? 99 : 100, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            jdkit_emergency: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "jdkit_emergency"},
                paramsKeyMap: {},
                class: "JDKit_Command",
                isNotFor: ["JDKit"],
                func: function (t, e) {
                    return void 0 === Entry.hw.sendQueue.CMD && (Entry.hw.sendQueue.CMD = [240, 0, 0, 0, 100, 100, 100, 0, 0, 0, 0, 0, 0]), Entry.hw.sendQueue.CMD[Entry.JDKit.Cmd.OPTION] = 129, Entry.hw.update(), e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.iboard = {
        name: "iboard",
        url: "http://www.io-tech.co.kr",
        imageName: "iboard.png",
        title: {en: "iboard", ko: "아이보드"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.iboard.getBlocks = function () {
        return {
            iboard_analog_list: {
                parent: "arduino_ext_analog_list",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"], ["A6", "6"], ["A7", "7"]],
                    value: "0",
                    fontSize: 11
                }],
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"], ["A6", "6"], ["A7", "7"]],
                            value: "0",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringKey,
                            codeMap: "Entry.CodeMap.Arduino.iboard_analog_list[0]"
                        }],
                        keyOption: "iboard_analog_list"
                    }]
                }
            },
            iboard_temp_sensor_get_value: {
                parent: "arduino_ext_analog_list",
                params: [{type: "Dropdown", options: [["A0", "0"], ["A1", "1"]], value: "1", fontSize: 11}],
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["A0", "0"], ["A1", "1"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringKey,
                            codeMap: "Entry.CodeMap.Arduino.iboard_temp_sensor_get_value[0]"
                        }],
                        keyOption: "iboard_temp_sensor_get_value"
                    }]
                }
            },
            iboard_cds_sensor_get_value: {
                parent: "arduino_ext_analog_list",
                params: [{type: "Dropdown", options: [["A2", "2"], ["A3", "3"]], value: "2", fontSize: 11}],
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["A2", "2"], ["A3", "3"]],
                            value: "2",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringKey,
                            codeMap: "Entry.CodeMap.Arduino.iboard_cds_sensor_get_value[0]"
                        }],
                        keyOption: "iboard_cds_sensor_get_value"
                    }]
                }
            },
            iboard_mic_get_value: {
                parent: "arduino_ext_analog_list",
                params: [{type: "Dropdown", options: [["A3", "3"], ["A4", "4"]], value: "3", fontSize: 11}],
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["A3", "3"], ["A4", "4"]],
                            value: "3",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringKey,
                            codeMap: "Entry.CodeMap.Arduino.iboard_mic_get_value[0]"
                        }],
                        keyOption: "iboard_mic_get_value"
                    }]
                }
            },
            iboard_button_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["D2", "2"], ["D3", "3"], ["D4", "4"]],
                    value: "2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            iboard_pwm_led_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["D5", "5"], ["D6", "6"]],
                    value: "5",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            iboard_led_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["D10", "10"], ["D11", "11"]],
                    value: "10",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            iboard_rgb_led_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["빨간", "5"], ["초록", "6"], ["파란", "9"]],
                    value: "5",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            iboard_motor_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "TextInput", value: "6", fontSize: 11, arrowColor: EntryStatic.ARROW_COLOR_HW}],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            iboard_motor_list2: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["정지", "0"], ["미풍", "100"], ["약풍", "170"], ["강풍", "255"]],
                    value: "0",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    return e.getField("VALUE", e)
                }
            },
            iboard_tmp: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "현재 섭씨온도",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "iboard_temp_sensor_get_value"}], type: "iboard_tmp"},
                paramsKeyMap: {PORT: 0},
                class: "iboard_sensor",
                isNotFor: ["iboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), 5 * (r && r[n] || 0) / 1024 * 100 - 50
                }
            },
            iboard_mic: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "소리센서 값",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "iboard_mic_get_value"}], type: "iboard_mic"},
                paramsKeyMap: {PORT: 0},
                class: "iboard_sensor",
                isNotFor: ["iboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    "A" === n[0] && (n = n.substring(1));
                    var o = (r && r[n] || 0) - 100;
                    return Math.abs(o)
                }
            },
            iboard_var_res: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "가변저항 값",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "iboard_analog_list"}], type: "iboard_var_res"},
                paramsKeyMap: {PORT: 0},
                class: "iboard_sensor",
                isNotFor: ["iboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                }
            },
            iboard_cds: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "현재밝기",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "iboard_cds_sensor_get_value"}], type: "iboard_cds"},
                paramsKeyMap: {PORT: 0},
                class: "iboard_sensor",
                isNotFor: ["iboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                }
            },
            iboard_motor: {
                template: "모터를 %2 으로 동작하기 %3",
                parent: "arduino_ext_digital_pwm",
                def: {params: [{type: "iboard_motor_list"}, {type: "iboard_motor_list2"}, null], type: "iboard_motor"},
                class: "iboard",
                isNotFor: ["iboard"]
            },
            iboard_button: {
                template: "%1 버튼을 눌렀는가?",
                parent: "arduino_ext_get_digital",
                def: {params: [{type: "iboard_button_list"}], type: "iboard_button"},
                class: "iboard_sensor",
                isNotFor: ["iboard"]
            },
            iboard_led: {
                template: "LED %1 번을 %2 %3",
                parent: "arduino_ext_toggle_led",
                def: {
                    params: [{type: "iboard_led_list"}, {type: "arduino_get_digital_toggle", params: ["on"]}, null],
                    type: "iboard_led"
                },
                class: "iboard",
                isNotFor: ["iboard"]
            },
            iboard_rgb_led: {
                template: "RGB LED의 %1 LED %2 %3",
                parent: "arduino_ext_toggle_led",
                def: {
                    params: [{type: "iboard_rgb_led_list"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "iboard_rgb_led"
                },
                class: "iboard",
                isNotFor: ["iboard"]
            },
            iboard_pwm_led: {
                template: "LED %1 번의 밝기를 %2 (으)로 정하기 %3",
                parent: "arduino_ext_digital_pwm",
                def: {
                    params: [{type: "iboard_pwm_led_list"}, {type: "text", params: ["255"]}, null],
                    type: "iboard_pwm_led"
                },
                class: "iboard",
                isNotFor: ["iboard"]
            },
            iboard_set_tone: {
                template: "버저를 %2 %3 음으로 %4 초 연주하기 %5",
                parent: "arduino_ext_set_tone",
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        params: ["5"]
                    }, {type: "arduino_ext_tone_list"}, {type: "arduino_ext_octave_list"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "iboard_set_tone"
                },
                class: "iboard",
                isNotFor: ["iboard"]
            },
            iboard_get_digital: {
                template: "디지털 %1 번 센서값  ",
                parent: "arduino_ext_get_digital",
                def: {params: [{type: "arduino_get_port_number"}], type: "iboard_get_digital"},
                class: "arduino_ori",
                isNotFor: ["iboard"]
            },
            iboard_get_analog_value: {
                parent: "arduino_ext_get_analog_value",
                template: "아날로그 %1 번 센서값  ",
                def: {params: [{type: "iboard_analog_list"}], type: "iboard_get_analog_value"},
                class: "arduino_ori",
                isNotFor: ["iboard"]
            },
            iboard_get_analog_value_map: {
                parent: "arduino_ext_get_analog_value_map",
                template: "%1 값의 범위를 %2 ~ %3 에서 %4 ~ %5 (으)로 바꾼값  ",
                def: {
                    params: [{
                        type: "iboard_get_analog_value",
                        params: [{type: "iboard_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["255"]}], type: "iboard_get_analog_value_map"
                },
                class: "arduino_ori",
                isNotFor: ["iboard"]
            },
            iboard_toggle_led: {
                template: "디지털 %1 번 핀 %2 %3",
                parent: "arduino_ext_toggle_led",
                def: {
                    params: [{type: "arduino_get_port_number"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "iboard_toggle_led"
                },
                class: "arduino_ori",
                isNotFor: ["iboard"]
            },
            iboard_digital_pwm: {
                template: "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
                parent: "arduino_ext_digital_pwm",
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "iboard_digital_pwm"
                },
                class: "arduino_ori",
                isNotFor: ["iboard"]
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.hummingbird = {
        PORT_MAP: {
            triLEDR1: 256,
            triLEDG1: 256,
            triLEDB1: 256,
            triLEDR2: 256,
            triLEDG2: 256,
            triLEDB2: 256,
            led1: 256,
            led2: 256,
            led3: 256,
            led4: 256,
            vibrat1: 256,
            vibrat2: 256,
            dcMotor1: 256,
            dcMotor2: 256
        },
        setZero: function () {
            var t = Entry.hummingbird.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update(), Entry.hummingbird.removeAllTimeouts()
        },
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        name: "hummingbird",
        url: "http://www.creartbot.com/hummingbird",
        imageName: "hummingbirdduo.png",
        title: {en: "Hummingbird Duo", ko: "허밍버드 듀오"}
    }, Entry.hummingbird.getBlocks = function () {
        return {
            hummingbird_sensorValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "아날로그센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_sensorValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {js: [], py: []}
            },
            hummingbird_temperatureValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "HB 온도센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_temperatureValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getField("DEVICE");
                    return Math.round(100 * n[r] / 2048)
                },
                syntax: {js: [], py: []}
            },
            hummingbird_lightValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "HB 빛센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_lightValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getField("DEVICE");
                    return Math.round(100 * n[r] / 1024)
                },
                syntax: {js: [], py: []}
            },
            hummingbird_distanceValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "HB 거리센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_distanceValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = 1e3 - Entry.hw.portData[e.getField("DEVICE")];
                    return (n < 180 ? 0 : n >= 180 && n < 280 ? 4 * (n - 180) / 100 + 5 : n >= 280 && n < 400 ? 3 * (n - 280) / 120 + 9 : n >= 400 && n < 500 ? 3 * (n - 400) / 100 + 11 : n >= 500 && n < 580 ? 3 * (n - 500) / 80 + 14 : n >= 580 && n < 620 ? 2 * (n - 580) / 40 + 17 : n >= 620 && n < 660 ? 4 * (n - 620) / 40 + 19 : n >= 660 && n < 700 ? 4 * (n - 660) / 40 + 23 : n >= 700 && n < 740 ? 6 * (n - 700) / 40 + 27 : n >= 740 && n < 780 ? 7 * (n - 740) / 40 + 33 : n >= 780 && n < 820 ? 15 * (n - 780) / 40 + 41 : n >= 820 && n < 860 ? 11 * (n - 820) / 40 + 56 : 100).toFixed(0)
                },
                syntax: {js: [], py: []}
            },
            hummingbird_soundValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "HB 소리센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_soundValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.portData[e.getField("DEVICE")];
                    return n <= 35 && (n = 1), (n = Math.round(100 * n / 330)) > 100 && (n = 100), n
                },
                syntax: {js: [], py: []}
            },
            hummingbird_rotaryValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "HB 로터리센서 %1번 값",
                params: [{
                    type: "Dropdown",
                    options: [["1", "adc1"], ["2", "adc2"], ["3", "adc3"], ["4", "adc4"]],
                    value: "adc1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hummingbird_rotaryValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "hummingbird_sensor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getField("DEVICE");
                    return Math.round(100 * n[r] / 1024)
                },
                syntax: {js: [], py: []}
            },
            hummingbird_vibeMotor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "HB 진동모터 %1번 세기: %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["1", "vibeMotor1"], ["2", "vibeMotor2"]],
                    value: "vibeMotor1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}, null], type: "hummingbird_vibeMotor"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "hummingbird_motor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return o = o > 100 ? 127 : o < 0 ? 0 : Math.floor(1.27 * o), "vibeMotor1" == r ? n.vibrat1 = o : "vibeMotor2" == r && (n.vibrat2 = o), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            hummingbird_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "HB 서보모터 %1번 각도: %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["1", "servo1"], ["2", "servo2"], ["3", "servo3"], ["4", "servo4"]],
                    value: "servo1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}, null], type: "hummingbird_servo"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "hummingbird_motor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return o < 0 ? o = 0 : o > 180 && (o = 180), "servo1" == r ? n.servo1 = o : "servo2" == r ? n.servo2 = o : "servo3" == r ? n.servo3 = o : "servo4" == r && (n.servo4 = o), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            hummingbird_dcMotor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "HB 기어모터 %1번 속도: %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["1", "dcMotor1"], ["2", "dcMotor2"]],
                    value: "dcMotor1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}, null], type: "hummingbird_dcMotor"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "hummingbird_motor",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return o = 0 == o ? 256 : o > 100 ? 127 : o < -100 ? -127 : Math.floor(1.27 * o), "dcMotor1" == r ? n.dcMotor1 = o : "dcMotor2" == r && (n.dcMotor2 = o), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            hummingbird_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "HB 단색LED %1번 밝기: %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["1", "led1"], ["2", "led2"], ["3", "led3"], ["4", "led4"]],
                    value: "led1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}, null], type: "hummingbird_led"},
                paramsKeyMap: {DEVICE: 0, VALUE: 1},
                class: "hummingbird_led",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("VALUE", e);
                    return o > 100 && (o = 100), o < 0 && (o = 0), o = Math.floor(2.55 * o), "led1" == r ? n.led1 = o : "led2" == r ? n.led2 = o : "led3" == r ? n.led3 = o : "led4" == r && (n.led4 = o), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            hummingbird_triLED: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "HB 삼색LED %1번 빨강%2 초록%3 파랑%4 %5",
                params: [{
                    type: "Dropdown",
                    options: [["1", "triLED1"], ["2", "triLED2"]],
                    value: "triLED1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["0"]}, {type: "text", params: ["0"]}, {
                        type: "text",
                        params: ["0"]
                    }, {type: "text", params: ["0"]}, null], type: "hummingbird_triLED"
                },
                paramsKeyMap: {DEVICE: 0, cRED: 1, cGREEN: 2, cBLUE: 3},
                class: "hummingbird_led",
                isNotFor: ["hummingbird"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("DEVICE", e), o = e.getNumberValue("cRED", e),
                        a = e.getNumberValue("cGREEN", e), s = e.getNumberValue("cBLUE", e);
                    return o > 100 && (o = 100), a > 100 && (a = 100), s > 100 && (s = 100), o < 0 && (o = 0), a < 0 && (a = 0), s < 0 && (s = 0), o = Math.floor(2.55 * o), a = Math.floor(2.55 * a), s = Math.floor(2.55 * s), "triLED1" == r ? (n.triLEDR1 = o, n.triLEDG1 = a, n.triLEDB1 = s) : "triLED2" == r && (n.triLEDR2 = o, n.triLEDG2 = a, n.triLEDB2 = s), e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Hamster = {
        PORT_MAP: {
            motion: 0,
            leftWheel: 0,
            rightWheel: 0,
            buzzer: 0,
            outputA: 0,
            outputB: 0,
            leftLed: 0,
            rightLed: 0,
            note: 0,
            lineTracerMode: 0,
            lineTracerModeId: 0,
            lineTracerSpeed: 5,
            ioModeA: 0,
            ioModeB: 0
        },
        setZero: function () {
            var t = Entry.Hamster.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update();
            var r = Entry.Hamster;
            r.lineTracerModeId = 0, r.lineTracerStateId = -1, r.tempo = 60, r.boardCommand = 0, r.removeAllTimeouts()
        },
        lineTracerModeId: 0,
        lineTracerStateId: -1,
        tempo: 60,
        boardCommand: 60,
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        setModule: function (t) {
            t.module = "hamster"
        },
        setLineTracerMode: function (t, e) {
            this.lineTracerModeId = this.lineTracerModeId % 255 + 1, t.lineTracerMode = e, t.lineTracerModeId = this.lineTracerModeId
        },
        name: "hamster",
        url: "http://www.robomation.net",
        imageName: "hamster.png",
        title: {ko: "햄스터", en: "Hamster"},
        monitorTemplate: {
            imgPath: "hw/hamster.png",
            width: 256,
            height: 256,
            listPorts: {
                temperature: {name: Lang.Blocks.HAMSTER_sensor_temperature, type: "input", pos: {x: 0, y: 0}},
                inputA: {name: Lang.Blocks.HAMSTER_sensor_input_a, type: "input", pos: {x: 0, y: 0}},
                inputB: {name: Lang.Blocks.HAMSTER_sensor_input_b, type: "input", pos: {x: 0, y: 0}},
                accelerationX: {name: Lang.Blocks.HAMSTER_sensor_acceleration_x, type: "input", pos: {x: 0, y: 0}},
                accelerationY: {name: Lang.Blocks.HAMSTER_sensor_acceleration_y, type: "input", pos: {x: 0, y: 0}},
                accelerationZ: {name: Lang.Blocks.HAMSTER_sensor_acceleration_z, type: "input", pos: {x: 0, y: 0}},
                buzzer: {name: Lang.Hw.buzzer, type: "output", pos: {x: 0, y: 0}},
                note: {name: Lang.Hw.note, type: "output", pos: {x: 0, y: 0}},
                outputA: {name: Lang.Hw.output + "A", type: "output", pos: {x: 0, y: 0}},
                outputB: {name: Lang.Hw.output + "B", type: "output", pos: {x: 0, y: 0}}
            },
            ports: {
                leftProximity: {
                    name: Lang.Blocks.HAMSTER_sensor_left_proximity,
                    type: "input",
                    pos: {x: 122, y: 156}
                },
                rightProximity: {name: Lang.Blocks.HAMSTER_sensor_right_proximity, type: "input", pos: {x: 10, y: 108}},
                leftFloor: {name: Lang.Blocks.HAMSTER_sensor_left_floor, type: "input", pos: {x: 100, y: 234}},
                rightFloor: {name: Lang.Blocks.HAMSTER_sensor_right_floor, type: "input", pos: {x: 13, y: 180}},
                light: {name: Lang.Blocks.HAMSTER_sensor_light, type: "input", pos: {x: 56, y: 189}},
                leftWheel: {name: Lang.Hw.leftWheel, type: "output", pos: {x: 209, y: 115}},
                rightWheel: {name: Lang.Hw.rightWheel, type: "output", pos: {x: 98, y: 30}},
                leftLed: {name: Lang.Hw.left + " " + Lang.Hw.led_en, type: "output", pos: {x: 87, y: 210}},
                rightLed: {name: Lang.Hw.right + " " + Lang.Hw.led_en, type: "output", pos: {x: 24, y: 168}}
            },
            mode: "both"
        }
    }, Entry.Hamster.getBlocks = function () {
        return {
            hamster_hand_found: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "hamster_hand_found"},
                class: "hamster_sensor",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.leftProximity > 50 || n.rightProximity > 50
                },
                syntax: {js: [], py: [{syntax: "Hamster.hand_found()", blockType: "param"}]}
            },
            hamster_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                    value: "leftProximity",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "hamster_value"},
                paramsKeyMap: {DEVICE: 0},
                class: "hamster_sensor",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.left_proximity()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["leftProximity"]
                    }, {
                        syntax: "Hamster.right_proximity()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["rightProximity"]
                    }, {
                        syntax: "Hamster.left_floor()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["leftFloor"]
                    }, {
                        syntax: "Hamster.right_floor()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["rightFloor"]
                    }, {
                        syntax: "Hamster.acceleration_x()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationX"]
                    }, {
                        syntax: "Hamster.acceleration_y()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationY"]
                    }, {
                        syntax: "Hamster.acceleration_z()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["accelerationZ"]
                    }, {
                        syntax: "Hamster.light()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["light"]
                    }, {
                        syntax: "Hamster.temperature()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["temperature"]
                    }, {
                        syntax: "Hamster.signal_strength()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["signalStrength"]
                    }, {
                        syntax: "Hamster.input_a()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["inputA"]
                    }, {
                        syntax: "Hamster.input_b()",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["inputB"]
                    }]
                }
            },
            hamster_move_forward_once: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "hamster_move_forward_once"},
                class: "hamster_board",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData;
                    if (Entry.Hamster.setModule(n), e.isStart) {
                        if (e.isMoving) {
                            if (1 != Entry.Hamster.boardCommand) return e;
                            switch (e.boardState) {
                                case 1:
                                    if (e.count < 2) {
                                        r.leftFloor < 50 && r.rightFloor < 50 ? e.count++ : e.count = 0;
                                        var o = r.leftFloor - r.rightFloor;
                                        n.leftWheel = 45 + .25 * o, n.rightWheel = 45 - .25 * o
                                    } else e.count = 0, e.boardState = 2;
                                    break;
                                case 2:
                                    o = r.leftFloor - r.rightFloor, n.leftWheel = 45 + .25 * o, n.rightWheel = 45 - .25 * o, e.boardState = 3;
                                    var a = setTimeout(function () {
                                        e.boardState = 4, Entry.Hamster.removeTimeout(a)
                                    }, 250);
                                    Entry.Hamster.timeouts.push(a);
                                    break;
                                case 3:
                                    o = r.leftFloor - r.rightFloor, n.leftWheel = 45 + .25 * o, n.rightWheel = 45 - .25 * o;
                                    break;
                                case 4:
                                    n.leftWheel = 0, n.rightWheel = 0, e.boardState = 0, e.isMoving = !1
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.count, delete e.boardState, Entry.engine.isContinue = !1, Entry.Hamster.boardCommand = 0, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.count = 0, e.boardState = 1, n.motion = 0, n.leftWheel = 45, n.rightWheel = 45, Entry.Hamster.boardCommand = 1, Entry.Hamster.setLineTracerMode(n, 0), e
                },
                syntax: {js: [], py: [{syntax: "Hamster.board_forward()"}]}
            },
            hamster_turn_once: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "hamster_turn_once"},
                paramsKeyMap: {DIRECTION: 0},
                class: "hamster_board",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData;
                    if (Entry.Hamster.setModule(n), e.isStart) {
                        if (e.isMoving) {
                            if (2 != Entry.Hamster.boardCommand) return e;
                            if (e.isLeft) switch (e.boardState) {
                                case 1:
                                    e.count < 2 ? r.leftFloor > 50 && e.count++ : (e.count = 0, e.boardState = 2);
                                    break;
                                case 2:
                                    r.leftFloor < 20 && (e.boardState = 3);
                                    break;
                                case 3:
                                    e.count < 2 ? r.leftFloor < 20 && e.count++ : (e.count = 0, e.boardState = 4);
                                    break;
                                case 4:
                                    r.leftFloor > 50 && (e.boardState = 5);
                                    break;
                                case 5:
                                    (o = r.leftFloor - r.rightFloor) > -15 ? (n.leftWheel = 0, n.rightWheel = 0, e.boardState = 0, e.isMoving = !1) : (n.leftWheel = .5 * o, n.rightWheel = .5 * -o)
                            } else switch (e.boardState) {
                                case 1:
                                    e.count < 2 ? r.rightFloor > 50 && e.count++ : (e.count = 0, e.boardState = 2);
                                    break;
                                case 2:
                                    r.rightFloor < 20 && (e.boardState = 3);
                                    break;
                                case 3:
                                    e.count < 2 ? r.rightFloor < 20 && e.count++ : (e.count = 0, e.boardState = 4);
                                    break;
                                case 4:
                                    r.rightFloor > 50 && (e.boardState = 5);
                                    break;
                                case 5:
                                    var o;
                                    (o = r.rightFloor - r.leftFloor) > -15 ? (n.leftWheel = 0, n.rightWheel = 0, e.boardState = 0, e.isMoving = !1) : (n.leftWheel = .5 * -o, n.rightWheel = .5 * o)
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.count, delete e.boardState, delete e.isLeft, Entry.engine.isContinue = !1, Entry.Hamster.boardCommand = 0, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.count = 0, e.boardState = 1, n.motion = 0, "LEFT" == e.getField("DIRECTION", e) ? (e.isLeft = !0, n.leftWheel = -45, n.rightWheel = 45) : (e.isLeft = !1, n.leftWheel = 45, n.rightWheel = -45), Entry.Hamster.boardCommand = 2, Entry.Hamster.setLineTracerMode(n, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.board_left()",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.board_right()",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT"]
                    }]
                }
            },
            hamster_move_forward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1"]}, null], type: "hamster_move_forward_for_secs"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.motion = 1, n.leftWheel = 30, n.rightWheel = 30, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0);
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(o)
                    }, r);
                    return Entry.Hamster.timeouts.push(o), e
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Hamster.move_forward(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            hamster_move_backward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1"]}, null], type: "hamster_move_backward_for_secs"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.motion = 2, n.leftWheel = -30, n.rightWheel = -30, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0);
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(o)
                    }, r);
                    return Entry.Hamster.timeouts.push(o), e
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Hamster.move_backward(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            hamster_turn_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}, null], type: "hamster_turn_for_secs"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, "LEFT" == e.getField("DIRECTION", e) ? (n.motion = 3, n.leftWheel = -30, n.rightWheel = 30) : (n.motion = 4, n.leftWheel = 30, n.rightWheel = -30), Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0);
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(o)
                    }, r);
                    return Entry.Hamster.timeouts.push(o), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.turn_left(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.turn_right(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["RIGHT"]
                    }]
                }
            },
            hamster_change_both_wheels_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["10"]}, {type: "text", params: ["10"]}, null],
                    type: "hamster_change_both_wheels_by"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getNumberValue("LEFT"), o = e.getNumberValue("RIGHT");
                    return n.motion = 0, n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + r : r, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.wheels_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            hamster_set_both_wheels_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["30"]}, {type: "text", params: ["30"]}, null],
                    type: "hamster_set_both_wheels_to"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Hamster.setModule(n), n.motion = 0, n.leftWheel = e.getNumberValue("LEFT"), n.rightWheel = e.getNumberValue("RIGHT"), Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.wheels(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            hamster_change_wheel_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["10"]}, null], type: "hamster_change_wheel_by"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    return n.motion = 0, "LEFT" == r ? n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o : "RIGHT" == r ? n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o : (n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o), Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.left_wheel_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.right_wheel_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Hamster.wheels_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["BOTH"],
                        keyOption: "SAME"
                    }]
                }
            },
            hamster_set_wheel_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["30"]}, null], type: "hamster_set_wheel_to"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    return n.motion = 0, "LEFT" == r ? n.leftWheel = o : "RIGHT" == r ? n.rightWheel = o : (n.leftWheel = o, n.rightWheel = o), Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.left_wheel(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.right_wheel(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Hamster.wheels(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["BOTH"],
                        keyOption: "SAME"
                    }]
                }
            },
            hamster_follow_line_using: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                    value: "BLACK",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "hamster_follow_line_using"},
                paramsKeyMap: {COLOR: 0, DIRECTION: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("COLOR"), o = e.getField("DIRECTION"), a = 1;
                    return "RIGHT" == o ? a = 2 : "BOTH" == o && (a = 3), "WHITE" == r && (a += 7), n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_LEFT_SENSOR)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "LEFT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_LEFT_SENSOR)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "LEFT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_RIGHT_SENSOR)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "RIGHT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_BOTH_SENSORS)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "BOTH"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_RIGHT_SENSOR)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "RIGHT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_BOTH_SENSORS)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "BOTH"]
                    }]
                }
            },
            hamster_follow_line_until: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                    value: "BLACK",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "hamster_follow_line_until"},
                paramsKeyMap: {COLOR: 0, DIRECTION: 1},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = Entry.hw.portData, o = e.getField("COLOR"), a = e.getField("DIRECTION"), s = 4;
                    if ("RIGHT" == a ? s = 5 : "FRONT" == a ? s = 6 : "REAR" == a && (s = 7), "WHITE" == o && (s += 7), e.isStart) {
                        var i = Entry.Hamster;
                        return r.lineTracerStateId != i.lineTracerStateId && (i.lineTracerStateId = r.lineTracerStateId, 64 == r.lineTracerState) ? (delete e.isStart, Entry.engine.isContinue = !1, i.setLineTracerMode(n, 0), e.callReturn()) : e
                    }
                    return e.isStart = !0, n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_TURN_LEFT)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "LEFT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_TURN_LEFT)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "LEFT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_TURN_RIGHT)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "RIGHT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_MOVE_FORWARD)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "FRONT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_BLACK_UTURN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BLACK", "REAR"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_TURN_RIGHT)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "RIGHT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_MOVE_FORWARD)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "FRONT"]
                    }, {
                        syntax: "Hamster.line_tracer_mode(Hamster.LINE_TRACER_MODE_WHITE_UTURN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["WHITE", "REAR"]
                    }]
                }
            },
            hamster_set_following_speed_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["5", null], type: "hamster_set_following_speed_to"},
                paramsKeyMap: {SPEED: 0},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Hamster.setModule(n), n.lineTracerSpeed = Number(e.getField("SPEED", e)), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.line_tracer_speed(%1)",
                        textParams: [{
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            hamster_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "hamster_stop"},
                class: "hamster_wheel",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Hamster.setModule(n), n.motion = 0, n.leftWheel = 0, n.rightWheel = 0, Entry.Hamster.boardCommand = 0, Entry.Hamster.setLineTracerMode(n, 0), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Hamster.stop()"}]}
            },
            hamster_set_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "hamster_set_led_to"},
                paramsKeyMap: {DIRECTION: 0, COLOR: 1},
                class: "hamster_led",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("DIRECTION", e), o = Number(e.getField("COLOR", e));
                    return "LEFT" == r ? n.leftLed = o : "RIGHT" == r ? n.rightLed = o : (n.leftLed = o, n.rightLed = o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.left_led(Hamster.LED_RED)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "4"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_YELLOW)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "6"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_GREEN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "2"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_CYAN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "3"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_BLUE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "1"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_MAGENTA)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "5"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_WHITE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT", "7"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_RED)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "4"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_YELLOW)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "6"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_GREEN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "2"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_CYAN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "3"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_BLUE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "1"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_MAGENTA)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "5"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_WHITE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT", "7"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_RED)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "4"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_YELLOW)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "6"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_GREEN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "2"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_CYAN)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "3"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_BLUE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "1"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_MAGENTA)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "5"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_WHITE)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH", "7"]
                    }]
                }
            },
            hamster_clear_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "hamster_clear_led"},
                paramsKeyMap: {DIRECTION: 0},
                class: "hamster_led",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("DIRECTION", e);
                    return "LEFT" == r ? n.leftLed = 0 : "RIGHT" == r ? n.rightLed = 0 : (n.leftLed = 0, n.rightLed = 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.left_led(0)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.left_led(Hamster.LED_OFF, Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["LEFT"]
                    }, {
                        syntax: "Hamster.right_led(0)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Hamster.right_led(Hamster.LED_OFF, Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["RIGHT"]
                    }, {
                        syntax: "Hamster.leds(0)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH"]
                    }, {
                        syntax: "Hamster.leds(Hamster.LED_OFF, Hamster.LED_OFF)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: ["BOTH"]
                    }]
                }
            },
            hamster_beep: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "hamster_beep"},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.buzzer = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.buzzer = 440, n.note = 0;
                    var r = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(r)
                    }, 200);
                    return Entry.Hamster.timeouts.push(r), e
                },
                syntax: {js: [], py: [{syntax: "Hamster.beep()"}]}
            },
            hamster_change_buzzer_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["10"]}, null], type: "hamster_change_buzzer_by"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getNumberValue("VALUE");
                    return n.buzzer = void 0 != n.buzzer ? n.buzzer + r : r, n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Hamster.buzzer_by(%1)"}]}
            },
            hamster_set_buzzer_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1000"]}, null], type: "hamster_set_buzzer_to"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Hamster.setModule(n), n.buzzer = e.getNumberValue("VALUE"), n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Hamster.buzzer(%1)"}]}
            },
            hamster_clear_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "hamster_clear_buzzer"},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return Entry.Hamster.setModule(n), n.buzzer = 0, n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Hamster.buzzer(0)", params: [null]}]}
            },
            hamster_play_note_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.do_name, "4"], [Lang.Blocks.do_sharp_name, "5"], [Lang.Blocks.re_name, "6"], [Lang.Blocks.re_sharp_name, "7"], [Lang.Blocks.mi_name, "8"], [Lang.Blocks.fa_name, "9"], [Lang.Blocks.fa_sharp_name, "10"], [Lang.Blocks.sol_name, "11"], [Lang.Blocks.sol_sharp_name, "12"], [Lang.Blocks.la_name, "13"], [Lang.Blocks.la_sharp_name, "14"], [Lang.Blocks.si_name, "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", {type: "text", params: ["0.5"]}, null], type: "hamster_play_note_for"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.note = 0, e.callReturn());
                    var r = e.getNumberField("NOTE", e), o = e.getNumberField("OCTAVE", e),
                        a = e.getNumberValue("VALUE", e), s = Entry.Hamster.tempo;
                    r += 12 * (o - 1);
                    var i = 60 * a * 1e3 / s;
                    if (e.isStart = !0, e.timeFlag = 1, n.buzzer = 0, n.note = r, i > 100) {
                        var l = setTimeout(function () {
                            n.note = 0, Entry.Hamster.removeTimeout(l)
                        }, i - 100);
                        Entry.Hamster.timeouts.push(l)
                    }
                    var c = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(c)
                    }, i);
                    return Entry.Hamster.timeouts.push(c), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.note(%1, %2, %3)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.hamster_play_note_for[0]"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            hamster_rest_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0.25"]}, null], type: "hamster_rest_for"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (Entry.Hamster.setModule(n), e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var r = e.getNumberValue("VALUE");
                    r = 60 * r * 1e3 / Entry.Hamster.tempo, n.buzzer = 0, n.note = 0;
                    var o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Hamster.removeTimeout(o)
                    }, r);
                    return Entry.Hamster.timeouts.push(o), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.note(0, %1)",
                        textParams: [{type: "Block", accept: "string"}],
                        keyOption: "0"
                    }, {
                        syntax: "Hamster.note(Hamster.NOTE_OFF, %1)",
                        textParams: [{type: "Block", accept: "string"}],
                        keyOption: "Hamster.NOTE_OFF"
                    }]
                }
            },
            hamster_change_tempo_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["20"]}, null], type: "hamster_change_tempo_by"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    return Entry.Hamster.setModule(Entry.hw.sendQueue), Entry.Hamster.tempo += e.getNumberValue("VALUE"), Entry.Hamster.tempo < 1 && (Entry.Hamster.tempo = 1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Hamster.tempo_by(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            hamster_set_tempo_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["60"]}, null], type: "hamster_set_tempo_to"},
                paramsKeyMap: {VALUE: 0},
                class: "hamster_buzzer",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    return Entry.Hamster.setModule(Entry.hw.sendQueue), Entry.Hamster.tempo = e.getNumberValue("VALUE"), Entry.Hamster.tempo < 1 && (Entry.Hamster.tempo = 1), e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Hamster.tempo(%1)", textParams: [{type: "Block", accept: "string"}]}]}
            },
            hamster_set_port_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_analog_input, "0"], [Lang.Blocks.HAMSTER_digital_input, "1"], [Lang.Blocks.HAMSTER_servo_output, "8"], [Lang.Blocks.HAMSTER_pwm_output, "9"], [Lang.Blocks.HAMSTER_digital_output, "10"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "hamster_set_port_to"},
                paramsKeyMap: {PORT: 0, MODE: 1},
                class: "hamster_port",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("PORT", e), o = Number(e.getField("MODE", e));
                    return "A" == r ? n.ioModeA = o : "B" == r ? n.ioModeB = o : (n.ioModeA = o, n.ioModeB = o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.io_mode_a(Hamster.IO_MODE_ANALOG_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["A", "0"]
                    }, {
                        syntax: "Hamster.io_mode_a(Hamster.IO_MODE_DIGITAL_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["A", "1"]
                    }, {
                        syntax: "Hamster.io_mode_a(Hamster.IO_MODE_SERVO_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["A", "8"]
                    }, {
                        syntax: "Hamster.io_mode_a(Hamster.IO_MODE_PWM_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["A", "9"]
                    }, {
                        syntax: "Hamster.io_mode_a(Hamster.IO_MODE_DIGITAL_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["A", "10"]
                    }, {
                        syntax: "Hamster.io_mode_b(Hamster.IO_MODE_ANALOG_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["B", "0"]
                    }, {
                        syntax: "Hamster.io_mode_b(Hamster.IO_MODE_DIGITAL_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["B", "1"]
                    }, {
                        syntax: "Hamster.io_mode_b(Hamster.IO_MODE_SERVO_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["B", "8"]
                    }, {
                        syntax: "Hamster.io_mode_b(Hamster.IO_MODE_PWM_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["B", "9"]
                    }, {
                        syntax: "Hamster.io_mode_b(Hamster.IO_MODE_DIGITAL_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["B", "10"]
                    }, {
                        syntax: "Hamster.io_modes(Hamster.IO_MODE_ANALOG_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["AB", "0"]
                    }, {
                        syntax: "Hamster.io_modes(Hamster.IO_MODE_DIGITAL_INPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["AB", "1"]
                    }, {
                        syntax: "Hamster.io_modes(Hamster.IO_MODE_SERVO_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["AB", "8"]
                    }, {
                        syntax: "Hamster.io_modes(Hamster.IO_MODE_PWM_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["AB", "9"]
                    }, {
                        syntax: "Hamster.io_modes(Hamster.IO_MODE_DIGITAL_OUTPUT)",
                        textParams: [{converter: Entry.block.converters.returnStringValue}],
                        params: ["AB", "10"]
                    }]
                }
            },
            hamster_change_output_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["10"]}, null], type: "hamster_change_output_by"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "hamster_port",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("PORT"), o = e.getNumberValue("VALUE");
                    return "A" == r ? n.outputA = void 0 != n.outputA ? n.outputA + o : o : "B" == r ? n.outputB = void 0 != n.outputB ? n.outputB + o : o : (n.outputA = void 0 != n.outputA ? n.outputA + o : o, n.outputB = void 0 != n.outputB ? n.outputB + o : o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.output_a_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["A"]
                    }, {
                        syntax: "Hamster.output_b_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["B"]
                    }, {
                        syntax: "Hamster.outputs_by(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["AB"]
                    }]
                }
            },
            hamster_set_output_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["100"]}, null], type: "hamster_set_output_to"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "hamster_port",
                isNotFor: ["hamster"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.Hamster.setModule(n);
                    var r = e.getField("PORT"), o = e.getNumberValue("VALUE");
                    return "A" == r ? n.outputA = o : "B" == r ? n.outputB = o : (n.outputA = o, n.outputB = o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Hamster.output_a(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["A"]
                    }, {
                        syntax: "Hamster.output_b(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["B"]
                    }, {
                        syntax: "Hamster.outputs(%2)",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: ["AB"]
                    }]
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.EV3 = {
        PORT_MAP: {A: 0, B: 0, C: 0, D: 0, 1: void 0, 2: void 0, 3: void 0, 4: void 0},
        motorMovementTypes: {Degrees: 0, Power: 1},
        deviceTypes: {
            NxtTouch: 1,
            NxtLight: 2,
            NxtSound: 3,
            NxtColor: 4,
            NxtUltrasonic: 5,
            NxtTemperature: 6,
            LMotor: 7,
            MMotor: 8,
            Touch: 16,
            Color: 29,
            Ultrasonic: 30,
            Gyroscope: 32,
            Infrared: 33,
            Initializing: 125,
            Empty: 126,
            WrongPort: 127,
            Unknown: 255
        },
        colorSensorValue: ["", "000000", "0000FF", "00FF00", "FFFF00", "FF0000", "FFFFFF", "A52A2A"],
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        setZero: function () {
            var t = this.PORT_MAP;
            (0, o.default)(t).forEach(function (e) {
                /[A-D]/i.test(e) ? Entry.hw.sendQueue[e] = {
                    type: Entry.EV3.motorMovementTypes.Power,
                    power: 0
                } : Entry.hw.sendQueue[e] = t[e]
            }), Entry.hw.update()
        },
        name: "EV3",
        url: "http://www.lego.com/ko-kr/mindstorms/about-ev3",
        imageName: "ev3.png",
        title: {ko: "EV3", en: "EV3"}
    }, Entry.EV3.getBlocks = function () {
        return {
            ev3_color_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["RGB", "RGB"], ["R", "R"], ["G", "G"], ["B", "B"]],
                    value: "RGB",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "ev3_color_sensor"},
                paramsKeyMap: {PORT: 0, RGB: 1},
                class: "ev3_sensor",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    e.getStringField("PORT", e);
                    var n = e.getStringField("RGB", e), r = Entry.hw.getDigitalPortValue(e.getNumberField("PORT", e)),
                        o = "";
                    if (r.type == Entry.EV3.deviceTypes.Color) if (0 == r.siValue) o = ""; else switch (n) {
                        case"RGB":
                            o = Entry.EV3.colorSensorValue[r.siValue];
                            break;
                        case"R":
                            o = Entry.EV3.colorSensorValue[r.siValue].substring(0, 2);
                            break;
                        case"G":
                            o = Entry.EV3.colorSensorValue[r.siValue].substring(2, 4);
                            break;
                        case"B":
                            o = Entry.EV3.colorSensorValue[r.siValue].substring(4, 6)
                    } else o = "컬러 센서 아님";
                    return o
                }
            },
            ev3_get_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "ev3_get_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "ev3_sensor",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    e.getStringField("PORT", e);
                    var n, r = Entry.hw.getDigitalPortValue(e.getNumberField("PORT", e));
                    return $.isPlainObject(r) && (n = r.siValue || 0), n
                }
            },
            ev3_motor_degrees: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]],
                    value: "A",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ev3_cw, "CW"], [Lang.Blocks.ev3_ccw, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, {type: "angle"}], type: "ev3_motor_degrees"},
                paramsKeyMap: {PORT: 0, DIRECTION: 1, DEGREE: 2},
                class: "ev3_output",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    var n = e.getStringField("PORT", e), r = e.getValue("DEGREE", e);
                    r <= 0 ? r = 0 : r >= 720 && (r = 720);
                    var o = e.getStringField("DIRECTION", e);
                    return Entry.hw.sendQueue[n] = {
                        id: Math.floor(1e5 * Math.random(), 0),
                        type: Entry.EV3.motorMovementTypes.Degrees,
                        degree: r,
                        power: "CW" == o ? 50 : -50
                    }, e.callReturn()
                }
            },
            ev3_motor_power: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["50"]}], type: "ev3_motor_power"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ev3_output",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    var n = e.getStringField("PORT", e), r = e.getValue("VALUE", e);
                    return Entry.hw.sendQueue[n] = {
                        id: Math.floor(1e5 * Math.random(), 0),
                        type: Entry.EV3.motorMovementTypes.Power,
                        power: r
                    }, e.callReturn()
                }
            },
            ev3_motor_power_on_time: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A", "A"], ["B", "B"], ["C", "C"], ["D", "D"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["2"]}, {type: "number", params: ["50"]}],
                    type: "ev3_motor_power_on_time"
                },
                paramsKeyMap: {PORT: 0, TIME: 1, VALUE: 2},
                class: "ev3_output",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = e.getStringField("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, Entry.hw.sendQueue[n] = {
                        id: Math.floor(1e5 * Math.random(), 0),
                        type: Entry.EV3.motorMovementTypes.Power,
                        power: 0
                    }, e.callReturn());
                    var r = e.getValue("TIME", e), o = e.getValue("VALUE", e);
                    e.isStart = !0, e.timeFlag = 1, Entry.hw.sendQueue[n] = {
                        id: Math.floor(1e5 * Math.random(), 0),
                        type: Entry.EV3.motorMovementTypes.Power,
                        power: o
                    };
                    var a = setTimeout(function () {
                        e.timeFlag = 0, Entry.EV3.removeTimeout(a)
                    }, 1e3 * r);
                    return Entry.EV3.timeouts.push(a), e
                }
            },
            ev3_touch_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "ev3_touch_sensor"},
                paramsKeyMap: {PORT: 0},
                class: "ev3_sensor",
                isNotFor: ["EV3"],
                func: function (t, e) {
                    e.getStringField("PORT", e);
                    var n = Entry.hw.getDigitalPortValue(e.getNumberField("PORT", e)), r = !1;
                    return n.type == Entry.EV3.deviceTypes.Touch && Number(n.siValue) >= 1 && (r = !0), r
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.EduMaker = {
        name: "EduMaker",
        imageName: "edumaker.png",
        title: {ko: "에듀메이커 보드", en: "EduMaker Board"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.EduMaker.getBlocks = function () {
        return {
            edumaker_analog_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                },
                syntax: {js: [], py: []}
            },
            edumaker_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "edumaker_analog_list"}], type: "edumaker_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "EduMakerGet",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            edumaker_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "edumaker_get_analog_value",
                        params: [{type: "edumaker_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "edumaker_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "EduMakerGet",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = (Entry.hw.portData.ANALOG, e.getNumberValue("VALUE2", e)),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e), i = e.getValue("VALUE4", e), l = e.getValue("VALUE5", e),
                        c = !1;
                    if ((Entry.Utils.isNumber(i) && i.indexOf(".") > -1 || Entry.Utils.isNumber(l) && l.indexOf(".") > -1) && (c = !0), r > o) {
                        var u = r;
                        r = o, o = u
                    }
                    return a > s && (u = a, a = s, s = u), n -= r, n *= (s - a) / (o - r), n += a, n = Math.min(s, n), n = Math.max(a, n), c ? Math.round(100 * n) / 100 : Math.round(n)
                },
                syntax: {js: [], py: []}
            },
            edumaker_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["2"]}, {
                        type: "arduino_get_port_number",
                        params: ["4"]
                    }], type: "edumaker_get_ultrasonic_value"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "EduMakerGet",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1", e), r = e.getNumberValue("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ArduinoExt.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {js: [], py: []}
            },
            edumaker_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: [2]}], type: "edumaker_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "EduMakerGet",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ArduinoExt.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            edumaker_digital_toggle: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OPERATOR: 0},
                func: function (t, e) {
                    return e.getStringField("OPERATOR")
                },
                syntax: {js: [], py: []}
            },
            edumaker_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: [3]}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "edumaker_toggle_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "EduMaker",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.ArduinoExt.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.ArduinoExt.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ArduinoExt.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            edumaker_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "edumaker_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "EduMaker",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ArduinoExt.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            edumaker_tone_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                },
                syntax: {js: [], py: []}
            },
            edumaker_tone_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "edumaker_tone_list"}], type: "edumkaer_tone_value"},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getNumberValue("NOTE")
                },
                syntax: {js: [], py: []}
            },
            edumaker_octave_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "4",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                },
                syntax: {js: [], py: []}
            },
            edumaker_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        params: [3]
                    }, {type: "arduino_ext_tone_list"}, {type: "arduino_ext_octave_list"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "edumaker_set_tone"
                },
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "EduMaker",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getValue("NOTE", e);
                    Entry.Utils.isNumber(o) || (o = Entry.ArduinoExt.toneTable[o]), o < 0 ? o = 0 : o > 12 && (o = 12);
                    var a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), n.SET || (n.SET = {}), 0 === a) return n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberValue("OCTAVE", e) - 1;
                    s < 0 ? s = 0 : s > 5 && (s = 5);
                    var i = 0;
                    return 0 != o && (i = Entry.ArduinoExt.toneMap[o][s]), a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                },
                syntax: {js: [], py: []}
            },
            edumaker_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: ["3"]}, null], type: "edumaker_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "EduMaker",
                isNotFor: ["EduMaker"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.DaduBlock = {
        name: "dadublock",
        url: "http://www.dadublock.com/",
        imageName: "dadublock.png",
        title: {ko: "다두블럭", en: "DaduBlock"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        BlockState: {}
    }, Entry.DaduBlock_Car = {
        name: "dadublock_car",
        url: "http://www.dadublock.com/",
        imageName: "dadublock_car.png",
        title: {ko: "다두블럭 자동차", en: "DaduBlock Car"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        BlockState: {}
    }, Entry.DaduBlock.getBlocks = function () {
        return {
            dadublock_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "dadublock_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "dadublockget",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.ANALOG;
                    return r && r[n] || 0
                }
            },
            dadublock_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1023"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["100"]}],
                    type: "dadublock_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "dadublockget",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.ANALOG, o = e.getNumberValue("VALUE2", e),
                        a = e.getNumberValue("VALUE3", e), s = e.getNumberValue("VALUE4", e),
                        i = e.getNumberValue("VALUE5", e), l = r[n] || 0;
                    if (o > a) {
                        var c = o;
                        o = a, a = c
                    }
                    return s > i && (c = s, s = i, i = c), l -= o, l *= (i - s) / (a - o), l += s, l = Math.min(i, l), Math.max(s, l)
                }
            },
            dadublock_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["2", "3"], type: "dadublock_get_ultrasonic_value"},
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "dadublockget",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT1", e), r = e.getField("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.DaduBlock.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                }
            },
            dadublock_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "dadublock_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "dadublockget",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.DaduBlock.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                }
            },
            dadublock_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "on",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "dadublock_toggle_led"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublockset",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getField("VALUE");
                    return r = "on" == r ? 255 : 0, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.DaduBlock.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                }
            },
            dadublock_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["255"]}, null], type: "dadublock_digital_pwm"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublockset",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["Arduino.analogWrite(%1, %2)"]}
            },
            dadublock_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "dadublock_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublockset",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["Arduino.servomotorWrite(%1, %2)"]}
            },
            dadublock_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["무음", "0"], ["도", "1"], ["도#(레♭)", "2"], ["레", "3"], ["레#(미♭)", "4"], ["미", "5"], ["파", "6"], ["파#(솔♭)", "7"], ["솔", "8"], ["솔#(라♭)", "9"], ["라", "10"], ["라#(시♭)", "11"], ["시", "12"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, {type: "text", params: ["1"]}, null], type: "dadublock_set_tone"},
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "dadublockset",
                isNotFor: ["dadublock"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getNumberField("NOTE", e), a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), 0 === o || 0 === a) return n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberField("OCTAVE", e), i = Entry.DaduBlock.toneMap[o][s];
                    return a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                }
            },
            dadublock_car_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "dadublock_car_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "dadublock_car_get",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.ANALOG;
                    return r && r[n] || 0
                }
            },
            dadublock_car_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1023"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["100"]}],
                    type: "dadublock_car_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "dadublock_car_get",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.ANALOG, o = e.getNumberValue("VALUE2", e),
                        a = e.getNumberValue("VALUE3", e), s = e.getNumberValue("VALUE4", e),
                        i = e.getNumberValue("VALUE5", e), l = r[n] || 0;
                    if (o > a) {
                        var c = o;
                        o = a, a = c
                    }
                    return s > i && (c = s, s = i, i = c), l -= o, l *= (i - s) / (a - o), l += s, l = Math.min(i, l), Math.max(s, l)
                }
            },
            dadublock_car_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: ["2", "3"], type: "dadublock_car_get_ultrasonic_value"},
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "dadublock_car_get",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT1", e), r = e.getField("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.DaduBlock.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                }
            },
            dadublock_car_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "dadublock_car_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "dadublock_car_get",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.DaduBlock.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                }
            },
            dadublock_car_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "on"], ["끄기", "off"]],
                    value: "on",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "dadublock_car_toggle_led"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublock_car_set",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getField("VALUE");
                    return r = "on" == r ? 255 : 0, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.DaduBlock.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                }
            },
            dadublock_car_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["255"]}, null], type: "dadublock_car_digital_pwm"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublock_car_set",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["Arduino.analogWrite(%1, %2)"]}
            },
            dadublock_car_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "dadublock_car_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dadublock_car_set",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["Arduino.servomotorWrite(%1, %2)"]}
            },
            dadublock_car_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["무음", "0"], ["도", "1"], ["도#(레♭)", "2"], ["레", "3"], ["레#(미♭)", "4"], ["미", "5"], ["파", "6"], ["파#(솔♭)", "7"], ["솔", "8"], ["솔#(라♭)", "9"], ["라", "10"], ["라#(시♭)", "11"], ["시", "12"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"], ["5", "4"], ["6", "5"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, {type: "text", params: ["1"]}, null], type: "dadublock_car_set_tone"},
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "dadublock_car_set",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getNumberField("NOTE", e), a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), 0 === o || 0 === a) return n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberField("OCTAVE", e), i = Entry.DaduBlock.toneMap[o][s];
                    return a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.DaduBlock.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                }
            },
            dadublock_car_motor_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["~5,~6", "1"], ["~9,~10", "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "dadublock_car_motor_stop"},
                paramsKeyMap: {PORT: 0},
                class: "dadublock_car_motor",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT");
                    return 1 == n ? (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[5] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[6] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn()) : 2 == n ? (Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[9] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[10] = {
                        type: Entry.DaduBlock.sensorTypes.PWM,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn()) : void 0
                }
            },
            dadublock_car_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["~5,~6", "1"], ["~9,~10", "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Dropdown", options: [["정방향", "1"], ["역방향", "2"]], value: "1", fontSize: 11}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, {type: "text", params: ["50"]}, null], type: "dadublock_car_motor"},
                paramsKeyMap: {PORT: 0, DIRECTION: 1, VALUE: 2},
                class: "dadublock_car_motor",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    if (o = Math.round(o), o = Math.max(o, 0), o = Math.min(o, 100), o *= 1.5, 1 == n) {
                        if (1 == r) return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[5] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: o,
                            time: (new Date).getTime()
                        }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[6] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: (new Date).getTime()
                        }, e.callReturn();
                        if (2 == r) return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[5] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: (new Date).getTime()
                        }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[6] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: o,
                            time: (new Date).getTime()
                        }, e.callReturn()
                    } else if (2 == n) {
                        if (1 == r) return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[9] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: o,
                            time: (new Date).getTime()
                        }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[10] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: (new Date).getTime()
                        }, e.callReturn();
                        if (2 == r) return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[9] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: 0,
                            time: (new Date).getTime()
                        }, Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[10] = {
                            type: Entry.DaduBlock.sensorTypes.PWM,
                            data: o,
                            time: (new Date).getTime()
                        }, e.callReturn()
                    }
                }
            },
            dadublock_car_get_irsensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["7", "7"], ["8", "8"], ["14", "14"], ["15", "15"], ["16", "16"], ["~5", "5"], ["~6", "6"], ["~9", "9"], ["~10", "10"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "dadublock_car_get_irsensor"},
                paramsKeyMap: {PORT: 0},
                class: "dadublock_car_motor",
                isNotFor: ["dadublock_car"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.DaduBlock.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Codestar = {
        name: "codestar",
        url: "http://codestar.co.kr",
        imageName: "codestar.png",
        title: {ko: "코드스타", en: "Codestar"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/codestar.png",
            width: 333,
            height: 409,
            listPorts: {
                13: {name: "진동모터", type: "output", pos: {x: 0, y: 0}},
                tilt: {name: "기울기센서", type: "input", pos: {x: 0, y: 0}}
            },
            ports: {
                7: {name: "빨간색", type: "output", pos: {x: 238, y: 108}},
                8: {name: "파란색", type: "output", pos: {x: 265, y: 126}},
                9: {name: "3색 빨간색", type: "output", pos: {x: 292, y: 34}},
                10: {name: "3색 녹색", type: "output", pos: {x: 292, y: 34}},
                11: {name: "3색 파란색", type: "output", pos: {x: 292, y: 34}},
                12: {name: "버튼", type: "input", pos: {x: 248, y: 142}},
                a0: {name: "왼쪽 벽감지", type: "input", pos: {x: 24, y: 231}},
                a2: {name: "마이크", type: "input", pos: {x: 225, y: 67}},
                a3: {name: "부저", type: "output", pos: {x: 283, y: 105}},
                a4: {name: "왼쪽 라인감지", type: "input", pos: {x: 37, y: 353}},
                a5: {name: "오른쪽 라인감지", type: "input", pos: {x: 50, y: 368}},
                a6: {name: "조도센서", type: "input", pos: {x: 273, y: 22}},
                a7: {name: "오른쪽 벽감지", type: "input", pos: {x: 103, y: 381}},
                temperature: {name: "온도센서", type: "input", pos: {x: 311, y: 238}},
                sonar: {name: "초음파센서", type: "input", pos: {x: 7, y: 277}},
                leftwheel: {name: "왼쪽 바퀴", type: "output", pos: {x: 177, y: 370}},
                rightwheel: {name: "오른쪽 바퀴", type: "output", pos: {x: 83, y: 218}}
            },
            mode: "both"
        }
    }, Entry.Codestar.getBlocks = function () {
        return {
            codestar_color_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "%1 LED %2 %3",
                params: [{type: "Dropdown", options: [["빨간색", 7], ["파란색", 8]]}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [7, "on", null], type: "codestar_color_single"},
                paramsKeyMap: {PORT: 0, ONOFF: 1},
                class: "codestar_output_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = "on" == e.getField("ONOFF") ? 255 : 0;
                    return Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                }
            },
            codestar_3color: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "3색 LED %1 밝기 %2 %3",
                params: [{type: "Dropdown", options: [["빨간색", 9], ["초록색", 10], ["파란색", 11]]}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [9, {type: "number", params: [120]}, null], type: "codestar_3color"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "codestar_output_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                }
            },
            codestar_vibration: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "진동모터 %1 %2",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]]
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["on", null], type: "codestar_vibration"},
                paramsKeyMap: {ONOFF: 0},
                class: "codestar_output_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = "on" == e.getField("ONOFF") ? 255 : 0;
                    return Entry.hw.setDigitalPortValue(13, n), e.callReturn()
                }
            },
            codestar_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "부저 톤%1 %2",
                params: [{
                    type: "Dropdown",
                    options: [["G3", 1], ["A3", 2], ["B3", 3], ["C4", 4], ["D4", 5], ["E4", 6], ["F4", 7], ["G4", 8], ["A4", 9], ["B4", 10], ["C5", 11], ["D5", 12], ["E5", 13], ["F5", 14]]
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [4, null], type: "codestar_buzzer"},
                paramsKeyMap: {TONE: 0},
                class: "codestar_output_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("TONE");
                    return Entry.hw.setDigitalPortValue(15, n), e.callReturn()
                }
            },
            codestar_buzzer_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "부저 중지 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "codestar_buzzer_stop"},
                paramsKeyMap: {},
                class: "codestar_output_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(15, 24), e.callReturn()
                }
            },
            codestar_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "서보모터 %1 모터값 %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["D3", "D3"], ["D5", "D5"], ["D6", "D6"], ["D9", "D9"], ["D10", "D10"], ["D11", "D11"]]
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["D3", {type: "number", params: [90]}, null], type: "codestar_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "codestar_motor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = Entry.hw.sendQueue;
                    if (r.outport = e.getField("PORT"), r.value = 0, !isNaN(n)) {
                        var o = n;
                        n < 0 && (o = 0), n > 255 && (o = 255), r.value = o
                    }
                    return e.callReturn()
                }
            },
            codestar_drive: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "방향 %1 속도 %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["앞으로", "0"], ["뒤로", "1"], ["왼쪽", "2"], ["오른쪽", "3"]]
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["0", {type: "number", params: [100]}, null], type: "codestar_drive"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "codestar_motor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = Number(e.getField("DIRECTION"));
                    n = Math.round(n), n = Math.max(n, 0), n = Math.min(n, 255);
                    var o = 0 + (r << 5) + (n = Math.round(n / 30));
                    return Entry.hw.setDigitalPortValue(14, o), e.callReturn()
                }
            },
            codestar_wheel: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                template: "방향 %1 바퀴속도 %2 %3",
                params: [{type: "Dropdown", options: [["왼쪽", "0"], ["오른쪽", "1"]]}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["0", {type: "number", params: [100]}, null], type: "codestar_wheel"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "codestar_motor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = Number(e.getField("DIRECTION"));
                    n = Math.round(n), n = Math.max(n, -255), (n = Math.min(n, 255)) < 0 && (r = 2 + r, n *= -1);
                    var o = 128 + (r << 5) + (n = Math.round(n / 30));
                    return Entry.hw.setDigitalPortValue(14, o), e.callReturn()
                }
            },
            codestar_light: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "조도센서",
                params: [],
                events: {},
                def: {params: [], type: "codestar_light"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("6")
                }
            },
            codestar_button: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "버튼",
                params: [],
                events: {},
                def: {params: [], type: "codestar_button"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.getDigitalPortValue("12")
                }
            },
            codestar_ir: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "IR %1",
                params: [{type: "Dropdown", options: [["A0", "0"], ["A4", "4"], ["A5", "5"], ["A7", "7"]]}],
                events: {},
                def: {params: ["0"], type: "codestar_ir"},
                paramsKeyMap: {PORT: 0},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("PORT");
                    return Entry.hw.getAnalogPortValue(n)
                }
            },
            codestar_sonar: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "초음파센서",
                params: [],
                events: {},
                def: {params: [], type: "codestar_sonar"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.portData.sonar
                }
            },
            codestar_variable_R: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "가변저항 %1",
                params: [{type: "Dropdown", options: [["A0", "0"], ["A1", "1"], ["A4", "4"], ["A5", "5"]]}],
                events: {},
                def: {params: ["1"], type: "codestar_variable_R"},
                paramsKeyMap: {PORT: 0},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("PORT");
                    return Entry.hw.getAnalogPortValue(n)
                }
            },
            codestar_mic: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "마이크",
                params: [],
                events: {},
                def: {params: [], type: "codestar_mic"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("2")
                }
            },
            codestar_temperature: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "온도센서",
                params: [],
                events: {},
                def: {params: [], type: "codestar_temperature"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.portData.temperature
                }
            },
            codestar_gyroscope: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "3축 자이로 %1 축 %2",
                params: [{type: "Dropdown", options: [["x", "x"], ["y", "y"], ["z", "z"]]}, {
                    type: "Indicator",
                    size: 11
                }],
                events: {},
                def: {params: ["x", null], type: "codestar_gyroscope"},
                paramsKeyMap: {AXIS: 0},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("AXIS");
                    return Entry.hw.getAnalogPortValue("gyro_" + n)
                }
            },
            codestar_geomagnetic: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "3축 지자기 %1 축 %2",
                params: [{type: "Dropdown", options: [["x", "x"], ["y", "y"], ["z", "z"]]}, {
                    type: "Indicator",
                    size: 11
                }],
                events: {},
                def: {params: ["x", null], type: "codestar_geomagnetic"},
                paramsKeyMap: {AXIS: 0},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    var n = e.getField("AXIS");
                    return Entry.hw.getAnalogPortValue("geo_" + n)
                }
            },
            codestar_irR: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "IR 리모콘",
                params: [],
                events: {},
                def: {params: [], type: "codestar_irR"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.getDigitalPortValue("3")
                }
            },
            codestar_tilt: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "기울기센서",
                params: [],
                events: {},
                def: {params: [], type: "codestar_tilt"},
                paramsKeyMap: {},
                class: "codestar_input_sensor",
                isNotFor: ["codestar"],
                func: function (t, e) {
                    return Entry.hw.portData.tilt
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.CODEino = {
        name: "CODEino",
        url: "http://www.kcsi.co.kr/ko/bbs/content.php?co_id=CODEino1",
        imageName: "codeino.png",
        title: {ko: "코드이노", en: "CODEino"},
        getSensorKey: function () {
            return "xxxxxxxx".replace(/[xy]/g, function (t) {
                var e = 16 * Math.random() | 0;
                return ("x" == t ? e : 0 & e | 0).toString(16)
            }).toUpperCase()
        },
        getSensorTime: function (t) {
            return (new Date).getTime() + t
        },
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/codeino.png",
            width: 431,
            height: 354,
            listPorts: {
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 13 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a0: {name: Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a1: {name: Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " A5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a6: {name: Lang.Hw.port_en + " A6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            RGBLED_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            ADDCOLOR: 9
        },
        BlockState: {},
        LED_RED_VALUE: 0,
        LED_GREEN_VALUE: 0,
        LED_BLUE_VALUE: 0
    }, Entry.CODEino.getBlocks = function () {
        return {
            CODEino_get_sensor_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "A0"], ["1", "A1"], ["2", "A2"], ["3", "A3"], ["4", "A4"], ["5", "A5"], ["6", "A6"]],
                    value: "A0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            CODEino_get_named_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_sensor_name_0, "0"], [Lang.Blocks.CODEino_sensor_name_1, "1"], [Lang.Blocks.CODEino_sensor_name_2, "2"], [Lang.Blocks.CODEino_sensor_name_3, "3"], [Lang.Blocks.CODEino_sensor_name_4, "4"], [Lang.Blocks.CODEino_sensor_name_5, "5"], [Lang.Blocks.CODEino_sensor_name_6, "6"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_get_named_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.ANALOG;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: n,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_get_sound_status: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_string_11, "GREAT"], [Lang.Blocks.CODEino_string_12, "SMALL"]],
                    value: "GREAT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_get_sound_status"},
                paramsKeyMap: {STATUS: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getField("STATUS", e), r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.ANALOG;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, "GREAT" == n ? s[0] > 600 ? 1 : 0 : s[0] <= 600 ? 1 : 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, "GREAT" == n ? s[0] > 600 ? 1 : 0 : s[0] <= 600 ? 1 : 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: 0,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_get_light_status: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_string_14, "BRIGHT"], [Lang.Blocks.CODEino_string_15, "DARK"]],
                    value: "BRIGHT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_get_light_status"},
                paramsKeyMap: {STATUS: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getField("STATUS", e), r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.ANALOG;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, "GREAT" == n ? s[1] < 800 ? 1 : 0 : s[1] <= 800 ? 1 : 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, "GREAT" == n ? s[1] < 800 ? 1 : 0 : s[1] <= 800 ? 1 : 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: 1,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_is_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_string_3, "4"], [Lang.Blocks.CODEino_string_4, "17"], [Lang.Blocks.CODEino_string_5, "18"], [Lang.Blocks.CODEino_string_6, "19"], [Lang.Blocks.CODEino_string_7, "20"]],
                    value: "4",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_is_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e);
                    if (n < 10) {
                        var r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL),
                            o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.DIGITAL;
                        if (a.isStart) {
                            if (o && o === a.stamp) return delete a.isStart, delete a.stamp, s ? !s[n] : 0;
                            if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, s ? !s[n] : 0;
                            throw new Entry.Utils.AsyncError
                        }
                        throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.DIGITAL] = {
                            port: 4,
                            time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                        }, new Entry.Utils.AsyncError
                    }
                    r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG), o = Entry.hw.portData.TIME || 0, a = e.executor.scope;
                    var i = Entry.hw.portData.ANALOG;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, i[n - 14] < 1e3 ? 1 : 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, i[n - 14] < 1e3 ? 1 : 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: n - 14,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_get_accelerometer_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_string_16, "LEFT"], [Lang.Blocks.CODEino_string_17, "RIGHT"], [Lang.Blocks.CODEino_string_18, "FRONT"], [Lang.Blocks.CODEino_string_19, "REAR"], [Lang.Blocks.CODEino_string_20, "REVERSE"]],
                    value: "LEFT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_get_accelerometer_direction"},
                paramsKeyMap: {DIRECTION: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n, r = e.getField("DIRECTION", e), o = 0,
                        a = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        s = Entry.hw.portData.TIME || 0, i = e.executor.scope, l = Entry.hw.portData.ANALOG;
                    if ("LEFT" == r || "RIGHT" == r ? o = 3 : "FRONT" == r || "REAR" == r ? o = 4 : "REVERSE" == r && (o = 5), !i.isStart) throw i.isStart = !0, i.stamp = a, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: o,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError;
                    if (s && s === i.stamp) {
                        if (delete i.isStart, delete i.stamp, n = l[o], n -= 265, n *= 180 / 137, n += -90, n = Math.min(90, n), n = Math.max(-90, n), n = Math.round(n), "LEFT" == r || "REAR" == r) return n < -30 ? 1 : 0;
                        if ("RIGHT" == r || "FRONT" == r) return n > 30 ? 1 : 0;
                        if ("REVERSE" == r) return n < -50 ? 1 : 0
                    } else {
                        if (!(a - i.stamp > 64)) throw new Entry.Utils.AsyncError;
                        if (delete i.isStart, delete i.stamp, n = l[o], n -= 265, n *= 180 / 137, n += -90, n = Math.min(90, n), n = Math.max(-90, n), n = Math.round(n), "LEFT" == r || "REAR" == r) return n < -30 ? 1 : 0;
                        if ("RIGHT" == r || "FRONT" == r) return n > 30 ? 1 : 0;
                        if ("REVERSE" == r) return n < -50 ? 1 : 0
                    }
                }
            },
            CODEino_get_accelerometer_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Dropdown", options: [["X", "3"], ["Y", "4"], ["Z", "5"]], value: "3", fontSize: 11}],
                events: {},
                def: {params: [null], type: "CODEino_get_accelerometer_value"},
                paramsKeyMap: {PORT: 0},
                class: "CODEino_sensor",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e),
                        r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.ANALOG, i = 0;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, i = 1.46 * ((i = s[n]) - 333), i = Math.min(90, i), i = Math.max(-90, i), Math.round(i);
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, i = 1.46 * ((i = s[n]) - 333), i = Math.min(90, i), i = Math.max(-90, i), Math.round(i);
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: n,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "CODEino_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "CODEino_Adumode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.ANALOG;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.ANALOG] = {
                        port: n,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.ANALOG)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_get_digital_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}], type: "CODEino_get_digital_value"},
                paramsKeyMap: {PORT: 0},
                class: "CODEino_Adumode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT", e),
                        r = Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL),
                        o = Entry.hw.portData.TIME || 0, a = e.executor.scope, s = Entry.hw.portData.DIGITAL;
                    if (a.isStart) {
                        if (o && o === a.stamp) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        if (r - a.stamp > 64) return delete a.isStart, delete a.stamp, s && s[n] || 0;
                        throw new Entry.Utils.AsyncError
                    }
                    throw a.isStart = !0, a.stamp = r, Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.CODEino.sensorTypes.DIGITAL] = {
                        port: n,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                    }, new Entry.Utils.AsyncError
                }
            },
            CODEino_set_digital_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "255"], [Lang.Blocks.ARDUINO_off, "0"]],
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}, "255", null], type: "CODEino_set_digital_value"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "CODEino_Setmode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberField("VALUE");
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.CODEino.sensorTypes.DIGITAL,
                        data: r,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.DIGITAL)
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.digitalWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            CODEino_set_pwm_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "CODEino_set_pwm_value"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "CODEino_Setmode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.CODEino.sensorTypes.PWM,
                        data: r,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.PWM)
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.analogWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            CODEino_convert_scale: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "CODEino_get_analog_value", value: "0"}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["1023"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["100"]
                    }], type: "CODEino_convert_scale"
                },
                paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "CODEino_extmode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE1", e), r = e.getNumberValue("VALUE2", e),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e), i = n;
                    if (r > o) {
                        var l = r;
                        r = o, o = l
                    }
                    return a > s && (l = a, a = s, s = l), i -= r, i *= (s - a) / (o - r), i += a, i = Math.min(s, i), i = Math.max(a, i), Math.round(i)
                }
            },
            CODEino_set_rgb_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_led_red, "17"], [Lang.Blocks.CODEino_led_green, "18"], [Lang.Blocks.CODEino_led_blue, "19"]],
                    value: "17",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "CODEino_set_rgb_value"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = e.getNumberValue("VALUE", e);
                    if (r = Math.min(255, r), r = Math.max(0, r), 17 == n ? Entry.CODEino.LED_RED_VALUE = r : 18 == n ? Entry.CODEino.LED_GREEN_VALUE = r : 19 == n ? Entry.CODEino.LED_BLUE_VALUE = r : n = 0, n > 0) return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: r,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.analogWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            CODEino_set_rgb_add_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.CODEino_led_red, "17"], [Lang.Blocks.CODEino_led_green, "18"], [Lang.Blocks.CODEino_led_blue, "19"]],
                    value: "17",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {type: "CODEino_set_rgb_add_value"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e), r = e.getNumberValue("VALUE", e);
                    return r = Math.min(255, r), r = Math.max(0, r), 17 == n && (Entry.CODEino.LED_RED_VALUE = Entry.CODEino.LED_RED_VALUE + r, Entry.CODEino.LED_RED_VALUE = Math.min(255, Entry.CODEino.LED_RED_VALUE), Entry.CODEino.LED_RED_VALUE = Math.max(0, Entry.CODEino.LED_RED_VALUE), r = Entry.CODEino.LED_RED_VALUE), 18 == n && (Entry.CODEino.LED_GREEN_VALUE = Entry.CODEino.LED_GREEN_VALUE + r, Entry.CODEino.LED_GREEN_VALUE = Math.min(255, Entry.CODEino.LED_GREEN_VALUE), Entry.CODEino.LED_GREEN_VALUE = Math.max(0, Entry.CODEino.LED_GREEN_VALUE), r = Entry.CODEino.LED_GREEN_VALUE), 19 == n && (Entry.CODEino.LED_BLUE_VALUE = Entry.CODEino.LED_BLUE_VALUE + r, Entry.CODEino.LED_BLUE_VALUE = Math.min(255, Entry.CODEino.LED_BLUE_VALUE), Entry.CODEino.LED_BLUE_VALUE = Math.max(0, Entry.CODEino.LED_BLUE_VALUE), r = Entry.CODEino.LED_BLUE_VALUE), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: r,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                }
            },
            CODEino_rgb_set_color: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Color"}, {type: "Indicator", img: "block_icon/brush_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "CODEino_rgb_set_color"},
                paramsKeyMap: {VALUE: 0},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = e.getStringField("VALUE"), r = Entry.hw.sendQueue;
                    Entry.CODEino.LED_RED_VALUE = parseInt(n.substr(1, 2), 16), Entry.CODEino.LED_GREEN_VALUE = parseInt(n.substr(3, 2), 16), Entry.CODEino.LED_BLUE_VALUE = parseInt(n.substr(5, 2), 16);
                    var o = 17;
                    return r.SET || (r.SET = {}), r.SET[o] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_RED_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, o = 18, r.SET || (r.SET = {}), r.SET[o] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_GREEN_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, o = 19, r.SET || (r.SET = {}), r.SET[o] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_BLUE_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                }
            },
            CODEino_set_rgb_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "CODEino_set_rgb_off"},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = 17;
                    return Entry.CODEino.LED_RED_VALUE = 0, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_RED_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 18, Entry.CODEino.LED_GREEN_VALUE = 0, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_GREEN_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 19, Entry.CODEino.LED_BLUE_VALUE = 0, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_BLUE_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.analogWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            CODEino_set__led_by_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null], type: "CODEino_set__led_by_rgb"
                },
                paramsKeyMap: {rValue: 0, gValue: 1, bValue: 2},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    Entry.CODEino.LED_RED_VALUE = e.getNumberValue("rValue"), Entry.CODEino.LED_GREEN_VALUE = e.getNumberValue("gValue"), Entry.CODEino.LED_BLUE_VALUE = e.getNumberValue("bValue");
                    var r = 17;
                    return n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_RED_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 18, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_GREEN_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 19, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_BLUE_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                }
            },
            CODEino_led_by_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "CODEino_led_by_value"},
                class: "CODEino_RGBLED_mode",
                isNotFor: ["CODEino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = 17;
                    return Entry.CODEino.LED_RED_VALUE = 100, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_RED_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 18, Entry.CODEino.LED_GREEN_VALUE = 100, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_GREEN_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, r = 19, Entry.CODEino.LED_BLUE_VALUE = 100, n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.CODEino.sensorTypes.RGBLED_PIN,
                        data: Entry.CODEino.LED_BLUE_VALUE,
                        time: Entry.CODEino.getSensorTime(Entry.CODEino.sensorTypes.RGBLED_PIN)
                    }, e.callReturn()
                }
            },
            CODEino_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["CODEino"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "CODEino_get_number_sensor_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["CODEino.get_number_sensor_value(%1)"]}
            },
            CODEino_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["CODEino"],
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "CODEino_toggle_led"},
                class: "arduino_set",
                syntax: {js: [], py: ["CODEino.toggle_led(%1)"]}
            },
            CODEino_toggle_pwm: {
                parent: "arduino_toggle_pwm",
                isNotFor: ["CODEino"],
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "CODEino_toggle_pwm"
                },
                class: "arduino_set",
                syntax: {js: [], py: ["CODEino.toggle_pwm(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.coconut = {
        PORT_MAP: {
            leftFloorValue: 0,
            rightFloorValue: 0,
            BothFloorDetection: 0,
            leftProximityValue: 0,
            rightProximityValue: 0,
            BothProximityDetection: 0,
            obstacleDetection: 0,
            light: 0,
            temp: 0,
            extA2: 0,
            extA3: 0
        },
        setZero: function () {
            Entry.hw.sendQueue.msgValue = [255, 85, 2, 0, 4], Entry.hw.update()
        },
        lineTracerModeId: 0,
        lineTracerStateId: -1,
        tempo: 60,
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts;
            0 <= (t = e.indexOf(t)) && e.splice(t, 1)
        },
        removeAllTimeouts: function () {
            var t, e = this.timeouts;
            for (t in e) clearTimeout(e[t]);
            this.timeouts = []
        },
        setLineTracerMode: function (t, e) {
            this.lineTracerModeId = this.lineTracerModeId + 1 & 255, t.lineTracerMode = e, t.lineTracerModeId = this.lineTracerModeId
        },
        msgValue: 0,
        insertQueue: function (t, e) {
            e.msgValue = t
        },
        clearQueue: function (t) {
            t.msgValue = ""
        },
        move: function (t) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 0, t, this.speed)
        },
        speed: 60,
        directions: {Both: 0, Left: 1, Right: 2, Forward: 3, Backward: 4},
        devices: {
            LightSensor: 14,
            Accelerometer: 18,
            Temperature: 21,
            Buzzer: 3,
            IRdistance: 5,
            Linetracer: 7,
            IR: 9,
            RGBled: 25,
            Motor: 26,
            LedMatrix: 27,
            Digital: 30,
            Analog: 31,
            PWM: 32,
            External: 40,
            Speaker: 41,
            ExtIR: 42,
            ServoMotor: 43,
            ExLed: 44,
            ExtCds: 45
        },
        sharps: {"-": 0, "#": 1, b: 2},
        beats: {
            Half: 500,
            Quater: 250,
            Eighth: 125,
            Sixteenth: 63,
            "Thirty-second": 32,
            Whole: 1e3,
            "Dotted half": 750,
            "Dotted quarter": 375,
            "Dotted eighth": 188,
            "Dotted sixteenth": 95,
            "Dotted thirty-second": 48,
            Double: 2e3,
            Zero: 0
        },
        melodys: {
            "Twinkle Twinkle little star": 1,
            "Three bears": 2,
            "Mozart's Lullaby": 3,
            "Do-Re-Mi": 4,
            Butterfly: 5
        },
        colors: {Black: 0, White: 1, Red: 2, Green: 3, Blue: 4, Yellow: 5, Cyan: 6, Magenta: 7},
        detectConds: {Yes: 1, No: 0},
        sLetters: {
            a: 0,
            b: 1,
            c: 2,
            d: 3,
            e: 4,
            f: 5,
            g: 6,
            h: 7,
            i: 8,
            j: 9,
            k: 10,
            l: 11,
            m: 12,
            n: 13,
            o: 14,
            p: 15,
            q: 16,
            r: 17,
            s: 18,
            t: 19,
            u: 20,
            v: 21,
            w: 22,
            x: 23,
            y: 24,
            z: 25
        },
        cLetters: {
            A: 0,
            B: 1,
            C: 2,
            D: 3,
            E: 4,
            F: 5,
            G: 6,
            H: 7,
            I: 8,
            J: 9,
            K: 10,
            L: 11,
            M: 12,
            N: 13,
            O: 14,
            P: 15,
            Q: 16,
            R: 17,
            S: 18,
            T: 19,
            U: 20,
            V: 21,
            W: 22,
            X: 23,
            Y: 24,
            Z: 25
        },
        kLetters: {
            ga: 0,
            na: 1,
            da: 2,
            la: 3,
            ma: 4,
            ba: 5,
            sa: 6,
            aa: 7,
            ja: 8,
            cha: 9,
            ka: 10,
            ta: 11,
            pa: 12,
            ha: 13
        },
        onOffs: {On: 1, Off: 0},
        axiss: {"X-Axis": 1, "Y-Axis": 2, "Z-Axis": 3},
        pins: {D4: 4, D10: 10, D11: 11, D12: 12, A2: 16, A3: 17},
        outputValues: {HIGH: 1, LOW: 0},
        moveMotor: function (t) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 0, t, this.speed)
        },
        moveMotorSpeed: function (t, e) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 0, t, this.speed)
        },
        turnMotor: function (t) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 0, t, this.speed)
        },
        stopMotor: function () {
            return this.runPackage(this.devices.Motor, 1)
        },
        moveTurnAngle: function (t, e) {
            "string" == typeof t && (t = this.directions[t]), (e > 360 || e < -360) && (e = 360)
        },
        moveGoTime: function (t, e) {
            return e < 0 && (e = -e), e *= 1e3, "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 3, t, this.speed, this.short2array(e))
        },
        turnMotorTime: function (t, e) {
            return e < 0 && (e = -e), e *= 1e3, "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 3, t, this.speed, this.short2array(e))
        },
        moveMotorColor: function (t, e) {
            var n = this.devices.Motor;
            return "string" == typeof t && (t = this.directions[t]), "string" == typeof e && (e = this.colors[e]), this.runPackage(n, 5, t, this.speed, e)
        },
        moveMotorAngleColor: function (t, e, n) {
            var r = this.devices.Motor;
            return "string" == typeof t && (t = this.directions[t]), "string" == typeof n && (n = this.colors[n]), "number" != typeof e && (e = 90), this.runPackage(r, 6, t, this.short2array(0), this.short2array(e), this.short2array(0), n)
        },
        moveExtMotor: function (t, e) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.Motor, 7, t, e)
        },
        rgbOn: function (t, e) {
            return "string" == typeof t && (t = this.directions[t]), "string" == typeof e && (e = this.colors[e]), this.runPackage(this.devices.RGBled, 0, t, e)
        },
        rgbOff: function (t) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.RGBled, 1, t, 0)
        },
        rgbOffColor: function (t, e) {
            return "string" == typeof t && (t = this.directions[t]), "string" == typeof e && (e = this.colors[e]), this.runPackage(this.devices.RGBled, 1, t, e)
        },
        ledOnTime: function (t, e, n) {
            return "string" == typeof t && (t = this.directions[t]), "string" == typeof e && (e = this.colors[e]), "number" != typeof n ? n = 0 : n < 0 ? n = 0 : n *= 1e3, this.runPackage(this.devices.RGBled, 3, t, e, this.short2array(n))
        },
        beep: function () {
            return this.buzzerControl(0, 262, 50)
        },
        playBuzzerTime: function (t) {
            return "number" != typeof t && (t = .5), t < 0 && (t = .5), t *= 1e3, this.buzzerControl(0, 262, t)
        },
        playBuzzerFreq: function (t, e) {
            return "number" != typeof e && (e = .5), e < 0 && (e = .5), e *= 1e3, "number" != typeof t && (t = 300), t < 0 && (t = 300), this.buzzerControl(0, t, e)
        },
        buzzerOff: function () {
            return this.buzzerControl(0, 0, 0)
        },
        playBuzzerNote: function (t, e, n) {
            return t = this.getNote(t), "string" == typeof n && (n = this.beats[n]), this.runPackage(this.devices.Buzzer, 2, t.charCodeAt(0), e, this.short2array(n))
        },
        playNote: function (t, e, n, r) {
            return t = this.getNote(t), "string" == typeof r && (r = this.beats[r]), this.runPackage(this.devices.Buzzer, 4, t.charCodeAt(0), e, n.charCodeAt(0), this.short2array(r))
        },
        getNote: function (t) {
            return t.split("_")[1]
        },
        restBeat: function (t) {
            if ("string" == typeof t) {
                var e = t.split("_", 1);
                t = this.beats[e]
            }
            return this.buzzerControl(1, 0, t)
        },
        playBuzzerColor: function (t, e, n, r) {
            return t = this.getNote(t), "string" == typeof n && (n = this.beats[n]), "string" == typeof r && (r = this.colors[r]), this.runPackage(this.devices.Buzzer, 3, t.charCodeAt(0), e, this.short2array(n), r)
        },
        playNoteColor: function (t, e, n, r, o, a) {
            return t = this.getNote(t), "string" == typeof r && (r = this.beats[r]), "string" == typeof o && (o = this.directions[o]), "string" == typeof a && (a = this.colors[a]), this.runPackage(this.devices.Buzzer, 5, t.charCodeAt(0), e, n.charCodeAt(0), this.short2array(r), o, a)
        },
        playMelody: function (t) {
            return "string" == typeof t && (t = this.melodys[t]), this.runPackage(this.devices.Buzzer, 6, t)
        },
        buzzerControl: function (t, e, n) {
            var r = this.devices.Buzzer;
            return "string" == typeof n && (n = this.beats[n]), this.runPackage(r, t, this.short2array(e), this.short2array(n))
        },
        runBlink: function () {
            return this.runPackage(30, 13)
        },
        followLine: function () {
            return this.runPackage(this.devices.Linetracer, 3, this.speed)
        },
        followLineLevel: function (t, e) {
            return "number" != typeof e && (e = 70), this.runPackage(this.devices.Linetracer, 3, t, e)
        },
        setStandard: function (t, e) {
            return "string" == typeof t && (t = this.directions[t]), this.runPackage(this.devices.IRdistance, 0, t, e)
        },
        avoidMode: function () {
            return this.runPackage(this.devices.IRdistance, 3)
        },
        ledMatrixOn: function (t, e, n) {
            return "string" == typeof t && (t = this.onOffs[t]), "string" == typeof e && "Both" == e && (e = 0), "string" == typeof n && "Both" == n && (n = 0), this.runPackage(this.devices.LedMatrix, 0, e, n, t)
        },
        ledMatrixOff: function (t, e) {
            return this.runPackage(this.devices.LedMatrix, 0, t, e, 0)
        },
        ledMatrixClear: function () {
            return this.runPackage(this.devices.LedMatrix, 5)
        },
        ledMatrixOnAll: function () {
            return this.runPackage(this.devices.LedMatrix, 6)
        },
        showLedMatrix: function (t) {
            return this.runPackage(this.devices.LedMatrix, 1, t)
        },
        showLedMatrixSmall: function (t) {
            return "string" == typeof t && (t = this.sLetters[t]), this.runPackage(this.devices.LedMatrix, 2, t)
        },
        showLedMatrixLarge: function (t) {
            return "string" == typeof t && (t = this.cLetters[t]), this.runPackage(this.devices.LedMatrix, 3, t)
        },
        showLedMatrixKorean: function (t) {
            return "string" == typeof t && (t = this.kLetters[t]), this.runPackage(this.devices.LedMatrix, 4, t)
        },
        sendMessage: function (t) {
            return this.runPackage(this.devices.IR, this.string2array(t))
        },
        extLedOn: function (t, e) {
            return "string" == typeof t && (t = this.pins[t]), e *= 1e3, this.runPackage(this.devices.ExLed, t, this.short2array(e))
        },
        playSpeaker: function (t, e, n) {
            return "string" == typeof t && (t = this.pins[t]), n *= 1e3, this.runPackage(this.devices.Speaker, t, this.short2array(e), this.short2array(n))
        },
        stopSpeaker: function (t) {
            return "string" == typeof t && (t = this.pins[t]), this.runPackage(this.devices.Speaker, t, this.short2array(0), this.short2array(0))
        },
        runExtServo: function (t, e) {
            return "string" == typeof t && (t = this.pins[t]), this.runPackage(this.devices.ServoMotor, t, e)
        },
        digitalWrite: function (t, e) {
            return "string" == typeof e && (e = this.outputValues[e]), this.runPackage(this.devices.Digital, t, e)
        },
        analogWrite: function (t, e) {
            return "number" != typeof e ? e = 0 : e > 255 && (e = 255), this.runPackage(this.devices.Analog, t, e)
        },
        readFloat: function (t, e) {
            var n = [t[e], t[e + 1], t[e + 2], t[e + 3]];
            return parseFloat(n)
        },
        readShort: function (t, e) {
            var n = [t[e], t[e + 1]];
            return parseFloat(n)
        },
        readDouble: function (t, e) {
            return this.readFloat(t, e)
        },
        readString: function (t, e, n) {
            for (var r = 0; r < n; r++) ;
            return ""
        },
        short2array: function (t) {
            for (var e = {}, n = 0; n < 2; n++) {
                var r = 255 & t;
                e[n] = r, t = (t - r) / 256
            }
            return [e[0], e[1]]
        },
        runPackage: function () {
            for (var t = [255, 85, 0, 0, 2], e = 0; e < arguments.length; e++) "[class Array]" == arguments[e].constructor ? t = t.concat(arguments[e]) : 2 == arguments[e].length ? t = t.concat(arguments[e]) : t.push(arguments[e]);
            return t[2] = t.length - 3, t
        },
        name: "coconut",
        url: "http://coco-nut.kr",
        imageName: "coconut.png",
        title: {ko: "코코넛", en: "coconut"},
        monitorTemplate: {
            imgPath: "hw/coconut.png",
            width: 256,
            height: 256,
            listPorts: {
                temperature: {name: Lang.Blocks.coconut_sensor_temperature, type: "input", pos: {x: 0, y: 0}},
                accelerationX: {name: Lang.Blocks.coconut_sensor_acceleration_x, type: "input", pos: {x: 0, y: 0}},
                accelerationY: {name: Lang.Blocks.coconut_sensor_acceleration_y, type: "input", pos: {x: 0, y: 0}},
                accelerationZ: {name: Lang.Blocks.coconut_sensor_acceleration_z, type: "input", pos: {x: 0, y: 0}}
            },
            ports: {
                leftProximityValue: {
                    name: Lang.Blocks.coconut_sensor_left_proximity,
                    type: "input",
                    pos: {x: 122, y: 156}
                },
                rightProximityValue: {
                    name: Lang.Blocks.coconut_sensor_right_proximity,
                    type: "input",
                    pos: {x: 10, y: 108}
                },
                leftFloorValue: {name: Lang.Blocks.coconut_sensor_left_floor, type: "input", pos: {x: 100, y: 234}},
                rightFloorValue: {name: Lang.Blocks.coconut_sensor_right_floor, type: "input", pos: {x: 13, y: 180}},
                light: {name: Lang.Blocks.coconut_sensor_light, type: "input", pos: {x: 56, y: 189}}
            },
            mode: "both"
        }
    }, Entry.coconut.getBlocks = function () {
        return {
            coconut_move_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_move_forward, "3"], [Lang.Blocks.coconut_move_backward, "4"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_move_motor"},
                paramsKeyMap: {DIST: 0},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e), a = parseInt(o),
                        s = Entry.coconut.moveMotor(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: []}
            },
            coconut_turn_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_turn_left, "1"], [Lang.Blocks.coconut_turn_right, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_turn_motor"},
                paramsKeyMap: {DIST: 0},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST"), a = parseInt(o),
                        s = Entry.coconut.turnMotor(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: []}
            },
            coconut_stop_motor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_stop_motor"},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.stopMotor();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_move_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_move_forward, "3"], [Lang.Blocks.coconut_move_backward, "4"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}], type: "coconut_move_for_secs"},
                paramsKeyMap: {DIST: 0, VALUE: 1},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e), a = parseInt(o),
                        s = e.getNumberValue("VALUE"), i = Entry.coconut.moveGoTime(a, s), l = Date();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log(l + " : rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log(l + " : rev = continue" + r.msg) : console.log(l + " : rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log(l + " : rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(i, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_turn_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_turn_left, "1"], [Lang.Blocks.coconut_turn_right, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}], type: "coconut_turn_for_secs"},
                paramsKeyMap: {DIST: 0, VALUE: 1},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e), a = parseInt(o),
                        s = e.getNumberValue("VALUE"), i = Entry.coconut.moveGoTime(a, s);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(i, n), e)
                },
                syntax: {js: [], py: []}
            },
            coconut_turn_to_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_turn_left, "1"], [Lang.Blocks.coconut_turn_right, "2"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_color_red, "2"], [Lang.Blocks.coconut_color_yellow, "5"], [Lang.Blocks.coconut_color_green, "3"], [Lang.Blocks.coconut_color_cyan, "6"], [Lang.Blocks.coconut_color_blue, "4"], [Lang.Blocks.coconut_color_magenta, "7"], [Lang.Blocks.coconut_color_white, "1"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "coconut_turn_to_led"},
                paramsKeyMap: {DIST: 0, COLOR: 1},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e),
                        a = e.getField("COLOR", e), s = parseInt(o), i = parseInt(a),
                        l = Entry.coconut.moveMotorColor(s, i);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(l, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_move_outmotor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_move_forward, "3"], [Lang.Blocks.coconut_move_backward, "4"], [Lang.Blocks.coconut_turn_left, "1"], [Lang.Blocks.coconut_turn_right, "2"]],
                    value: "3",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["60"]}], type: "coconut_move_outmotor"},
                paramsKeyMap: {DIST: 0, VALUE: 1},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e), a = parseInt(o),
                        s = e.getNumberValue("VALUE"), i = Entry.coconut.moveExtMotor(a, s);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(i, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_set_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_left_led, "1"], [Lang.Blocks.coconut_right_led, "2"], [Lang.Blocks.coconut_both_leds, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_color_red, "2"], [Lang.Blocks.coconut_color_yellow, "5"], [Lang.Blocks.coconut_color_green, "3"], [Lang.Blocks.coconut_color_cyan, "6"], [Lang.Blocks.coconut_color_blue, "4"], [Lang.Blocks.coconut_color_magenta, "7"], [Lang.Blocks.coconut_color_white, "1"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "coconut_set_led_to"},
                paramsKeyMap: {DIST: 0, COLOR: 1},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = new Date, a = e.getField("DIST", e),
                        s = e.getField("COLOR", e), i = parseInt(a), l = parseInt(s), c = Entry.coconut.rgbOn(i, l);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log(o + " : rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log(o + " : rev = continue" + r.msg) : console.log(o + " : rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(c, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_clear_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_left_led, "1"], [Lang.Blocks.coconut_right_led, "2"], [Lang.Blocks.coconut_both_leds, "0"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_clear_led"},
                paramsKeyMap: {DIST: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e), a = parseInt(o),
                        s = Entry.coconut.rgbOff(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                }
            },
            coconut_set_led_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_left_led, "1"], [Lang.Blocks.coconut_right_led, "2"], [Lang.Blocks.coconut_both_leds, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_color_red, "2"], [Lang.Blocks.coconut_color_yellow, "5"], [Lang.Blocks.coconut_color_green, "3"], [Lang.Blocks.coconut_color_cyan, "6"], [Lang.Blocks.coconut_color_blue, "4"], [Lang.Blocks.coconut_color_magenta, "7"], [Lang.Blocks.coconut_color_white, "1"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "coconut_set_led_clear"},
                paramsKeyMap: {DIST: 0, COLOR: 1},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e),
                        a = e.getField("COLOR", e), s = parseInt(o), i = parseInt(a),
                        l = Entry.coconut.rgbOffColor(s, i);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(l, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_set_led_time: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_left_led, "Left"], [Lang.Blocks.coconut_right_led, "Right"], [Lang.Blocks.coconut_both_leds, "Both"]],
                    value: "Left",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_color_red, "2"], [Lang.Blocks.coconut_color_yellow, "5"], [Lang.Blocks.coconut_color_green, "3"], [Lang.Blocks.coconut_color_cyan, "6"], [Lang.Blocks.coconut_color_blue, "4"], [Lang.Blocks.coconut_color_magenta, "7"], [Lang.Blocks.coconut_color_white, "1"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, {type: "text", params: ["0.6"]}], type: "coconut_set_led_time"},
                paramsKeyMap: {DIST: 0, COLOR: 1, VALUE: 2},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIST", e),
                        a = e.getField("COLOR", e), s = e.getNumberValue("VALUE"), i = parseInt(a),
                        l = Entry.coconut.ledOnTime(o, i, s);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(l, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_beep: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_beep"},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.beep();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_buzzer_time: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0.6"]}], type: "coconut_buzzer_time"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberValue("VALUE"),
                        a = Entry.coconut.playBuzzerTime(o);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(a, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_buzzer_set_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", "acce기t": "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["300"]}, {type: "text", params: ["0.6"]}],
                    type: "coconut_buzzer_set_hz"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberValue("HZ"),
                        a = e.getNumberValue("TIME"), s = Entry.coconut.playBuzzerFreq(o, a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_clear_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_clear_buzzer"},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.buzzerOff();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_play_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_note_c, "NOTE_C"], [Lang.Blocks.coconut_note_d, "NOTE_D"], [Lang.Blocks.coconut_note_e, "NOTE_E"], [Lang.Blocks.coconut_note_f, "NOTE_F"], [Lang.Blocks.coconut_note_g, "NOTE_G"], [Lang.Blocks.coconut_note_a, "NOTE_A"], [Lang.Blocks.coconut_note_b, "NOTE_B"]],
                    value: "NOTE_C",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["-", "-"], ["#", "#"], ["b", "b"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_play_buzzer_hn, "500"], [Lang.Blocks.coconut_play_buzzer_qn, "250"], [Lang.Blocks.coconut_play_buzzer_en, "125"], [Lang.Blocks.coconut_play_buzzer_sn, "63"], [Lang.Blocks.coconut_play_buzzer_tn, "32"], [Lang.Blocks.coconut_play_buzzer_wn, "1000"], [Lang.Blocks.coconut_play_buzzer_dhn, "750"], [Lang.Blocks.coconut_play_buzzer_dqn, "375"], [Lang.Blocks.coconut_play_buzzer_den, "188"], [Lang.Blocks.coconut_play_buzzer_dsn, "95"], [Lang.Blocks.coconut_play_buzzer_dtn, "48"]],
                    value: "500",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", "-", null], type: "coconut_play_buzzer"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, SEMI: 2, BEAT: 3},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("NOTE", e),
                        a = e.getField("OCTAVE", e), s = e.getField("SEMI", e), i = e.getField("BEAT", e), l = o,
                        c = parseInt(a), u = s, p = parseInt(i), _ = Entry.coconut.playNote(l, c, u, p);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(_, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_rest_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_rest_buzzer_hr, "500"], [Lang.Blocks.coconut_rest_buzzer_qr, "250"], [Lang.Blocks.coconut_rest_buzzer_er, "175"], [Lang.Blocks.coconut_rest_buzzer_sr, "63"], [Lang.Blocks.coconut_rest_buzzer_tr, "32"], [Lang.Blocks.coconut_rest_buzzer_wr, "1000"]],
                    value: "500",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_rest_buzzer"},
                paramsKeyMap: {BEAT: 0},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("BEAT", e),
                        a = (parseInt(o), Entry.coconut.restBeat(o));
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(a, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_play_buzzer_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c, "NOTE_C"], [Lang.Blocks.ALBERT_note_d, "NOTE_D"], [Lang.Blocks.ALBERT_note_e, "NOTE_E"], [Lang.Blocks.ALBERT_note_f, "NOTE_F"], [Lang.Blocks.ALBERT_note_g, "NOTE_G"], [Lang.Blocks.ALBERT_note_a, "NOTE_A"], [Lang.Blocks.ALBERT_note_b, "NOTE_B"]],
                    value: "NOTE_C",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["-", "-"], ["#", "#"], ["b", "b"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_play_buzzer_hn, "500"], [Lang.Blocks.coconut_play_buzzer_qn, "250"], [Lang.Blocks.coconut_play_buzzer_en, "125"], [Lang.Blocks.coconut_play_buzzer_sn, "63"], [Lang.Blocks.coconut_play_buzzer_tn, "32"], [Lang.Blocks.coconut_play_buzzer_wn, "1000"], [Lang.Blocks.coconut_play_buzzer_dhn, "750"], [Lang.Blocks.coconut_play_buzzer_dqn, "375"], [Lang.Blocks.coconut_play_buzzer_den, "188"], [Lang.Blocks.coconut_play_buzzer_dsn, "95"], [Lang.Blocks.coconut_play_buzzer_dtn, "48"]],
                    value: "500",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_left_led, "1"], [Lang.Blocks.coconut_right_led, "2"], [Lang.Blocks.coconut_both_leds, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_color_red, "2"], [Lang.Blocks.coconut_color_yellow, "5"], [Lang.Blocks.coconut_color_green, "3"], [Lang.Blocks.coconut_color_cyan, "6"], [Lang.Blocks.coconut_color_blue, "4"], [Lang.Blocks.coconut_color_magenta, "7"], [Lang.Blocks.coconut_color_white, "1"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", "-", null, null, null], type: "coconut_play_buzzer_led"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, SEMI: 2, BEAT: 3, DIR: 4, COLOR: 5},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("NOTE", e),
                        a = e.getField("OCTAVE", e), s = e.getField("SEMI", e), i = e.getField("BEAT", e),
                        l = e.getField("DIR", e), c = e.getField("COLOR", e), u = o, p = parseInt(a), _ = s,
                        d = parseInt(i), y = parseInt(l), g = parseInt(c),
                        h = Entry.coconut.playNoteColor(u, p, _, d, y, g);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(h, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_play_midi: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_play_midi_1, "1"], [Lang.Blocks.coconut_play_midi_2, "2"], [Lang.Blocks.coconut_play_midi_3, "3"], [Lang.Blocks.coconut_play_midi_4, "4"], [Lang.Blocks.coconut_play_midi_5, "5"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_play_midi"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_buzzer",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("VALUE"), a = parseInt(o),
                        s = Entry.coconut.playMelody(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, n.msgValue = "", console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_floor_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_sensor_left_floor, "1"], [Lang.Blocks.coconut_sensor_right_floor, "2"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "coconut_floor_sensor"},
                paramsKeyMap: {DIR: 0},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData;
                    return "1" == e.getField("DIR") ? n.leftFloorValue : n.rightFloorValue
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_floor_sensing: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_sensor_left_floor, "1"], [Lang.Blocks.coconut_sensor_right_floor, "2"], [Lang.Blocks.coconut_sensor_both_floor, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_floor_sensing_on, "1"], [Lang.Blocks.coconut_floor_sensing_off, "0"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "coconut_floor_sensing"},
                paramsKeyMap: {DIR: 0, DET: 1},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData, r = e.getField("DIR"), o = e.getField("DET");
                    return "0" == r ? "1" == o ? 3 == n.BothFloorDetection : 0 == n.BothFloorDetection : "1" == r ? "1" == o ? 2 == n.BothFloorDetection : 0 == n.BothFloorDetection : "2" == r ? "1" == o ? 1 == n.BothFloorDetection : 0 == n.BothFloorDetection : void 0
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_following_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_following_line"},
                paramsKeyMap: {},
                class: "coconut_wheel",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.followLine();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_front_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_sensor_left_proximity, "1"], [Lang.Blocks.coconut_sensor_right_proximity, "2"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "coconut_front_sensor"},
                paramsKeyMap: {DIR: 0},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData;
                    return "1" == e.getField("DIR") ? n.leftProximityValue : n.rightProximityValue
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_front_sensing: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_sensor_left_proximity, "1"], [Lang.Blocks.coconut_sensor_right_proximity, "2"], [Lang.Blocks.coconut_sensor_both_proximity, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_floor_sensing_on, "1"], [Lang.Blocks.coconut_floor_sensing_off, "0"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "coconut_front_sensing"},
                paramsKeyMap: {DIR: 0, DET: 1},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData, r = e.getField("DIR"), o = e.getField("DET");
                    return "0" == r ? "1" == o ? 3 == n.BothProximityDetection : 0 == n.BothProximityDetection : "1" == r ? "1" == o ? 2 == n.BothProximityDetection || 3 == n.BothProximityDetection : 0 == n.BothProximityDetection || 1 == n.BothProximityDetection : "2" == r ? "1" == o ? 1 == n.BothProximityDetection || 3 == n.BothProximityDetection : 0 == n.BothProximityDetection || 2 == n.BothProximityDetection : void 0
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_obstruct_sensing: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "coconut_obstruct_sensing"},
                paramsKeyMap: {},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    return Entry.hw.sendQueue, Entry.hw.portData.BothProximityDetection > 0
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_avoid_mode: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_avoid_mode"},
                paramsKeyMap: {DEVICE: 0},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.avoidMode();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_set: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_dotmatrix_set_on, "1"], [Lang.Blocks.coconut_dotmatrix_set_off, "0"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_dotmatrix_row_0, "0"], [Lang.Blocks.coconut_dotmatrix_row_1, "1"], [Lang.Blocks.coconut_dotmatrix_row_2, "2"], [Lang.Blocks.coconut_dotmatrix_row_3, "3"], [Lang.Blocks.coconut_dotmatrix_row_4, "4"], [Lang.Blocks.coconut_dotmatrix_row_5, "5"], [Lang.Blocks.coconut_dotmatrix_row_6, "6"], [Lang.Blocks.coconut_dotmatrix_row_7, "7"], [Lang.Blocks.coconut_dotmatrix_row_8, "8"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_dotmatrix_col_0, "0"], [Lang.Blocks.coconut_dotmatrix_col_1, "1"], [Lang.Blocks.coconut_dotmatrix_col_2, "2"], [Lang.Blocks.coconut_dotmatrix_col_3, "3"], [Lang.Blocks.coconut_dotmatrix_col_4, "4"], [Lang.Blocks.coconut_dotmatrix_col_5, "5"], [Lang.Blocks.coconut_dotmatrix_col_6, "6"], [Lang.Blocks.coconut_dotmatrix_col_7, "7"], [Lang.Blocks.coconut_dotmatrix_col_8, "8"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "coconut_dotmatrix_set"},
                paramsKeyMap: {BUTTON: 0, ROW: 1, COL: 2},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("ROW"), a = e.getField("COL"),
                        s = e.getField("BUTTON"),
                        i = (o = parseInt(o), a = parseInt(a), s = parseInt(s), Entry.coconut.ledMatrixOn(s, o, a));
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(i, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_on: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_dotmatrix_on"},
                paramsKeyMap: {},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.ledMatrixOnAll();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [], type: "coconut_dotmatrix_off"},
                paramsKeyMap: {},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.coconut.ledMatrixClear();
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(o, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_num: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}], type: "coconut_dotmatrix_num"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("VALUE"), a = parseInt(o),
                        s = Entry.coconut.showLedMatrix(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_small_eng: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["a", "0"], ["b", "1"], ["c", "2"], ["d", "3"], ["e", "4"], ["f", "5"], ["g", "6"], ["h", "7"], ["i", "8"], ["j", "9"], ["k", "10"], ["l", "11"], ["m", "12"], ["n", "13"], ["o", "14"], ["p", "15"], ["q", "16"], ["r", "17"], ["s", "18"], ["t", "19"], ["u", "20"], ["v", "21"], ["w", "22"], ["x", "23"], ["y", "24"], ["z", "25"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_dotmatrix_small_eng"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("VALUE"), a = parseInt(o),
                        s = Entry.coconut.showLedMatrixSmall(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_big_eng: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["A", "0"], ["B", "1"], ["C", "2"], ["D", "3"], ["E", "4"], ["F", "5"], ["G", "6"], ["H", "7"], ["I", "8"], ["J", "9"], ["K", "10"], ["L", "11"], ["M", "12"], ["N", "13"], ["O", "14"], ["P", "15"], ["Q", "16"], ["R", "17"], ["S", "18"], ["T", "19"], ["U", "20"], ["V", "21"], ["W", "22"], ["X", "23"], ["Y", "24"], ["Z", "25"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_dotmatrix_big_eng"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("VALUE"), a = parseInt(o),
                        s = Entry.coconut.showLedMatrixLarge(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_dotmatrix_kor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["가", "0"], ["나", "1"], ["다", "2"], ["라", "3"], ["마", "4"], ["바", "5"], ["사", "6"], ["아", "7"], ["자", "8"], ["차", "9"], ["카", "10"], ["타", "11"], ["파", "12"], ["하", "13"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_dotmatrix_kor"},
                paramsKeyMap: {VALUE: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("VALUE"), a = parseInt(o),
                        s = Entry.coconut.showLedMatrixKorean(a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_light_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "coconut_light_sensor"},
                paramsKeyMap: {},
                class: "coconut_sensor",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    return Entry.hw.sendQueue, Entry.hw.portData.light
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_tmp_senser: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "coconut_light_tmp"},
                paramsKeyMap: {},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    return Entry.hw.sendQueue, Entry.hw.portData.temp
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_ac_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.coconut_x_axis, "1"], [Lang.Blocks.coconut_y_axis, "2"], [Lang.Blocks.coconut_z_axis, "3"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "coconut_ac_sensor"},
                paramsKeyMap: {XYZ: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData, r = e.getField("XYZ");
                    return "1" == r ? n.accelerationX : "2" == r ? n.accelerationY : n.accelerationZ
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_outled_sensor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D4", 4], ["D10", 10], ["D11", 11], ["D12", 12], ["A2", 16], ["A3", 17]],
                    value: "4",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "number", params: ["1"]}], type: "coconut_outled_sensor"},
                paramsKeyMap: {PIN: 0, TIME: 1},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberField("PIN"),
                        a = e.getNumberValue("TIME"), s = Entry.coconut.extLedOn(o, a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_outspk_sensor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D10", "10"], ["D11", "11"]],
                    value: "10",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["0.5"]}],
                    type: "coconut_outspk_sensor"
                },
                paramsKeyMap: {PIN: 0, HZ: 1, TIME: 2},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberField("PIN"),
                        a = e.getNumberValue("HZ"), s = e.getNumberValue("TIME"),
                        i = Entry.coconut.playSpeaker(o, a, s);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(i, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_outspk_sensor_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D10", "10"], ["D11", "11"]],
                    value: "10",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "coconut_outspk_sensor_off"},
                paramsKeyMap: {PIN: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberField("PIN"),
                        a = Entry.coconut.stopSpeaker(o);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(a, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_outinfrared_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Dropdown", options: [["A2", "16"], ["A3", "17"]], value: "16", fontSize: 11}],
                events: {},
                def: {params: [null], type: "coconut_outinfrared_sensor"},
                paramsKeyMap: {PIN: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData;
                    return "16" == e.getNumberField("PIN") ? n.extA2 : n.extA3
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_outcds_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Dropdown", options: [["A2", "16"], ["A3", "17"]], value: "16", fontSize: 11}],
                events: {},
                def: {params: [null], type: "coconut_outcds_sensor"},
                paramsKeyMap: {PIN: 0},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = Entry.hw.portData;
                    return "16" == e.getNumberField("PIN") ? n.extA2 : n.extA3
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            },
            coconut_servomotor_angle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["D4", "4"], ["D10", "10"], ["D11", "11"], ["D12", "12"], ["A2", "16"], ["A3", "17"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Block", accept: "String"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["0"]}], type: "coconut_servomotor_angle"},
                paramsKeyMap: {PIN: 0, ANGLE: 1},
                class: "coconut_led",
                isNotFor: ["coconut"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getNumberField("PIN"),
                        a = e.getNumberValue("ANGLE"), s = Entry.coconut.runExtServo(o, a);
                    return e.isStart ? 1 == e.timeFlag ? ("end" == r.msgStatus ? (console.log("rev = end"), e.timeFlag = 0) : "continue" == r.msgStatus ? console.log("rev = continue" + r.msg) : console.log("rev = waiting"), Entry.coconut.clearQueue(n), e) : (delete e.isStart, delete e.timeFlag, console.log("rev = ok"), e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, r.msgStatus = "start", Entry.coconut.insertQueue(s, n), e)
                },
                syntax: {js: [], py: ["coconut.turn_for_secs(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Cobl = {
        name: "cobl",
        url: "http://www.cobl.co.kr/",
        imageName: "cobl.png",
        title: {ko: "코블", en: "Cobl"},
        setZero: function () {
            for (var t = 0; t < 14; t++) Entry.hw.sendQueue[t] = 0;
            Entry.hw.update()
        }
    }, Entry.Cobl.getBlocks = function () {
        return {
            cobl_read_ultrason: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "1. 초음파거리(0~400)",
                def: {type: "cobl_read_ultrason"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("ultrason")
                }
            },
            cobl_read_potenmeter: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "2.가변저항(0~1023)",
                def: {type: "cobl_read_potenmeter"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("potenmeter")
                }
            },
            cobl_read_irread1: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "3.적외선센서1(0~1023)",
                def: {type: "cobl_read_irread1"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("irread1")
                }
            },
            cobl_read_irread2: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "4.적외선센서2(0~1023)",
                def: {type: "cobl_read_irread2"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("irread2")
                }
            },
            cobl_read_joyx: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "5.조이스틱X축(1, 0, -1)",
                def: {type: "cobl_read_joyx"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("joyx")
                }
            },
            cobl_read_joyy: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "6.조이스틱Y축(1, 0, -1)",
                def: {type: "cobl_read_joyy"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("joyy")
                }
            },
            cobl_read_tilt: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "7.기울기센서(0~4)",
                def: {type: "cobl_read_tilt"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("tilt")
                }
            },
            cobl_read_color: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "8.색상센서",
                def: {type: "cobl_read_color"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = Entry.hw.getAnalogPortValue("color");
                    return 1 == n ? "빨강" : 2 == n ? "녹색" : 3 == n ? "파랑" : "알수없음"
                }
            },
            cobl_read_humid: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "9.습도센서",
                def: {type: "cobl_read_humid"},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue("humid")
                }
            },
            cobl_read_temps: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "10.온도센서@포트%1",
                params: [{type: "Dropdown", options: [["1", "1"], ["2", "2"]], fontSize: 11}],
                def: {params: ["1"], type: "cobl_read_temps"},
                paramsKeyMap: {VALUE: 0},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getField("VALUE", e);
                    return 1 == n ? Entry.hw.getAnalogPortValue("temps1") : 2 == n ? Entry.hw.getAnalogPortValue("temps2") : void 0
                }
            },
            cobl_read_light: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: "11.빛센서@포트%1",
                params: [{type: "Dropdown", options: [["1", "1"], ["2", "2"]], fontSize: 11}],
                def: {params: ["1"], type: "cobl_read_light"},
                paramsKeyMap: {VALUE: 0},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getField("VALUE", e);
                    return 1 == n ? Entry.hw.getAnalogPortValue("light1") : 2 == n ? Entry.hw.getAnalogPortValue("light2") : void 0
                }
            },
            cobl_read_btn: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                template: "12.버튼스위치@포트%1",
                params: [{type: "Dropdown", options: [["1", "1"], ["2", "2"]], fontSize: 11}],
                def: {params: ["1"], type: "cobl_read_btn"},
                paramsKeyMap: {VALUE: 0},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getField("VALUE", e);
                    return 1 == n ? Entry.hw.getDigitalPortValue("btn1") : 2 == n ? Entry.hw.getDigitalPortValue("btn2") : void 0
                }
            },
            cobl_led_control: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "13-1.무지개LED%1%2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["OFF", "OFF"], ["빨강", "Red"], ["주황", "Orange"], ["노랑", "Yellow"], ["초록", "Green"], ["파랑", "Blue"], ["남색", "Dark Blue"], ["보라", "Purple"], ["흰색", "White"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "OFF"], type: "cobl_led_control"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getStringField("PORT"), r = e.getStringField("OPERATOR");
                    return Entry.hw.setDigitalPortValue("RainBowLED_" + n, r), Entry.hw.update(), delete Entry.hw.sendQueue["RainBowLED_" + n], e.callReturn()
                }
            },
            cobl_rgb_boardled: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "13-2.무지개LED%1R%2G%3B%4 %5",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "1", "1", "1"], type: "cobl_rgb_boardled"},
                paramsKeyMap: {LED: 0, RED: 1, GREEN: 2, BLUE: 3},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getNumberField("LED"), r = e.getStringField("RED"), o = e.getStringField("GREEN"),
                        a = e.getStringField("BLUE");
                    return Entry.hw.setDigitalPortValue("BLED_IDX", n), Entry.hw.setDigitalPortValue("BLED_R", r), Entry.hw.setDigitalPortValue("BLED_G", o), Entry.hw.setDigitalPortValue("BLED_B", a), Entry.hw.update(), delete Entry.hw.sendQueue.BLED_IDX, delete Entry.hw.sendQueue.BLED_R, delete Entry.hw.sendQueue.BLED_G, delete Entry.hw.sendQueue.BLED_B, e.callReturn()
                }
            },
            cobl_servo_angle_control: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "14.각도모터 각도%1(15~165) %2",
                params: [{type: "TextInput", value: 0}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                def: {type: "cobl_servo_angle_control"},
                paramsKeyMap: {VALUE: 0},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getNumberField("VALUE");
                    return n = Math.round(n), n = Math.max(n, 15), n = Math.min(n, 165), Entry.hw.setDigitalPortValue("Servo1", n), Entry.hw.update(), delete Entry.hw.sendQueue.Servo1, e.callReturn()
                }
            },
            cobl_melody: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "15.멜로디%1 시간%2(초) %3",
                params: [{
                    type: "Dropdown",
                    options: [["(낮은)솔", "L_So"], ["(낮은)솔#", "L_So#"], ["(낮은)라", "L_La"], ["(낮은)라#", "L_La#"], ["(낮은)시", "L_Ti"], ["도", "Do"], ["도#", "Do#"], ["레", "Re"], ["레#", "Re#"], ["미", "Mi"], ["파", "Fa"], ["파#", "Fa#"], ["솔", "So"], ["솔#", "So#"], ["라", "La"], ["라#", "La#"], ["시", "Ti"], ["(높은)도", "H_Do"], ["(높은)도#", "H_Do#"], ["(높은)레", "H_Re"], ["(높은)레#", "H_Re#"], ["(높은)미", "H_Mi"], ["(높은)파", "H_Fa"]],
                    fontSize: 11
                }, {type: "TextInput", value: 1}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["Do", "1"], type: "cobl_melody"},
                paramsKeyMap: {MELODY: 0, DURATION: 1},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getStringField("MELODY"), r = e.getStringField("DURATION");
                    return Entry.hw.setDigitalPortValue("Melody", n), Entry.hw.setDigitalPortValue("Melody_DUR", r), Entry.hw.update(), delete Entry.hw.sendQueue.Melody, delete Entry.hw.sendQueue.Melody_DUR, e.callReturn()
                }
            },
            cobl_dcmotor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "16.회전모터%1%2속도%3 %4",
                params: [{type: "Dropdown", options: [["1", "1"], ["2", "2"]], fontSize: 11}, {
                    type: "Dropdown",
                    options: [["1.시계방향", "1"], ["2.반시계방향", "2"], ["3.정지", "3"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "1", "1"], type: "cobl_dcmotor"},
                paramsKeyMap: {MOTOR: 0, DIRECTION: 1, SPEED: 2},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getStringField("MOTOR"), r = e.getStringField("DIRECTION"), o = e.getStringField("SPEED");
                    return 1 == n && (Entry.hw.setDigitalPortValue("DC1_DIR", r), Entry.hw.setDigitalPortValue("DC1_SPEED", o), Entry.hw.update(), delete Entry.hw.sendQueue.DC1_DIR, delete Entry.hw.sendQueue.DC1_SPEED), 2 == n && (Entry.hw.setDigitalPortValue("DC2_DIR", r), Entry.hw.setDigitalPortValue("DC2_SPEED", o), Entry.hw.update(), delete Entry.hw.sendQueue.DC2_DIR, delete Entry.hw.sendQueue.DC2_SPEED), e.callReturn()
                }
            },
            cobl_extention_port: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "17.USB포트%1단계%2 %3",
                params: [{type: "Dropdown", options: [["1", "1"], ["2", "2"]], fontSize: 11}, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "0"], type: "cobl_extention_port"},
                paramsKeyMap: {PORT: 0, LEVEL: 1},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getStringField("PORT"), r = e.getStringField("LEVEL");
                    return 1 == n && (Entry.hw.setDigitalPortValue("EXUSB1", r), Entry.hw.update(), delete Entry.hw.sendQueue.EXUSB1), 2 == n && (Entry.hw.setDigitalPortValue("EXUSB2", r), Entry.hw.update(), delete Entry.hw.sendQueue.EXUSB2), e.callReturn()
                }
            },
            cobl_external_RainBowled: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "18-1.외부LED%1 (1~64)%2 %3",
                params: [{type: "TextInput", value: 0, fontSize: 11}, {
                    type: "Dropdown",
                    options: [["OFF", "OFF"], ["빨강", "Red"], ["주황", "Orange"], ["노랑", "Yellow"], ["초록", "Green"], ["파랑", "Blue"], ["남색", "Dark Blue"], ["보라", "Purple"], ["흰색", "White"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "OFF"], type: "cobl_external_RainBowled"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getStringField("PORT"), r = e.getStringField("OPERATOR");
                    Entry.hw.setDigitalPortValue("ELED_IDX", n), "OFF" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 0), Entry.hw.setDigitalPortValue("ELED_G", 0), Entry.hw.setDigitalPortValue("ELED_B", 0)) : "Red" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 10), Entry.hw.setDigitalPortValue("ELED_G", 0), Entry.hw.setDigitalPortValue("ELED_B", 0)) : "Orange" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 10), Entry.hw.setDigitalPortValue("ELED_G", 3), Entry.hw.setDigitalPortValue("ELED_B", 0)) : "Yellow" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 10), Entry.hw.setDigitalPortValue("ELED_G", 10), Entry.hw.setDigitalPortValue("ELED_B", 0)) : "Green" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 0), Entry.hw.setDigitalPortValue("ELED_G", 10), Entry.hw.setDigitalPortValue("ELED_B", 0)) : "Blue" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 0), Entry.hw.setDigitalPortValue("ELED_G", 0), Entry.hw.setDigitalPortValue("ELED_B", 10)) : "Dark Blue" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 0), Entry.hw.setDigitalPortValue("ELED_G", 7), Entry.hw.setDigitalPortValue("ELED_B", 10)) : "Purple" == r ? (Entry.hw.setDigitalPortValue("ELED_R", 10), Entry.hw.setDigitalPortValue("ELED_G", 0), Entry.hw.setDigitalPortValue("ELED_B", 10)) : "White" == r && (Entry.hw.setDigitalPortValue("ELED_R", 10), Entry.hw.setDigitalPortValue("ELED_G", 10), Entry.hw.setDigitalPortValue("ELED_B", 10)), Entry.hw.update(), delete Entry.hw.sendQueue.ELED_IDX, delete Entry.hw.sendQueue.ELED_R, delete Entry.hw.sendQueue.ELED_G, delete Entry.hw.sendQueue.ELED_B
                }
            },
            cobl_external_led: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "18-2.외부LED%1(1~64)R%2G%3B%4 %5",
                params: [{type: "TextInput", value: 0, fontSize: 11}, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"]],
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: ["1", "1", "1", "1"], type: "cobl_external_led"},
                paramsKeyMap: {LED: 0, RED: 1, GREEN: 2, BLUE: 3},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getNumberField("LED"), r = e.getStringField("RED"), o = e.getStringField("GREEN"),
                        a = e.getStringField("BLUE");
                    return Entry.hw.setDigitalPortValue("ELED_IDX", n), Entry.hw.setDigitalPortValue("ELED_R", r), Entry.hw.setDigitalPortValue("ELED_G", o), Entry.hw.setDigitalPortValue("ELED_B", a), Entry.hw.update(), delete Entry.hw.sendQueue.ELED_IDX, delete Entry.hw.sendQueue.ELED_R, delete Entry.hw.sendQueue.ELED_G, delete Entry.hw.sendQueue.ELED_B, e.callReturn()
                }
            },
            cobl_7_segment: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: "19.숫자전광판%1(0~9999) %2",
                params: [{type: "TextInput", value: 0}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                def: {type: "cobl_7_segment"},
                paramsKeyMap: {VALUE: 0},
                class: "cobl",
                isNotFor: ["cobl"],
                func: function (t, e) {
                    var n = e.getNumberField("VALUE").toString().substring(0, 4);
                    return Entry.hw.setDigitalPortValue("7SEG", n), Entry.hw.update(), delete Entry.hw.sendQueue["7SEG"], e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Chocopi = {
        name: "chocopi",
        url: "http://chocopi.org/entry/",
        imageName: "chocopi.png",
        title: {ko: "초코파이보드", en: "ChocoPi"},
        p: {},
        ev: {},
        blocks: [],
        setZero: function () {
        },
        getport: function (t, e) {
            if (!this.blocks) return -1;
            if (this.blocks[e].id == t) return e;
            for (var n in this.blocks) if (this.blocks[n].id == t) return n;
            return -1
        },
        connected: !1,
        portlist: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
        dataHandler: function (t) {
            if (this.connected || (this.connected = !0, Entry.hw.sendQueue.init = !0, Entry.hw.update(), delete Entry.hw.sendQueue.init, Entry.hw.sendQueue.data = {}), t.d) for (var e in t.d) this.p[e] = t.d[e];
            if (t.ev) for (var e in t.ev) this.ev[e] = t.ev[e], Entry.engine.fireEvent(this.blocks[e].name + "14");
            t.bl && (this.blocks = t.bl)
        }
    }, Entry.Chocopi.getBlocks = function () {
        return {
            chocopi_sensor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[Lang.Hw.temp, "temp"], [Lang.Hw.humidity, "humi"], [Lang.Hw.light, "light"], [Lang.Hw.analog + "1", "0"], [Lang.Hw.analog + "2", "1"], [Lang.Hw.analog + "3", "2"]],
                    value: "temp",
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_sensor"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_sensor",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(8, e.getField("port")), r = e.getField("sensor");
                    return -1 == n ? 0 : Entry.Chocopi.p[n][r]
                },
                syntax: {js: [], py: ["Chocopi.sensor(%1, %2)"]}
            },
            chocopi_touch_event: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_event",
                statements: [],
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_hardware.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                    value: 0,
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_touch_event_touch, 1], [Lang.Blocks.chocopi_touch_event_untouch, 0]],
                    value: 1,
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_touch_event"},
                paramsKeyMap: {port: 1, id: 2, status: 3},
                class: "chocopi_touch",
                isNotFor: ["chocopi"],
                event: "touch14",
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(9, e.getField("port"));
                    if (-1 == n) return this.die();
                    var r = e.getField("id"), o = e.getField("status");
                    return 1 != (Entry.Chocopi.ev[n].id >> r & 1) || (Entry.Chocopi.p[n].ts >> r & 1) != o ? this.die() : e.callReturn()
                },
                syntax: {js: [], py: ["def on_chocopi_touch(%2, %3, %4 ):"]}
            },
            chocopi_touch_status: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                    value: 0,
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_touch_status"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_touch",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(9, e.getField("port")), r = e.getField("sensor");
                    return -1 != n && (Entry.Chocopi.p[n].ts & 1 << r) > 0
                },
                syntax: {js: [], py: ["Chocopi.touchStatus(%1, %2)"]}
            },
            chocopi_touch_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                    value: 0,
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_touch_value"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_touch",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(9, e.getField("port"));
                    if (-1 == n) return !1;
                    var r = e.getField("sensor");
                    return Entry.Chocopi.p[n].tv[r]
                },
                syntax: {js: [], py: ["Chocopi.touchValue(%1, %2)"]}
            },
            chocopi_control_event: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_event",
                statements: [],
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_hardware.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[Lang.Hw.button + "1", 0], [Lang.Hw.button + "2", 1], [Lang.Hw.button + "3", 2], [Lang.Hw.button + "4", 3]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_control_event_pressed, 1], [Lang.Blocks.chocopi_control_event_released, 0]],
                    value: 1,
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_control_event"},
                paramsKeyMap: {port: 1, id: 2, status: 3},
                class: "chocopi_control",
                isNotFor: ["chocopi"],
                event: "control14",
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(10, e.getField("port"));
                    if (-1 == n) return this.die();
                    var r = e.getField("id"), o = e.getField("status"), a = Entry.Chocopi.ev[n];
                    return 1 != (a.id >> 4 - r & 1) || a.btn[r] != o ? this.die() : e.callReturn()
                },
                syntax: {js: [], py: ["def on_chocopi_control_button(%2, %3, %4 ):"]}
            },
            chocopi_control_joystick: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_joystick_X, 0], [Lang.Blocks.chocopi_joystick_Y, 1], [Lang.Blocks.chocopi_pot, 2]],
                    value: 0,
                    fontSize: 11
                }],
                def: {params: [null], type: "chocopi_control_joystick"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_control",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(10, e.getField("port"));
                    if (-1 == n) return !1;
                    var r = e.getField("sensor");
                    return Entry.Chocopi.p[n].xyp[r]
                },
                syntax: {js: [], py: ["Chocopi.joystick(%1, %2)"]}
            },
            chocopi_control_button: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[Lang.Hw.button + "1", 0], [Lang.Hw.button + "2", 1], [Lang.Hw.button + "3", 2], [Lang.Hw.button + "4", 3]],
                    value: "0",
                    fontSize: 11
                }],
                def: {params: [null], type: "chocopi_control_button"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_control",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(10, e.getField("port"));
                    if (-1 == n) return !1;
                    var r = e.getField("sensor");
                    return Entry.Chocopi.ev[n] ? Entry.Chocopi.ev[n].btn[r] : 0
                },
                syntax: {js: [], py: ["Chocopi.button(%1, %2)"]}
            },
            chocopi_motion_photogate_time: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {type: "Dropdown", options: [[1, 0], [2, 1]], value: "0", fontSize: 11}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_motion_photogate_time_unblocked, 0], [Lang.Blocks.chocopi_motion_photogate_time_blocked, 1]],
                    value: 1,
                    fontSize: 11
                }],
                def: {params: [null], type: "chocopi_motion_photogate_time"},
                paramsKeyMap: {port: 0, sensor: 1, action: 2},
                class: "chocopi_motion",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(11, e.getField("port"));
                    if (-1 == n) return 0;
                    var r = e.getField("sensor"), o = e.getField("action");
                    return Entry.Chocopi.ev[n] ? Entry.Chocopi.ev[n].time[r][o] : 0
                },
                syntax: {js: [], py: ["Chocopi.photogateTime(%1, %2, %3)"]}
            },
            chocopi_motion_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[Lang.Hw.IR + " 1", 0], [Lang.Hw.IR + " 2", 1], [Lang.Hw.IR + " 3", 2], [Lang.Hw.acceleration + "X", 3], [Lang.Hw.acceleration + "Y", 4], [Lang.Hw.acceleration + "Z", 5], [Lang.Hw.angular_acceleration + "U", 6], [Lang.Hw.angular_acceleration + "V", 7], [Lang.Hw.angular_acceleration + "W", 8]],
                    value: "0",
                    fontSize: 11
                }],
                def: {params: [null], type: "chocopi_motion_value"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_motion",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(11, e.getField("port"));
                    if (-1 == n) return 0;
                    var r = e.getField("sensor");
                    return Entry.Chocopi.p[n].s[r]
                },
                syntax: {js: [], py: ["Chocopi.motionValue(%1, %2)"]}
            },
            chocopi_motion_photogate_status: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {type: "Dropdown", options: [["1", 0], ["2", 1]], value: 0, fontSize: 11}],
                def: {params: [null], type: "chocopi_motion_photogate_status"},
                paramsKeyMap: {port: 0, sensor: 1},
                class: "chocopi_motion",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(11, e.getField("port"));
                    if (-1 == n) return 0;
                    var r = e.getField("sensor");
                    return Entry.Chocopi.ev[n] ? Entry.Chocopi.ev[n].pg[r] : 0
                },
                syntax: {js: [], py: ["Chocopi.motionPhotogateStatus(%1, %2)"]}
            },
            chocopi_motion_photogate_event: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_event",
                statements: [],
                params: [{
                    type: "Indicator",
                    img: "block_icon/start_icon_hardware.png",
                    size: 17,
                    position: {x: 0, y: -2}
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [[1, 0], [2, 1], [3, 2], [4, 3], [5, 4], [6, 5], [7, 6], [8, 7], [9, 8], [10, 9], [11, 10], [12, 11]],
                    value: 0,
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_motion_photogate_event_unblocked, 0], [Lang.Blocks.chocopi_motion_photogate_event_blocked, 1]],
                    value: 1,
                    fontSize: 11
                }],
                def: {params: [], type: "chocopi_motion_photogate_event"},
                paramsKeyMap: {port: 1, id: 2, status: 3},
                class: "chocopi_motion",
                isNotFor: ["chocopi"],
                event: "motion14",
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(11, e.getField("port"));
                    if (-1 == n) return this.die();
                    var r = e.getField("id"), o = e.getField("status");
                    return Entry.Chocopi.ev[n].pg[r] != o ? this.die() : e.callReturn()
                },
                syntax: {js: [], py: ["def on_chocopi_photogate(%2, %3, %4 ):"]}
            },
            chocopi_led: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {
                    params: [null, {type: "number", params: [1]}, {type: "number", params: [2]}, {
                        type: "number",
                        params: [1]
                    }, {type: "number", params: [1]}], type: "chocopi_led"
                },
                paramsKeyMap: {port: 0, l: 1, r: 2, g: 3, b: 4},
                class: "chocopi_output",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(12, e.getField("port"));
                    if (-1 == n) return e.callReturn();
                    var r = e.getNumberValue("l"), o = e.getNumberValue("r"), a = e.getNumberValue("g"),
                        s = e.getNumberValue("b");
                    return console.log([r, o, a, s]), Entry.hw.sendQueue.data[n] = [r, o, a, s], Entry.hw.update(), delete Entry.hw.sendQueue.data[n], e.callReturn()
                },
                syntax: {js: [], py: ["Chocopi.LED(%1, %2, %3, %4, %5)"]}
            },
            chocopi_dc_motor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {type: "Dropdown", options: [["1", 0], ["2", 1]], value: 0, fontSize: 11}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.General.clock, 0], [Lang.General.counter_clock, 1]],
                    value: 0,
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: [null, null, {type: "number", params: [31]}], type: "chocopi_dc_motor"},
                paramsKeyMap: {port: 0, id: 1, power: 2, direction: 3},
                class: "chocopi_output",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(14, e.getField("port"));
                    if (-1 == n) return e.callReturn();
                    var r = e.getField("id"), o = e.getNumberValue("power"), a = e.getField("direction");
                    return Entry.hw.sendQueue.data[n] = [r, o, a], Entry.hw.update(), delete Entry.hw.sendQueue.data[n], e.callReturn()
                },
                syntax: {js: [], py: ["Chocopi.DCmotor(%1, %2, %3, %4)"]}
            },
            chocopi_servo_motor: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.chocopi_port + "1", 0], [Lang.Blocks.chocopi_port + "2", 1], [Lang.Blocks.chocopi_port + "3", 2], [Lang.Blocks.chocopi_port + "4", 3], [Lang.Blocks.chocopi_port + "5", 4], [Lang.Blocks.chocopi_port + "6", 5], [Lang.Blocks.chocopi_port + "7", 6], [Lang.Blocks.chocopi_port + "8", 7], ["BLE1", 8], ["BLE2", 9], ["BLE3", 10], ["BLE4", 11], ["BLE5", 12], ["BLE6", 13], ["BLE7", 14], ["BLE8", 15]],
                    value: 0
                }, {
                    type: "Dropdown",
                    options: [["1", 0], ["2", 1], ["3", 2], ["4", 3]],
                    value: 0,
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                def: {params: [null, null, {type: "number", params: [90]}], type: "chocopi_servo_motor"},
                paramsKeyMap: {port: 0, id: 1, angle: 2},
                class: "chocopi_output",
                isNotFor: ["chocopi"],
                func: function (t, e) {
                    var n = Entry.Chocopi.getport(15, e.getField("port"));
                    if (-1 == n) return e.callReturn();
                    var r = e.getField("id"), o = e.getNumberValue("angle");
                    return Entry.hw.sendQueue.data[n] = [r, o], Entry.hw.update(), delete Entry.hw.sendQueue.data[n], e.callReturn()
                },
                syntax: {js: [], py: ["Chocopi.servo(%1, %2, %3)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_petrone_v2_flight = {
        name: "byrobot_petrone_v2_flight",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_petrone_v2_flight.png",
        title: {en: "BYROBOT Petrone V2 flight", ko: "바이로봇 페트론V2 드론"},
        setZero: function () {
            this.transferBufferClear();
            for (var t = 0; t < 1; t++) this.transferCommand(48, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(48, 255, 0), this.transferLightManual(49, 255, 0), this.transferLightManual(48, 128, 200), this.transferLightManual(48, 16, 200), this.transferMotorSingle(0, 1, 0), this.transferMotorSingle(1, 2, 0)
        },
        monitorTemplate: {
            listPorts: {
                state_modeVehicle: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_modeFlight: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_flight,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_coordinate: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_coordinate,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_battery: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_battery,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_angleRoll: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_anglePitch: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_angleYaw: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_accX: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_x, type: "input", pos: {x: 0, y: 0}},
                imu_accY: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_y, type: "input", pos: {x: 0, y: 0}},
                imu_accZ: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_z, type: "input", pos: {x: 0, y: 0}},
                imu_gyroRoll: {name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, type: "input", pos: {x: 0, y: 0}},
                imu_gyroPitch: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_gyroYaw: {name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, type: "input", pos: {x: 0, y: 0}},
                pressure_temperature: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                pressure_pressure: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imageflow_positionX: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imageflow_positionY: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                range_bottom: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_range_bottom,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_irdata: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            }, ports: {}, mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferBufferClear: function () {
            Entry.hw.setDigitalPortValue("buffer_clear", 0), Entry.hw.update(), delete Entry.hw.sendQueue.buffer_clear
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferLightMode: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 65535), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_mode_mode", e), Entry.hw.setDigitalPortValue("light_mode_interval", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_mode_mode, delete Entry.hw.sendQueue.light_mode_interval
        },
        transferLightColorRgb: function (t, e, n, r, o) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), r = Math.max(r, 0), r = Math.min(r, 255), o = Math.max(o, 0), o = Math.min(o, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_mode_mode", e), Entry.hw.setDigitalPortValue("light_color_r", n), Entry.hw.setDigitalPortValue("light_color_g", r), Entry.hw.setDigitalPortValue("light_color_b", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_mode_mode, delete Entry.hw.sendQueue.light_color_r, delete Entry.hw.sendQueue.light_color_g, delete Entry.hw.sendQueue.light_color_b
        },
        transferDisplayClear: function (t, e, n, r, o, a, s) {
            n ? (Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clearall_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), a = Math.max(a, 0), a = Math.min(a, 128), s = Math.max(s, 0), s = Math.min(s, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clear_x", r), Entry.hw.setDigitalPortValue("display_clear_y", o), Entry.hw.setDigitalPortValue("display_clear_width", a), Entry.hw.setDigitalPortValue("display_clear_height", s), Entry.hw.setDigitalPortValue("display_clear_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel)
        },
        transferDisplayInvert: function (t, e, n, r, o) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_invert_x", e), Entry.hw.setDigitalPortValue("display_invert_y", n), Entry.hw.setDigitalPortValue("display_invert_width", r), Entry.hw.setDigitalPortValue("display_invert_height", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_invert_x, delete Entry.hw.sendQueue.display_invert_y, delete Entry.hw.sendQueue.display_invert_width, delete Entry.hw.sendQueue.display_invert_height
        },
        transferDisplayDrawPoint: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_point_x", e), Entry.hw.setDigitalPortValue("display_draw_point_y", n), Entry.hw.setDigitalPortValue("display_draw_point_pixel", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_point_x, delete Entry.hw.sendQueue.display_draw_point_y, delete Entry.hw.sendQueue.display_draw_point_pixel
        },
        transferDisplayDrawLine: function (t, e, n, r, o, a, s) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_line_x1", e), Entry.hw.setDigitalPortValue("display_draw_line_y1", n), Entry.hw.setDigitalPortValue("display_draw_line_x2", r), Entry.hw.setDigitalPortValue("display_draw_line_y2", o), Entry.hw.setDigitalPortValue("display_draw_line_pixel", a), Entry.hw.setDigitalPortValue("display_draw_line_line", s), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_line_x1, delete Entry.hw.sendQueue.display_draw_line_y1, delete Entry.hw.sendQueue.display_draw_line_x2, delete Entry.hw.sendQueue.display_draw_line_y2, delete Entry.hw.sendQueue.display_draw_line_pixel, delete Entry.hw.sendQueue.display_draw_line_line
        },
        transferDisplayDrawRect: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_rect_x", e), Entry.hw.setDigitalPortValue("display_draw_rect_y", n), Entry.hw.setDigitalPortValue("display_draw_rect_width", r), Entry.hw.setDigitalPortValue("display_draw_rect_height", o), Entry.hw.setDigitalPortValue("display_draw_rect_pixel", a), Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", s), Entry.hw.setDigitalPortValue("display_draw_rect_line", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_rect_x, delete Entry.hw.sendQueue.display_draw_rect_y, delete Entry.hw.sendQueue.display_draw_rect_width, delete Entry.hw.sendQueue.display_draw_rect_height, delete Entry.hw.sendQueue.display_draw_rect_pixel, delete Entry.hw.sendQueue.display_draw_rect_flagfill, delete Entry.hw.sendQueue.display_draw_rect_line
        },
        transferDisplayDrawCircle: function (t, e, n, r, o, a) {
            e = Math.max(e, -50), e = Math.min(e, 178), n = Math.max(n, -50), n = Math.min(n, 114), r = Math.max(r, 1), r = Math.min(r, 200), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_circle_x", e), Entry.hw.setDigitalPortValue("display_draw_circle_y", n), Entry.hw.setDigitalPortValue("display_draw_circle_radius", r), Entry.hw.setDigitalPortValue("display_draw_circle_pixel", o), Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_circle_x, delete Entry.hw.sendQueue.display_draw_circle_y, delete Entry.hw.sendQueue.display_draw_circle_radius, delete Entry.hw.sendQueue.display_draw_circle_pixel, delete Entry.hw.sendQueue.display_draw_circle_flagfill
        },
        transferDisplayDrawString: function (t, e, n, r, o, a) {
            e = Math.max(e, 0), e = Math.min(e, 120), n = Math.max(n, 0), n = Math.min(n, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_x", e), Entry.hw.setDigitalPortValue("display_draw_string_y", n), Entry.hw.setDigitalPortValue("display_draw_string_font", r), Entry.hw.setDigitalPortValue("display_draw_string_pixel", o), Entry.hw.setDigitalPortValue("display_draw_string_string", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_x, delete Entry.hw.sendQueue.display_draw_string_y, delete Entry.hw.sendQueue.display_draw_string_font, delete Entry.hw.sendQueue.display_draw_string_pixel, delete Entry.hw.sendQueue.display_draw_string_string
        },
        transferDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 124), n = Math.max(n, 4), n = Math.min(n, 128), r = Math.max(r, 0), r = Math.min(r, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", e), Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", n), Entry.hw.setDigitalPortValue("display_draw_string_align_y", r), Entry.hw.setDigitalPortValue("display_draw_string_align_align", o), Entry.hw.setDigitalPortValue("display_draw_string_align_font", a), Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", s), Entry.hw.setDigitalPortValue("display_draw_string_align_string", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_align_x_start, delete Entry.hw.sendQueue.display_draw_string_align_x_end, delete Entry.hw.sendQueue.display_draw_string_align_y, delete Entry.hw.sendQueue.display_draw_string_align_align, delete Entry.hw.sendQueue.display_draw_string_align_font, delete Entry.hw.sendQueue.display_draw_string_align_pixel, delete Entry.hw.sendQueue.display_draw_string_align_string
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferIrMessage: function (t, e) {
            e = Math.max(e, -2147483647), e = Math.min(e, 2147483647), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("irmessage_direction", t), Entry.hw.setDigitalPortValue("irmessage_irdata", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.irmessage_direction, delete Entry.hw.sendQueue.irmessage_irdata
        },
        transferMotorSingle: function (t, e, n) {
            n = Math.max(n, 0), n = Math.min(n, 4096), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("motorsingle_target", t), Entry.hw.setDigitalPortValue("motorsingle_rotation", e), Entry.hw.setDigitalPortValue("motorsingle_value", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.motorsingle_target, delete Entry.hw.sendQueue.motorsingle_rotation, delete Entry.hw.sendQueue.motorsingle_value
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        transferControlDouble: function (t, e) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, 0), e = Math.min(e, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("control_wheel", t), Entry.hw.setDigitalPortValue("control_accel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_wheel, delete Entry.hw.sendQueue.control_accel
        },
        transferControlQuad: function (t, e, n, r) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, -100), e = Math.min(e, 100), n = Math.max(n, -100), n = Math.min(n, 100), r = Math.max(r, -100), r = Math.min(r, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("control_roll", t), Entry.hw.setDigitalPortValue("control_pitch", e), Entry.hw.setDigitalPortValue("control_yaw", n), Entry.hw.setDigitalPortValue("control_throttle", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_roll, delete Entry.hw.sendQueue.control_pitch, delete Entry.hw.sendQueue.control_yaw, delete Entry.hw.sendQueue.control_throttle
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setLightColorRgb: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightColorRgb(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayClear: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayClear(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayInvert: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayInvert(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawPoint: function (t, e, n, r, o) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawPoint(e, n, r, o), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawLine: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawLine(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawRect: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawRect(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawCircle: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawCircle(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawString: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawString(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawStringAlign(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendIrMessage: function (t, e, n) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferIrMessage(e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendStop: function (t) {
            return this.sendCommand(t, 48, 36, 0)
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setMotorSingle: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferMotorSingle(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setModeVehicle: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(48, 16, e), this.transferControlQuad(0, 0, 0, 0), this.transferControlDouble(0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setEventFlight: function (t, e, n) {
            switch (this.checkFinish(t, n)) {
                case"Start":
                    return this.transferControlQuad(0, 0, 0, 0), this.transferCommand(48, 34, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendControlQuadSingle: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    return n = Math.max(n, -100), n = Math.min(n, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(e, n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e], t;
                case"Running":
                    return t;
                case"Finish":
                    return o && (Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(e, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e]), t.callReturn();
                default:
                    return t.callReturn()
            }
        },
        sendControlQuad: function (t, e, n, r, o, a, s) {
            var i = 40;
            switch (s && (i = a), this.checkFinish(t, i)) {
                case"Start":
                    return this.transferControlQuad(e, n, r, o), t;
                case"Running":
                    return t;
                case"Finish":
                    return s && this.transferControlQuad(0, 0, 0, 0), t.callReturn();
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_petrone_v2_flight.getBlocks = function () {
        return {
            byrobot_petrone_v2_flight_drone_value_attitude: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, "imu_angleRoll"], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, "imu_anglePitch"], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, "imu_angleYaw"]],
                    value: "imu_angleRoll",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_value_attitude"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_drone_value_imu: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_accel_x, "imu_accX"], [Lang.Blocks.byrobot_petrone_v2_drone_accel_y, "imu_accY"], [Lang.Blocks.byrobot_petrone_v2_drone_accel_z, "imu_accZ"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, "imu_gyroRoll"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, "imu_gyroPitch"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, "imu_gyroYaw"]],
                    value: "imu_accX",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_value_imu"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_drone_value_sensor: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, "pressure_temperature"], [Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, "pressure_pressure"], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, "imageflow_positionX"], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, "imageflow_positionY"], [Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, "range_bottom"]],
                    value: "pressure_temperature",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_value_sensor"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_drone_value_etc: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, "state_modeVehicle"], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_flight, "state_modeFlight"], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_coordinate, "state_coordinate"], [Lang.Blocks.byrobot_petrone_v2_drone_state_battery, "state_battery"], [Lang.Blocks.byrobot_petrone_v2_drone_irmessage, "irmessage_irdata"]],
                    value: "irmessage_irdata",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_value_etc"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, "button_button"], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, "joystick_right_event"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_flight_monitor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_flight_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, "16"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, "32"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, "64"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, "128"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_petrone_v2_flight_boolean_input",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                },
                syntax: {js: [], py: []}
            },
            byrobot_petrone_v2_flight_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_flight_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_petrone_v2_flight_boolean_input",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_petrone_v2_flight_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_controller_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 49, 255, 0)
                }
            },
            byrobot_petrone_v2_flight_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, "128"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, "64"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, "32"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, "192"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, "160"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, "96"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, "255"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, "220"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_flight_controller_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_flight_controller_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_flight_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11100000"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_flight_controller_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_flight_controller_light_color_rgb_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null, null], type: "byrobot_petrone_v2_flight_controller_light_color_rgb_input"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2, ADDITION: 3},
                class: "byrobot_petrone_v2_flight_controller_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = e.getNumberValue("RED"),
                        o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return Entry.byrobot_petrone_v2_flight.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_controller_light_color_rgb_select: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, "sunset"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, "cottonCandy"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, "muscat"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, "strawberryMilk"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, "emerald"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, "lavender"]],
                    value: "sunset",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_flight_controller_light_color_rgb_select"},
                paramsKeyMap: {SELECT: 0, ADDITION: 1},
                class: "byrobot_petrone_v2_flight_controller_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = 0, o = 0, a = 0;
                    switch (e.getField("SELECT")) {
                        case"sunset":
                            r = 255, o = 100, a = 0;
                            break;
                        case"cottonCandy":
                            r = 20, o = 250, a = 150;
                            break;
                        case"muscat":
                            r = 70, o = 255, a = 0;
                            break;
                        case"strawberryMilk":
                            r = 150, o = 60, a = 20;
                            break;
                        case"emerald":
                            r = 0, o = 255, a = 30;
                            break;
                        case"lavender":
                            r = 80, o = 0, a = 200
                    }
                    return Entry.byrobot_petrone_v2_flight.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_drone_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_drone_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 48, 255, 0)
                }
            },
            byrobot_petrone_v2_flight_drone_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_red, "128"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_green, "64"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_blue, "32"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_red, "16"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_green, "8"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_blue, "4"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, "220"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_flight_drone_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_flight_drone_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 48, n, r)
                }
            },
            byrobot_petrone_v2_flight_drone_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111100"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_flight_drone_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_petrone_v2_flight.setLightManual(e, 48, n, r)
                }
            },
            byrobot_petrone_v2_flight_drone_light_color_rgb_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, "18"], [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, "66"]],
                    value: "18",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null, null], type: "byrobot_petrone_v2_flight_drone_light_color_rgb_input"
                },
                paramsKeyMap: {MODE: 0, RED: 1, GREEN: 2, BLUE: 3, ADDITION: 4},
                class: "byrobot_petrone_v2_flight_drone_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MODE")) + parseInt(e.getField("ADDITION")),
                        r = e.getNumberValue("RED"), o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return Entry.byrobot_petrone_v2_flight.setLightColorRgb(e, 48, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_drone_light_color_rgb_select: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, "18"], [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, "66"]],
                    value: "18",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, "sunset"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, "cottonCandy"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, "muscat"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, "strawberryMilk"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, "emerald"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, "lavender"]],
                    value: "sunset",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, null], type: "byrobot_petrone_v2_flight_drone_light_color_rgb_select"},
                paramsKeyMap: {MODE: 0, SELECT: 1, ADDITION: 2},
                class: "byrobot_petrone_v2_flight_drone_light",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MODE")) + parseInt(e.getField("ADDITION")), r = 0, o = 0, a = 0;
                    switch (e.getField("SELECT")) {
                        case"sunset":
                            r = 255, o = 50, a = 0;
                            break;
                        case"cottonCandy":
                            r = 20, o = 250, a = 150;
                            break;
                        case"muscat":
                            r = 70, o = 255, a = 0;
                            break;
                        case"strawberryMilk":
                            r = 150, o = 60, a = 20;
                            break;
                        case"emerald":
                            r = 0, o = 255, a = 30;
                            break;
                        case"lavender":
                            r = 80, o = 0, a = 200
                    }
                    return Entry.byrobot_petrone_v2_flight.setLightColorRgb(e, 48, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_controller_display_clear_all: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_flight_controller_display_clear_all"},
                paramsKeyMap: {PIXEL: 0},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayClear(e, 49, n, !0, 0, 0, 0, 0)
                }
            },
            byrobot_petrone_v2_flight_controller_display_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null],
                    type: "byrobot_petrone_v2_flight_controller_display_clear"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayClear(e, 49, s, !1, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_controller_display_invert: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["64"]
                    }, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_flight_controller_display_invert"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT");
                    return Entry.byrobot_petrone_v2_flight.setDisplayInvert(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_point: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_flight_controller_display_draw_point"
                },
                paramsKeyMap: {X: 0, Y: 1, PIXEL: 2},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawPoint(e, 49, n, r, o)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["96"]
                    }, {type: "text", params: ["48"]}, null, null, null],
                    type: "byrobot_petrone_v2_flight_controller_display_draw_line"
                },
                paramsKeyMap: {X1: 0, Y1: 1, X2: 2, Y2: 3, PIXEL: 4, LINE: 5},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X1"), r = e.getNumberValue("Y1"), o = e.getNumberValue("X2"),
                        a = e.getNumberValue("Y2"), s = parseInt(e.getField("PIXEL")), i = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawLine(e, 49, n, r, o, a, s, i)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_rect: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null, null, null],
                    type: "byrobot_petrone_v2_flight_controller_display_draw_rect"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4, FLAGFILL: 5, LINE: 6},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL")),
                        i = parseInt(e.getField("FLAGFILL")), l = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawRect(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_circle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null], type: "byrobot_petrone_v2_flight_controller_display_draw_circle"
                },
                paramsKeyMap: {X: 0, Y: 1, RADIUS: 2, PIXEL: 3, FLAGFILL: 4},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("RADIUS"),
                        a = parseInt(e.getField("PIXEL")), s = parseInt(e.getField("FLAGFILL"));
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawCircle(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_string: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["4"]}, {type: "text", params: ["24"]}, null, null, {
                        type: "text",
                        params: ["{Petrone V2}"]
                    }, null], type: "byrobot_petrone_v2_flight_controller_display_draw_string"
                },
                paramsKeyMap: {X: 0, Y: 1, FONT: 2, PIXEL: 3, STRING: 4},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("FONT")),
                        a = parseInt(e.getField("PIXEL")), s = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawString(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_flight_controller_display_draw_string_align: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, "2"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["128"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null, {type: "text", params: ["BYROBOT & U"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_display_draw_string_align"
                },
                paramsKeyMap: {XSTART: 0, XEND: 1, Y: 2, ALIGN: 3, FONT: 4, PIXEL: 5, STRING: 6},
                class: "byrobot_petrone_v2_flight_controller_display",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("XSTART"), r = e.getNumberValue("XEND"), o = e.getNumberValue("Y"),
                        a = parseInt(e.getField("ALIGN")), s = parseInt(e.getField("FONT")),
                        i = parseInt(e.getField("PIXEL")), l = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_flight.setDisplayDrawStringAlign(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setBuzzerStop(e)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_flight_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_petrone_v2_flight.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_petrone_v2_flight.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_flight.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_petrone_v2_flight.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_flight.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_petrone_v2_flight.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_petrone_v2_flight.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_flight.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_flight_buzzer",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_flight.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_petrone_v2_flight_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_vibrator",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setVibratorStop(e)
                }
            },
            byrobot_petrone_v2_flight_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_flight_vibrator",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_flight.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_flight_vibrator",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_flight.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_petrone_v2_flight_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_flight_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_flight_vibrator",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_flight.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_flight_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_flight_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_flight_vibrator",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_flight.setVibrator(e, n, r, o, !1, !1)
                }
            },
            byrobot_petrone_v2_flight_drone_irmessage: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "byrobot_petrone_v2_flight_drone_irmessage"},
                paramsKeyMap: {IRMESSAGE: 0},
                class: "byrobot_petrone_v2_flight_irmessage",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("IRMESSAGE", e);
                    return Entry.byrobot_petrone_v2_flight.sendIrMessage(e, 0, n)
                }
            },
            byrobot_petrone_v2_flight_drone_motor_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_motor_stop"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_motor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.sendStop(e)
                }
            },
            byrobot_petrone_v2_flight_drone_motorsingle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_motorsingle"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_petrone_v2_flight_motor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = n % 2 + 1,
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_flight.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_flight_drone_motorsingle_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_motorsingle_input"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_petrone_v2_flight_motor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("MOTORINDEX", e)) - 1, r = n % 2 + 1,
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_flight.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_flight_drone_motorsingle_rotation: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_clockwise, "1"], [Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_counterclockwise, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_motorsingle_rotation"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORROTATION: 1, MOTORSPEED: 2},
                class: "byrobot_petrone_v2_flight_motor",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = parseInt(e.getField("MOTORROTATION")),
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_flight.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight, "16"], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight_noguard, "17"], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_flight_fpv, "18"]],
                    value: "16",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_flight_drone_command_mode_vehicle_drone"},
                paramsKeyMap: {VEHICLE: 0},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getField("VEHICLE");
                    return Entry.byrobot_petrone_v2_flight.setModeVehicle(e, n)
                }
            },
            byrobot_petrone_v2_flight_drone_control_drone_takeoff: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_control_drone_takeoff"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setEventFlight(e, 17, 200)
                }
            },
            byrobot_petrone_v2_flight_drone_control_drone_landing: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_control_drone_landing"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.setEventFlight(e, 18, 200)
                }
            },
            byrobot_petrone_v2_flight_drone_control_drone_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_control_drone_stop"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.sendStop(e)
                }
            },
            byrobot_petrone_v2_flight_drone_control_coordinate: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_coordinate_world, "1"], [Lang.Blocks.byrobot_petrone_v2_drone_coordinate_local, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_flight_drone_control_coordinate"},
                paramsKeyMap: {COORDINATE: 0},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getField("COORDINATE");
                    return Entry.byrobot_petrone_v2_flight.sendCommand(e, 48, 32, n)
                }
            },
            byrobot_petrone_v2_flight_drone_control_drone_reset_heading: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_flight_drone_control_drone_reset_heading"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_flight.sendCommand(e, 48, 34, 160)
                }
            },
            byrobot_petrone_v2_flight_drone_control_quad_one: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_quad_roll, "control_roll"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_pitch, "control_pitch"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_yaw, "control_yaw"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_throttle, "control_throttle"]],
                    value: "control_throttle",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_control_quad_one"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e));
                    return Entry.byrobot_petrone_v2_flight.sendControlQuadSingle(e, n, r, 0, !1)
                }
            },
            byrobot_petrone_v2_flight_drone_control_quad_one_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_quad_roll, "control_roll"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_pitch, "control_pitch"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_yaw, "control_yaw"], [Lang.Blocks.byrobot_petrone_v2_drone_control_quad_throttle, "control_throttle"]],
                    value: "control_throttle",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_control_quad_one_delay"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1, TIME: 2},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e)),
                        o = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_petrone_v2_flight.sendControlQuadSingle(e, n, r, o, !0)
                }
            },
            byrobot_petrone_v2_flight_drone_control_quad: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["0"]}, null], type: "byrobot_petrone_v2_flight_drone_control_quad"
                },
                paramsKeyMap: {ROLL: 0, PITCH: 1, YAW: 2, THROTTLE: 3},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("ROLL", e)), r = parseInt(e.getNumberValue("PITCH", e)),
                        o = parseInt(e.getNumberValue("YAW", e)), a = parseInt(e.getNumberValue("THROTTLE", e));
                    return Entry.byrobot_petrone_v2_flight.sendControlQuad(e, n, r, o, a, 0, !1)
                }
            },
            byrobot_petrone_v2_flight_drone_control_quad_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_flight_drone_control_quad_delay"
                },
                paramsKeyMap: {ROLL: 0, PITCH: 1, YAW: 2, THROTTLE: 3, TIME: 4},
                class: "byrobot_petrone_v2_flight_control_flight",
                isNotFor: ["byrobot_petrone_v2_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("ROLL", e)), r = parseInt(e.getNumberValue("PITCH", e)),
                        o = parseInt(e.getNumberValue("YAW", e)), a = parseInt(e.getNumberValue("THROTTLE", e)),
                        s = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_petrone_v2_flight.sendControlQuad(e, n, r, o, a, s, !0)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_petrone_v2_drive = {
        name: "byrobot_petrone_v2_drive",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_petrone_v2_drive.png",
        title: {en: "BYROBOT Petrone V2 drive", ko: "바이로봇 페트론V2 자동차"},
        setZero: function () {
            this.transferBufferClear();
            for (var t = 0; t < 1; t++) this.transferCommand(48, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(48, 255, 0), this.transferLightManual(49, 255, 0), this.transferLightManual(48, 128, 200), this.transferLightManual(48, 16, 200), this.transferMotorSingle(0, 1, 0), this.transferMotorSingle(1, 2, 0)
        },
        monitorTemplate: {
            listPorts: {
                state_modeVehicle: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_modeDrive: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_mode_drive,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_battery: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_state_battery,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_angleRoll: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_anglePitch: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_angleYaw: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_accX: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_x, type: "input", pos: {x: 0, y: 0}},
                imu_accY: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_y, type: "input", pos: {x: 0, y: 0}},
                imu_accZ: {name: Lang.Blocks.byrobot_petrone_v2_drone_accel_z, type: "input", pos: {x: 0, y: 0}},
                imu_gyroRoll: {name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, type: "input", pos: {x: 0, y: 0}},
                imu_gyroPitch: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imu_gyroYaw: {name: Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, type: "input", pos: {x: 0, y: 0}},
                pressure_temperature: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                pressure_pressure: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imageflow_positionX: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                imageflow_positionY: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                range_bottom: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_range_bottom,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_irdata: {
                    name: Lang.Blocks.byrobot_petrone_v2_drone_irmessage,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            }, ports: {}, mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferBufferClear: function () {
            Entry.hw.setDigitalPortValue("buffer_clear", 0), Entry.hw.update(), delete Entry.hw.sendQueue.buffer_clear
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferLightMode: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 65535), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_mode_mode", e), Entry.hw.setDigitalPortValue("light_mode_interval", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_mode_mode, delete Entry.hw.sendQueue.light_mode_interval
        },
        transferLightColorRgb: function (t, e, n, r, o) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), r = Math.max(r, 0), r = Math.min(r, 255), o = Math.max(o, 0), o = Math.min(o, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_mode_mode", e), Entry.hw.setDigitalPortValue("light_color_r", n), Entry.hw.setDigitalPortValue("light_color_g", r), Entry.hw.setDigitalPortValue("light_color_b", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_mode_mode, delete Entry.hw.sendQueue.light_color_r, delete Entry.hw.sendQueue.light_color_g, delete Entry.hw.sendQueue.light_color_b
        },
        transferDisplayClear: function (t, e, n, r, o, a, s) {
            n ? (Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clearall_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), a = Math.max(a, 0), a = Math.min(a, 128), s = Math.max(s, 0), s = Math.min(s, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clear_x", r), Entry.hw.setDigitalPortValue("display_clear_y", o), Entry.hw.setDigitalPortValue("display_clear_width", a), Entry.hw.setDigitalPortValue("display_clear_height", s), Entry.hw.setDigitalPortValue("display_clear_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel)
        },
        transferDisplayInvert: function (t, e, n, r, o) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_invert_x", e), Entry.hw.setDigitalPortValue("display_invert_y", n), Entry.hw.setDigitalPortValue("display_invert_width", r), Entry.hw.setDigitalPortValue("display_invert_height", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_invert_x, delete Entry.hw.sendQueue.display_invert_y, delete Entry.hw.sendQueue.display_invert_width, delete Entry.hw.sendQueue.display_invert_height
        },
        transferDisplayDrawPoint: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_point_x", e), Entry.hw.setDigitalPortValue("display_draw_point_y", n), Entry.hw.setDigitalPortValue("display_draw_point_pixel", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_point_x, delete Entry.hw.sendQueue.display_draw_point_y, delete Entry.hw.sendQueue.display_draw_point_pixel
        },
        transferDisplayDrawLine: function (t, e, n, r, o, a, s) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_line_x1", e), Entry.hw.setDigitalPortValue("display_draw_line_y1", n), Entry.hw.setDigitalPortValue("display_draw_line_x2", r), Entry.hw.setDigitalPortValue("display_draw_line_y2", o), Entry.hw.setDigitalPortValue("display_draw_line_pixel", a), Entry.hw.setDigitalPortValue("display_draw_line_line", s), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_line_x1, delete Entry.hw.sendQueue.display_draw_line_y1, delete Entry.hw.sendQueue.display_draw_line_x2, delete Entry.hw.sendQueue.display_draw_line_y2, delete Entry.hw.sendQueue.display_draw_line_pixel, delete Entry.hw.sendQueue.display_draw_line_line
        },
        transferDisplayDrawRect: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_rect_x", e), Entry.hw.setDigitalPortValue("display_draw_rect_y", n), Entry.hw.setDigitalPortValue("display_draw_rect_width", r), Entry.hw.setDigitalPortValue("display_draw_rect_height", o), Entry.hw.setDigitalPortValue("display_draw_rect_pixel", a), Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", s), Entry.hw.setDigitalPortValue("display_draw_rect_line", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_rect_x, delete Entry.hw.sendQueue.display_draw_rect_y, delete Entry.hw.sendQueue.display_draw_rect_width, delete Entry.hw.sendQueue.display_draw_rect_height, delete Entry.hw.sendQueue.display_draw_rect_pixel, delete Entry.hw.sendQueue.display_draw_rect_flagfill, delete Entry.hw.sendQueue.display_draw_rect_line
        },
        transferDisplayDrawCircle: function (t, e, n, r, o, a) {
            e = Math.max(e, -50), e = Math.min(e, 178), n = Math.max(n, -50), n = Math.min(n, 114), r = Math.max(r, 1), r = Math.min(r, 200), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_circle_x", e), Entry.hw.setDigitalPortValue("display_draw_circle_y", n), Entry.hw.setDigitalPortValue("display_draw_circle_radius", r), Entry.hw.setDigitalPortValue("display_draw_circle_pixel", o), Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_circle_x, delete Entry.hw.sendQueue.display_draw_circle_y, delete Entry.hw.sendQueue.display_draw_circle_radius, delete Entry.hw.sendQueue.display_draw_circle_pixel, delete Entry.hw.sendQueue.display_draw_circle_flagfill
        },
        transferDisplayDrawString: function (t, e, n, r, o, a) {
            e = Math.max(e, 0), e = Math.min(e, 120), n = Math.max(n, 0), n = Math.min(n, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_x", e), Entry.hw.setDigitalPortValue("display_draw_string_y", n), Entry.hw.setDigitalPortValue("display_draw_string_font", r), Entry.hw.setDigitalPortValue("display_draw_string_pixel", o), Entry.hw.setDigitalPortValue("display_draw_string_string", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_x, delete Entry.hw.sendQueue.display_draw_string_y, delete Entry.hw.sendQueue.display_draw_string_font, delete Entry.hw.sendQueue.display_draw_string_pixel, delete Entry.hw.sendQueue.display_draw_string_string
        },
        transferDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 124), n = Math.max(n, 4), n = Math.min(n, 128), r = Math.max(r, 0), r = Math.min(r, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", e), Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", n), Entry.hw.setDigitalPortValue("display_draw_string_align_y", r), Entry.hw.setDigitalPortValue("display_draw_string_align_align", o), Entry.hw.setDigitalPortValue("display_draw_string_align_font", a), Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", s), Entry.hw.setDigitalPortValue("display_draw_string_align_string", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_align_x_start, delete Entry.hw.sendQueue.display_draw_string_align_x_end, delete Entry.hw.sendQueue.display_draw_string_align_y, delete Entry.hw.sendQueue.display_draw_string_align_align, delete Entry.hw.sendQueue.display_draw_string_align_font, delete Entry.hw.sendQueue.display_draw_string_align_pixel, delete Entry.hw.sendQueue.display_draw_string_align_string
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferIrMessage: function (t, e) {
            e = Math.max(e, -2147483647), e = Math.min(e, 2147483647), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("irmessage_direction", t), Entry.hw.setDigitalPortValue("irmessage_irdata", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.irmessage_direction, delete Entry.hw.sendQueue.irmessage_irdata
        },
        transferMotorSingle: function (t, e, n) {
            n = Math.max(n, 0), n = Math.min(n, 4096), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("motorsingle_target", t), Entry.hw.setDigitalPortValue("motorsingle_rotation", e), Entry.hw.setDigitalPortValue("motorsingle_value", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.motorsingle_target, delete Entry.hw.sendQueue.motorsingle_rotation, delete Entry.hw.sendQueue.motorsingle_value
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        transferControlDouble: function (t, e) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, -100), e = Math.min(e, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("control_wheel", t), Entry.hw.setDigitalPortValue("control_accel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_wheel, delete Entry.hw.sendQueue.control_accel
        },
        transferControlQuad: function (t, e, n, r) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, -100), e = Math.min(e, 100), n = Math.max(n, -100), n = Math.min(n, 100), r = Math.max(r, -100), r = Math.min(r, 100), Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue("control_roll", t), Entry.hw.setDigitalPortValue("control_pitch", e), Entry.hw.setDigitalPortValue("control_yaw", n), Entry.hw.setDigitalPortValue("control_throttle", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_roll, delete Entry.hw.sendQueue.control_pitch, delete Entry.hw.sendQueue.control_yaw, delete Entry.hw.sendQueue.control_throttle
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setLightColorRgb: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightColorRgb(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayClear: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayClear(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayInvert: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayInvert(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawPoint: function (t, e, n, r, o) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawPoint(e, n, r, o), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawLine: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawLine(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawRect: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawRect(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawCircle: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawCircle(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawString: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawString(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawStringAlign(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendIrMessage: function (t, e, n) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferIrMessage(e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendStop: function (t) {
            return this.sendCommand(t, 48, 36, 0)
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setMotorSingle: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferMotorSingle(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setModeVehicle: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(48, 16, e), this.transferControlDouble(0, 0), this.transferControlQuad(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendControlDoubleSingle: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    switch (e) {
                        case"control_wheel":
                        case"control_accel":
                            n = Math.max(n, -100), n = Math.min(n, 100)
                    }
                    return Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(e, n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e], t;
                case"Running":
                    return t;
                case"Finish":
                    return o && (Entry.hw.setDigitalPortValue("target", 48), Entry.hw.setDigitalPortValue(e, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e]), t.callReturn();
                default:
                    return t.callReturn()
            }
        },
        sendControlDouble: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    return this.transferControlDouble(e, n), t;
                case"Running":
                    return t;
                case"Finish":
                    return o && this.transferControlDouble(0, 0), t.callReturn();
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_petrone_v2_drive.getBlocks = function () {
        return {
            byrobot_petrone_v2_drive_drone_value_attitude: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_attitude_roll, "imu_angleRoll"], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_pitch, "imu_anglePitch"], [Lang.Blocks.byrobot_petrone_v2_drone_attitude_yaw, "imu_angleYaw"]],
                    value: "imu_angleRoll",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_value_attitude"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_drone_value_imu: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_accel_x, "imu_accX"], [Lang.Blocks.byrobot_petrone_v2_drone_accel_y, "imu_accY"], [Lang.Blocks.byrobot_petrone_v2_drone_accel_z, "imu_accZ"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_roll, "imu_gyroRoll"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_pitch, "imu_gyroPitch"], [Lang.Blocks.byrobot_petrone_v2_drone_gyro_yaw, "imu_gyroYaw"]],
                    value: "imu_accX",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_value_imu"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_drone_value_sensor: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_pressure_temperature, "pressure_temperature"], [Lang.Blocks.byrobot_petrone_v2_drone_pressure_pressure, "pressure_pressure"], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionX, "imageflow_positionX"], [Lang.Blocks.byrobot_petrone_v2_drone_imageflow_positionY, "imageflow_positionY"], [Lang.Blocks.byrobot_petrone_v2_drone_range_bottom, "range_bottom"]],
                    value: "pressure_temperature",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_value_sensor"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_drone_value_etc: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_state_mode_vehicle, "state_modeVehicle"], [Lang.Blocks.byrobot_petrone_v2_drone_state_mode_drive, "state_modeDrive"], [Lang.Blocks.byrobot_petrone_v2_drone_state_battery, "state_battery"], [Lang.Blocks.byrobot_petrone_v2_drone_irmessage, "irmessage_irdata"]],
                    value: "irmessage_irdata",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_value_etc"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, "button_button"], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, "joystick_right_event"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_drive_monitor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_drive_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, "16"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, "32"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, "64"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, "128"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_petrone_v2_drive_boolean_input",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                },
                syntax: {js: [], py: []}
            },
            byrobot_petrone_v2_drive_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_drive_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_petrone_v2_drive_boolean_input",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_petrone_v2_drive_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_controller_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 49, 255, 0)
                }
            },
            byrobot_petrone_v2_drive_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, "128"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, "64"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, "32"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, "192"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, "160"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, "96"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, "255"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, "220"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_drive_controller_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_drive_controller_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_drive_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11100000"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_drive_controller_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_drive_controller_light_color_rgb_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null, null], type: "byrobot_petrone_v2_drive_controller_light_color_rgb_input"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2, ADDITION: 3},
                class: "byrobot_petrone_v2_drive_controller_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = e.getNumberValue("RED"),
                        o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return Entry.byrobot_petrone_v2_drive.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_controller_light_color_rgb_select: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, "sunset"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, "cottonCandy"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, "muscat"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, "strawberryMilk"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, "emerald"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, "lavender"]],
                    value: "sunset",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_drive_controller_light_color_rgb_select"},
                paramsKeyMap: {SELECT: 0, ADDITION: 1},
                class: "byrobot_petrone_v2_drive_controller_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = 0, o = 0, a = 0;
                    switch (e.getField("SELECT")) {
                        case"sunset":
                            r = 255, o = 100, a = 0;
                            break;
                        case"cottonCandy":
                            r = 20, o = 250, a = 150;
                            break;
                        case"muscat":
                            r = 70, o = 255, a = 0;
                            break;
                        case"strawberryMilk":
                            r = 150, o = 60, a = 20;
                            break;
                        case"emerald":
                            r = 0, o = 255, a = 30;
                            break;
                        case"lavender":
                            r = 80, o = 0, a = 200
                    }
                    return Entry.byrobot_petrone_v2_drive.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_drone_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_drone_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 48, 255, 0)
                }
            },
            byrobot_petrone_v2_drive_drone_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_red, "128"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_green, "64"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_eye_blue, "32"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_red, "16"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_green, "8"], [Lang.Blocks.byrobot_petrone_v2_drone_light_manual_arm_blue, "4"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, "220"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_drive_drone_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_drive_drone_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 48, n, r)
                }
            },
            byrobot_petrone_v2_drive_drone_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111100"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_drive_drone_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_petrone_v2_drive.setLightManual(e, 48, n, r)
                }
            },
            byrobot_petrone_v2_drive_drone_light_color_rgb_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, "18"], [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, "66"]],
                    value: "18",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null, null], type: "byrobot_petrone_v2_drive_drone_light_color_rgb_input"
                },
                paramsKeyMap: {MODE: 0, RED: 1, GREEN: 2, BLUE: 3, ADDITION: 4},
                class: "byrobot_petrone_v2_drive_drone_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MODE")) + parseInt(e.getField("ADDITION")),
                        r = e.getNumberValue("RED"), o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return Entry.byrobot_petrone_v2_drive.setLightColorRgb(e, 48, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_drone_light_color_rgb_select: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_light_color_eye, "18"], [Lang.Blocks.byrobot_petrone_v2_drone_light_color_arm, "66"]],
                    value: "18",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, "sunset"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, "cottonCandy"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, "muscat"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, "strawberryMilk"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, "emerald"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, "lavender"]],
                    value: "sunset",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null, null], type: "byrobot_petrone_v2_drive_drone_light_color_rgb_select"},
                paramsKeyMap: {MODE: 0, SELECT: 1, ADDITION: 2},
                class: "byrobot_petrone_v2_drive_drone_light",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MODE")) + parseInt(e.getField("ADDITION")), r = 0, o = 0, a = 0;
                    switch (e.getField("SELECT")) {
                        case"sunset":
                            r = 255, o = 50, a = 0;
                            break;
                        case"cottonCandy":
                            r = 20, o = 250, a = 150;
                            break;
                        case"muscat":
                            r = 70, o = 255, a = 0;
                            break;
                        case"strawberryMilk":
                            r = 150, o = 60, a = 20;
                            break;
                        case"emerald":
                            r = 0, o = 255, a = 30;
                            break;
                        case"lavender":
                            r = 80, o = 0, a = 200
                    }
                    return Entry.byrobot_petrone_v2_drive.setLightColorRgb(e, 48, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_controller_display_clear_all: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_drive_controller_display_clear_all"},
                paramsKeyMap: {PIXEL: 0},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayClear(e, 49, n, !0, 0, 0, 0, 0)
                }
            },
            byrobot_petrone_v2_drive_controller_display_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null],
                    type: "byrobot_petrone_v2_drive_controller_display_clear"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayClear(e, 49, s, !1, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_controller_display_invert: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["64"]
                    }, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_drive_controller_display_invert"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT");
                    return Entry.byrobot_petrone_v2_drive.setDisplayInvert(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_point: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_drive_controller_display_draw_point"
                },
                paramsKeyMap: {X: 0, Y: 1, PIXEL: 2},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawPoint(e, 49, n, r, o)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["96"]
                    }, {type: "text", params: ["48"]}, null, null, null],
                    type: "byrobot_petrone_v2_drive_controller_display_draw_line"
                },
                paramsKeyMap: {X1: 0, Y1: 1, X2: 2, Y2: 3, PIXEL: 4, LINE: 5},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X1"), r = e.getNumberValue("Y1"), o = e.getNumberValue("X2"),
                        a = e.getNumberValue("Y2"), s = parseInt(e.getField("PIXEL")), i = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawLine(e, 49, n, r, o, a, s, i)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_rect: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null, null, null],
                    type: "byrobot_petrone_v2_drive_controller_display_draw_rect"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4, FLAGFILL: 5, LINE: 6},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL")),
                        i = parseInt(e.getField("FLAGFILL")), l = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawRect(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_circle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null], type: "byrobot_petrone_v2_drive_controller_display_draw_circle"
                },
                paramsKeyMap: {X: 0, Y: 1, RADIUS: 2, PIXEL: 3, FLAGFILL: 4},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("RADIUS"),
                        a = parseInt(e.getField("PIXEL")), s = parseInt(e.getField("FLAGFILL"));
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawCircle(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_string: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["4"]}, {type: "text", params: ["24"]}, null, null, {
                        type: "text",
                        params: ["{Petrone V2}"]
                    }, null], type: "byrobot_petrone_v2_drive_controller_display_draw_string"
                },
                paramsKeyMap: {X: 0, Y: 1, FONT: 2, PIXEL: 3, STRING: 4},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("FONT")),
                        a = parseInt(e.getField("PIXEL")), s = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawString(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_drive_controller_display_draw_string_align: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, "2"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["128"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null, {type: "text", params: ["BYROBOT & U"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_display_draw_string_align"
                },
                paramsKeyMap: {XSTART: 0, XEND: 1, Y: 2, ALIGN: 3, FONT: 4, PIXEL: 5, STRING: 6},
                class: "byrobot_petrone_v2_drive_controller_display",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("XSTART"), r = e.getNumberValue("XEND"), o = e.getNumberValue("Y"),
                        a = parseInt(e.getField("ALIGN")), s = parseInt(e.getField("FONT")),
                        i = parseInt(e.getField("PIXEL")), l = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_drive.setDisplayDrawStringAlign(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.setBuzzerStop(e)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_drive_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_petrone_v2_drive.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_petrone_v2_drive.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_drive.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_petrone_v2_drive.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_drive.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_petrone_v2_drive.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_petrone_v2_drive.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_drive.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_drive_buzzer",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_drive.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_petrone_v2_drive_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_vibrator",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.setVibratorStop(e)
                }
            },
            byrobot_petrone_v2_drive_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_drive_vibrator",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_drive.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_drive_vibrator",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_drive.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_petrone_v2_drive_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_drive_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_drive_vibrator",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_drive.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_drive_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_drive_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_drive_vibrator",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_drive.setVibrator(e, n, r, o, !1, !1)
                }
            },
            byrobot_petrone_v2_drive_drone_irmessage: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "byrobot_petrone_v2_drive_drone_irmessage"},
                paramsKeyMap: {IRMESSAGE: 0},
                class: "byrobot_petrone_v2_drive_irmessage",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("IRMESSAGE", e);
                    return Entry.byrobot_petrone_v2_drive.sendIrMessage(e, 0, n)
                }
            },
            byrobot_petrone_v2_drive_drone_motor_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_motor_stop"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_motor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.sendStop(e)
                }
            },
            byrobot_petrone_v2_drive_drone_motorsingle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["3000"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_motorsingle"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_petrone_v2_drive_motor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = n % 2 + 1,
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_drive.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_drive_drone_motorsingle_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, {type: "text", params: ["3000"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_motorsingle_input"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_petrone_v2_drive_motor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("MOTORINDEX", e)) - 1, r = n % 2 + 1,
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_drive.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_drive_drone_motorsingle_rotation: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_clockwise, "1"], [Lang.Blocks.byrobot_petrone_v2_drone_motor_rotation_counterclockwise, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["3000"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_motorsingle_rotation"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORROTATION: 1, MOTORSPEED: 2},
                class: "byrobot_petrone_v2_drive_motor",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = parseInt(e.getField("MOTORROTATION")),
                        o = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_petrone_v2_drive.setMotorSingle(e, n, r, o)
                }
            },
            byrobot_petrone_v2_drive_drone_command_mode_vehicle_car: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_vehicle_drive, "32"], [Lang.Blocks.byrobot_petrone_v2_drone_vehicle_drive_fpv, "33"]],
                    value: "32",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_drive_drone_command_mode_vehicle_car"},
                paramsKeyMap: {VEHICLE: 0},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getField("VEHICLE");
                    return Entry.byrobot_petrone_v2_drive.setModeVehicle(e, n)
                }
            },
            byrobot_petrone_v2_drive_drone_control_car_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_drive_drone_control_car_stop"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_drive.sendStop(e)
                }
            },
            byrobot_petrone_v2_drive_drone_control_double_one: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_double_wheel, "control_wheel"], [Lang.Blocks.byrobot_petrone_v2_drone_control_double_accel_forward, "control_accel"]],
                    value: "control_accel",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_control_double_one"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e));
                    return Entry.byrobot_petrone_v2_drive.sendControlDoubleSingle(e, n, r, 0, !1)
                }
            },
            byrobot_petrone_v2_drive_drone_control_double_one_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_drone_control_double_wheel, "control_wheel"], [Lang.Blocks.byrobot_petrone_v2_drone_control_double_accel_forward, "control_accel"]],
                    value: "control_accel",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_control_double_one_delay"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1, TIME: 2},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e)),
                        o = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_petrone_v2_drive.sendControlDoubleSingle(e, n, r, o, !0)
                }
            },
            byrobot_petrone_v2_drive_drone_control_double: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, null],
                    type: "byrobot_petrone_v2_drive_drone_control_double"
                },
                paramsKeyMap: {WHEEL: 0, ACCEL: 1},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("WHEEL", e)), r = parseInt(e.getNumberValue("ACCEL", e));
                    return Entry.byrobot_petrone_v2_drive.sendControlDouble(e, n, r, 0, !1)
                }
            },
            byrobot_petrone_v2_drive_drone_control_double_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_drive_drone_control_double_delay"
                },
                paramsKeyMap: {WHEEL: 0, ACCEL: 1, TIME: 2},
                class: "byrobot_petrone_v2_drive_control_drive",
                isNotFor: ["byrobot_petrone_v2_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("WHEEL", e)), r = parseInt(e.getNumberValue("ACCEL", e)),
                        o = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_petrone_v2_drive.sendControlDouble(e, n, r, o, !0)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_petrone_v2_controller = {
        name: "byrobot_petrone_v2_controller",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_petrone_v2_controller.png",
        title: {en: "BYROBOT Petrone V2 controller", ko: "바이로봇 페트론V2 조종기"},
        setZero: function () {
            for (var t = 0; t < 1; t++) this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(49, 255, 0), this.transferCommand(49, 128, 0)
        },
        monitorTemplate: {
            listPorts: {
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_petrone_v2_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_petrone_v2_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            }, ports: {}, mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferLightColorRgb: function (t, e, n, r, o) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), r = Math.max(r, 0), r = Math.min(r, 255), o = Math.max(o, 0), o = Math.min(o, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_mode_mode", e), Entry.hw.setDigitalPortValue("light_color_r", n), Entry.hw.setDigitalPortValue("light_color_g", r), Entry.hw.setDigitalPortValue("light_color_b", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_mode_mode, delete Entry.hw.sendQueue.light_color_r, delete Entry.hw.sendQueue.light_color_g, delete Entry.hw.sendQueue.light_color_b
        },
        transferDisplayClear: function (t, e, n, r, o, a, s) {
            n ? (Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clearall_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clearall_pixel) : (r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), a = Math.max(a, 0), a = Math.min(a, 128), s = Math.max(s, 0), s = Math.min(s, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_clear_x", r), Entry.hw.setDigitalPortValue("display_clear_y", o), Entry.hw.setDigitalPortValue("display_clear_width", a), Entry.hw.setDigitalPortValue("display_clear_height", s), Entry.hw.setDigitalPortValue("display_clear_pixel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_clear_x, delete Entry.hw.sendQueue.display_clear_y, delete Entry.hw.sendQueue.display_clear_width, delete Entry.hw.sendQueue.display_clear_height, delete Entry.hw.sendQueue.display_clear_pixel)
        },
        transferDisplayInvert: function (t, e, n, r, o) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_invert_x", e), Entry.hw.setDigitalPortValue("display_invert_y", n), Entry.hw.setDigitalPortValue("display_invert_width", r), Entry.hw.setDigitalPortValue("display_invert_height", o), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_invert_x, delete Entry.hw.sendQueue.display_invert_y, delete Entry.hw.sendQueue.display_invert_width, delete Entry.hw.sendQueue.display_invert_height
        },
        transferDisplayDrawPoint: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_point_x", e), Entry.hw.setDigitalPortValue("display_draw_point_y", n), Entry.hw.setDigitalPortValue("display_draw_point_pixel", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_point_x, delete Entry.hw.sendQueue.display_draw_point_y, delete Entry.hw.sendQueue.display_draw_point_pixel
        },
        transferDisplayDrawLine: function (t, e, n, r, o, a, s) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_line_x1", e), Entry.hw.setDigitalPortValue("display_draw_line_y1", n), Entry.hw.setDigitalPortValue("display_draw_line_x2", r), Entry.hw.setDigitalPortValue("display_draw_line_y2", o), Entry.hw.setDigitalPortValue("display_draw_line_pixel", a), Entry.hw.setDigitalPortValue("display_draw_line_line", s), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_line_x1, delete Entry.hw.sendQueue.display_draw_line_y1, delete Entry.hw.sendQueue.display_draw_line_x2, delete Entry.hw.sendQueue.display_draw_line_y2, delete Entry.hw.sendQueue.display_draw_line_pixel, delete Entry.hw.sendQueue.display_draw_line_line
        },
        transferDisplayDrawRect: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 128), n = Math.max(n, 0), n = Math.min(n, 64), r = Math.max(r, 0), r = Math.min(r, 128), o = Math.max(o, 0), o = Math.min(o, 64), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_rect_x", e), Entry.hw.setDigitalPortValue("display_draw_rect_y", n), Entry.hw.setDigitalPortValue("display_draw_rect_width", r), Entry.hw.setDigitalPortValue("display_draw_rect_height", o), Entry.hw.setDigitalPortValue("display_draw_rect_pixel", a), Entry.hw.setDigitalPortValue("display_draw_rect_flagfill", s), Entry.hw.setDigitalPortValue("display_draw_rect_line", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_rect_x, delete Entry.hw.sendQueue.display_draw_rect_y, delete Entry.hw.sendQueue.display_draw_rect_width, delete Entry.hw.sendQueue.display_draw_rect_height, delete Entry.hw.sendQueue.display_draw_rect_pixel, delete Entry.hw.sendQueue.display_draw_rect_flagfill, delete Entry.hw.sendQueue.display_draw_rect_line
        },
        transferDisplayDrawCircle: function (t, e, n, r, o, a) {
            e = Math.max(e, -50), e = Math.min(e, 178), n = Math.max(n, -50), n = Math.min(n, 114), r = Math.max(r, 1), r = Math.min(r, 200), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_circle_x", e), Entry.hw.setDigitalPortValue("display_draw_circle_y", n), Entry.hw.setDigitalPortValue("display_draw_circle_radius", r), Entry.hw.setDigitalPortValue("display_draw_circle_pixel", o), Entry.hw.setDigitalPortValue("display_draw_circle_flagfill", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_circle_x, delete Entry.hw.sendQueue.display_draw_circle_y, delete Entry.hw.sendQueue.display_draw_circle_radius, delete Entry.hw.sendQueue.display_draw_circle_pixel, delete Entry.hw.sendQueue.display_draw_circle_flagfill
        },
        transferDisplayDrawString: function (t, e, n, r, o, a) {
            e = Math.max(e, 0), e = Math.min(e, 120), n = Math.max(n, 0), n = Math.min(n, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_x", e), Entry.hw.setDigitalPortValue("display_draw_string_y", n), Entry.hw.setDigitalPortValue("display_draw_string_font", r), Entry.hw.setDigitalPortValue("display_draw_string_pixel", o), Entry.hw.setDigitalPortValue("display_draw_string_string", a), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_x, delete Entry.hw.sendQueue.display_draw_string_y, delete Entry.hw.sendQueue.display_draw_string_font, delete Entry.hw.sendQueue.display_draw_string_pixel, delete Entry.hw.sendQueue.display_draw_string_string
        },
        transferDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i) {
            e = Math.max(e, 0), e = Math.min(e, 124), n = Math.max(n, 4), n = Math.min(n, 128), r = Math.max(r, 0), r = Math.min(r, 60), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("display_draw_string_align_x_start", e), Entry.hw.setDigitalPortValue("display_draw_string_align_x_end", n), Entry.hw.setDigitalPortValue("display_draw_string_align_y", r), Entry.hw.setDigitalPortValue("display_draw_string_align_align", o), Entry.hw.setDigitalPortValue("display_draw_string_align_font", a), Entry.hw.setDigitalPortValue("display_draw_string_align_pixel", s), Entry.hw.setDigitalPortValue("display_draw_string_align_string", i), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.display_draw_string_align_x_start, delete Entry.hw.sendQueue.display_draw_string_align_x_end, delete Entry.hw.sendQueue.display_draw_string_align_y, delete Entry.hw.sendQueue.display_draw_string_align_align, delete Entry.hw.sendQueue.display_draw_string_align_font, delete Entry.hw.sendQueue.display_draw_string_align_pixel, delete Entry.hw.sendQueue.display_draw_string_align_string
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 49), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setLightColorRgb: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightColorRgb(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayClear: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayClear(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayInvert: function (t, e, n, r, o, a) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayInvert(e, n, r, o, a), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawPoint: function (t, e, n, r, o) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawPoint(e, n, r, o), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawLine: function (t, e, n, r, o, a, s, i) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawLine(e, n, r, o, a, s, i), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawRect: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawRect(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawCircle: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawCircle(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawString: function (t, e, n, r, o, a, s) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawString(e, n, r, o, a, s), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setDisplayDrawStringAlign: function (t, e, n, r, o, a, s, i, l) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferDisplayDrawStringAlign(e, n, r, o, a, s, i, l), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_petrone_v2_controller.getBlocks = function () {
        return {
            byrobot_petrone_v2_controller_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_button, "button_button"], [Lang.Blocks.byrobot_petrone_v2_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_controller_monitor",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_controller_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_right_event, "joystick_right_event"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_petrone_v2_controller_monitor",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_petrone_v2_controller_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_button_front_left, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_right, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_up, "16"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_left, "32"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_right, "64"], [Lang.Blocks.byrobot_petrone_v2_controller_button_center_down, "128"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_petrone_v2_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_petrone_v2_controller_boolean_input",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                }
            },
            byrobot_petrone_v2_controller_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_petrone_v2_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_petrone_v2_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_controller_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_petrone_v2_controller_boolean_input",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_petrone_v2_controller_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_controller_controller_light",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_controller.setLightManual(e, 49, 255, 0)
                }
            },
            byrobot_petrone_v2_controller_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_red, "128"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_green, "64"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_blue, "32"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_yellow, "192"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_magenta, "160"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_cyan, "96"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_white, "255"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_manual_on, "220"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_off, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_petrone_v2_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_controller_controller_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_controller_controller_light",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_petrone_v2_controller.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_controller_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11100000"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_petrone_v2_controller_controller_light",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_petrone_v2_controller.setLightManual(e, 49, n, r)
                }
            },
            byrobot_petrone_v2_controller_controller_light_color_rgb_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null, null], type: "byrobot_petrone_v2_controller_controller_light_color_rgb_input"
                },
                paramsKeyMap: {RED: 0, GREEN: 1, BLUE: 2, ADDITION: 3},
                class: "byrobot_petrone_v2_controller_controller_light",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = e.getNumberValue("RED"),
                        o = e.getNumberValue("GREEN"), a = e.getNumberValue("BLUE");
                    return Entry.byrobot_petrone_v2_controller.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_controller_controller_light_color_rgb_select: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_color_sunset, "sunset"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_cottoncandy, "cottonCandy"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_muscat, "muscat"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_strawberrymilk, "strawberryMilk"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_emerald, "emerald"], [Lang.Blocks.byrobot_petrone_v2_common_light_color_lavender, "lavender"]],
                    value: "sunset",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_common_light_mode_hold, "0"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker, "1"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_flicker_double, "2"], [Lang.Blocks.byrobot_petrone_v2_common_light_mode_dimming, "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, null],
                    type: "byrobot_petrone_v2_controller_controller_light_color_rgb_select"
                },
                paramsKeyMap: {SELECT: 0, ADDITION: 1},
                class: "byrobot_petrone_v2_controller_controller_light",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = 18 + parseInt(e.getField("ADDITION")), r = 0, o = 0, a = 0;
                    switch (e.getField("SELECT")) {
                        case"sunset":
                            r = 255, o = 100, a = 0;
                            break;
                        case"cottonCandy":
                            r = 20, o = 250, a = 150;
                            break;
                        case"muscat":
                            r = 70, o = 255, a = 0;
                            break;
                        case"strawberryMilk":
                            r = 150, o = 60, a = 20;
                            break;
                        case"emerald":
                            r = 0, o = 255, a = 30;
                            break;
                        case"lavender":
                            r = 80, o = 0, a = 200
                    }
                    return Entry.byrobot_petrone_v2_controller.setLightColorRgb(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_controller_controller_display_clear_all: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_petrone_v2_controller_controller_display_clear_all"},
                paramsKeyMap: {PIXEL: 0},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayClear(e, 49, n, !0, 0, 0, 0, 0)
                }
            },
            byrobot_petrone_v2_controller_controller_display_clear: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null],
                    type: "byrobot_petrone_v2_controller_controller_display_clear"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayClear(e, 49, s, !1, n, r, o, a)
                }
            },
            byrobot_petrone_v2_controller_controller_display_invert: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["64"]
                    }, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_controller_controller_display_invert"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT");
                    return Entry.byrobot_petrone_v2_controller.setDisplayInvert(e, 49, n, r, o, a)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_point: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, null, null],
                    type: "byrobot_petrone_v2_controller_controller_display_draw_point"
                },
                paramsKeyMap: {X: 0, Y: 1, PIXEL: 2},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("PIXEL"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawPoint(e, 49, n, r, o)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["32"]}, {type: "text", params: ["16"]}, {
                        type: "text",
                        params: ["96"]
                    }, {type: "text", params: ["48"]}, null, null, null],
                    type: "byrobot_petrone_v2_controller_controller_display_draw_line"
                },
                paramsKeyMap: {X1: 0, Y1: 1, X2: 2, Y2: 3, PIXEL: 4, LINE: 5},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X1"), r = e.getNumberValue("Y1"), o = e.getNumberValue("X2"),
                        a = e.getNumberValue("Y2"), s = parseInt(e.getField("PIXEL")), i = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawLine(e, 49, n, r, o, a, s, i)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_rect: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_line_solid, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dotted, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_line_dashed, "2"]],
                    value: "2",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["32"]
                    }, {type: "text", params: ["16"]}, null, null, null, null],
                    type: "byrobot_petrone_v2_controller_controller_display_draw_rect"
                },
                paramsKeyMap: {X: 0, Y: 1, WIDTH: 2, HEIGHT: 3, PIXEL: 4, FLAGFILL: 5, LINE: 6},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("WIDTH"),
                        a = e.getNumberValue("HEIGHT"), s = parseInt(e.getField("PIXEL")),
                        i = parseInt(e.getField("FLAGFILL")), l = parseInt(e.getField("LINE"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawRect(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_circle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_off, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_flagfill_on, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["64"]}, {type: "text", params: ["32"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null], type: "byrobot_petrone_v2_controller_controller_display_draw_circle"
                },
                paramsKeyMap: {X: 0, Y: 1, RADIUS: 2, PIXEL: 3, FLAGFILL: 4},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = e.getNumberValue("RADIUS"),
                        a = parseInt(e.getField("PIXEL")), s = parseInt(e.getField("FLAGFILL"));
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawCircle(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_string: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["4"]}, {type: "text", params: ["24"]}, null, null, {
                        type: "text",
                        params: ["{Petrone V2}"]
                    }, null], type: "byrobot_petrone_v2_controller_controller_display_draw_string"
                },
                paramsKeyMap: {X: 0, Y: 1, FONT: 2, PIXEL: 3, STRING: 4},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("X"), r = e.getNumberValue("Y"), o = parseInt(e.getField("FONT")),
                        a = parseInt(e.getField("PIXEL")), s = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawString(e, 49, n, r, o, a, s)
                }
            },
            byrobot_petrone_v2_controller_controller_display_draw_string_align: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_align_left, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_center, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_display_align_right, "2"]],
                    value: "0",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_font_5x8, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_font_10x16, "1"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_black, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_display_pixel_white, "1"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["128"]}, {
                        type: "text",
                        params: ["24"]
                    }, null, null, null, {type: "text", params: ["BYROBOT & U"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_display_draw_string_align"
                },
                paramsKeyMap: {XSTART: 0, XEND: 1, Y: 2, ALIGN: 3, FONT: 4, PIXEL: 5, STRING: 6},
                class: "byrobot_petrone_v2_controller_controller_display",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("XSTART"), r = e.getNumberValue("XEND"), o = e.getNumberValue("Y"),
                        a = parseInt(e.getField("ALIGN")), s = parseInt(e.getField("FONT")),
                        i = parseInt(e.getField("PIXEL")), l = e.getStringValue("STRING");
                    return Entry.byrobot_petrone_v2_controller.setDisplayDrawStringAlign(e, 49, n, r, o, a, s, i, l)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_controller.setBuzzerStop(e)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_petrone_v2_controller_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_petrone_v2_controller.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_petrone_v2_controller.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_controller.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_petrone_v2_controller.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_petrone_v2_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_petrone_v2_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_petrone_v2_controller.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_petrone_v2_controller.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_petrone_v2_controller.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_controller.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_petrone_v2_controller_buzzer",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_petrone_v2_controller.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_petrone_v2_controller_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_petrone_v2_controller_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_petrone_v2_controller_vibrator",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    return Entry.byrobot_petrone_v2_controller.setVibratorStop(e)
                }
            },
            byrobot_petrone_v2_controller_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_controller_vibrator",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_controller.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_petrone_v2_controller_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_petrone_v2_controller_vibrator",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_petrone_v2_controller.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_petrone_v2_controller_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_controller_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_controller_vibrator",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_controller.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_petrone_v2_controller_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_petrone_v2_controller_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_petrone_v2_controller_vibrator",
                isNotFor: ["byrobot_petrone_v2_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_petrone_v2_controller.setVibrator(e, n, r, o, !1, !1)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_dronefighter_flight = {
        name: "byrobot_dronefighter_flight",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_dronefighter_flight.png",
        title: {ko: "바이로봇 드론파이터 드론", en: "BYROBOT Drone Fighter flight"},
        setZero: function () {
            for (var t = 0; t < 1; t++) this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0)
        },
        monitorTemplate: {
            imgPath: "hw/byrobot_dronefighter_flight.png",
            width: 500,
            height: 500,
            listPorts: {
                state_modeVehicle: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_modeFlight: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_coordinate: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_battery: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_battery,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_roll: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_roll,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_pitch: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_yaw: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_irdata: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_irmessage,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            },
            ports: {},
            mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferIrMessage: function (t) {
            t = Math.max(t, 0), t = Math.min(t, 127), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("irmessage_data", t), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.irmessage_data
        },
        transferMotorSingle: function (t, e, n) {
            n = Math.max(n, 0), n = Math.min(n, 4096), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("motorsingle_target", t), Entry.hw.setDigitalPortValue("motorsingle_direction", e), Entry.hw.setDigitalPortValue("motorsingle_value", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.motorsingle_target, delete Entry.hw.sendQueue.motorsingle_direction, delete Entry.hw.sendQueue.motorsingle_value
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        transferControlDouble: function (t, e) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, 0), e = Math.min(e, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("control_wheel", t), Entry.hw.setDigitalPortValue("control_accel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_wheel, delete Entry.hw.sendQueue.control_accel
        },
        transferControlQuad: function (t, e, n, r) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, -100), e = Math.min(e, 100), n = Math.max(n, -100), n = Math.min(n, 100), r = Math.max(r, -100), r = Math.min(r, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("control_roll", t), Entry.hw.setDigitalPortValue("control_pitch", e), Entry.hw.setDigitalPortValue("control_yaw", n), Entry.hw.setDigitalPortValue("control_throttle", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_roll, delete Entry.hw.sendQueue.control_pitch, delete Entry.hw.sendQueue.control_yaw, delete Entry.hw.sendQueue.control_throttle
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendIrMessage: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferIrMessage(e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendStop: function (t) {
            return this.sendCommand(t, 16, 36, 0)
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setMotorSingle: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferMotorSingle(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setModeVehicle: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(16, 16, e), this.transferControlQuad(0, 0, 0, 0), this.transferControlDouble(0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setEventFlight: function (t, e, n) {
            switch (this.checkFinish(t, n)) {
                case"Start":
                    return this.transferCommand(16, 34, e), this.transferControlQuad(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendControlQuadSingle: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    return n = Math.max(n, -100), n = Math.min(n, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(e, n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e], t;
                case"Running":
                    return t;
                case"Finish":
                    return o && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(e, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e]), t.callReturn();
                default:
                    return t.callReturn()
            }
        },
        sendControlQuad: function (t, e, n, r, o, a, s) {
            var i = 40;
            switch (s && (i = a), this.checkFinish(t, i)) {
                case"Start":
                    return this.transferControlQuad(e, n, r, o), t;
                case"Running":
                    return t;
                case"Finish":
                    return s && this.transferControlQuad(0, 0, 0, 0), t.callReturn();
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_dronefighter_flight.getBlocks = function () {
        return {
            byrobot_dronefighter_flight_drone_value_attitude: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, "attitude_roll"], [Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, "attitude_pitch"], [Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, "attitude_yaw"]],
                    value: "attitude_roll",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_value_attitude"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_flight_monitor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_flight_drone_value_etc: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, "state_modeVehicle"], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_flight, "state_modeFlight"], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_coordinate, "state_coordinate"], [Lang.Blocks.byrobot_dronefighter_drone_state_battery, "state_battery"], [Lang.Blocks.byrobot_dronefighter_drone_irmessage, "irmessage_irdata"]],
                    value: "irmessage_irdata",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_value_etc"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_flight_monitor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_flight_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, "button_button"], [Lang.Blocks.byrobot_dronefighter_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_flight_monitor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_flight_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, "joystick_left_command"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, "joystick_right_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, "joystick_right_command"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_flight_monitor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_flight_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, "1"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, "2"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, "16"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, "32"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, "64"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, "128"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_dronefighter_flight_boolean_input",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                },
                syntax: {js: [], py: []}
            },
            byrobot_dronefighter_flight_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_dronefighter_flight_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_dronefighter_flight_boolean_input",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_dronefighter_flight_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_controller_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 17, 255, 0)
                }
            },
            byrobot_dronefighter_flight_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, "255"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, "128"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, "64"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, "32"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, "16"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, "8"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, "4"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, "2"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, "1"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, "220"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, "0"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_flight_controller_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_flight_controller_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_flight_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111111"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_dronefighter_flight_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_flight_controller_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_flight_drone_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_drone_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 16, 255, 0)
                }
            },
            byrobot_dronefighter_flight_drone_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, "255"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, "128"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, "64"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, "32"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, "16"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, "8"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, "4"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, "220"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, "0"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_flight_drone_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_flight_drone_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 16, n, r)
                }
            },
            byrobot_dronefighter_flight_drone_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111111"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_dronefighter_flight_drone_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_flight_drone_light",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_dronefighter_flight.setLightManual(e, 16, n, r)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setBuzzerStop(e)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_flight_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_dronefighter_flight.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_dronefighter_flight.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_flight.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_dronefighter_flight.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_flight.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_dronefighter_flight.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_flight_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_dronefighter_flight.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_flight.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_dronefighter_flight_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_flight_buzzer",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_flight.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_dronefighter_flight_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_vibrator",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setVibratorStop(e)
                }
            },
            byrobot_dronefighter_flight_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_flight_vibrator",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_flight.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_dronefighter_flight_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_flight_vibrator",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_flight.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_dronefighter_flight_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_flight_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_flight_vibrator",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_flight.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_flight_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_flight_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_flight_vibrator",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_flight.setVibrator(e, n, r, o, !1, !1)
                }
            },
            byrobot_dronefighter_flight_drone_irmessage: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["100"]}, null],
                    type: "byrobot_dronefighter_flight_drone_irmessage"
                },
                paramsKeyMap: {IRMESSAGE: 0},
                class: "byrobot_dronefighter_flight_irmessage",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getNumberValue("IRMESSAGE", e);
                    return Entry.byrobot_dronefighter_flight.sendIrMessage(e, n)
                }
            },
            byrobot_dronefighter_flight_drone_motor_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_motor_stop"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_motor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.sendStop(e)
                }
            },
            byrobot_dronefighter_flight_drone_motorsingle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_flight_drone_motorsingle"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_dronefighter_flight_motor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_dronefighter_flight.setMotorSingle(e, n, 1, r)
                }
            },
            byrobot_dronefighter_flight_drone_motorsingle_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_flight_drone_motorsingle_input"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_dronefighter_flight_motor",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("MOTORINDEX", e)) - 1,
                        r = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_dronefighter_flight.setMotorSingle(e, n, 1, r)
                }
            },
            byrobot_dronefighter_flight_drone_command_mode_vehicle_drone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_command_mode_vehicle_drone"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setModeVehicle(e, 16)
                }
            },
            byrobot_dronefighter_flight_drone_control_drone_takeoff: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_control_drone_takeoff"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setEventFlight(e, 17, 200)
                }
            },
            byrobot_dronefighter_flight_drone_control_drone_landing: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_control_drone_landing"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.setEventFlight(e, 18, 200)
                }
            },
            byrobot_dronefighter_flight_drone_control_drone_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_control_drone_stop"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.sendStop(e)
                }
            },
            byrobot_dronefighter_flight_drone_control_coordinate: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_coordinate_world, "1"], [Lang.Blocks.byrobot_dronefighter_drone_coordinate_local, "2"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_dronefighter_flight_drone_control_coordinate"},
                paramsKeyMap: {COORDINATE: 0},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getField("COORDINATE");
                    return Entry.byrobot_dronefighter_flight.sendCommand(e, 16, 32, n)
                }
            },
            byrobot_dronefighter_flight_drone_control_drone_reset_heading: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_flight_drone_control_drone_reset_heading"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_flight.sendCommand(e, 16, 34, 160)
                }
            },
            byrobot_dronefighter_flight_drone_control_quad_one: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_control_quad_roll, "control_roll"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_pitch, "control_pitch"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_yaw, "control_yaw"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_throttle, "control_throttle"]],
                    value: "control_throttle",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, null],
                    type: "byrobot_dronefighter_flight_drone_control_quad_one"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e));
                    return Entry.byrobot_dronefighter_flight.sendControlQuadSingle(e, n, r, 0, !1)
                }
            },
            byrobot_dronefighter_flight_drone_control_quad_one_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_control_quad_roll, "control_roll"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_pitch, "control_pitch"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_yaw, "control_yaw"], [Lang.Blocks.byrobot_dronefighter_drone_control_quad_throttle, "control_throttle"]],
                    value: "control_throttle",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["1"]}, null],
                    type: "byrobot_dronefighter_flight_drone_control_quad_one_delay"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1, TIME: 2},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e)),
                        o = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_dronefighter_flight.sendControlQuadSingle(e, n, r, o, !0)
                }
            },
            byrobot_dronefighter_flight_drone_control_quad: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["0"]}, null], type: "byrobot_dronefighter_flight_drone_control_quad"
                },
                paramsKeyMap: {ROLL: 0, PITCH: 1, YAW: 2, THROTTLE: 3},
                class: "byrobot_dronefighter_flight_control_flight",
                isNotFor: ["byrobot_dronefighter_flight"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("ROLL", e)), r = parseInt(e.getNumberValue("PITCH", e)),
                        o = parseInt(e.getNumberValue("YAW", e)), a = parseInt(e.getNumberValue("THROTTLE", e));
                    return Entry.byrobot_dronefighter_flight.sendControlQuad(e, n, r, o, a, 0, !1)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_dronefighter_drive = {
        name: "byrobot_dronefighter_drive",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_dronefighter_drive.png",
        title: {ko: "바이로봇 드론파이터 자동차", en: "BYROBOT Drone Fighter drive"},
        setZero: function () {
            for (var t = 0; t < 1; t++) this.transferCommand(16, 36, 0), this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(16, 255, 0), this.transferLightManual(17, 255, 0)
        },
        monitorTemplate: {
            imgPath: "hw/byrobot_dronefighter_drive.png",
            width: 500,
            height: 500,
            listPorts: {
                state_modeVehicle: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_modeDrive: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                state_battery: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_state_battery,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_roll: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_roll,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_pitch: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                attitude_yaw: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                irmessage_irdata: {
                    name: Lang.Blocks.byrobot_dronefighter_drone_irmessage,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            },
            ports: {},
            mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferIrMessage: function (t) {
            t = Math.max(t, 0), t = Math.min(t, 127), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("irmessage_data", t), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.irmessage_data
        },
        transferMotorSingle: function (t, e, n) {
            n = Math.max(n, 0), n = Math.min(n, 4096), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("motorsingle_target", t), Entry.hw.setDigitalPortValue("motorsingle_direction", e), Entry.hw.setDigitalPortValue("motorsingle_value", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.motorsingle_target, delete Entry.hw.sendQueue.motorsingle_direction, delete Entry.hw.sendQueue.motorsingle_value
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        transferControlDouble: function (t, e) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, 0), e = Math.min(e, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("control_wheel", t), Entry.hw.setDigitalPortValue("control_accel", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_wheel, delete Entry.hw.sendQueue.control_accel
        },
        transferControlQuad: function (t, e, n, r) {
            t = Math.max(t, -100), t = Math.min(t, 100), e = Math.max(e, -100), e = Math.min(e, 100), n = Math.max(n, -100), n = Math.min(n, 100), r = Math.max(r, -100), r = Math.min(r, 100), Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue("control_roll", t), Entry.hw.setDigitalPortValue("control_pitch", e), Entry.hw.setDigitalPortValue("control_yaw", n), Entry.hw.setDigitalPortValue("control_throttle", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.control_roll, delete Entry.hw.sendQueue.control_pitch, delete Entry.hw.sendQueue.control_yaw, delete Entry.hw.sendQueue.control_throttle
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendIrMessage: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferIrMessage(e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendStop: function (t) {
            return this.sendCommand(t, 16, 36, 0)
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setMotorSingle: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferMotorSingle(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setModeVehicle: function (t, e) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(16, 16, e), this.transferControlDouble(0, 0), this.transferControlQuad(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendControlDoubleSingle: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    switch (e) {
                        case"control_wheel":
                            n = Math.max(n, -100), n = Math.min(n, 100);
                            break;
                        case"control_accel":
                            n = Math.max(n, 0), n = Math.min(n, 100)
                    }
                    return Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(e, n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e], t;
                case"Running":
                    return t;
                case"Finish":
                    return o && (Entry.hw.setDigitalPortValue("target", 16), Entry.hw.setDigitalPortValue(e, 0), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue[e]), t.callReturn();
                default:
                    return t.callReturn()
            }
        },
        sendControlDouble: function (t, e, n, r, o) {
            var a = 40;
            switch (o && (a = r), this.checkFinish(t, a)) {
                case"Start":
                    return this.transferControlDouble(e, n), t;
                case"Running":
                    return t;
                case"Finish":
                    return o && this.transferControlDouble(0, 0), t.callReturn();
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_dronefighter_drive.getBlocks = function () {
        return {
            byrobot_dronefighter_drive_drone_value_attitude: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_attitude_roll, "attitude_roll"], [Lang.Blocks.byrobot_dronefighter_drone_attitude_pitch, "attitude_pitch"], [Lang.Blocks.byrobot_dronefighter_drone_attitude_yaw, "attitude_yaw"]],
                    value: "attitude_roll",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_drone_value_attitude"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_drive_monitor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_drive_drone_value_etc: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_state_mode_vehicle, "state_modeVehicle"], [Lang.Blocks.byrobot_dronefighter_drone_state_mode_drive, "state_modeDrive"], [Lang.Blocks.byrobot_dronefighter_drone_state_battery, "state_battery"], [Lang.Blocks.byrobot_dronefighter_drone_irmessage, "irmessage_irdata"]],
                    value: "irmessage_irdata",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_drone_value_etc"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_drive_monitor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_drive_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, "button_button"], [Lang.Blocks.byrobot_dronefighter_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_drive_monitor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_drive_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, "joystick_left_command"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, "joystick_right_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, "joystick_right_command"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_drive_monitor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_drive_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, "1"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, "2"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, "16"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, "32"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, "64"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, "128"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_dronefighter_drive_boolean_input",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                },
                syntax: {js: [], py: []}
            },
            byrobot_dronefighter_drive_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_dronefighter_drive_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_dronefighter_drive_boolean_input",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_dronefighter_drive_drone_control_car_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_drone_control_car_stop"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_control_drive",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.sendStop(e)
                }
            },
            byrobot_dronefighter_drive_drone_control_double_one: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_control_double_wheel, "control_wheel"], [Lang.Blocks.byrobot_dronefighter_drone_control_double_accel_forward, "control_accel"]],
                    value: "control_accel",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, null],
                    type: "byrobot_dronefighter_drive_drone_control_double_one"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1},
                class: "byrobot_dronefighter_drive_control_drive",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e));
                    return Entry.byrobot_dronefighter_drive.sendControlDoubleSingle(e, n, r, 0, !1)
                }
            },
            byrobot_dronefighter_drive_drone_control_double_one_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_drone_control_double_wheel, "control_wheel"], [Lang.Blocks.byrobot_dronefighter_drone_control_double_accel_forward, "control_accel"]],
                    value: "control_accel",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["100"]}, {type: "number", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_drone_control_double_one_delay"
                },
                paramsKeyMap: {CONTROLTARGET: 0, VALUE: 1, TIME: 2},
                class: "byrobot_dronefighter_drive_control_drive",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = e.getField("CONTROLTARGET"), r = parseInt(e.getNumberValue("VALUE", e)),
                        o = parseInt(1e3 * e.getNumberValue("TIME", e));
                    return Entry.byrobot_dronefighter_drive.sendControlDoubleSingle(e, n, r, o, !0)
                }
            },
            byrobot_dronefighter_drive_drone_control_double: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, null],
                    type: "byrobot_dronefighter_drive_drone_control_double"
                },
                paramsKeyMap: {WHEEL: 0, ACCEL: 1},
                class: "byrobot_dronefighter_drive_control_drive",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("WHEEL", e)), r = parseInt(e.getNumberValue("ACCEL", e));
                    return Entry.byrobot_dronefighter_drive.sendControlDouble(e, n, r, 0, !1)
                }
            },
            byrobot_dronefighter_drive_drone_motor_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_drone_motor_stop"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_motor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.sendStop(e)
                }
            },
            byrobot_dronefighter_drive_drone_motorsingle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["1", "0"], ["2", "1"], ["3", "2"], ["4", "3"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_drive_drone_motorsingle"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_dronefighter_drive_motor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("MOTORINDEX")), r = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_dronefighter_drive.setMotorSingle(e, n, 1, r)
                }
            },
            byrobot_dronefighter_drive_drone_motorsingle_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, {type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_drive_drone_motorsingle_input"
                },
                paramsKeyMap: {MOTORINDEX: 0, MOTORSPEED: 1},
                class: "byrobot_dronefighter_drive_motor",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("MOTORINDEX", e)) - 1,
                        r = parseInt(e.getNumberValue("MOTORSPEED", e));
                    return Entry.byrobot_dronefighter_drive.setMotorSingle(e, n, 1, r)
                }
            },
            byrobot_dronefighter_drive_drone_irmessage: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["100"]}, null],
                    type: "byrobot_dronefighter_drive_drone_irmessage"
                },
                paramsKeyMap: {IRMESSAGE: 0},
                class: "byrobot_dronefighter_drive_irmessage",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("IRMESSAGE", e);
                    return Entry.byrobot_dronefighter_drive.sendIrMessage(e, n)
                }
            },
            byrobot_dronefighter_drive_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_controller_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 17, 255, 0)
                }
            },
            byrobot_dronefighter_drive_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, "255"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, "128"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, "64"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, "32"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, "16"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, "8"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, "4"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, "2"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, "1"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, "220"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, "0"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_drive_controller_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_drive_controller_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_drive_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111111"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_dronefighter_drive_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_drive_controller_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_drive_drone_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_drone_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_drone_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 16, 255, 0)
                }
            },
            byrobot_dronefighter_drive_drone_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, "255"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, "128"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, "64"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, "32"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, "16"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, "8"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, "4"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, "220"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, "0"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_drive_drone_light_manual_single"},
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_drive_drone_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 16, n, r)
                }
            },
            byrobot_dronefighter_drive_drone_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111111"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_dronefighter_drive_drone_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_drive_drone_light",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_dronefighter_drive.setLightManual(e, 16, n, r)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.setBuzzerStop(e)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_drive_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_dronefighter_drive.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_dronefighter_drive.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_drive.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_dronefighter_drive.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_drive.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_dronefighter_drive.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_drive_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_dronefighter_drive.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_drive.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_dronefighter_drive_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_drive_buzzer",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_drive.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_dronefighter_drive_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_drive_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_drive_vibrator",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_drive.setVibratorStop(e)
                }
            },
            byrobot_dronefighter_drive_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_drive_vibrator",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_drive.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_dronefighter_drive_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_drive_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_drive_vibrator",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_drive.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_dronefighter_drive_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_drive_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_drive_vibrator",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_drive.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_drive_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_drive_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_drive_vibrator",
                isNotFor: ["byrobot_dronefighter_drive"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_drive.setVibrator(e, n, r, o, !1, !1)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.byrobot_dronefighter_controller = {
        name: "byrobot_dronefighter_controller",
        url: "http://www.byrobot.co.kr/",
        imageName: "byrobot_dronefighter_controller.png",
        title: {ko: "바이로봇 드론파이터 조종기", en: "BYROBOT Drone Fighter controller"},
        setZero: function () {
            for (var t = 0; t < 1; t++) this.transferVibrator(0, 0, 0, 0), this.transferbuzzer(0, 0, 0), this.transferLightManual(17, 255, 0), this.transferCommand(17, 129, 0)
        },
        monitorTemplate: {
            imgPath: "hw/byrobot_dronefighter_controller.png",
            width: 500,
            height: 500,
            listPorts: {
                joystick_left_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_left_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_x: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_y: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_direction: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                joystick_right_command: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_button: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_button,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                button_event: {
                    name: Lang.Blocks.byrobot_dronefighter_controller_button_event,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                entryhw_countTransferReserved: {
                    name: Lang.Blocks.byrobot_dronefighter_entryhw_count_transfer_reserved,
                    type: "output",
                    pos: {x: 0, y: 0}
                }
            },
            ports: {},
            mode: "both"
        },
        checkFinish: function (t, e) {
            if (t.isStart) return 1 == t.timeFlag ? "Running" : (delete t.timeFlag, delete t.isStart, Entry.engine.isContinue = !1, "Finish");
            t.isStart = !0, t.timeFlag = 1;
            var n = Entry.FPS || 60;
            return setTimeout(function () {
                t.timeFlag = 0
            }, 60 / n * e), "Start"
        },
        transferLightManual: function (t, e, n) {
            t = Math.max(t, 0), t = Math.min(t, 255), e = Math.max(e, 0), e = Math.min(e, 255), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("light_manual_flags", e), Entry.hw.setDigitalPortValue("light_manual_brightness", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.light_manual_flags, delete Entry.hw.sendQueue.light_manual_brightness
        },
        transferbuzzer: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("buzzer_mode", t), Entry.hw.setDigitalPortValue("buzzer_value", e), Entry.hw.setDigitalPortValue("buzzer_time", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.buzzer_mode, delete Entry.hw.sendQueue.buzzer_value, delete Entry.hw.sendQueue.buzzer_time
        },
        transferVibrator: function (t, e, n, r) {
            e = Math.max(e, 1), e = Math.min(e, 6e4), n = Math.max(n, 1), n = Math.min(n, 6e4), Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("vibrator_mode", t), Entry.hw.setDigitalPortValue("vibrator_on", e), Entry.hw.setDigitalPortValue("vibrator_off", n), Entry.hw.setDigitalPortValue("vibrator_total", r), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.vibrator_mode, delete Entry.hw.sendQueue.vibrator_on, delete Entry.hw.sendQueue.vibrator_off, delete Entry.hw.sendQueue.vibrator_total
        },
        transferCommand: function (t, e, n) {
            Entry.hw.setDigitalPortValue("target", t), Entry.hw.setDigitalPortValue("command_command", e), Entry.hw.setDigitalPortValue("command_option", n), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.command_command, delete Entry.hw.sendQueue.command_option
        },
        transferUserInterface: function (t, e) {
            Entry.hw.setDigitalPortValue("target", 17), Entry.hw.setDigitalPortValue("userinterface_command", t), Entry.hw.setDigitalPortValue("userinterface_function", e), Entry.hw.update(), delete Entry.hw.sendQueue.target, delete Entry.hw.sendQueue.userinterface_command, delete Entry.hw.sendQueue.userinterface_function
        },
        getData: function (t, e) {
            return Entry.hw.portData[e]
        },
        setLightManual: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferLightManual(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferbuzzer(0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerMute: function (t, e, n, r) {
            e = Math.max(e, 0), e = Math.min(e, 6e4);
            var o = 40;
            switch (n && (o = e), this.checkFinish(t, o)) {
                case"Start":
                    var a = 2;
                    return r && (a = 1), this.transferbuzzer(a, 238, e), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerScale: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 4;
                    a && (i = 3);
                    var l = 12 * e + n;
                    return this.transferbuzzer(i, l, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setBuzzerHz: function (t, e, n, r, o) {
            n = Math.max(n, 0), n = Math.min(n, 6e4);
            var a = 40;
            switch (r && (a = n), this.checkFinish(t, a)) {
                case"Start":
                    var s = 6;
                    return o && (s = 5), e = Math.max(e, 1), e = Math.min(e, 63999), this.transferbuzzer(s, e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibratorStop: function (t) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferVibrator(0, 0, 0, 0), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setVibrator: function (t, e, n, r, o, a) {
            r = Math.max(r, 0), r = Math.min(r, 6e4);
            var s = 40;
            switch (o && (s = r), this.checkFinish(t, s)) {
                case"Start":
                    var i = 2;
                    return a && (i = 1), this.transferVibrator(i, e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        sendCommand: function (t, e, n, r) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferCommand(e, n, r), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        },
        setUserInterface: function (t, e, n) {
            switch (this.checkFinish(t, 40)) {
                case"Start":
                    return this.transferUserInterface(e, n), t;
                case"Running":
                    return t;
                case"Finish":
                default:
                    return t.callReturn()
            }
        }
    }, Entry.byrobot_dronefighter_controller.getBlocks = function () {
        return {
            byrobot_dronefighter_controller_controller_value_button: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_button, "button_button"], [Lang.Blocks.byrobot_dronefighter_controller_button_event, "button_event"]],
                    value: "button_button",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_value_button"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_controller_monitor",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_controller_controller_value_joystick: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_left_x, "joystick_left_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_y, "joystick_left_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_direction, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_event, "joystick_left_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_left_command, "joystick_left_command"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_x, "joystick_right_x"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_y, "joystick_right_y"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_direction, "joystick_right_direction"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_event, "joystick_right_event"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_right_command, "joystick_right_command"]],
                    value: "joystick_left_x",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_value_joystick"},
                paramsKeyMap: {DEVICE: 0},
                class: "byrobot_dronefighter_controller_monitor",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                }
            },
            byrobot_dronefighter_controller_controller_if_button_press: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_button_front_left, "1"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_right, "2"], [Lang.Blocks.byrobot_dronefighter_controller_button_front_left_right, "3"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_left, "4"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up_right, "8"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_up, "16"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_left, "32"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_right, "64"], [Lang.Blocks.byrobot_dronefighter_controller_button_center_down, "128"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left, "256"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_right, "512"], [Lang.Blocks.byrobot_dronefighter_controller_button_bottom_left_right, "768"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_if_button_press"},
                paramsKeyMap: {BUTTON: 0},
                class: "byrobot_dronefighter_controller_boolean_input",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.button_button == e.getField("BUTTON") && 2 == n.button_event
                }
            },
            byrobot_dronefighter_controller_controller_if_joystick_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_left, "joystick_left_direction"], [Lang.Blocks.byrobot_dronefighter_common_right, "joystick_right_direction"]],
                    value: "joystick_left_direction",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_up, "17"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_up, "18"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_up, "20"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left, "33"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_center, "34"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right, "36"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_left_down, "65"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_down, "66"], [Lang.Blocks.byrobot_dronefighter_controller_joystick_direction_right_down, "68"]],
                    value: "34",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null, null], type: "byrobot_dronefighter_controller_controller_if_joystick_direction"},
                paramsKeyMap: {DEVICE: 0, DIRECTION: 1},
                class: "byrobot_dronefighter_controller_boolean_input",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")] == e.getField("DIRECTION")
                }
            },
            byrobot_dronefighter_controller_controller_light_manual_single_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_light_manual_single_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_controller_controller_light",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_controller.setLightManual(e, 17, 255, 0)
                }
            },
            byrobot_dronefighter_controller_controller_light_manual_single: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_all, "255"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_1, "128"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_2, "64"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_3, "32"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_4, "16"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_5, "8"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_6, "4"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_blue, "2"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_red, "1"]],
                    value: "128",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_common_light_manual_on, "220"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_off, "0"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b25, "75"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b50, "125"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b75, "200"], [Lang.Blocks.byrobot_dronefighter_common_light_manual_b100, "255"]],
                    value: "220",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, null],
                    type: "byrobot_dronefighter_controller_controller_light_manual_single"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_controller_controller_light",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("FLAGS")), r = parseInt(e.getField("BRIGHTNESS"));
                    return Entry.byrobot_dronefighter_controller.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_controller_controller_light_manual_single_input: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0b11111111"]}, {type: "text", params: ["255"]}, null],
                    type: "byrobot_dronefighter_controller_controller_light_manual_single_input"
                },
                paramsKeyMap: {FLAGS: 0, BRIGHTNESS: 1},
                class: "byrobot_dronefighter_controller_controller_light",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = e.getNumberValue("FLAGS"), r = e.getNumberValue("BRIGHTNESS");
                    return Entry.byrobot_dronefighter_controller.setLightManual(e, 17, n, r)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_buzzer_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_controller.setBuzzerStop(e)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_scale: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_controller_controller_buzzer_scale"},
                paramsKeyMap: {OCTAVE: 0, SCALE: 1},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE"));
                    return -1 == r ? Entry.byrobot_dronefighter_controller.setBuzzerMute(e, 6e4, !1, !0) : Entry.byrobot_dronefighter_controller.setBuzzerScale(e, n, r, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_scale_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_buzzer_scale_delay"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_controller.setBuzzerMute(e, o, !0, !0) : Entry.byrobot_dronefighter_controller.setBuzzerScale(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_scale_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["4", "3"], ["5", "4"], ["6", "5"], ["7", "6"], ["8", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_buzzer_mute, "-1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_c, "0"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_cs, "1"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_d, "2"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_ds, "3"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_e, "4"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_f, "5"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_fs, "6"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_g, "7"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_gs, "8"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_a, "9"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_as, "10"], [Lang.Blocks.byrobot_dronefighter_controller_buzzer_b, "11"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, null, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_buzzer_scale_reserve"
                },
                paramsKeyMap: {OCTAVE: 0, SCALE: 1, TIME: 2},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("OCTAVE")), r = parseInt(e.getField("SCALE")),
                        o = parseInt(1e3 * e.getNumberValue("TIME"));
                    return -1 == r ? Entry.byrobot_dronefighter_controller.setBuzzerMute(e, o, !1, !1) : Entry.byrobot_dronefighter_controller.setBuzzerScale(e, n, r, o, !1, !1)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_hz: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, null],
                    type: "byrobot_dronefighter_controller_controller_buzzer_hz"
                },
                paramsKeyMap: {HZ: 0},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e));
                    return Entry.byrobot_dronefighter_controller.setBuzzerHz(e, n, 6e4, !1, !0)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_hz_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_buzzer_hz_delay"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_controller.setBuzzerHz(e, n, r, !0, !0)
                }
            },
            byrobot_dronefighter_controller_controller_buzzer_hz_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1000"]}, {type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_buzzer_hz_reserve"
                },
                paramsKeyMap: {HZ: 0, TIME: 1},
                class: "byrobot_dronefighter_controller_buzzer",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getNumberValue("HZ", e)), r = parseInt(1e3 * e.getNumberValue("TIME"));
                    return Entry.byrobot_dronefighter_controller.setBuzzerHz(e, n, r, !1, !1)
                }
            },
            byrobot_dronefighter_controller_controller_vibrator_off: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "byrobot_dronefighter_controller_controller_vibrator_off"},
                paramsKeyMap: {},
                class: "byrobot_dronefighter_controller_vibrator",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    return Entry.byrobot_dronefighter_controller.setVibratorStop(e)
                }
            },
            byrobot_dronefighter_controller_controller_vibrator_on_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_vibrator_on_delay"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_controller_vibrator",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_controller.setVibrator(e, n, 0, n, !0, !0)
                }
            },
            byrobot_dronefighter_controller_controller_vibrator_on_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["1"]}, null],
                    type: "byrobot_dronefighter_controller_controller_vibrator_on_reserve"
                },
                paramsKeyMap: {TIMEON: 0},
                class: "byrobot_dronefighter_controller_vibrator",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON"));
                    return Entry.byrobot_dronefighter_controller.setVibrator(e, n, 0, n, !1, !1)
                }
            },
            byrobot_dronefighter_controller_controller_vibrator_delay: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_controller_controller_vibrator_delay"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_controller_vibrator",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_controller.setVibrator(e, n, r, o, !0, !0)
                }
            },
            byrobot_dronefighter_controller_controller_vibrator_reserve: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0.02"]}, {type: "text", params: ["0.2"]}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "byrobot_dronefighter_controller_controller_vibrator_reserve"
                },
                paramsKeyMap: {TIMEON: 0, TIMEOFF: 1, TIMERUN: 2},
                class: "byrobot_dronefighter_controller_vibrator",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(1e3 * e.getNumberValue("TIMEON")), r = parseInt(1e3 * e.getNumberValue("TIMEOFF")),
                        o = parseInt(1e3 * e.getNumberValue("TIMERUN"));
                    return Entry.byrobot_dronefighter_controller.setVibrator(e, n, r, o, !1, !1)
                }
            },
            byrobot_dronefighter_controller_controller_userinterface_preset: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_clear, "1"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_dronefighter2017, "3"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_preset_education, "4"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "byrobot_dronefighter_controller_controller_userinterface_preset"},
                paramsKeyMap: {PRESET: 0},
                class: "byrobot_dronefighter_controller_userinterface",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("PRESET"));
                    return Entry.byrobot_dronefighter_controller.sendCommand(e, 17, 128, n)
                }
            },
            byrobot_dronefighter_controller_controller_userinterface: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_frontleft_down, "1"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_frontright_down, "2"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midturnleft_down, "3"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midturnright_down, "4"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midup_down, "5"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midleft_down, "6"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_midright_down, "7"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_button_middown_down, "8"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_up_in, "9"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_left_in, "10"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_right_in, "11"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_left_down_in, "12"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_up_in, "13"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_left_in, "14"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_right_in, "15"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_command_setup_joystick_right_down_in, "16"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_joystickcalibration_reset, "1"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_team_red, "2"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_team_blue, "3"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flight, "4"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_flightnoguard, "5"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_vehicle_drive, "6"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_coordinate_local, "7"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_coordinate_world, "8"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode1, "9"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode2, "10"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode3, "11"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_control_mode4, "12"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_gyrobias_reset, "13"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_usb_cdc, "14"], [Lang.Blocks.byrobot_dronefighter_controller_userinterface_function_change_mode_usb_hid, "15"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "byrobot_dronefighter_controller_controller_userinterface"},
                paramsKeyMap: {COMMAND: 0, FUNCTION: 1},
                class: "byrobot_dronefighter_controller_userinterface",
                isNotFor: ["byrobot_dronefighter_controller"],
                func: function (t, e) {
                    var n = parseInt(e.getField("COMMAND")), r = parseInt(e.getField("FUNCTION"));
                    return Entry.byrobot_dronefighter_controller.setUserInterface(e, n, r)
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.Blacksmith = {
        name: "blacksmith",
        url: "http://www.hanibot.com",
        imageName: "blacksmith.png",
        title: {ko: "대장장이 보드", en: "Blacksmith Board"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        toByte: function (t) {
            switch (t) {
                case" ":
                    t = 32;
                    break;
                case"!":
                    t = 33;
                    break;
                case'"':
                    t = 34;
                    break;
                case"#":
                    t = 35;
                    break;
                case"$":
                    t = 36;
                    break;
                case"%":
                    t = 37;
                    break;
                case"&":
                    t = 38;
                    break;
                case"'":
                    t = 39;
                    break;
                case"(":
                    t = 40;
                    break;
                case")":
                    t = 41;
                    break;
                case"*":
                    t = 42;
                    break;
                case"+":
                    t = 43;
                    break;
                case",":
                    t = 44;
                    break;
                case"-":
                    t = 45;
                    break;
                case".":
                    t = 46;
                    break;
                case"/":
                    t = 47;
                    break;
                case"0":
                    t = 48;
                    break;
                case"1":
                    t = 49;
                    break;
                case"2":
                    t = 50;
                    break;
                case"3":
                    t = 51;
                    break;
                case"4":
                    t = 52;
                    break;
                case"5":
                    t = 53;
                    break;
                case"6":
                    t = 54;
                    break;
                case"7":
                    t = 55;
                    break;
                case"8":
                    t = 56;
                    break;
                case"9":
                    t = 57;
                    break;
                case":":
                    t = 58;
                    break;
                case";":
                    t = 59;
                    break;
                case"<":
                    t = 60;
                    break;
                case"=":
                    t = 61;
                    break;
                case">":
                    t = 62;
                    break;
                case"?":
                    t = 63;
                    break;
                case"@":
                    t = 64;
                    break;
                case"A":
                    t = 65;
                    break;
                case"B":
                    t = 66;
                    break;
                case"C":
                    t = 67;
                    break;
                case"D":
                    t = 68;
                    break;
                case"E":
                    t = 69;
                    break;
                case"F":
                    t = 70;
                    break;
                case"G":
                    t = 71;
                    break;
                case"H":
                    t = 72;
                    break;
                case"I":
                    t = 73;
                    break;
                case"J":
                    t = 74;
                    break;
                case"K":
                    t = 75;
                    break;
                case"L":
                    t = 76;
                    break;
                case"M":
                    t = 77;
                    break;
                case"N":
                    t = 78;
                    break;
                case"O":
                    t = 79;
                    break;
                case"P":
                    t = 80;
                    break;
                case"Q":
                    t = 81;
                    break;
                case"R":
                    t = 82;
                    break;
                case"S":
                    t = 83;
                    break;
                case"T":
                    t = 84;
                    break;
                case"U":
                    t = 85;
                    break;
                case"V":
                    t = 86;
                    break;
                case"W":
                    t = 87;
                    break;
                case"X":
                    t = 88;
                    break;
                case"Y":
                    t = 89;
                    break;
                case"Z":
                    t = 90;
                    break;
                case"[":
                    t = 91;
                    break;
                case"\\":
                    t = 92;
                    break;
                case"]":
                    t = 93;
                    break;
                case"^":
                    t = 94;
                    break;
                case"_":
                    t = 95;
                    break;
                case"`":
                    t = 96;
                    break;
                case"a":
                    t = 97;
                    break;
                case"b":
                    t = 98;
                    break;
                case"c":
                    t = 99;
                    break;
                case"d":
                    t = 100;
                    break;
                case"e":
                    t = 101;
                    break;
                case"f":
                    t = 102;
                    break;
                case"g":
                    t = 103;
                    break;
                case"h":
                    t = 104;
                    break;
                case"i":
                    t = 105;
                    break;
                case"j":
                    t = 106;
                    break;
                case"k":
                    t = 107;
                    break;
                case"l":
                    t = 108;
                    break;
                case"m":
                    t = 109;
                    break;
                case"n":
                    t = 110;
                    break;
                case"o":
                    t = 111;
                    break;
                case"p":
                    t = 112;
                    break;
                case"q":
                    t = 113;
                    break;
                case"r":
                    t = 114;
                    break;
                case"s":
                    t = 115;
                    break;
                case"t":
                    t = 116;
                    break;
                case"u":
                    t = 117;
                    break;
                case"v":
                    t = 118;
                    break;
                case"w":
                    t = 119;
                    break;
                case"x":
                    t = 120;
                    break;
                case"y":
                    t = 121;
                    break;
                case"z":
                    t = 122;
                    break;
                case"{":
                    t = 123;
                    break;
                case"|":
                    t = 124;
                    break;
                case"}":
                    t = 125;
                    break;
                case"~":
                    t = 126
            }
            return t
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            rxBLUETOOTH: 9,
            LCD: 10,
            txBLUETOOTH: 11
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.Blacksmith.getBlocks = function () {
        return {
            blacksmith_list_analog_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                }
            },
            blacksmith_list_digital_basic: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"]],
                    value: "10",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            blacksmith_list_digital_octave: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                }
            },
            blacksmith_list_digital_pwm: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["~6", "6"], ["~9", "9"], ["~10", "10"], ["~11", "11"]],
                    value: "10",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                }
            },
            blacksmith_list_digital_toggle: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.blacksmith_toggle_on, "on"], [Lang.Blocks.blacksmith_toggle_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OPERATOR: 0},
                func: function (t, e) {
                    return e.getStringField("OPERATOR")
                }
            },
            blacksmith_list_digital_tone: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                }
            },
            blacksmith_list_digital_lcd: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.blacksmith_lcd_first_line, "0"], [Lang.Blocks.blacksmith_lcd_seconds_line, "1"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LINE: 0},
                func: function (t, e) {
                    return e.getField("LINE")
                }
            },
            blacksmith_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: Lang.template.blacksmith_get_analog_value,
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "blacksmith_list_analog_basic"}], type: "blacksmith_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "blacksmithGet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: ["blacksmith.get_analog_value(%1)"]}
            },
            blacksmith_get_analog_mapping: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: Lang.template.blacksmith_get_analog_mapping,
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_analog_basic"}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1023"]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["100"]}],
                    type: "blacksmith_get_analog_mapping"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "blacksmithGet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = 0, o = Entry.hw.portData.ANALOG,
                        a = e.getNumberValue("VALUE2", e), s = e.getNumberValue("VALUE3", e),
                        i = e.getNumberValue("VALUE4", e), l = e.getNumberValue("VALUE5", e);
                    if ("A" === n[0] && (n = n.substring(1)), r = o && o[n] || 0, a > s) {
                        var c = a;
                        a = s, s = c
                    }
                    return i > l && (c = i, i = l, l = c), r -= a, r *= (l - i) / (s - a), r += i, r = Math.min(l, r), Math.max(i, r)
                },
                syntax: {js: [], py: ["blacksmith.get_analog_mapping(%1, %2, %3, %4, %5)"]}
            },
            blacksmith_get_digital_bluetooth: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: Lang.template.blacksmith_get_digital_bluetooth,
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "blacksmith_get_digital_bluetooth"},
                paramsKeyMap: {},
                class: "blacksmithGet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[2], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.Blacksmith.sensorTypes.rxBLUETOOTH] = {
                        port: 2,
                        time: (new Date).getTime()
                    }, Entry.hw.portData.rxBLUETOOTH || 0
                },
                syntax: {js: [], py: ["blacksmith.get_digital_bluetooth()"]}
            },
            blacksmith_get_digital_ultrasonic: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                template: Lang.template.blacksmith_get_digital_ultrasonic,
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "text", params: ["4"]}, {type: "text", params: ["5"]}],
                    type: "blacksmith_get_digital_ultrasonic"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "blacksmithGet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1"), r = e.getNumberValue("PORT2");
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.Blacksmith.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {js: [], py: ["blacksmith.get_digital_ultrasonic(%1, %2)"]}
            },
            blacksmith_get_digital_toggle: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: Lang.template.blacksmith_get_digital_toggle,
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "blacksmith_list_digital_basic"}], type: "blacksmith_get_digital_toggle"},
                paramsKeyMap: {PORT: 0},
                class: "blacksmithGet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.Blacksmith.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                },
                syntax: {js: [], py: ["blacksmith.get_digital_toggle(%1)"]}
            },
            blacksmith_set_digital_toggle: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                template: Lang.template.blacksmith_set_digital_toggle,
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_digital_basic"}, {type: "blacksmith_list_digital_toggle"}, null],
                    type: "blacksmith_set_digital_toggle"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.Blacksmith.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.Blacksmith.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["blacksmith.set_digital_toggle(%1, %2)"]}
            },
            blacksmith_set_digital_pwm: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                template: Lang.template.blacksmith_set_digital_pwm,
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_digital_pwm"}, {type: "text", params: ["255"]}, null],
                    type: "blacksmith_set_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.min(r, 255), r = Math.max(r, 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["blacksmith.set_digital_pwm(%1, %2)"]}
            },
            blacksmith_set_digital_servo: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                template: Lang.template.blacksmith_set_digital_servo,
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_digital_basic"}, {type: "text", params: ["90"]}, null],
                    type: "blacksmith_set_digital_servo"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.min(r, 180), r = Math.max(r, 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.SERVO,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: ["blacksmith.set_digital_servo(%1, %2)"]}
            },
            blacksmith_set_digital_buzzer: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                statements: [],
                template: Lang.template.blacksmith_set_digital_buzzer,
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_digital_basic"}, {type: "blacksmith_list_digital_tone"}, {type: "blacksmith_list_digital_octave"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "blacksmith_set_digital_buzzer"
                },
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("DURATION"),
                        o = e.getNumberValue("OCTAVE") - 1, a = 0;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var s = e.getValue("NOTE");
                    return Entry.Utils.isNumber(s) || (s = Entry.Blacksmith.toneTable[s]), s < 0 ? s = 0 : s > 12 && (s = 12), r < 0 && (r = 0), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), 0 === r ? (Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn()) : (o < 0 ? o = 0 : o > 8 && (o = 8), 0 != s && (a = Entry.Blacksmith.toneMap[s][o]), r *= 1e3, e.isStart = !0, e.timeFlag = 1, Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.TONE,
                        data: {value: a, duration: r},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, r + 32), e)
                },
                syntax: {js: [], py: ["blacksmith.set_digital_toggle(%1, %2, %3, %4)"]}
            },
            blacksmith_set_digital_lcd: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: Lang.template.blacksmith_set_digital_lcd,
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "blacksmith_list_digital_lcd"}, {type: "text", params: ["My Entry!!"]}, null],
                    type: "blacksmith_set_digital_lcd"
                },
                paramsKeyMap: {LINE: 0, STRING: 1},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getNumberValue("LINE"), r = e.getValue("STRING"), o = [];
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    if ("string" == typeof r) for (var a = 0; a < r.length; a++) o[a] = Entry.Blacksmith.toByte(r[a]); else "number" == typeof r ? (o[0] = 1, o[1] = r / 1) : o[0] = r;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var s = 60 / (Entry.FPS || 60) * 50;
                    return Entry.hw.sendQueue.SET[n] = {
                        type: Entry.Blacksmith.sensorTypes.LCD,
                        data: {
                            text0: o[0],
                            text1: o[1],
                            text2: o[2],
                            text3: o[3],
                            text4: o[4],
                            text5: o[5],
                            text6: o[6],
                            text7: o[7],
                            text8: o[8],
                            text9: o[9],
                            text10: o[10],
                            text11: o[11],
                            text12: o[12],
                            text13: o[13],
                            text14: o[14],
                            text15: o[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, s), e
                },
                syntax: {js: [], py: ["blacksmith.set_digital_lcd(%1, %2)"]}
            },
            blacksmith_set_digital_bluetooth: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: Lang.template.blacksmith_set_digital_bluetooth,
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["My Entry!!"]}, null], type: "blacksmith_set_digital_bluetooth"},
                paramsKeyMap: {STRING: 0},
                class: "blacksmithSet",
                isNotFor: ["blacksmith"],
                func: function (t, e) {
                    var n = e.getValue("STRING"), r = [];
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn());
                    if ("string" == typeof n) for (var o = 0; o < n.length; o++) r[o] = Entry.Blacksmith.toByte(n[o]); else r[0] = n;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var a = 60 / (Entry.FPS || 60) * 50;
                    return Entry.hw.sendQueue.SET[3] = {
                        type: Entry.Blacksmith.sensorTypes.txBLUETOOTH,
                        data: {
                            text0: r[0],
                            text1: r[1],
                            text2: r[2],
                            text3: r[3],
                            text4: r[4],
                            text5: r[5],
                            text6: r[6],
                            text7: r[7],
                            text8: r[8],
                            text9: r[9],
                            text10: r[10],
                            text11: r[11],
                            text12: r[12],
                            text13: r[13],
                            text14: r[14],
                            text15: r[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a), e
                },
                syntax: {js: [], py: ["blacksmith.set_digital_bluetooth(%1)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Bitbrick = {
        SENSOR_MAP: {
            1: "light",
            2: "IR",
            3: "touch",
            4: "potentiometer",
            5: "MIC",
            21: "UserSensor",
            11: "UserInput",
            20: "LED",
            19: "SERVO",
            18: "DC"
        },
        PORT_MAP: {buzzer: 2, 5: 4, 6: 6, 7: 8, 8: 10, LEDR: 12, LEDG: 14, LEDB: 16},
        sensorList: function () {
            for (var t = [], e = Entry.hw.portData, n = 1; n < 5; n++) {
                var r = e[n];
                r && (r.value || 0 === r.value) && t.push([n + " - " + Lang.Blocks["BITBRICK_" + r.type], n.toString()])
            }
            return 0 == t.length ? [[Lang.Blocks.no_target, "null"]] : t
        },
        touchList: function () {
            for (var t = [], e = Entry.hw.portData, n = 1; n < 5; n++) {
                var r = e[n];
                r && "touch" === r.type && t.push([n.toString(), n.toString()])
            }
            return 0 == t.length ? [[Lang.Blocks.no_target, "null"]] : t
        },
        servoList: function () {
            for (var t = [], e = Entry.hw.portData, n = 5; n < 9; n++) {
                var r = e[n];
                r && "SERVO" === r.type && t.push(["ABCD"[n - 5], n.toString()])
            }
            return 0 == t.length ? [[Lang.Blocks.no_target, "null"]] : t
        },
        dcList: function () {
            for (var t = [], e = Entry.hw.portData, n = 5; n < 9; n++) {
                var r = e[n];
                r && "DC" === r.type && t.push(["ABCD"[n - 5], n.toString()])
            }
            return 0 == t.length ? [[Lang.Blocks.no_target, "null"]] : t
        },
        setZero: function () {
            var t = Entry.hw.sendQueue;
            for (var e in Entry.Bitbrick.PORT_MAP) t[e] = 0;
            Entry.hw.update()
        },
        name: "bitbrick",
        url: "http://www.bitbrick.cc/",
        imageName: "bitbrick.png",
        title: {ko: "비트브릭", en: "bitbrick"},
        servoMaxValue: 181,
        servoMinValue: 1,
        dcMaxValue: 100,
        dcMinValue: -100,
        monitorTemplate: {
            keys: ["value"],
            imgPath: "hw/bitbrick.png",
            width: 400,
            height: 400,
            listPorts: {
                1: {name: Lang.Hw.port_en + " 1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                A: {name: Lang.Hw.port_en + " A " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                B: {name: Lang.Hw.port_en + " B " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                C: {name: Lang.Hw.port_en + " C " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                D: {name: Lang.Hw.port_en + " D " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.Bitbrick.getBlocks = function () {
        return {
            bitbrick_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW,
                    menuName: Entry.Bitbrick.sensorList
                }],
                events: {},
                def: {params: [null], type: "bitbrick_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = e.getStringField("PORT");
                    return Entry.hw.portData[n].value
                },
                syntax: {js: [], py: ["Bitbrick.sensor_value(%1)"]}
            },
            bitbrick_is_touch_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "DropdownDynamic", value: null, fontSize: 11, menuName: Entry.Bitbrick.touchList}],
                events: {},
                def: {params: [null], type: "bitbrick_is_touch_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    return 0 === Entry.hw.portData[e.getStringField("PORT")].value
                },
                syntax: {js: [], py: ["Bitbrick.is_touch_pressed(%1)"]}
            },
            bitbrick_turn_off_color_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "bitbrick_turn_off_color_led", id: "i3je"},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    return Entry.hw.sendQueue.LEDR = 0, Entry.hw.sendQueue.LEDG = 0, Entry.hw.sendQueue.LEDB = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.turn_off_color_led()"]}
            },
            bitbrick_turn_on_color_led_by_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["255"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["255"]
                    }, null], type: "bitbrick_turn_on_color_led_by_rgb"
                },
                paramsKeyMap: {rValue: 0, gValue: 1, bValue: 2},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = e.getNumberValue("rValue"), r = e.getNumberValue("gValue"), o = e.getNumberValue("bValue"),
                        a = Entry.adjustValueWithMaxMin, s = Entry.hw.sendQueue;
                    return s.LEDR = a(n, 0, 255), s.LEDG = a(r, 0, 255), s.LEDB = a(o, 0, 255), e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.color_led_by_rgb(%1, %2, %3)"]}
            },
            bitbrick_turn_on_color_led_by_picker: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Color"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "bitbrick_turn_on_color_led_by_picker"},
                paramsKeyMap: {VALUE: 0},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = e.getStringField("VALUE");
                    return Entry.hw.sendQueue.LEDR = parseInt(n.substr(1, 2), 16), Entry.hw.sendQueue.LEDG = parseInt(n.substr(3, 2), 16), Entry.hw.sendQueue.LEDB = parseInt(n.substr(5, 2), 16), e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.color_led_by_picker(%1)"]}
            },
            bitbrick_turn_on_color_led_by_value: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "bitbrick_turn_on_color_led_by_value"},
                paramsKeyMap: {VALUE: 0},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n, r, o, a = e.getNumberValue("VALUE");
                    return (a %= 200) < 67 ? (n = 200 - 3 * a, r = 3 * a, o = 0) : a < 134 ? (n = 0, r = 200 - 3 * (a -= 67), o = 3 * a) : a < 201 && (n = 3 * (a -= 134), r = 0, o = 200 - 3 * a), Entry.hw.sendQueue.LEDR = n, Entry.hw.sendQueue.LEDG = r, Entry.hw.sendQueue.LEDB = o, e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.color_led_by_value(%1)"]}
            },
            bitbrick_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["60"]}, null], type: "bitbrick_buzzer"},
                paramsKeyMap: {VALUE: 0},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    if (e.isStart) return Entry.hw.sendQueue.buzzer = 0, delete e.isStart, e.callReturn();
                    var n = e.getNumberValue("VALUE");
                    return Entry.hw.sendQueue.buzzer = n, e.isStart = !0, e
                },
                syntax: {js: [], py: ["Bitbrick.buzzer(%1)"]}
            },
            bitbrick_turn_off_all_motors: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "bitbrick_turn_off_all_motors"},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.Bitbrick;
                    return r.servoList().map(function (t) {
                        n[t[1]] = 0
                    }), r.dcList().map(function (t) {
                        n[t[1]] = 128
                    }), e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.turn_off_all_motors()"]}
            },
            bitbrick_dc_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.Bitbrick.dcList
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["60"]}, null], type: "bitbrick_dc_speed"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE");
                    return n = Math.min(n, Entry.Bitbrick.dcMaxValue), n = Math.max(n, Entry.Bitbrick.dcMinValue), Entry.hw.sendQueue[e.getStringField("PORT")] = n + 128, e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.dc_speed(%1, %2)"]}
            },
            bitbrick_dc_direction_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.Bitbrick.dcList
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.BITBRICK_dc_direction_cw, "CW"], [Lang.Blocks.BITBRICK_dc_direction_ccw, "CCW"]],
                    value: "CW",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, {type: "text", params: ["100"]}, null], type: "bitbrick_dc_direction_speed"},
                paramsKeyMap: {PORT: 0, DIRECTION: 1, VALUE: 2},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = "CW" === e.getStringField("DIRECTION"), r = e.getNumberValue("VALUE");
                    return r = Math.min(r, Entry.Bitbrick.dcMaxValue), r = Math.max(r, 0), Entry.hw.sendQueue[e.getStringField("PORT")] = n ? r + 128 : 128 - r, e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.dc_direction_speed(%1, %2, %3)"]}
            },
            bitbrick_servomotor_angle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.Bitbrick.servoList
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["100"]}, null], type: "bitbrick_servomotor_angle"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = Entry.Bitbrick.servoMaxValue - (e.getNumberValue("VALUE") + 1);
                    return n = Math.min(n, Entry.Bitbrick.servoMaxValue), n = Math.max(n, Entry.Bitbrick.servoMinValue), Entry.hw.sendQueue[e.getStringField("PORT")] = n, e.callReturn()
                },
                syntax: {js: [], py: ["Bitbrick.servomotor_angle(%1, %2)"]}
            },
            bitbrick_convert_scale: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "DropdownDynamic",
                    value: null,
                    fontSize: 11,
                    menuName: Entry.Bitbrick.sensorList
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [null, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["1023"]
                    }, {type: "number", params: ["-100"]}, {type: "number", params: ["100"]}],
                    type: "bitbrick_convert_scale"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "condition",
                isNotFor: ["bitbrick"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT"), r = Entry.hw.portData[n].value, o = e.getNumberValue("VALUE2", e),
                        a = e.getNumberValue("VALUE3", e), s = e.getNumberValue("VALUE4", e),
                        i = e.getNumberValue("VALUE5", e), l = r;
                    if (s > i) {
                        var c = s;
                        s = i, i = c
                    }
                    return l -= o, l *= (i - s) / (a - o), l += s, l = Math.min(i, l), l = Math.max(s, l), Math.round(l)
                },
                syntax: {js: [], py: ["Bitbrick.convert_scale(%1, %2, %3, %4, %5)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.ArduinoExt = {
        name: "ArduinoExt",
        url: "http://www.arduino.cc/",
        imageName: "arduinoExt.png",
        title: {ko: "아두이노 Uno 확장모드", en: "ArduinoExt Uno"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.ArduinoExt.setLanguage = function () {
        return {
            ko: {
                template: {
                    arduino_ext_get_analog_value: "아날로그 %1 번 센서값",
                    arduino_ext_get_analog_value_map: "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
                    arduino_ext_get_ultrasonic_value: "울트라소닉 Trig %1 Echo %2 센서값",
                    arduino_ext_toggle_led: "디지털 %1 번 핀 %2 %3",
                    arduino_ext_digital_pwm: "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
                    arduino_ext_set_tone: "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
                    arduino_ext_set_servo: "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
                    arduino_ext_get_digital: "디지털 %1 번 센서값"
                }
            },
            en: {
                template: {
                    arduino_ext_get_analog_value: "Analog %1 Sensor value",
                    arduino_ext_get_analog_value_map: "Map Value %1 %2 ~ %3 to %4 ~ %5",
                    arduino_ext_get_ultrasonic_value: "Read ultrasonic sensor trig pin %1 echo pin %2",
                    arduino_ext_toggle_led: "Digital %1 Pin %2 %3",
                    arduino_ext_digital_pwm: "Digital %1 Pin %2 %3",
                    arduino_ext_set_tone: "Play tone pin %1 on note %2 octave %3 beat %4 %5",
                    arduino_ext_set_servo: "Set servo pin %1 angle as %2 %3",
                    arduino_ext_get_digital: "Digital %1 Sensor value"
                }
            }
        }
    }, Entry.ArduinoExt.getBlocks = function () {
        return {
            arduino_ext_analog_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"]],
                            value: "0",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringKey,
                            codeMap: "Entry.CodeMap.Arduino.arduino_ext_analog_list[0]"
                        }],
                        keyOption: "arduino_ext_analog_list"
                    }]
                }
            },
            arduino_ext_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_ext_analog_list"}], type: "arduino_ext_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "ArduinoExtGet",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.analogRead(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_ext_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_ext_get_analog_value",
                        params: [{type: "arduino_ext_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "arduino_ext_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "ArduinoExtGet",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = (Entry.hw.portData.ANALOG, e.getNumberValue("VALUE2", e)),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e), i = e.getValue("VALUE4", e), l = e.getValue("VALUE5", e),
                        c = !1;
                    if ((Entry.Utils.isNumber(i) && i.indexOf(".") > -1 || Entry.Utils.isNumber(l) && l.indexOf(".") > -1) && (c = !0), r > o) {
                        var u = r;
                        r = o, o = u
                    }
                    return a > s && (u = a, a = s, s = u), n -= r, n *= (s - a) / (o - r), n += a, n = Math.min(s, n), n = Math.max(a, n), c ? Math.round(100 * n) / 100 : Math.round(n)
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.map(%1, %2, %3, %4, %5)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }]
                    }]
                }
            },
            arduino_ext_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["2"]}, {
                        type: "arduino_get_port_number",
                        params: ["4"]
                    }], type: "arduino_ext_get_ultrasonic_value"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "ArduinoExtGet",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1", e), r = e.getNumberValue("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ArduinoExt.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.ultrasonicRead(%1, %2)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_ext_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: [2]}], type: "arduino_ext_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "ArduinoExtGet",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = Entry.hw.hwModule;
                    if ("ArduinoExt" === (void 0 === n ? {} : n).name) {
                        var r = e.getNumberValue("PORT", e), o = Entry.hw.portData.DIGITAL;
                        return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ArduinoExt.sensorTypes.DIGITAL] = {
                            port: r,
                            time: (new Date).getTime()
                        }, o && o[r] || 0
                    }
                    return Entry.block.arduino_get_digital_value.func(t, e)
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.digitalRead(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_get_digital_toggle: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OPERATOR: 0},
                func: function (t, e) {
                    return e.getStringField("OPERATOR")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                            value: "on",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW,
                            converter: Entry.block.converters.returnStringValueUpperCase,
                            codeMap: "Entry.CodeMap.Arduino.arduino_get_digital_toggle[0]"
                        }],
                        keyOption: "arduino_get_digital_toggle"
                    }]
                }
            },
            arduino_ext_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: [3]}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "arduino_ext_toggle_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ArduinoExt",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.ArduinoExt.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.ArduinoExt.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ArduinoExt.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.digitalWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_ext_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "arduino_ext_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ArduinoExt",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ArduinoExt.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.analogWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_ext_tone_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                            value: "C",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValueUpperCase
                        }],
                        keyOption: "arduino_ext_tone_list"
                    }]
                }
            },
            arduino_ext_tone_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_ext_tone_list"}], type: "arduino_ext_tone_value"},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getNumberValue("NOTE")
                },
                syntax: {js: [], py: [{syntax: "%1", keyOption: "arduino_ext_tone_value"}]}
            },
            arduino_ext_octave_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "4",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                },
                syntax: {js: [], py: [{syntax: "%1", keyOption: "arduino_ext_octave_list"}]}
            },
            arduino_ext_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        params: [3]
                    }, {type: "arduino_ext_tone_list"}, {type: "arduino_ext_octave_list"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "arduino_ext_set_tone"
                },
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "ArduinoExt",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getValue("NOTE", e);
                    Entry.Utils.isNumber(o) || (o = Entry.ArduinoExt.toneTable[o]), o < 0 ? o = 0 : o > 12 && (o = 12);
                    var a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), n.SET || (n.SET = {}), 0 === a) return n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberValue("OCTAVE", e) - 1;
                    s < 0 ? s = 0 : s > 5 && (s = 5);
                    var i = 0;
                    return 0 != o && (i = Entry.ArduinoExt.toneMap[o][s]), a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.tone(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_ext_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: ["3"]}, null], type: "arduino_ext_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ArduinoExt",
                isNotFor: ["ArduinoExt"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.ArduinoExt.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.servomotorWrite(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Altino = {
        PORT_MAP: {
            rightWheel: 0,
            leftWheel: 0,
            steering: 0,
            ascii: 0,
            led: 0,
            led2: 0,
            note: 0,
            dot1: 0,
            dot2: 0,
            dot3: 0,
            dot4: 0,
            dot5: 0,
            dot6: 0,
            dot7: 0,
            dot8: 0
        }, setZero: function () {
            var t = Entry.Altino.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update(), Entry.Altino.removeAllTimeouts()
        }, timeouts: [], removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        }, removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        }, name: "altino", url: "http://saeon.co.kr/", imageName: "altino.png", title: {en: "Altino", ko: "알티노"}
    }, Entry.Altino.getBlocks = function () {
        return {
            altino_analogValue: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALTINO_CDS, "cds"], [Lang.Blocks.ALTINO_IR1, "ir1"], [Lang.Blocks.ALTINO_IR2, "ir2"], [Lang.Blocks.ALTINO_IR3, "ir3"], [Lang.Blocks.ALTINO_IR4, "ir4"], [Lang.Blocks.ALTINO_IR5, "ir5"], [Lang.Blocks.ALTINO_IR6, "ir6"], [Lang.Blocks.ALTINO_TOR1, "tor1"], [Lang.Blocks.ALTINO_TOR2, "tor2"], [Lang.Blocks.ALTINO_TEM, "tem"], [Lang.Blocks.ALTINO_ACCX, "accx"], [Lang.Blocks.ALTINO_ACCY, "accy"], [Lang.Blocks.ALTINO_ACCZ, "accz"], [Lang.Blocks.ALTINO_MAGX, "magx"], [Lang.Blocks.ALTINO_MAGY, "magy"], [Lang.Blocks.ALTINO_MAGZ, "magz"], [Lang.Blocks.ALTINO_GYROX, "gyrox"], [Lang.Blocks.ALTINO_GYROY, "gyroy"], [Lang.Blocks.ALTINO_GYROZ, "gyroz"], [Lang.Blocks.ALTINO_STVAR, "stvar"], [Lang.Blocks.ALTINO_STTOR, "sttor"], [Lang.Blocks.ALTINO_BAT, "bat"], [Lang.Blocks.ALTINO_REMOTE, "remote"]],
                    value: "cds",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "altino_analogValue"},
                paramsKeyMap: {DEVICE: 0},
                class: "altino_sensor",
                isNotFor: ["altino"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {js: [], py: ["Altino.analog_value(%1)"]}
            },
            altino_steering: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALTINO_Steering_Angle_Center, "Center"], [Lang.Blocks.ALTINO_Steering_Angle_Left5, "Left5"], [Lang.Blocks.ALTINO_Steering_Angle_Left10, "Left10"], [Lang.Blocks.ALTINO_Steering_Angle_Left15, "Left15"], [Lang.Blocks.ALTINO_Steering_Angle_Left20, "Left20"], [Lang.Blocks.ALTINO_Steering_Angle_Right5, "Right5"], [Lang.Blocks.ALTINO_Steering_Angle_Right10, "Right10"], [Lang.Blocks.ALTINO_Steering_Angle_Right15, "Right15"], [Lang.Blocks.ALTINO_Steering_Angle_Right20, "Right20"]],
                    value: "Center",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "altino_steering"},
                paramsKeyMap: {DIRECTION: 0},
                class: "altino_motor",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION", e);
                    return "Center" == r ? n.steering = 2 : "Left5" == r ? n.steering = 160 : "Left10" == r ? n.steering = 192 : "Left15" == r ? n.steering = 224 : "Left20" == r ? n.steering = 255 : "Right5" == r ? n.steering = 32 : "Right10" == r ? n.steering = 64 : "Right15" == r ? n.steering = 96 : "Right20" == r && (n.steering = 127), e.callReturn()
                },
                syntax: {js: [], py: ["Altino.steering(%1,%2)"]}
            },
            altino_rear_wheel: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["300"]}, {type: "text", params: ["300"]}, null],
                    type: "altino_rear_wheel"
                },
                paramsKeyMap: {rightWheel: 0, leftWheel: 1},
                class: "altino_motor",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.rightWheel = e.getNumberValue("rightWheel"), n.leftWheel = e.getNumberValue("leftWheel"), e.callReturn()
                },
                syntax: {js: [], py: ["Altino.rear_wheel(%1, %2)"]}
            },
            altino_sound: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALTINO_h, "NOT"], [Lang.Blocks.ALTINO_c, "C"], [Lang.Blocks.ALTINO_c2, "C#"], [Lang.Blocks.ALTINO_d, "D"], [Lang.Blocks.ALTINO_d2, "D#"], [Lang.Blocks.ALTINO_e, "E"], [Lang.Blocks.ALTINO_f, "F"], [Lang.Blocks.ALTINO_f2, "F#"], [Lang.Blocks.ALTINO_g, "G"], [Lang.Blocks.ALTINO_g2, "G#"], [Lang.Blocks.ALTINO_a, "A"], [Lang.Blocks.ALTINO_a2, "A#"], [Lang.Blocks.ALTINO_b, "B"]],
                    value: "NOT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "altino_sound"},
                paramsKeyMap: {OCTAVE: 0, NOTE: 1},
                class: "altino_display",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("OCTAVE", e), o = e.getStringField("NOTE", e),
                        a = r + o;
                    return "NOT" == o ? n.note = 0 : "2C" == a ? n.note = 13 : "2C#" == a ? n.note = 14 : "2D" == a ? n.note = 15 : "2D#" == a ? n.note = 16 : "2E" == a ? n.note = 17 : "2F" == a ? n.note = 18 : "2F#" == a ? n.note = 19 : "2G" == a ? n.note = 20 : "2G#" == a ? n.note = 21 : "2A" == a ? n.note = 22 : "2A#" == a ? n.note = 23 : "2B" == a ? n.note = 24 : "3C" == a ? n.note = 25 : "3C#" == a ? n.note = 26 : "3D" == a ? n.note = 27 : "3D#" == a ? n.note = 28 : "3E" == a ? n.note = 29 : "3F" == a ? n.note = 30 : "3F#" == a ? n.note = 31 : "3G" == a ? n.note = 32 : "3G#" == a ? n.note = 33 : "3A" == a ? n.note = 34 : "3A#" == a ? n.note = 35 : "3B" == a ? n.note = 36 : "4C" == a ? n.note = 37 : "4C#" == a ? n.note = 38 : "4D" == a ? n.note = 39 : "4D#" == a ? n.note = 40 : "4E" == a ? n.note = 41 : "4F" == a ? n.note = 42 : "4F#" == a ? n.note = 43 : "4G" == a ? n.note = 44 : "4G#" == a ? n.note = 45 : "4A" == a ? n.note = 46 : "4A#" == a ? n.note = 47 : "4B" == a ? n.note = 48 : "5C" == a ? n.note = 49 : "5C#" == a ? n.note = 50 : "5D" == a ? n.note = 51 : "5D#" == a ? n.note = 52 : "5E" == a ? n.note = 53 : "5F" == a ? n.note = 54 : "5F#" == a ? n.note = 55 : "5G" == a ? n.note = 56 : "5G#" == a ? n.note = 57 : "5A" == a ? n.note = 58 : "5A#" == a ? n.note = 59 : "5B" == a ? n.note = 60 : "6C" == a ? n.note = 61 : "6C#" == a ? n.note = 62 : "6D" == a ? n.note = 63 : "6D#" == a ? n.note = 64 : "6E" == a ? n.note = 65 : "6F" == a ? n.note = 66 : "6F#" == a ? n.note = 67 : "6G" == a ? n.note = 68 : "6G#" == a ? n.note = 69 : "6A" == a ? n.note = 70 : "6A#" == a ? n.note = 71 : "6B" == a ? n.note = 72 : "7C" == a ? n.note = 73 : "7C#" == a ? n.note = 74 : "7D" == a ? n.note = 75 : "7D#" == a ? n.note = 76 : "7E" == a ? n.note = 77 : "7F" == a ? n.note = 78 : "7F#" == a ? n.note = 79 : "7G" == a ? n.note = 80 : "7G#" == a ? n.note = 81 : "7A" == a ? n.note = 82 : "7A#" == a ? n.note = 83 : "7B" == a && (n.note = 84), e.callReturn()
                },
                syntax: {js: [], py: ["Altino.sound(%1, %2)"]}
            },
            altino_light: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALTINO_Led_Forward_Light, "2"], [Lang.Blocks.ALTINO_Led_Reverse_Light, "3"], [Lang.Blocks.ALTINO_Led_Brake_Light, "4"], [Lang.Blocks.ALTINO_Led_Turn_Left_Light, "5"], [Lang.Blocks.ALTINO_Led_Turn_Right_Light, "6"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALTINO_h2, "255"], [Lang.Blocks.ALTINO_h, "0"]],
                    value: "255",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "altino_light"},
                paramsKeyMap: {SELECT: 0, ONOFF: 1},
                class: "altino_display",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringField("SELECT", e), o = e.getStringField("ONOFF", e);
                    return "2" == r && "255" == o ? n.led = 3 | n.led : "2" == r && "0" == o && (n.led = 252 & n.led), "3" == r && "255" == o ? n.led = 12 | n.led : "3" == r && "0" == o && (n.led = 243 & n.led), "4" == r && "255" == o ? n.led2 = 193 | n.led2 : "4" == r && "0" == o && (n.led2 = 63 & n.led2), "5" == r && "255" == o ? n.led = 160 | n.led : "5" == r && "0" == o && (n.led = 95 & n.led), "6" == r && "255" == o ? n.led = 80 | n.led : "6" == r && "0" == o && (n.led = 175 & n.led), e.callReturn()
                },
                syntax: {js: [], py: ["Altino.light(%1, %2)"]}
            },
            altino_dot_display: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["A"]}, null], type: "altino_dot_display"},
                paramsKeyMap: {VALUE: 0},
                class: "altino_display",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getStringValue("VALUE");
                    return n.ascii = r.charCodeAt(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Altino.dot_display(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            altino_dot_display_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0xff"]}, {type: "text", params: ["0xff"]}, {
                        type: "text",
                        params: ["0xff"]
                    }, {type: "text", params: ["0xff"]}, {type: "text", params: ["0xff"]}, {
                        type: "text",
                        params: ["0xff"]
                    }, {type: "text", params: ["0xff"]}, {type: "text", params: ["0xff"]}, null],
                    type: "altino_dot_display_line"
                },
                paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4, VALUE6: 5, VALUE7: 6, VALUE8: 7},
                class: "altino_display",
                isNotFor: ["altino"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.ascii = 0, n.dot1 = e.getNumberValue("VALUE1"), n.dot2 = e.getNumberValue("VALUE2"), n.dot3 = e.getNumberValue("VALUE3"), n.dot4 = e.getNumberValue("VALUE4"), n.dot5 = e.getNumberValue("VALUE5"), n.dot6 = e.getNumberValue("VALUE6"), n.dot7 = e.getNumberValue("VALUE7"), n.dot8 = e.getNumberValue("VALUE8"), e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Albert = {
        PORT_MAP: {
            leftWheel: 0,
            rightWheel: 0,
            buzzer: 0,
            leftEye: 0,
            rightEye: 0,
            note: 0,
            bodyLed: 0,
            frontLed: 0,
            padWidth: 0,
            padHeight: 0
        },
        setZero: function () {
            var t = Entry.Albert.PORT_MAP, e = Entry.hw.sendQueue;
            for (var n in t) e[n] = t[n];
            Entry.hw.update();
            var r = Entry.Albert;
            r.tempo = 60, r.removeAllTimeouts()
        },
        monitorTemplate: {
            imgPath: "hw/albert.png",
            width: 387,
            height: 503,
            listPorts: {
                temperature: {name: Lang.Blocks.ALBERT_sensor_temperature, type: "input", pos: {x: 0, y: 0}},
                accelerationX: {name: Lang.Blocks.ALBERT_sensor_acceleration_x, type: "input", pos: {x: 0, y: 0}},
                accelerationY: {name: Lang.Blocks.ALBERT_sensor_acceleration_y, type: "input", pos: {x: 0, y: 0}},
                accelerationZ: {name: Lang.Blocks.ALBERT_sensor_acceleration_z, type: "input", pos: {x: 0, y: 0}},
                frontOid: {name: Lang.Blocks.ALBERT_sensor_front_oid, type: "input", pos: {x: 0, y: 0}},
                backOid: {name: Lang.Blocks.ALBERT_sensor_back_oid, type: "input", pos: {x: 0, y: 0}},
                positionX: {name: Lang.Blocks.ALBERT_sensor_position_x, type: "input", pos: {x: 0, y: 0}},
                positionY: {name: Lang.Blocks.ALBERT_sensor_position_y, type: "input", pos: {x: 0, y: 0}},
                orientation: {name: Lang.Blocks.ALBERT_sensor_orientation, type: "input", pos: {x: 0, y: 0}},
                buzzer: {name: Lang.Hw.buzzer, type: "output", pos: {x: 0, y: 0}},
                note: {name: Lang.Hw.note, type: "output", pos: {x: 0, y: 0}}
            },
            ports: {
                leftProximity: {
                    name: Lang.Blocks.ALBERT_sensor_left_proximity,
                    type: "input",
                    pos: {x: 178, y: 401}
                },
                rightProximity: {name: Lang.Blocks.ALBERT_sensor_right_proximity, type: "input", pos: {x: 66, y: 359}},
                battery: {name: Lang.Blocks.ALBERT_sensor_battery, type: "input", pos: {x: 88, y: 368}},
                light: {name: Lang.Blocks.ALBERT_sensor_light, type: "input", pos: {x: 127, y: 391}},
                leftWheel: {name: Lang.Hw.leftWheel, type: "output", pos: {x: 299, y: 406}},
                rightWheel: {name: Lang.Hw.rightWheel, type: "output", pos: {x: 22, y: 325}},
                leftEye: {name: Lang.Hw.leftEye, type: "output", pos: {x: 260, y: 26}},
                rightEye: {name: Lang.Hw.rightEye, type: "output", pos: {x: 164, y: 13}},
                bodyLed: {name: Lang.Hw.body + " " + Lang.Hw.led_en, type: "output", pos: {x: 367, y: 308}},
                frontLed: {name: Lang.Hw.front + " " + Lang.Hw.led_en, pos: {x: 117, y: 410}}
            },
            mode: "both"
        },
        tempo: 60,
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        controller: {
            PI: 3.14159265,
            PI2: 6.2831853,
            prevDirection: 0,
            prevDirectionFine: 0,
            directionFineCount: 0,
            positionCount: 0,
            finalPositionCount: 0,
            GAIN_ANGLE: 30,
            GAIN_ANGLE_FINE: 30,
            GAIN_POSITION_FINE: 30,
            STRAIGHT_SPEED: 20,
            MAX_BASE_SPEED: 20,
            GAIN_BASE_SPEED: 1,
            GAIN_POSITION: 35,
            POSITION_TOLERANCE_FINE: 3,
            POSITION_TOLERANCE_FINE_LARGE: 5,
            POSITION_TOLERANCE_ROUGH: 5,
            POSITION_TOLERANCE_ROUGH_LARGE: 10,
            ORIENTATION_TOLERANCE_FINE: .08,
            ORIENTATION_TOLERANCE_ROUGH: .09,
            ORIENTATION_TOLERANCE_ROUGH_LARGE: .18,
            MINIMUM_WHEEL_SPEED: 18,
            MINIMUM_WHEEL_SPEED_FINE: 15,
            clear: function () {
                this.prevDirection = 0, this.prevDirectionFine = 0, this.directionFineCount = 0, this.positionCount = 0, this.finalPositionCount = 0
            },
            controlAngleFine: function (t, e) {
                var n = Entry.hw.sendQueue, r = this.validateRadian(e - t), o = Math.abs(r);
                if (o < this.ORIENTATION_TOLERANCE_FINE) return !1;
                var a = r > 0 ? 1 : -1;
                if (a * this.prevDirectionFine < 0 && ++this.directionFineCount > 5) return !1;
                this.prevDirectionFine = a;
                var s = 0;
                return r > 0 ? (s = Math.log(1 + o) * this.GAIN_ANGLE_FINE) < this.MINIMUM_WHEEL_SPEED && (s = this.MINIMUM_WHEEL_SPEED) : (s = -Math.log(1 + o) * this.GAIN_ANGLE_FINE) > -this.MINIMUM_WHEEL_SPEED && (s = -this.MINIMUM_WHEEL_SPEED), s = parseInt(s), n.leftWheel = -s, n.rightWheel = s, !0
            },
            controlAngle: function (t, e) {
                var n = Entry.hw.sendQueue, r = this.validateRadian(e - t), o = Math.abs(r);
                if (o < this.ORIENTATION_TOLERANCE_ROUGH) return !1;
                var a = r > 0 ? 1 : -1;
                if (o < this.ORIENTATION_TOLERANCE_ROUGH_LARGE && a * this.prevDirection < 0) return !1;
                this.prevDirection = a;
                var s = 0;
                return r > 0 ? (s = Math.log(1 + o) * this.GAIN_ANGLE) < this.MINIMUM_WHEEL_SPEED && (s = this.MINIMUM_WHEEL_SPEED) : (s = -Math.log(1 + o) * this.GAIN_ANGLE) > -this.MINIMUM_WHEEL_SPEED && (s = -this.MINIMUM_WHEEL_SPEED), s = parseInt(s), n.leftWheel = -s, n.rightWheel = s, !0
            },
            controlPositionFine: function (t, e, n, r, o) {
                var a = Entry.hw.sendQueue, s = Math.atan2(o - e, r - t), i = this.validateRadian(s - n),
                    l = Math.abs(i), c = r - t, u = o - e, p = Math.sqrt(c * c + u * u);
                if (p < this.POSITION_TOLERANCE_FINE) return !1;
                if (p < this.POSITION_TOLERANCE_FINE_LARGE && ++this.finalPositionCount > 5) return this.finalPositionCount = 0, !1;
                var _ = 0;
                return _ = i > 0 ? Math.log(1 + l) * this.GAIN_POSITION_FINE : -Math.log(1 + l) * this.GAIN_POSITION_FINE, _ = parseInt(_), a.leftWheel = this.MINIMUM_WHEEL_SPEED_FINE - _, a.rightWheel = this.MINIMUM_WHEEL_SPEED_FINE + _, !0
            },
            controlPosition: function (t, e, n, r, o) {
                var a = Entry.hw.sendQueue, s = Math.atan2(o - e, r - t), i = this.validateRadian(s - n),
                    l = Math.abs(i), c = r - t, u = o - e, p = Math.sqrt(c * c + u * u);
                if (p < this.POSITION_TOLERANCE_ROUGH) return !1;
                if (p < this.POSITION_TOLERANCE_ROUGH_LARGE) {
                    if (++this.positionCount > 10) return this.positionCount = 0, !1
                } else this.positionCount = 0;
                if (l < .01) a.leftWheel = this.STRAIGHT_SPEED, a.rightWheel = this.STRAIGHT_SPEED; else {
                    var _ = (this.MINIMUM_WHEEL_SPEED + .5 / l) * this.GAIN_BASE_SPEED;
                    _ > this.MAX_BASE_SPEED && (_ = this.MAX_BASE_SPEED);
                    var d = 0;
                    d = i > 0 ? Math.log(1 + l) * this.GAIN_POSITION : -Math.log(1 + l) * this.GAIN_POSITION, _ = parseInt(_), d = parseInt(d), a.leftWheel = _ - d, a.rightWheel = _ + d
                }
                return !0
            },
            validateRadian: function (t) {
                return t > this.PI ? t - this.PI2 : t < -this.PI ? t + this.PI2 : t
            },
            toRadian: function (t) {
                return 3.14159265 * t / 180
            }
        },
        name: "albert",
        url: "http://albert.school/",
        imageName: "albertschool.png",
        title: {ko: "알버트 스쿨버전", en: "Albert School"}
    }, Entry.Albert.getBlocks = function () {
        return {
            albert_hand_found: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [],
                events: {},
                def: {params: [], type: "albert_hand_found"},
                class: "albert_sensor",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.portData;
                    return n.leftProximity > 40 || n.rightProximity > 40
                },
                syntax: {js: [], py: ["Albert.hand_found()"]}
            },
            albert_is_oid_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_front_oid, "FRONT"], [Lang.Blocks.ALBERT_back_oid, "BACK"]],
                    value: "FRONT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}],
                events: {},
                def: {params: [null, {type: "number", params: ["0"]}], type: "albert_is_oid_value"},
                paramsKeyMap: {OID: 0, VALUE: 1},
                class: "albert_sensor",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getField("OID", e), o = e.getNumberValue("VALUE");
                    return "FRONT" == r ? n.frontOid == o : n.backOid == o
                }
            },
            albert_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_sensor_left_proximity, "leftProximity"], [Lang.Blocks.ALBERT_sensor_right_proximity, "rightProximity"], [Lang.Blocks.ALBERT_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.ALBERT_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.ALBERT_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.ALBERT_sensor_front_oid, "frontOid"], [Lang.Blocks.ALBERT_sensor_back_oid, "backOid"], [Lang.Blocks.ALBERT_sensor_position_x, "positionX"], [Lang.Blocks.ALBERT_sensor_position_y, "positionY"], [Lang.Blocks.ALBERT_sensor_orientation, "orientation"], [Lang.Blocks.ALBERT_sensor_light, "light"], [Lang.Blocks.ALBERT_sensor_temperature, "temperature"], [Lang.Blocks.ALBERT_sensor_battery, "battery"], [Lang.Blocks.ALBERT_sensor_signal_strength, "signalStrength"]],
                    value: "leftProximity",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "albert_value"},
                paramsKeyMap: {DEVICE: 0},
                class: "albert_sensor",
                isNotFor: ["albert"],
                func: function (t, e) {
                    return Entry.hw.portData[e.getField("DEVICE")]
                },
                syntax: {js: [], py: ["Albert.value(%1)"]}
            },
            albert_move_forward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1"]}, null], type: "albert_move_forward_for_secs"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.leftWheel = 30, n.rightWheel = 30;
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(o)
                    }, r);
                    return Entry.Albert.timeouts.push(o), e
                },
                syntax: {js: [], py: ["Albert.move_forward_for_secs(%1)"]}
            },
            albert_move_backward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1"]}, null], type: "albert_move_backward_for_secs"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.leftWheel = -30, n.rightWheel = -30;
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(o)
                    }, r);
                    return Entry.Albert.timeouts.push(o), e
                },
                syntax: {js: [], py: ["Albert.move_backward_for_secs(%1)"]}
            },
            albert_turn_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_turn_left, "LEFT"], [Lang.Blocks.ALBERT_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["1"]}, null], type: "albert_turn_for_secs", id: "como"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, "LEFT" == e.getField("DIRECTION", e) ? (n.leftWheel = -30, n.rightWheel = 30) : (n.leftWheel = 30, n.rightWheel = -30);
                    var r = 1e3 * e.getNumberValue("VALUE"), o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(o)
                    }, r);
                    return Entry.Albert.timeouts.push(o), e
                },
                syntax: {js: [], py: ["Albert.turn_for_secs(%1, %2)"]}
            },
            albert_change_both_wheels_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["10"]}, {type: "text", params: ["10"]}, null],
                    type: "albert_change_both_wheels_by"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("LEFT"), o = e.getNumberValue("RIGHT");
                    return n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + r : r, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.change_both_wheels(%1, %2)"]}
            },
            albert_set_both_wheels_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["30"]}, {type: "text", params: ["30"]}, null],
                    type: "albert_set_both_wheels_to"
                },
                paramsKeyMap: {LEFT: 0, RIGHT: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.leftWheel = e.getNumberValue("LEFT"), n.rightWheel = e.getNumberValue("RIGHT"), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_both_wheels(%1, %2)"]}
            },
            albert_change_wheel_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["10"]}, null], type: "albert_change_wheel_by"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    return "LEFT" == r ? n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o : "RIGHT" == r ? n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o : (n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + o : o, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + o : o), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.change_wheel(%1, %2)"]}
            },
            albert_set_wheel_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["30"]}, null], type: "albert_set_wheel_to"},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    return "LEFT" == r ? n.leftWheel = o : "RIGHT" == r ? n.rightWheel = o : (n.leftWheel = o, n.rightWheel = o), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_wheel(%1, %2)"]}
            },
            albert_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "albert_stop", id: "4adb"},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.leftWheel = 0, n.rightWheel = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.stop()"]}
            },
            albert_set_pad_size_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["108"]}, {type: "text", params: ["76"]}, null],
                    type: "albert_set_pad_size_to",
                    id: "5mhg"
                },
                paramsKeyMap: {WIDTH: 0, HEIGHT: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.padWidth = e.getNumberValue("WIDTH"), n.padHeight = e.getNumberValue("HEIGHT"), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_pad_size(%1, %2)"]}
            },
            albert_move_to_x_y_on_board: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "number", params: ["0"]}, {type: "number", params: ["0"]}, null],
                    type: "albert_move_to_x_y_on_board"
                },
                paramsKeyMap: {X: 0, Y: 1},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Albert.controller;
                    if (e.isStart) {
                        if (e.isMoving) {
                            switch (r.positionX >= 0 && (e.x = r.positionX), r.positionY >= 0 && (e.y = r.positionY), e.theta = r.orientation, e.boardState) {
                                case 1:
                                    if (0 == e.initialized) {
                                        if (e.x < 0 || e.y < 0) return n.leftWheel = 20, n.rightWheel = -20, e;
                                        e.initialized = !0
                                    }
                                    var a = o.toRadian(e.theta), s = e.targetX - e.x, i = e.targetY - e.y,
                                        l = Math.atan2(i, s);
                                    0 == o.controlAngle(a, l) && (e.boardState = 2);
                                    break;
                                case 2:
                                    0 == o.controlPosition(e.x, e.y, o.toRadian(e.theta), e.targetX, e.targetY) && (e.boardState = 3);
                                    break;
                                case 3:
                                    0 == o.controlPositionFine(e.x, e.y, o.toRadian(e.theta), e.targetX, e.targetY) && (n.leftWheel = 0, n.rightWheel = 0, e.isMoving = !1)
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.initialized, delete e.boardState, delete e.x, delete e.y, delete e.theta, delete e.targetX, delete e.targetY, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.initialized = !1, e.boardState = 1, e.x = -1, e.y = -1, e.theta = -200, e.targetX = e.getNumberValue("X"), e.targetY = e.getNumberValue("Y"), o.clear(), n.leftWheel = 0, n.rightWheel = 0, e
                }
            },
            albert_set_orientation_on_board: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "number", params: ["0"]}, null], type: "albert_set_orientation_on_board"},
                paramsKeyMap: {ORIENTATION: 0},
                class: "albert_wheel",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = Entry.Albert.controller;
                    if (e.isStart) {
                        if (e.isMoving) {
                            switch (e.theta = r.orientation, e.boardState) {
                                case 1:
                                    var a = o.toRadian(e.theta), s = o.toRadian(e.targetTheta);
                                    0 == o.controlAngle(a, s) && (e.boardState = 2);
                                    break;
                                case 2:
                                    a = o.toRadian(e.theta), s = o.toRadian(e.targetTheta), 0 == o.controlAngleFine(a, s) && (n.leftWheel = 0, n.rightWheel = 0, e.isMoving = !1)
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.boardState, delete e.theta, delete e.targetTheta, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.boardState = 1, e.theta = -200, e.targetTheta = e.getNumberValue("ORIENTATION"), o.clear(), n.leftWheel = 0, n.rightWheel = 0, e
                }
            },
            albert_set_eye_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_color_red, "4"], [Lang.Blocks.ALBERT_color_yellow, "6"], [Lang.Blocks.ALBERT_color_green, "2"], [Lang.Blocks.ALBERT_color_cyan, "3"], [Lang.Blocks.ALBERT_color_blue, "1"], [Lang.Blocks.ALBERT_color_magenta, "5"], [Lang.Blocks.ALBERT_color_white, "7"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "albert_set_eye_to"},
                paramsKeyMap: {DIRECTION: 0, COLOR: 1},
                class: "albert_led",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION", e), o = Number(e.getField("COLOR", e));
                    return "LEFT" == r ? n.leftEye = o : "RIGHT" == r ? n.rightEye = o : (n.leftEye = o, n.rightEye = o), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_eye(%1, %2)"]}
            },
            albert_clear_eye: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_eye, "LEFT"], [Lang.Blocks.ALBERT_right_eye, "RIGHT"], [Lang.Blocks.ALBERT_both_eyes, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "albert_clear_eye"},
                paramsKeyMap: {DIRECTION: 0},
                class: "albert_led",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION", e);
                    return "LEFT" == r ? n.leftEye = 0 : "RIGHT" == r ? n.rightEye = 0 : (n.leftEye = 0, n.rightEye = 0), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.clear_eye(%1)"]}
            },
            albert_body_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]],
                    value: "ON",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "albert_body_led"},
                paramsKeyMap: {STATE: 0},
                class: "albert_led",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("STATE", e);
                    return n.bodyLed = "ON" == r ? 1 : 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.body_led(%1)"]}
            },
            albert_front_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_turn_on, "ON"], [Lang.Blocks.ALBERT_turn_off, "OFF"]],
                    value: "ON",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "albert_front_led"},
                paramsKeyMap: {STATE: 0},
                class: "albert_led",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("STATE", e);
                    return n.frontLed = "ON" == r ? 1 : 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.front_led(%1)"]}
            },
            albert_beep: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "albert_beep"},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.buzzer = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, n.buzzer = 440, n.note = 0;
                    var r = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(r)
                    }, 200);
                    return Entry.Albert.timeouts.push(r), e
                },
                syntax: {js: [], py: ["Albert.beep()"]}
            },
            albert_change_buzzer_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["10"]}, null], type: "albert_change_buzzer_by"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("VALUE");
                    return n.buzzer = void 0 != n.buzzer ? n.buzzer + r : r, n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.change_buzzer(%1)"]}
            },
            albert_set_buzzer_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["1000"]}, null], type: "albert_set_buzzer_to"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.buzzer = e.getNumberValue("VALUE"), n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_buzzer(%1)"]}
            },
            albert_clear_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "albert_clear_buzzer"},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return n.buzzer = 0, n.note = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.clear_buzzer()"]}
            },
            albert_play_note_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, "4", {type: "text", params: ["0.5"]}, null], type: "albert_play_note_for"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n.note = 0, e.callReturn());
                    var r = e.getNumberField("NOTE", e), o = e.getNumberField("OCTAVE", e),
                        a = e.getNumberValue("VALUE", e), s = Entry.Albert.tempo;
                    r += 12 * (o - 1);
                    var i = 60 * a * 1e3 / s;
                    if (e.isStart = !0, e.timeFlag = 1, n.buzzer = 0, n.note = r, i > 100) {
                        var l = setTimeout(function () {
                            n.note = 0, Entry.Albert.removeTimeout(l)
                        }, i - 100);
                        Entry.Albert.timeouts.push(l)
                    }
                    var c = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(c)
                    }, i);
                    return Entry.Albert.timeouts.push(c), e
                },
                syntax: {js: [], py: ["Albert.play_note(%1, %2, %3)"]}
            },
            albert_rest_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0.25"]}, null], type: "albert_rest_for"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var r = e.getNumberValue("VALUE");
                    r = 60 * r * 1e3 / Entry.Albert.tempo, n.buzzer = 0, n.note = 0;
                    var o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Albert.removeTimeout(o)
                    }, r);
                    return Entry.Albert.timeouts.push(o), e
                },
                syntax: {js: [], py: ["Albert.rest(%1)"]}
            },
            albert_change_tempo_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["20"]}, null], type: "albert_change_tempo_by"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    return Entry.Albert.tempo += e.getNumberValue("VALUE"), Entry.Albert.tempo < 1 && (Entry.Albert.tempo = 1), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.change_tempo(%1)"]}
            },
            albert_set_tempo_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["60"]}, null], type: "albert_set_tempo_to"},
                paramsKeyMap: {VALUE: 0},
                class: "albert_buzzer",
                isNotFor: ["albert"],
                func: function (t, e) {
                    return Entry.Albert.tempo = e.getNumberValue("VALUE"), Entry.Albert.tempo < 1 && (Entry.Albert.tempo = 1), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_tempo(%1)"]}
            },
            albert_move_forward: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return e.isStart ? 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, n.leftWheel = 30, n.rightWheel = 30, setTimeout(function () {
                        e.timeFlag = 0
                    }, 1e3), e)
                },
                syntax: {js: [], py: ["Albert.move_forward()"]}
            },
            albert_move_backward: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null]},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    return e.isStart ? 1 == e.timeFlag ? (n.leftWheel = -30, n.rightWheel = -30, e) : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                        e.timeFlag = 0
                    }, 1e3), e)
                },
                syntax: {js: [], py: ["Albert.move_backward()"]}
            },
            albert_turn_around: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_turn_left, "LEFT"], [Lang.Blocks.ALBERT_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null]},
                paramsKeyMap: {DIRECTION: 0},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue;
                    if (e.isStart) return 1 == e.timeFlag ? (n.leftWheel = e.leftValue, n.rightWheel = e.rightValue, e) : (delete e.timeFlag, delete e.isStart, delete e.leftValue, delete e.rightValue, Entry.engine.isContinue = !1, n.leftWheel = 0, n.rightWheel = 0, e.callReturn());
                    var r = "LEFT" == e.getField("DIRECTION", e);
                    return e.leftValue = r ? -30 : 30, e.rightValue = r ? 30 : -30, e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                        e.timeFlag = 0
                    }, 1e3), e
                },
                syntax: {js: [], py: ["Albert.turn_around()"]}
            },
            albert_set_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "FRONT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null]},
                paramsKeyMap: {DIRECTION: 0, COLOR: 1},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION", e), o = Number(e.getField("COLOR", e));
                    return "FRONT" == r ? (n.leftEye = o, n.rightEye = o) : "LEFT" == r ? n.leftEye = o : n.rightEye = o, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_led(%1, %2)"]}
            },
            albert_clear_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "FRONT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null]},
                paramsKeyMap: {DIRECTION: 0},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION", e);
                    return "FRONT" == r ? (n.leftEye = 0, n.rightEye = 0) : "LEFT" == r ? n.leftEye = 0 : n.rightEye = 0, e.callReturn()
                },
                syntax: {js: [], py: ["Albert.clear_led(%1)"]}
            },
            albert_change_wheels_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "FRONT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null]},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = Entry.hw.portData, o = e.getField("DIRECTION"),
                        a = e.getNumberValue("VALUE");
                    return "LEFT" == o ? n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + a : r.leftWheel + a : "RIGHT" == o ? n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + a : r.rightWheel + a : (n.leftWheel = void 0 != n.leftWheel ? n.leftWheel + a : r.leftWheel + a, n.rightWheel = void 0 != n.rightWheel ? n.rightWheel + a : r.rightWheel + a), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.change_wheels(%1, %2)"]}
            },
            albert_set_wheels_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_left_wheel, "LEFT"], [Lang.Blocks.ALBERT_right_wheel, "RIGHT"], [Lang.Blocks.ALBERT_both_wheels, "FRONT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null]},
                paramsKeyMap: {DIRECTION: 0, VALUE: 1},
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getField("DIRECTION"), o = e.getNumberValue("VALUE");
                    return "LEFT" == r ? n.leftWheel = o : "RIGHT" == r ? n.rightWheel = o : (n.leftWheel = o, n.rightWheel = o), e.callReturn()
                },
                syntax: {js: [], py: ["Albert.set_wheels(%1, %2)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.rokoboard = {
        name: "rokoboard",
        url: "http://www.r-steam.com/",
        imageName: "rokoboard.png",
        title: {ko: "로코보드", en: "rokoboard"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/arduino.png",
            width: 605,
            height: 434,
            listPorts: {
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 13 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a0: {name: Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a1: {name: Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " A5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.rokoboard.getBlocks = function () {
        return {
            rokoboard_get_sensor_value_by_name: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.rokoboard_sensor_name_1, "1"], [Lang.Blocks.rokoboard_sensor_name_0, "0"], [Lang.Blocks.rokoboard_sensor_name_2, "2"], [Lang.Blocks.rokoboard_sensor_name_3, "3"], [Lang.Blocks.rokoboard_sensor_name_4, "4"], [Lang.Blocks.rokoboard_sensor_name_5, "5"], [Lang.Blocks.rokoboard_sensor_name_6, "6"]],
                    value: "1",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "rokoboard_get_sensor_value_by_name"},
                paramsKeyMap: {PORT: 0},
                class: "rokoboard_sensor",
                isNotFor: ["rokoboard"],
                func: function (t, e) {
                    var n = e.getField("PORT", e), r = Entry.hw.portData.ANALOG;
                    return r && r[n] || 0
                }
            },
            rokoboard_is_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "%1",
                params: [{type: "Text", text: Lang.Blocks.rokoboard_string_1, color: "#fff"}],
                events: {},
                def: {params: [null], type: "rokoboard_is_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "rokoboard_sensor",
                isNotFor: ["rokoboard"],
                func: function (t, e) {
                    var n = Entry.hw.portData.ANALOG;
                    return !!n && n[7] < 1
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.SmartBoard = {
        name: "smartBoard",
        url: "http://www.sciencebox.co.kr",
        imageName: "smartboard.png",
        title: {ko: "과학상자 코딩보드", en: "Sciencebox Codingboard"},
        setZero: function () {
            for (var t = 2; t < 9; t++) Entry.hw.sendQueue[t] = 0;
            Entry.hw.update()
        },
        monitorTemplate: {
            listPorts: {
                2: {name: Lang.Hw.port_en + " GS2 ", type: "output", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " GS1 ", type: "output", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " MT1 회전 방향 ", type: "output", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " MT1 PWM ", type: "output", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " MT2 PWM ", type: "output", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " MT2 회전 방향 ", type: "output", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " RELAY ", type: "output", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " SM3 각도 ", type: "output", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " SM2 각도 ", type: "output", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + "SM1 각도 ", type: "output", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 빨간 " + Lang.Hw.button, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 노란 " + Lang.Hw.button, type: "input", pos: {x: 0, y: 0}},
                14: {name: Lang.Hw.port_en + " 초록 " + Lang.Hw.button, type: "input", pos: {x: 0, y: 0}},
                15: {name: Lang.Hw.port_en + " 파란 " + Lang.Hw.button, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " 1번 " + Lang.Hw.sensor, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " 2번 " + Lang.Hw.sensor, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " 3번 " + Lang.Hw.sensor, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " 4번 " + Lang.Hw.sensor, type: "input", pos: {x: 0, y: 0}}
            }, mode: "both"
        }
    }, Entry.SmartBoard.getBlocks = function () {
        return {
            smartBoard_get_named_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["SEN1", "2"], ["SEN2", "3"], ["SEN3", "4"], ["SEN4", "5"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "smartBoard_get_named_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "smartBoard_sensor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue(e.getField("PORT", e))
                }
            },
            smartBoard_convert_scale: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "smartBoard_get_named_sensor_value"}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["1023"]}, {type: "number", params: ["0"]}, {
                        type: "number",
                        params: ["100"]
                    }], type: "smartBoard_convert_scale"
                },
                paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "smartBoard_sensor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE1", e), r = e.getNumberValue("VALUE2", e),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e), i = n;
                    if (r > o) {
                        var l = r;
                        r = o, o = l
                    }
                    return a > s && (l = a, a = s, s = l), i -= r, i *= (s - a) / (o - r), i += a, i = Math.min(s, i), i = Math.max(a, i), Math.round(i)
                },
                syntax: {js: [], py: ["smartBoard.convert_scale(%1, %2, %3, %4, %5)"]}
            },
            smartBoard_is_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["빨간", "12"], ["노란", "13"], ["초록", "14"], ["파랑", "15"]],
                    value: "12",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "smartBoard_is_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "smartBoard_button",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.getDigitalPortValue(e.getNumberField("PORT", e))
                }
            },
            smartBoard_set_dc_motor_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["MT1", "4"], ["MT2", "7"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["정", "0"], ["역", "255"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "smartBoard_set_dc_motor_direction"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "dc_motor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(e.getField("PORT"), e.getNumberField("OPERATOR")), e.callReturn()
                }
            },
            smartBoard_set_dc_motor_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["MT1", "5"], ["MT2", "6"]],
                    value: "5",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["정지 시키기", "0"], ["매우 느린 속도로 돌리기", "70"], ["느린 속도로 돌리기", "115"], ["보통 속도로 돌리기", "160"], ["빠른 속도로 돌리기", "205"], ["매우 빠른 속도로 돌리기", "255"]],
                    value: "160",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "smartBoard_set_dc_motor_speed"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "dc_motor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(e.getField("PORT"), e.getNumberField("OPERATOR")), e.callReturn()
                }
            },
            smartBoard_set_dc_motor_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["MT1", "5"], ["MT2", "6"]],
                    value: "5",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "arduino_text", params: ["255"]}, null],
                    type: "smartBoard_set_dc_motor_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dc_motor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                }
            },
            smartBoard_set_servo_speed: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["SM3", "9"], ["SM2", "10"], ["SM1", "11"]],
                    value: "9",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["느린 속도로", "187"], ["보통 속도로", "193"], ["빠른 속도로", "243"]],
                    value: "193",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "smartBoard_set_servo_speed"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "smartBoard_servo_motor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(e.getField("PORT"), e.getNumberField("OPERATOR")), e.isStart ? 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, e.callReturn()) : (e.isStart = !0, e.timeFlag = 1, setTimeout(function () {
                        e.timeFlag = 0
                    }, 250), e)
                }
            },
            smartBoard_set_servo_angle: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["SM3", "9"], ["SM2", "10"], ["SM1", "11"]],
                    value: "9",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [null, {type: "arduino_text", params: ["180"]}, null],
                    type: "smartBoard_set_servo_angle"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "smartBoard_servo_motor",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 1), r = Math.min(r, 180), Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                }
            },
            smartBoard_set_number_eight_pin: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["GS1", "3"], ["GS2", "2"], ["RELAY", "8"]],
                    value: "3",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["끄기", "0"], ["켜기", "255"]],
                    value: "0",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "smartBoard_set_number_eight_pin"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "ext",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(e.getField("PORT"), e.getNumberField("OPERATOR")), e.callReturn()
                }
            },
            smartBoard_set_gs1_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_text", params: ["255"]}], type: "smartBoard_set_gs1_pwm"},
                paramsKeyMap: {VALUE: 0},
                class: "ext",
                isNotFor: ["smartBoard"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE");
                    return n = Math.round(n), n = Math.max(n, 0), n = Math.min(n, 255), Entry.hw.setDigitalPortValue(3, n), e.callReturn()
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.memaker = {
        name: "memaker",
        url: "http://www.jkelec.co.kr/",
        imageName: "memaker.png",
        title: {ko: "미메이커", en: "memaker"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        toByte: function (t) {
            switch (t) {
                case" ":
                    t = 32;
                    break;
                case"!":
                    t = 33;
                    break;
                case'"':
                    t = 34;
                    break;
                case"#":
                    t = 35;
                    break;
                case"$":
                    t = 36;
                    break;
                case"%":
                    t = 37;
                    break;
                case"&":
                    t = 38;
                    break;
                case"'":
                    t = 39;
                    break;
                case"(":
                    t = 40;
                    break;
                case")":
                    t = 41;
                    break;
                case"*":
                    t = 42;
                    break;
                case"+":
                    t = 43;
                    break;
                case",":
                    t = 44;
                    break;
                case"-":
                    t = 45;
                    break;
                case".":
                    t = 46;
                    break;
                case"/":
                    t = 47;
                    break;
                case"0":
                    t = 48;
                    break;
                case"1":
                    t = 49;
                    break;
                case"2":
                    t = 50;
                    break;
                case"3":
                    t = 51;
                    break;
                case"4":
                    t = 52;
                    break;
                case"5":
                    t = 53;
                    break;
                case"6":
                    t = 54;
                    break;
                case"7":
                    t = 55;
                    break;
                case"8":
                    t = 56;
                    break;
                case"9":
                    t = 57;
                    break;
                case":":
                    t = 58;
                    break;
                case";":
                    t = 59;
                    break;
                case"<":
                    t = 60;
                    break;
                case"=":
                    t = 61;
                    break;
                case">":
                    t = 62;
                    break;
                case"?":
                    t = 63;
                    break;
                case"@":
                    t = 64;
                    break;
                case"A":
                    t = 65;
                    break;
                case"B":
                    t = 66;
                    break;
                case"C":
                    t = 67;
                    break;
                case"D":
                    t = 68;
                    break;
                case"E":
                    t = 69;
                    break;
                case"F":
                    t = 70;
                    break;
                case"G":
                    t = 71;
                    break;
                case"H":
                    t = 72;
                    break;
                case"I":
                    t = 73;
                    break;
                case"J":
                    t = 74;
                    break;
                case"K":
                    t = 75;
                    break;
                case"L":
                    t = 76;
                    break;
                case"M":
                    t = 77;
                    break;
                case"N":
                    t = 78;
                    break;
                case"O":
                    t = 79;
                    break;
                case"P":
                    t = 80;
                    break;
                case"Q":
                    t = 81;
                    break;
                case"R":
                    t = 82;
                    break;
                case"S":
                    t = 83;
                    break;
                case"T":
                    t = 84;
                    break;
                case"U":
                    t = 85;
                    break;
                case"V":
                    t = 86;
                    break;
                case"W":
                    t = 87;
                    break;
                case"X":
                    t = 88;
                    break;
                case"Y":
                    t = 89;
                    break;
                case"Z":
                    t = 90;
                    break;
                case"[":
                    t = 91;
                    break;
                case"\\":
                    t = 92;
                    break;
                case"]":
                    t = 93;
                    break;
                case"^":
                    t = 94;
                    break;
                case"_":
                    t = 95;
                    break;
                case"`":
                    t = 96;
                    break;
                case"a":
                    t = 97;
                    break;
                case"b":
                    t = 98;
                    break;
                case"c":
                    t = 99;
                    break;
                case"d":
                    t = 100;
                    break;
                case"e":
                    t = 101;
                    break;
                case"f":
                    t = 102;
                    break;
                case"g":
                    t = 103;
                    break;
                case"h":
                    t = 104;
                    break;
                case"i":
                    t = 105;
                    break;
                case"j":
                    t = 106;
                    break;
                case"k":
                    t = 107;
                    break;
                case"l":
                    t = 108;
                    break;
                case"m":
                    t = 109;
                    break;
                case"n":
                    t = 110;
                    break;
                case"o":
                    t = 111;
                    break;
                case"p":
                    t = 112;
                    break;
                case"q":
                    t = 113;
                    break;
                case"r":
                    t = 114;
                    break;
                case"s":
                    t = 115;
                    break;
                case"t":
                    t = 116;
                    break;
                case"u":
                    t = 117;
                    break;
                case"v":
                    t = 118;
                    break;
                case"w":
                    t = 119;
                    break;
                case"x":
                    t = 120;
                    break;
                case"y":
                    t = 121;
                    break;
                case"z":
                    t = 122;
                    break;
                case"{":
                    t = 123;
                    break;
                case"|":
                    t = 124;
                    break;
                case"}":
                    t = 125;
                    break;
                case"~":
                    t = 126
            }
            return t
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            LCD: 9,
            LCD_COMMAND: 10
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        directionTable: {Forward: 0, Backward: 1},
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.memaker.getBlocks = function () {
        return {
            memaker_analog_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"], ["A6", "6"], ["A7", "7"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                },
                syntax: {js: [], py: []}
            },
            memaker_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "memaker_analog_list"}], type: "memaker_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "memakerGet",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            memaker_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "memaker_get_analog_value",
                        params: [{type: "memaker_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "memaker_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "memakerGet",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = (Entry.hw.portData.ANALOG, e.getNumberValue("VALUE2", e)),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e);
                    if (r > o) {
                        var i = r;
                        r = o, o = i
                    }
                    return a > s && (i = a, a = s, s = i), n -= r, n *= (s - a) / (o - r), n += a, n = Math.min(s, n), Math.max(a, n)
                },
                syntax: {js: [], py: []}
            },
            memaker_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["7"]}, {
                        type: "arduino_get_port_number",
                        params: ["8"]
                    }], type: "memaker_get_ultrasonic_value"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "memakerGet",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1", e), r = e.getNumberValue("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.memaker.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {js: [], py: []}
            },
            memaker_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}], type: "memaker_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "memakerGet",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.memaker.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            memaker_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "memaker_toggle_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "memaker",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.memaker.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.memaker.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.memaker.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            memaker_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "memaker_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "memaker",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.memaker.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            memaker_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: ["10"]}, null], type: "memaker_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "memaker",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.memaker.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            memaker_list_digital_lcd_line: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Dropdown", options: [["LINE1", "0"], ["LINE2", "1"]], value: "0", fontSize: 11}],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LINE: 0},
                func: function (t, e) {
                    return e.getField("LINE")
                }
            },
            memaker_list_digital_lcd_column: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["COL1", "0"], ["COL2", "1"], ["COL3", "2"], ["COL4", "3"], ["COL5", "4"], ["COL6", "5"], ["COL7", "6"], ["COL8", "7"], ["COL9", "8"], ["COL10", "9"], ["COL11", "10"], ["COL12", "11"], ["COL13", "12"], ["COL14", "13"], ["COL15", "14"], ["COL16", "15"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {COLUMN: 0},
                func: function (t, e) {
                    return e.getField("COLUMN")
                }
            },
            memaker_set_lcd: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: Lang.template.memaker_set_lcd,
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "memaker_list_digital_lcd_line"}, {type: "memaker_list_digital_lcd_column"}, {
                        type: "text",
                        params: ["Type text !!"]
                    }, null], type: "memaker_set_lcd"
                },
                paramsKeyMap: {LINE: 0, COLUMN: 1, STRING: 2},
                class: "memakerLcd",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = e.getValue("LINE", e), r = e.getValue("COLUMN", e), o = e.getValue("STRING", e), a = [];
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !0, e.callReturn());
                    if ("string" == typeof o) for (var s = 0; s < o.length; s++) a[s] = Entry.memaker.toByte(o[s]); else if ("number" == typeof o) {
                        var i = o.toString();
                        for (s = 0; s < i.length; s++) a[s] = Entry.memaker.toByte(i[s])
                    } else a[0] = o;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var l = 60 / (Entry.FPS || 60) * 50;
                    return Entry.hw.sendQueue.SET[n] = {
                        type: Entry.memaker.sensorTypes.LCD,
                        data: {
                            line: n,
                            column: r,
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: ["memaker.memaker_set_lcd(%1, %2, %3)"]}
            },
            memaker_list_lcd_command: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["LCD_BLUE", "0"], ["LCD_GREEN", "1"], ["LCD_CLEAR", "2"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {COMMAND: 0},
                func: function (t, e) {
                    return e.getField("COMMAND")
                }
            },
            memaker_lcd_command: {
                color: "#00979D",
                skeleton: "basic",
                template: Lang.template.memaker_lcd_command,
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "memaker_list_lcd_command"}, null], type: "memaker_lcd_command"},
                paramsKeyMap: {COMMAND: 0},
                class: "memakerLcd",
                isNotFor: ["memaker"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("COMMAND", e), o = e.getNumberValue("COMMAND", e);
                    return n.SET || (n.SET = {}), n.SET[0] = {
                        type: Entry.memaker.sensorTypes.LCD_COMMAND,
                        data: {value: r, command: o},
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.mkboard = {
        name: "mkboard",
        url: "http://www.jkelec.co.kr",
        imageName: "mkboard.png",
        title: {en: "digital monkeyboard", ko: "디지털 몽키보드"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        toByte: function (t) {
            switch (t) {
                case" ":
                    t = 32;
                    break;
                case"!":
                    t = 33;
                    break;
                case'"':
                    t = 34;
                    break;
                case"#":
                    t = 35;
                    break;
                case"$":
                    t = 36;
                    break;
                case"%":
                    t = 37;
                    break;
                case"&":
                    t = 38;
                    break;
                case"'":
                    t = 39;
                    break;
                case"(":
                    t = 40;
                    break;
                case")":
                    t = 41;
                    break;
                case"*":
                    t = 42;
                    break;
                case"+":
                    t = 43;
                    break;
                case",":
                    t = 44;
                    break;
                case"-":
                    t = 45;
                    break;
                case".":
                    t = 46;
                    break;
                case"/":
                    t = 47;
                    break;
                case"0":
                    t = 48;
                    break;
                case"1":
                    t = 49;
                    break;
                case"2":
                    t = 50;
                    break;
                case"3":
                    t = 51;
                    break;
                case"4":
                    t = 52;
                    break;
                case"5":
                    t = 53;
                    break;
                case"6":
                    t = 54;
                    break;
                case"7":
                    t = 55;
                    break;
                case"8":
                    t = 56;
                    break;
                case"9":
                    t = 57;
                    break;
                case":":
                    t = 58;
                    break;
                case";":
                    t = 59;
                    break;
                case"<":
                    t = 60;
                    break;
                case"=":
                    t = 61;
                    break;
                case">":
                    t = 62;
                    break;
                case"?":
                    t = 63;
                    break;
                case"@":
                    t = 64;
                    break;
                case"A":
                    t = 65;
                    break;
                case"B":
                    t = 66;
                    break;
                case"C":
                    t = 67;
                    break;
                case"D":
                    t = 68;
                    break;
                case"E":
                    t = 69;
                    break;
                case"F":
                    t = 70;
                    break;
                case"G":
                    t = 71;
                    break;
                case"H":
                    t = 72;
                    break;
                case"I":
                    t = 73;
                    break;
                case"J":
                    t = 74;
                    break;
                case"K":
                    t = 75;
                    break;
                case"L":
                    t = 76;
                    break;
                case"M":
                    t = 77;
                    break;
                case"N":
                    t = 78;
                    break;
                case"O":
                    t = 79;
                    break;
                case"P":
                    t = 80;
                    break;
                case"Q":
                    t = 81;
                    break;
                case"R":
                    t = 82;
                    break;
                case"S":
                    t = 83;
                    break;
                case"T":
                    t = 84;
                    break;
                case"U":
                    t = 85;
                    break;
                case"V":
                    t = 86;
                    break;
                case"W":
                    t = 87;
                    break;
                case"X":
                    t = 88;
                    break;
                case"Y":
                    t = 89;
                    break;
                case"Z":
                    t = 90;
                    break;
                case"[":
                    t = 91;
                    break;
                case"\\":
                    t = 92;
                    break;
                case"]":
                    t = 93;
                    break;
                case"^":
                    t = 94;
                    break;
                case"_":
                    t = 95;
                    break;
                case"`":
                    t = 96;
                    break;
                case"a":
                    t = 97;
                    break;
                case"b":
                    t = 98;
                    break;
                case"c":
                    t = 99;
                    break;
                case"d":
                    t = 100;
                    break;
                case"e":
                    t = 101;
                    break;
                case"f":
                    t = 102;
                    break;
                case"g":
                    t = 103;
                    break;
                case"h":
                    t = 104;
                    break;
                case"i":
                    t = 105;
                    break;
                case"j":
                    t = 106;
                    break;
                case"k":
                    t = 107;
                    break;
                case"l":
                    t = 108;
                    break;
                case"m":
                    t = 109;
                    break;
                case"n":
                    t = 110;
                    break;
                case"o":
                    t = 111;
                    break;
                case"p":
                    t = 112;
                    break;
                case"q":
                    t = 113;
                    break;
                case"r":
                    t = 114;
                    break;
                case"s":
                    t = 115;
                    break;
                case"t":
                    t = 116;
                    break;
                case"u":
                    t = 117;
                    break;
                case"v":
                    t = 118;
                    break;
                case"w":
                    t = 119;
                    break;
                case"x":
                    t = 120;
                    break;
                case"y":
                    t = 121;
                    break;
                case"z":
                    t = 122;
                    break;
                case"{":
                    t = 123;
                    break;
                case"|":
                    t = 124;
                    break;
                case"}":
                    t = 125;
                    break;
                case"~":
                    t = 126
            }
            return t
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            LCD: 9,
            LCD_COMMAND: 10
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        directionTable: {Forward: 0, Backward: 1},
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.mkboard.getBlocks = function () {
        return {
            mkboard_analog_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"], ["A6", "6"], ["A7", "7"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                },
                syntax: {js: [], py: []}
            },
            mkboard_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "mkboard_analog_list"}], type: "mkboard_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "mkboardGet",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            mkboard_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "mkboard_get_analog_value",
                        params: [{type: "mkboard_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "mkboard_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "mkboardGet",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = (Entry.hw.portData.ANALOG, e.getNumberValue("VALUE2", e)),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e);
                    if (r > o) {
                        var i = r;
                        r = o, o = i
                    }
                    return a > s && (i = a, a = s, s = i), n -= r, n *= (s - a) / (o - r), n += a, n = Math.min(s, n), Math.max(a, n)
                },
                syntax: {js: [], py: []}
            },
            mkboard_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["13"]}, {
                        type: "arduino_get_port_number",
                        params: ["12"]
                    }], type: "mkboard_get_ultrasonic_value"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "mkboardGet",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1", e), r = e.getNumberValue("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.mkboard.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {js: [], py: []}
            },
            mkboard_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}], type: "mkboard_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "mkboardGet",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.mkboard.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            mkboard_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "mkboard_toggle_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "mkboard",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.mkboard.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.mkboard.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.mkboard.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            mkboard_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "mkboard_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "mkboard",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.mkboard.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            mkboard_tone_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                },
                syntax: {js: [], py: []}
            },
            mkboard_tone_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "mkboard_tone_list"}], type: "mkboard_tone_value"},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getNumberValue("NOTE")
                },
                syntax: {js: [], py: []}
            },
            mkboard_octave_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                },
                syntax: {js: [], py: []}
            },
            mkboard_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        value: 4,
                        params: ["11"]
                    }, {type: "mkboard_tone_list"}, {type: "mkboard_octave_list"}, {type: "text", params: ["1"]}, null],
                    type: "mkboard_set_tone"
                },
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "mkboard",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.mkboard.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getValue("NOTE", e);
                    Entry.Utils.isNumber(o) || (o = Entry.mkboard.toneTable[o]), o < 0 ? o = 0 : o > 12 && (o = 12);
                    var a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), n.SET || (n.SET = {}), 0 === a) return n.SET[r] = {
                        type: Entry.mkboard.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberValue("OCTAVE", e) - 1;
                    s < 0 ? s = 0 : s > 5 && (s = 5);
                    var i = 0;
                    return 0 != o && (i = Entry.mkboard.toneMap[o][s]), a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET[r] = {
                        type: Entry.mkboard.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                },
                syntax: {js: [], py: []}
            },
            mkboard_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: ["10"]}, null], type: "mkboard_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "mkboard",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.mkboard.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            mkboard_list_digital_lcd_line: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Dropdown", options: [["LINE1", "0"], ["LINE2", "1"]], value: "0", fontSize: 11}],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {LINE: 0},
                func: function (t, e) {
                    return e.getField("LINE")
                }
            },
            mkboard_list_digital_lcd_column: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["COL1", "0"], ["COL2", "1"], ["COL3", "2"], ["COL4", "3"], ["COL5", "4"], ["COL6", "5"], ["COL7", "6"], ["COL8", "7"], ["COL9", "8"], ["COL10", "9"], ["COL11", "10"], ["COL12", "11"], ["COL13", "12"], ["COL14", "13"], ["COL15", "14"], ["COL16", "15"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {COLUMN: 0},
                func: function (t, e) {
                    return e.getField("COLUMN")
                }
            },
            mkboard_set_lcd: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic",
                template: Lang.template.mkboard_set_lcd,
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "mkboard_list_digital_lcd_line"}, {type: "mkboard_list_digital_lcd_column"}, {
                        type: "text",
                        params: ["Type text !!"]
                    }, null], type: "mkboard_set_lcd"
                },
                paramsKeyMap: {LINE: 0, COLUMN: 1, STRING: 2},
                class: "mkboardLcd",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    Entry.hw.sendQueue;
                    var n = e.getValue("LINE", e), r = e.getValue("COLUMN", e), o = e.getValue("STRING", e), a = [];
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, Entry.engine.isContinue = !0, e.callReturn());
                    if ("string" == typeof o) for (var s = 0; s < o.length; s++) a[s] = Entry.mkboard.toByte(o[s]); else if ("number" == typeof o) {
                        var i = o.toString();
                        for (s = 0; s < i.length; s++) a[s] = Entry.mkboard.toByte(i[s])
                    } else a[0] = o;
                    Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), e.isStart = !0, e.timeFlag = 1;
                    var l = 60 / (Entry.FPS || 60) * 50;
                    return Entry.hw.sendQueue.SET[n] = {
                        type: Entry.mkboard.sensorTypes.LCD,
                        data: {
                            line: n,
                            column: r,
                            text0: a[0],
                            text1: a[1],
                            text2: a[2],
                            text3: a[3],
                            text4: a[4],
                            text5: a[5],
                            text6: a[6],
                            text7: a[7],
                            text8: a[8],
                            text9: a[9],
                            text10: a[10],
                            text11: a[11],
                            text12: a[12],
                            text13: a[13],
                            text14: a[14],
                            text15: a[15]
                        },
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, l), e
                },
                syntax: {js: [], py: ["mkboard.mkboard_set_lcd(%1, %2, %3)"]}
            },
            mkboard_list_lcd_command: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["LCD_BLUE", "0"], ["LCD_GREEN", "1"], ["LCD_CLEAR", "2"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {COMMAND: 0},
                func: function (t, e) {
                    return e.getField("COMMAND")
                }
            },
            mkboard_lcd_command: {
                color: "#00979D",
                skeleton: "basic",
                template: Lang.template.mkboard_lcd_command,
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "mkboard_list_lcd_command"}, null], type: "mkboard_lcd_command"},
                paramsKeyMap: {COMMAND: 0},
                class: "mkboardLcd",
                isNotFor: ["mkboard"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("COMMAND", e), o = e.getNumberValue("COMMAND", e);
                    return n.SET || (n.SET = {}), n.SET[0] = {
                        type: Entry.mkboard.sensorTypes.LCD_COMMAND,
                        data: {value: r, command: o},
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Roboid = {
        TURTLE_SENSOR: {
            floor: 0,
            accelerationX: 0,
            accelerationY: 0,
            accelerationZ: 0,
            button: 0,
            colorNumber: -1,
            colorPattern: -1
        },
        robots: {},
        setZero: function () {
            var t = Entry.Roboid.robots;
            for (var e in t) t[e].setZero();
            Entry.hw.update(), Entry.Roboid.removeAllTimeouts()
        },
        createHamster: function (t) {
            return {
                packet: {module: "hamster", index: t},
                lineTracerModeId: 0,
                lineTracerStateId: -1,
                tempo: 60,
                boardCommand: 0,
                setZero: function () {
                    var t = Entry.Hamster.PORT_MAP, e = this.packet;
                    for (var n in t) e[n] = t[n];
                    this.lineTracerModeId = 0, this.lineTracerStateId = -1, this.tempo = 60, this.boardCommand = 0
                },
                setLineTracerMode: function (t) {
                    this.lineTracerModeId = this.lineTracerModeId % 255 + 1, this.packet.lineTracerMode = t, this.packet.lineTracerModeId = this.lineTracerModeId
                }
            }
        },
        createTurtle: function (t) {
            return {
                packet: {module: "turtle", index: t},
                pulseId: 0,
                soundId: 0,
                lineTracerModeId: 0,
                motionId: 0,
                clickedId: -1,
                doubleClickedId: -1,
                longPressedId: -1,
                colorPatternId: -1,
                wheelStateId: -1,
                soundStateId: -1,
                lineTracerStateId: -1,
                tempo: 60,
                setZero: function () {
                    var t = Entry.Turtle.PORT_MAP, e = this.packet;
                    for (var n in t) e[n] = t[n];
                    this.pulseId = 0, this.soundId = 0, this.lineTracerModeId = 0, this.motionId = 0, this.clickedId = -1, this.doubleClickedId = -1, this.longPressedId = -1, this.colorPatternId = -1, this.wheelStateId = -1, this.soundStateId = -1, this.lineTracerStateId = -1, this.tempo = 60
                },
                setPulse: function (t) {
                    this.pulseId = this.pulseId % 255 + 1;
                    var e = this.packet;
                    e.pulse = t, e.pulseId = this.pulseId
                },
                setSound: function (t, e) {
                    if ("number" != typeof e && (e = 1), e < 0 && (e = -1), e) {
                        this.soundId = this.soundId % 255 + 1;
                        var n = this.packet;
                        n.sound = t, n.soundRepeat = e, n.soundId = this.soundId
                    }
                },
                setLineTracerMode: function (t) {
                    this.lineTracerModeId = this.lineTracerModeId % 255 + 1;
                    var e = this.packet;
                    e.lineTracerMode = t, e.lineTracerModeId = this.lineTracerModeId
                },
                setMotion: function (t, e, n, r, o) {
                    this.motionId = this.motionId % 255 + 1;
                    var a = this.packet;
                    a.motionType = t, a.motionUnit = e, a.motionSpeed = n, a.motionValue = r, a.motionRadius = o, a.motionId = this.motionId
                },
                setLedColor: function (t) {
                    var e = this.packet;
                    "RED" == t ? (e.ledRed = 255, e.ledGreen = 0, e.ledBlue = 0) : "ORANGE" == t ? (e.ledRed = 255, e.ledGreen = 63, e.ledBlue = 0) : "YELLOW" == t ? (e.ledRed = 255, e.ledGreen = 255, e.ledBlue = 0) : "GREEN" == t ? (e.ledRed = 0, e.ledGreen = 255, e.ledBlue = 0) : "CYAN" == t ? (e.ledRed = 0, e.ledGreen = 255, e.ledBlue = 255) : "BLUE" == t ? (e.ledRed = 0, e.ledGreen = 0, e.ledBlue = 255) : "VIOLET" == t ? (e.ledRed = 63, e.ledGreen = 0, e.ledBlue = 255) : "MAGENTA" == t ? (e.ledRed = 255, e.ledGreen = 0, e.ledBlue = 255) : "WHITE" == t && (e.ledRed = 255, e.ledGreen = 255, e.ledBlue = 255)
                }
            }
        },
        getHamster: function (t) {
            var e = "hamster" + t, n = this.robots[e];
            return n || (n = this.createHamster(t), this.robots[e] = n, Entry.hw.sendQueue[e] = n.packet), n
        },
        getTurtle: function (t) {
            var e = "turtle" + t, n = this.robots[e];
            return n || (n = this.createTurtle(t), this.robots[e] = n, Entry.hw.sendQueue[e] = n.packet), n
        },
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        name: "roboid",
        url: "http://robomation.net/",
        imageName: "block_roboid.png",
        title: {en: "Roboid", ko: "로보이드"},
        monitorTemplate: {
            imgPath: "hw/transparent.png",
            width: 2,
            height: 2,
            listPorts: {
                hamster0leftProximity: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_left_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0rightProximity: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_right_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0leftFloor: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_left_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0rightFloor: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_right_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0accelerationX: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0accelerationY: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0accelerationZ: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0light: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_light,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0temperature: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_temperature,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0inputA: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_input_a,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster0inputB: {
                    name: Lang.Menus.hamster + " 0: " + Lang.Blocks.HAMSTER_sensor_input_b,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle0colorNumber: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_color_number,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle0floor: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_floor,
                    type: "input",
                    pos: {x: 193, y: 342}
                },
                turtle0button: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_button,
                    type: "input",
                    pos: {x: 290, y: 30}
                },
                turtle0accelerationX: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle0accelerationY: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle0accelerationZ: {
                    name: Lang.Menus.turtle + " 0: " + Lang.Blocks.ROBOID_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1leftProximity: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_left_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1rightProximity: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_right_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1leftFloor: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_left_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1rightFloor: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_right_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1accelerationX: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1accelerationY: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1accelerationZ: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1light: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_light,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1temperature: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_temperature,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1inputA: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_input_a,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster1inputB: {
                    name: Lang.Menus.hamster + " 1: " + Lang.Blocks.HAMSTER_sensor_input_b,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle1colorNumber: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_color_number,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle1floor: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_floor,
                    type: "input",
                    pos: {x: 193, y: 342}
                },
                turtle1button: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_button,
                    type: "input",
                    pos: {x: 290, y: 30}
                },
                turtle1accelerationX: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle1accelerationY: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle1accelerationZ: {
                    name: Lang.Menus.turtle + " 1: " + Lang.Blocks.ROBOID_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2leftProximity: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_left_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2rightProximity: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_right_proximity,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2leftFloor: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_left_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2rightFloor: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_right_floor,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2accelerationX: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2accelerationY: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2accelerationZ: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2light: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_light,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2temperature: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_temperature,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2inputA: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_input_a,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                hamster2inputB: {
                    name: Lang.Menus.hamster + " 2: " + Lang.Blocks.HAMSTER_sensor_input_b,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle2colorNumber: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_color_number,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle2floor: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_floor,
                    type: "input",
                    pos: {x: 193, y: 342}
                },
                turtle2button: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_button,
                    type: "input",
                    pos: {x: 290, y: 30}
                },
                turtle2accelerationX: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_acceleration_x,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle2accelerationY: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_acceleration_y,
                    type: "input",
                    pos: {x: 0, y: 0}
                },
                turtle2accelerationZ: {
                    name: Lang.Menus.turtle + " 2: " + Lang.Blocks.ROBOID_acceleration_z,
                    type: "input",
                    pos: {x: 0, y: 0}
                }
            },
            mode: "both"
        }
    }, Entry.Roboid.getBlocks = function () {
        return {
            roboid_hamster_hand_found: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}], type: "roboid_hamster_hand_found"},
                paramsKeyMap: {INDEX: 0},
                class: "hamster_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = "hamster" + e.getNumberValue("INDEX"), o = n[r + "leftProximity"],
                        a = n[r + "rightProximity"];
                    return o || (o = 0), a || (a = 0), o > 50 || a > 50
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_hand_found(%1)",
                        textParams: [{type: "Block", accept: "string"}],
                        blockType: "param"
                    }]
                }
            },
            roboid_hamster_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                    value: "leftProximity",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_hamster_value"},
                paramsKeyMap: {INDEX: 0, DEVICE: 1},
                class: "hamster_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData["hamster" + e.getNumberValue("INDEX") + e.getField("DEVICE")];
                    return "number" != typeof n && (n = 0), n
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_left_proximity(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "leftProximity"]
                    }, {
                        syntax: "Roboid.hamster_right_proximity(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "rightProximity"]
                    }, {
                        syntax: "Roboid.hamster_left_floor(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "leftFloor"]
                    }, {
                        syntax: "Roboid.hamster_right_floor(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "rightFloor"]
                    }, {
                        syntax: "Roboid.hamster_acceleration_x(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationX"]
                    }, {
                        syntax: "Roboid.hamster_acceleration_y(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationY"]
                    }, {
                        syntax: "Roboid.hamster_acceleration_z(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationZ"]
                    }, {
                        syntax: "Roboid.hamster_light(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "light"]
                    }, {
                        syntax: "Roboid.hamster_temperature(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "temperature"]
                    }, {
                        syntax: "Roboid.hamster_signal_strength(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "signalStrength"]
                    }, {
                        syntax: "Roboid.hamster_input_a(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "inputA"]
                    }, {
                        syntax: "Roboid.hamster_input_b(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_sensor_left_proximity, "leftProximity"], [Lang.Blocks.HAMSTER_sensor_right_proximity, "rightProximity"], [Lang.Blocks.HAMSTER_sensor_left_floor, "leftFloor"], [Lang.Blocks.HAMSTER_sensor_right_floor, "rightFloor"], [Lang.Blocks.HAMSTER_sensor_acceleration_x, "accelerationX"], [Lang.Blocks.HAMSTER_sensor_acceleration_y, "accelerationY"], [Lang.Blocks.HAMSTER_sensor_acceleration_z, "accelerationZ"], [Lang.Blocks.HAMSTER_sensor_light, "light"], [Lang.Blocks.HAMSTER_sensor_temperature, "temperature"], [Lang.Blocks.HAMSTER_sensor_signal_strength, "signalStrength"], [Lang.Blocks.HAMSTER_sensor_input_a, "inputA"], [Lang.Blocks.HAMSTER_sensor_input_b, "inputB"]],
                            value: "leftProximity",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "inputB"]
                    }]
                }
            },
            roboid_hamster_move_forward_once: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_hamster_move_forward_once"},
                paramsKeyMap: {INDEX: 0},
                class: "hamster_board",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getHamster(r),
                        a = o.packet;
                    if (e.isStart) {
                        if (e.isMoving) {
                            if (1 != o.boardCommand) return e;
                            var s = n["hamster" + r + "leftFloor"], i = n["hamster" + r + "rightFloor"];
                            switch (e.boardState) {
                                case 1:
                                    if (e.count < 2) {
                                        s < 50 && i < 50 ? e.count++ : e.count = 0;
                                        var l = s - i;
                                        a.leftWheel = 45 + .25 * l, a.rightWheel = 45 - .25 * l
                                    } else e.count = 0, e.boardState = 2;
                                    break;
                                case 2:
                                    l = s - i, a.leftWheel = 45 + .25 * l, a.rightWheel = 45 - .25 * l, e.boardState = 3;
                                    var c = setTimeout(function () {
                                        e.boardState = 4, Entry.Roboid.removeTimeout(c)
                                    }, 250);
                                    Entry.Roboid.timeouts.push(c);
                                    break;
                                case 3:
                                    l = s - i, a.leftWheel = 45 + .25 * l, a.rightWheel = 45 - .25 * l;
                                    break;
                                case 4:
                                    a.leftWheel = 0, a.rightWheel = 0, e.boardState = 0, e.isMoving = !1
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.count, delete e.boardState, Entry.engine.isContinue = !1, o.boardCommand = 0, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.count = 0, e.boardState = 1, a.motion = 0, a.leftWheel = 45, a.rightWheel = 45, o.boardCommand = 1, o.setLineTracerMode(0), e
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Roboid.hamster_board_forward(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            roboid_hamster_turn_once: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_hamster_turn_once"},
                paramsKeyMap: {INDEX: 0, DIRECTION: 1},
                class: "hamster_board",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getHamster(r),
                        a = o.packet;
                    if (e.isStart) {
                        if (e.isMoving) {
                            if (2 != o.boardCommand) return e;
                            var s = n["hamster" + r + "leftFloor"], i = n["hamster" + r + "rightFloor"];
                            if (e.isLeft) switch (e.boardState) {
                                case 1:
                                    e.count < 2 ? s > 50 && e.count++ : (e.count = 0, e.boardState = 2);
                                    break;
                                case 2:
                                    s < 20 && (e.boardState = 3);
                                    break;
                                case 3:
                                    e.count < 2 ? s < 20 && e.count++ : (e.count = 0, e.boardState = 4);
                                    break;
                                case 4:
                                    s > 50 && (e.boardState = 5);
                                    break;
                                case 5:
                                    (l = s - i) > -15 ? (a.leftWheel = 0, a.rightWheel = 0, e.boardState = 0, e.isMoving = !1) : (a.leftWheel = .5 * l, a.rightWheel = .5 * -l)
                            } else switch (e.boardState) {
                                case 1:
                                    e.count < 2 ? i > 50 && e.count++ : (e.count = 0, e.boardState = 2);
                                    break;
                                case 2:
                                    i < 20 && (e.boardState = 3);
                                    break;
                                case 3:
                                    e.count < 2 ? i < 20 && e.count++ : (e.count = 0, e.boardState = 4);
                                    break;
                                case 4:
                                    i > 50 && (e.boardState = 5);
                                    break;
                                case 5:
                                    var l;
                                    (l = i - s) > -15 ? (a.leftWheel = 0, a.rightWheel = 0, e.boardState = 0, e.isMoving = !1) : (a.leftWheel = .5 * -l, a.rightWheel = .5 * l)
                            }
                            return e
                        }
                        return delete e.isStart, delete e.isMoving, delete e.count, delete e.boardState, delete e.isLeft, Entry.engine.isContinue = !1, o.boardCommand = 0, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()
                    }
                    return e.isStart = !0, e.isMoving = !0, e.count = 0, e.boardState = 1, a.motion = 0, "LEFT" == e.getField("DIRECTION", e) ? (e.isLeft = !0, a.leftWheel = -45, a.rightWheel = 45) : (e.isLeft = !1, a.leftWheel = 45, a.rightWheel = -45), o.boardCommand = 2, o.setLineTracerMode(0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_board_left(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_board_right(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "RIGHT"]
                    }]
                }
            },
            roboid_hamster_move_forward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["1"]}, null],
                    type: "roboid_hamster_move_forward_for_secs"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, o.motion = 1, o.leftWheel = 30, o.rightWheel = 30, r.boardCommand = 0, r.setLineTracerMode(0);
                    var a = 1e3 * e.getNumberValue("VALUE"), s = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(s)
                    }, a);
                    return Entry.Roboid.timeouts.push(s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_move_forward(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_move_backward_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["1"]}, null],
                    type: "roboid_hamster_move_backward_for_secs"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, o.motion = 2, o.leftWheel = -30, o.rightWheel = -30, r.boardCommand = 0, r.setLineTracerMode(0);
                    var a = 1e3 * e.getNumberValue("VALUE"), s = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(s)
                    }, a);
                    return Entry.Roboid.timeouts.push(s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_move_backward(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_turn_for_secs: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["1"]}, null],
                    type: "roboid_hamster_turn_for_secs"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, "LEFT" == e.getField("DIRECTION", e) ? (o.motion = 3, o.leftWheel = -30, o.rightWheel = 30) : (o.motion = 4, o.leftWheel = 30, o.rightWheel = -30), r.boardCommand = 0, r.setLineTracerMode(0);
                    var a = 1e3 * e.getNumberValue("VALUE"), s = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(s)
                    }, a);
                    return Entry.Roboid.timeouts.push(s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_turn_left(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_turn_right(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_turn_once_left, "LEFT"], [Lang.Blocks.HAMSTER_turn_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "RIGHT"]
                    }]
                }
            },
            roboid_hamster_change_both_wheels_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["10"]}, {
                        type: "text",
                        params: ["10"]
                    }, null], type: "roboid_hamster_change_both_wheels_by"
                },
                paramsKeyMap: {INDEX: 0, LEFT: 1, RIGHT: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet,
                        a = e.getNumberValue("LEFT"), s = e.getNumberValue("RIGHT");
                    return o.motion = 0, o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + a : a, o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s, r.boardCommand = 0, r.setLineTracerMode(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_wheels_by(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_set_both_wheels_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["30"]}, {
                        type: "text",
                        params: ["30"]
                    }, null], type: "roboid_hamster_set_both_wheels_to"
                },
                paramsKeyMap: {INDEX: 0, LEFT: 1, RIGHT: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    return o.motion = 0, o.leftWheel = e.getNumberValue("LEFT"), o.rightWheel = e.getNumberValue("RIGHT"), r.boardCommand = 0, r.setLineTracerMode(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_wheels(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_change_wheel_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["10"]}, null],
                    type: "roboid_hamster_change_wheel_by"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet,
                        a = e.getField("DIRECTION"), s = e.getNumberValue("VALUE");
                    return o.motion = 0, "LEFT" == a ? o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + s : s : "RIGHT" == a ? o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s : (o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + s : s, o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s), r.boardCommand = 0, r.setLineTracerMode(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_left_wheel_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_right_wheel_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.hamster_both_wheels_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_hamster_set_wheel_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["30"]}, null],
                    type: "roboid_hamster_set_wheel_to"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet,
                        a = e.getField("DIRECTION"), s = e.getNumberValue("VALUE");
                    return o.motion = 0, "LEFT" == a ? o.leftWheel = s : "RIGHT" == a ? o.rightWheel = s : (o.leftWheel = s, o.rightWheel = s), r.boardCommand = 0, r.setLineTracerMode(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_left_wheel(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_right_wheel(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.hamster_both_wheels(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_wheel, "LEFT"], [Lang.Blocks.HAMSTER_right_wheel, "RIGHT"], [Lang.Blocks.HAMSTER_both_wheels, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_hamster_follow_line_using: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                    value: "BLACK",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, null, null],
                    type: "roboid_hamster_follow_line_using"
                },
                paramsKeyMap: {INDEX: 0, COLOR: 1, DIRECTION: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet,
                        a = e.getField("COLOR"), s = e.getField("DIRECTION"), i = 1;
                    return "RIGHT" == s ? i = 2 : "BOTH" == s && (i = 3), "WHITE" == a && (i += 7), o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, r.boardCommand = 0, r.setLineTracerMode(i), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_follow_line(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_both_floor_sensors, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }]
                    }]
                }
            },
            roboid_hamster_follow_line_until: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                    value: "BLACK",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, null, null],
                    type: "roboid_hamster_follow_line_until"
                },
                paramsKeyMap: {INDEX: 0, COLOR: 1, DIRECTION: 2},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet,
                        a = Entry.hw.portData, s = e.getField("COLOR"), i = e.getField("DIRECTION"), l = 4;
                    if ("RIGHT" == i ? l = 5 : "FRONT" == i ? l = 6 : "REAR" == i && (l = 7), "WHITE" == s && (l += 7), e.isStart) {
                        var c = a["hamster" + n + "lineTracerStateId"];
                        return c != r.lineTracerStateId && (r.lineTracerStateId = c, 64 == a["hamster" + n + "lineTracerState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, r.setLineTracerMode(0), e.callReturn()) : e
                    }
                    return e.isStart = !0, o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, r.boardCommand = 0, r.setLineTracerMode(l), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_follow_line_until(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_black, "BLACK"], [Lang.Blocks.HAMSTER_color_white, "WHITE"]],
                            value: "BLACK",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_floor_sensor, "LEFT"], [Lang.Blocks.HAMSTER_right_floor_sensor, "RIGHT"], [Lang.Blocks.HAMSTER_front, "FRONT"], [Lang.Blocks.HAMSTER_rear, "REAR"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }]
                    }]
                }
            },
            roboid_hamster_set_following_speed_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, "5", null],
                    type: "roboid_hamster_set_following_speed_to"
                },
                paramsKeyMap: {INDEX: 0, SPEED: 1},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX");
                    return Entry.Roboid.getHamster(n).packet.lineTracerSpeed = Number(e.getField("SPEED", e)), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_line_tracer_speed(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            roboid_hamster_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_hamster_stop"},
                paramsKeyMap: {INDEX: 0},
                class: "hamster_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    return o.motion = 0, o.leftWheel = 0, o.rightWheel = 0, r.boardCommand = 0, r.setLineTracerMode(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Roboid.hamster_stop(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            roboid_hamster_set_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                    value: "4",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null, null], type: "roboid_hamster_set_led_to"},
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, COLOR: 2},
                class: "hamster_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet,
                        o = e.getField("DIRECTION", e), a = Number(e.getField("COLOR", e));
                    return "LEFT" == o ? r.leftLed = a : "RIGHT" == o ? r.rightLed = a : (r.leftLed = a, r.rightLed = a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_left_led(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.colors"
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_right_led(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.colors"
                        }],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.hamster_both_leds(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_color_red, "4"], [Lang.Blocks.HAMSTER_color_yellow, "6"], [Lang.Blocks.HAMSTER_color_green, "2"], [Lang.Blocks.HAMSTER_color_cyan, "3"], [Lang.Blocks.HAMSTER_color_blue, "1"], [Lang.Blocks.HAMSTER_color_magenta, "5"], [Lang.Blocks.HAMSTER_color_white, "7"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.colors"
                        }],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_hamster_clear_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_hamster_clear_led"},
                paramsKeyMap: {INDEX: 0, DIRECTION: 1},
                class: "hamster_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet,
                        o = e.getField("DIRECTION", e);
                    return "LEFT" == o ? r.leftLed = 0 : "RIGHT" == o ? r.rightLed = 0 : (r.leftLed = 0, r.rightLed = 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_left_led_off(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.hamster_right_led_off(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.hamster_both_leds_off(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_left_led, "LEFT"], [Lang.Blocks.HAMSTER_right_led, "RIGHT"], [Lang.Blocks.HAMSTER_both_leds, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_hamster_beep: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_hamster_beep"},
                paramsKeyMap: {INDEX: 0},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, r.buzzer = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1, r.buzzer = 440, r.note = 0;
                    var o = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(o)
                    }, 200);
                    return Entry.Roboid.timeouts.push(o), e
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Roboid.hamster_beep(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            roboid_hamster_change_buzzer_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["10"]}, null],
                    type: "roboid_hamster_change_buzzer_by"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet,
                        o = e.getNumberValue("VALUE");
                    return r.buzzer = void 0 != r.buzzer ? r.buzzer + o : o, r.note = 0, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_buzzer_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_set_buzzer_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["1000"]}, null],
                    type: "roboid_hamster_set_buzzer_to"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet;
                    return r.buzzer = e.getNumberValue("VALUE"), r.note = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Roboid.hamster_buzzer(%1, %2)"}]}
            },
            roboid_hamster_clear_buzzer: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_hamster_clear_buzzer"},
                paramsKeyMap: {INDEX: 0},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet;
                    return r.buzzer = 0, r.note = 0, e.callReturn()
                },
                syntax: {js: [], py: [{syntax: "Roboid.hamster_buzzer_off(%1)"}]}
            },
            roboid_hamster_play_note_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, "4", {type: "text", params: ["0.5"]}, null],
                    type: "roboid_hamster_play_note_for"
                },
                paramsKeyMap: {INDEX: 0, NOTE: 1, OCTAVE: 2, VALUE: 3},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, o.note = 0, e.callReturn());
                    var a = e.getNumberField("NOTE", e), s = e.getNumberField("OCTAVE", e),
                        i = e.getNumberValue("VALUE", e);
                    a += 12 * (s - 1);
                    var l = 60 * i * 1e3 / r.tempo;
                    if (e.isStart = !0, e.timeFlag = 1, o.buzzer = 0, o.note = a, l > 100) {
                        var c = setTimeout(function () {
                            o.note = 0, Entry.Roboid.removeTimeout(c)
                        }, l - 100);
                        Entry.Roboid.timeouts.push(c)
                    }
                    var u = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(u)
                    }, l);
                    return Entry.Roboid.timeouts.push(u), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_note(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.hamster_play_note_for[0]"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_rest_for: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["0.25"]}, null],
                    type: "roboid_hamster_rest_for"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var a = e.getNumberValue("VALUE");
                    a = 60 * a * 1e3 / r.tempo, o.buzzer = 0, o.note = 0;
                    var s = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(s)
                    }, a);
                    return Entry.Roboid.timeouts.push(s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_note_off(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_change_tempo_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["20"]}, null],
                    type: "roboid_hamster_change_tempo_by"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n);
                    return r.packet, r.tempo += e.getNumberValue("VALUE"), r.tempo < 1 && (r.tempo = 1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_tempo_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_set_tempo_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["60"]}, null],
                    type: "roboid_hamster_set_tempo_to"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "hamster_buzzer",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n);
                    return r.packet, r.tempo = e.getNumberValue("VALUE"), r.tempo < 1 && (r.tempo = 1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_tempo(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_hamster_set_port_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_analog_input, "1"], [Lang.Blocks.HAMSTER_digital_input, "2"], [Lang.Blocks.HAMSTER_servo_output, "9"], [Lang.Blocks.HAMSTER_pwm_output, "10"], [Lang.Blocks.HAMSTER_digital_output, "11"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null, null], type: "roboid_hamster_set_port_to"},
                paramsKeyMap: {INDEX: 0, PORT: 1, MODE: 2},
                class: "hamster_port",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet, o = e.getField("PORT", e),
                        a = Number(e.getField("MODE", e)) - 1;
                    return "A" == o ? r.ioModeA = a : "B" == o ? r.ioModeB = a : (r.ioModeA = a, r.ioModeB = a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_io_mode_a(%1, %3)",
                        textParams: [{
                            type: "Block",
                            accept: "string"
                        }, {converter: Entry.block.converters.returnStringValue}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_analog_input, "1"], [Lang.Blocks.HAMSTER_digital_input, "2"], [Lang.Blocks.HAMSTER_servo_output, "9"], [Lang.Blocks.HAMSTER_pwm_output, "10"], [Lang.Blocks.HAMSTER_digital_output, "11"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.modes"
                        }],
                        params: [null, "A"]
                    }, {
                        syntax: "Roboid.hamster_io_mode_b(%1, %3)",
                        textParams: [{
                            type: "Block",
                            accept: "string"
                        }, {converter: Entry.block.converters.returnStringValue}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_analog_input, "1"], [Lang.Blocks.HAMSTER_digital_input, "2"], [Lang.Blocks.HAMSTER_servo_output, "9"], [Lang.Blocks.HAMSTER_pwm_output, "10"], [Lang.Blocks.HAMSTER_digital_output, "11"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.modes"
                        }],
                        params: [null, "B"]
                    }, {
                        syntax: "Roboid.hamster_io_modes(%1, %3)",
                        textParams: [{
                            type: "Block",
                            accept: "string"
                        }, {converter: Entry.block.converters.returnStringValue}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_analog_input, "1"], [Lang.Blocks.HAMSTER_digital_input, "2"], [Lang.Blocks.HAMSTER_servo_output, "9"], [Lang.Blocks.HAMSTER_pwm_output, "10"], [Lang.Blocks.HAMSTER_digital_output, "11"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Hamster.modes"
                        }],
                        params: [null, "AB"]
                    }]
                }
            },
            roboid_hamster_change_output_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["10"]}, null],
                    type: "roboid_hamster_change_output_by"
                },
                paramsKeyMap: {INDEX: 0, PORT: 1, VALUE: 2},
                class: "hamster_port",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet, o = e.getField("PORT"),
                        a = e.getNumberValue("VALUE");
                    return "A" == o ? r.outputA = void 0 != r.outputA ? r.outputA + a : a : "B" == o ? r.outputB = void 0 != r.outputB ? r.outputB + a : a : (r.outputA = void 0 != r.outputA ? r.outputA + a : a, r.outputB = void 0 != r.outputB ? r.outputB + a : a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_output_a_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "A"]
                    }, {
                        syntax: "Roboid.hamster_output_b_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "B"]
                    }, {
                        syntax: "Roboid.hamster_outputs_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "AB"]
                    }]
                }
            },
            roboid_hamster_set_output_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                    value: "A",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["100"]}, null],
                    type: "roboid_hamster_set_output_to"
                },
                paramsKeyMap: {INDEX: 0, PORT: 1, VALUE: 2},
                class: "hamster_port",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getHamster(n).packet, o = e.getField("PORT"),
                        a = e.getNumberValue("VALUE");
                    return "A" == o ? r.outputA = a : "B" == o ? r.outputB = a : (r.outputA = a, r.outputB = a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.hamster_output_a(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "A"]
                    }, {
                        syntax: "Roboid.hamster_output_b(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "B"]
                    }, {
                        syntax: "Roboid.hamster_outputs(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.HAMSTER_port_a, "A"], [Lang.Blocks.HAMSTER_port_b, "B"], [Lang.Blocks.HAMSTER_port_ab, "AB"]],
                            value: "A",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "AB"]
                    }]
                }
            },
            roboid_turtle_touching_color: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "2"], [Lang.Blocks.ROBOID_color_orange, "3"], [Lang.Blocks.ROBOID_color_yellow, "4"], [Lang.Blocks.ROBOID_color_green, "5"], [Lang.Blocks.ROBOID_color_sky_blue, "6"], [Lang.Blocks.ROBOID_color_blue, "7"], [Lang.Blocks.ROBOID_color_purple, "8"], [Lang.Blocks.ROBOID_color_black, "1"], [Lang.Blocks.ROBOID_color_white, "9"]],
                    value: "2",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_touching_color"},
                paramsKeyMap: {INDEX: 0, COLOR: 1},
                class: "turtle_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX");
                    return Number(e.getField("COLOR")) - 1 === n["turtle" + r + "colorNumber"]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_touching(%1, %2)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "2"], [Lang.Blocks.ROBOID_color_orange, "3"], [Lang.Blocks.ROBOID_color_yellow, "4"], [Lang.Blocks.ROBOID_color_green, "5"], [Lang.Blocks.ROBOID_color_sky_blue, "6"], [Lang.Blocks.ROBOID_color_blue, "7"], [Lang.Blocks.ROBOID_color_purple, "8"], [Lang.Blocks.ROBOID_color_black, "1"], [Lang.Blocks.ROBOID_color_white, "9"]],
                            value: "2",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.touching_colors"
                        }]
                    }]
                }
            },
            roboid_turtle_is_color_pattern: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                    value: "1",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_turtle_is_color_pattern"},
                paramsKeyMap: {INDEX: 0, COLOR1: 1, COLOR2: 2},
                class: "turtle_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX");
                    return 10 * Number(e.getField("COLOR1")) + Number(e.getField("COLOR2")) === n["turtle" + r + "colorPattern"]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_match_color_pattern(%1, %2, %3)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.pattern_colors"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "1"], [Lang.Blocks.ROBOID_color_yellow, "3"], [Lang.Blocks.ROBOID_color_green, "4"], [Lang.Blocks.ROBOID_color_sky_blue, "5"], [Lang.Blocks.ROBOID_color_blue, "6"], [Lang.Blocks.ROBOID_color_purple, "7"]],
                            value: "3",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.pattern_colors"
                        }]
                    }]
                }
            },
            roboid_turtle_button_state: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                    value: "clicked",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_button_state"},
                paramsKeyMap: {INDEX: 0, EVENT: 1},
                class: "turtle_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    return 1 === Entry.hw.portData["turtle" + e.getNumberValue("INDEX") + e.getField("EVENT")]
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_clicked(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "clicked"]
                    }, {
                        syntax: "Roboid.turtle_double_clicked(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "doubleClicked"]
                    }, {
                        syntax: "Roboid.turtle_long_pressed(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_clicked, "clicked"], [Lang.Blocks.ROBOID_double_clicked, "doubleClicked"], [Lang.Blocks.ROBOID_long_pressed, "longPressed"]],
                            value: "clicked",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "longPressed"]
                    }]
                }
            },
            roboid_turtle_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                    value: "colorNumber",
                    fontSize: 11
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_value"},
                paramsKeyMap: {INDEX: 0, DEVICE: 1},
                class: "turtle_sensor",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = e.getField("DEVICE"),
                        a = n["turtle" + r + o];
                    return "number" != typeof a && (a = Entry.Roboid.TURTLE_SENSOR[o]), a
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_color_number(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "colorNumber"]
                    }, {
                        syntax: "Roboid.turtle_color_pattern(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "colorPattern"]
                    }, {
                        syntax: "Roboid.turtle_floor(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "floor"]
                    }, {
                        syntax: "Roboid.turtle_button(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "button"]
                    }, {
                        syntax: "Roboid.turtle_acceleration_x(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationX"]
                    }, {
                        syntax: "Roboid.turtle_acceleration_y(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationY"]
                    }, {
                        syntax: "Roboid.turtle_acceleration_z(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_number, "colorNumber"], [Lang.Blocks.ROBOID_color_pattern, "colorPattern"], [Lang.Blocks.ROBOID_floor, "floor"], [Lang.Blocks.ROBOID_button, "button"], [Lang.Blocks.ROBOID_acceleration_x, "accelerationX"], [Lang.Blocks.ROBOID_acceleration_y, "accelerationY"], [Lang.Blocks.ROBOID_acceleration_z, "accelerationZ"]],
                            value: "colorNumber",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "accelerationZ"]
                    }]
                }
            },
            roboid_turtle_move_forward_unit: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "CM",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["6"]}, null, null],
                    type: "roboid_turtle_move_forward_unit"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1, UNIT: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "wheelStateId"];
                        return s != o.wheelStateId && (o.wheelStateId = s, 0 == n["turtle" + r + "wheelState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setLineTracerMode(0);
                    var i = e.getField("UNIT"), l = 1;
                    "SEC" == i ? l = 2 : "PULSE" == i && (l = 3);
                    var c = e.getNumberValue("VALUE");
                    return o.setMotion(1, l, 0, c, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_move_forward(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "CM",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }]
                    }]
                }
            },
            roboid_turtle_move_backward_unit: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "CM",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["6"]}, null, null],
                    type: "roboid_turtle_move_backward_unit"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1, UNIT: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "wheelStateId"];
                        return s != o.wheelStateId && (o.wheelStateId = s, 0 == n["turtle" + r + "wheelState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setLineTracerMode(0);
                    var i = e.getField("UNIT"), l = 1;
                    "SEC" == i ? l = 2 : "PULSE" == i && (l = 3);
                    var c = e.getNumberValue("VALUE");
                    return o.setMotion(2, l, 0, c, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_move_backward(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_cm, "CM"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "CM",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }]
                    }]
                }
            },
            roboid_turtle_turn_unit_in_place: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["90"]}, null, null],
                    type: "roboid_turtle_turn_unit_in_place"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2, UNIT: 3},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "wheelStateId"];
                        return s != o.wheelStateId && (o.wheelStateId = s, 0 == n["turtle" + r + "wheelState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setLineTracerMode(0);
                    var i = e.getField("DIRECTION"), l = e.getField("UNIT"), c = 1;
                    "SEC" == l ? c = 2 : "PULSE" == l && (c = 3);
                    var u = e.getNumberValue("VALUE");
                    return "LEFT" == i ? o.setMotion(3, c, 0, u, 0) : o.setMotion(4, c, 0, u, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_turn_left(%1, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.turtle_turn_right(%1, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }],
                        params: [null, "RIGHT"]
                    }]
                }
            },
            roboid_turtle_turn_unit_with_radius_in_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                    value: "HEAD",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["90"]}, null, {
                        type: "text",
                        params: ["6"]
                    }, null, null], type: "roboid_turtle_turn_unit_with_radius_in_direction"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2, UNIT: 3, RADIUS: 4, HEAD: 5},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "wheelStateId"];
                        return s != o.wheelStateId && (o.wheelStateId = s, 0 == n["turtle" + r + "wheelState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setLineTracerMode(0);
                    var i = e.getField("DIRECTION"), l = e.getField("UNIT"), c = 1;
                    "SEC" == l ? c = 2 : "PULSE" == l && (c = 3);
                    var u = e.getNumberValue("VALUE"), p = e.getField("HEAD"), _ = e.getNumberValue("RADIUS");
                    return "LEFT" == i ? "HEAD" == p ? o.setMotion(9, c, 0, u, _) : o.setMotion(10, c, 0, u, _) : "HEAD" == p ? o.setMotion(11, c, 0, u, _) : o.setMotion(12, c, 0, u, _), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_swing_left(%1, %3, %4, %5, %6)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.turtle_swing_right(%1, %3, %4, %5, %6)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: [null, "RIGHT"]
                    }]
                }
            },
            roboid_turtle_pivot_around_wheel_unit_in_direction: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                    value: "DEG",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                    value: "HEAD",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["90"]}, null, null, null],
                    type: "roboid_turtle_pivot_around_wheel_unit_in_direction"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2, UNIT: 3, HEAD: 4},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "wheelStateId"];
                        return s != o.wheelStateId && (o.wheelStateId = s, 0 == n["turtle" + r + "wheelState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, a.leftWheel = 0, a.rightWheel = 0, e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setLineTracerMode(0);
                    var i = e.getField("DIRECTION"), l = e.getField("UNIT"), c = 1;
                    "SEC" == l ? c = 2 : "PULSE" == l && (c = 3);
                    var u = e.getNumberValue("VALUE"), p = e.getField("HEAD");
                    return "LEFT" == i ? "HEAD" == p ? o.setMotion(5, c, 0, u, 0) : o.setMotion(6, c, 0, u, 0) : "HEAD" == p ? o.setMotion(7, c, 0, u, 0) : o.setMotion(8, c, 0, u, 0), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_pivot_left(%1, %3, %4, %5)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.turtle_pivot_right(%1, %3, %4, %5)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_unit_deg, "DEG"], [Lang.Blocks.ROBOID_unit_sec, "SEC"], [Lang.Blocks.ROBOID_unit_pulse, "PULSE"]],
                            value: "DEG",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.units"
                        }, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_head, "HEAD"], [Lang.Blocks.ROBOID_tail, "TAIL"]],
                            value: "HEAD",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.head_tail"
                        }],
                        params: [null, "RIGHT"]
                    }]
                }
            },
            roboid_turtle_change_wheels_by_left_right: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["10"]}, {
                        type: "text",
                        params: ["10"]
                    }, null], type: "roboid_turtle_change_wheels_by_left_right"
                },
                paramsKeyMap: {INDEX: 0, LEFT: 1, RIGHT: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet,
                        a = e.getNumberValue("LEFT"), s = e.getNumberValue("RIGHT");
                    return r.setPulse(0), r.setLineTracerMode(0), r.setMotion(0, 0, 0, 0, 0), o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + a : a, o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_wheels_by(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_set_wheels_to_left_right: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["50"]}, {
                        type: "text",
                        params: ["50"]
                    }, null], type: "roboid_turtle_set_wheels_to_left_right"
                },
                paramsKeyMap: {INDEX: 0, LEFT: 1, RIGHT: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    return r.setPulse(0), r.setLineTracerMode(0), r.setMotion(0, 0, 0, 0, 0), o.leftWheel = e.getNumberValue("LEFT"), o.rightWheel = e.getNumberValue("RIGHT"), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_wheels(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_change_wheel_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["10"]}, null],
                    type: "roboid_turtle_change_wheel_by"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet,
                        a = e.getField("DIRECTION"), s = e.getNumberValue("VALUE");
                    return r.setPulse(0), r.setLineTracerMode(0), r.setMotion(0, 0, 0, 0, 0), "LEFT" == a ? o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + s : s : "RIGHT" == a ? o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s : (o.leftWheel = void 0 != o.leftWheel ? o.leftWheel + s : s, o.rightWheel = void 0 != o.rightWheel ? o.rightWheel + s : s), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_left_wheel_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.turtle_right_wheel_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.turtle_both_wheels_by(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_turtle_set_wheel_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                    value: "LEFT",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["50"]}, null],
                    type: "roboid_turtle_set_wheel_to"
                },
                paramsKeyMap: {INDEX: 0, DIRECTION: 1, VALUE: 2},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet,
                        a = e.getField("DIRECTION"), s = e.getNumberValue("VALUE");
                    return r.setPulse(0), r.setLineTracerMode(0), r.setMotion(0, 0, 0, 0, 0), "LEFT" == a ? o.leftWheel = s : "RIGHT" == a ? o.rightWheel = s : (o.leftWheel = s, o.rightWheel = s), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_left_wheel(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "LEFT"]
                    }, {
                        syntax: "Roboid.turtle_right_wheel(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "RIGHT"]
                    }, {
                        syntax: "Roboid.turtle_both_wheels(%1, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "LEFT"], [Lang.Blocks.ROBOID_right, "RIGHT"], [Lang.Blocks.ROBOID_both, "BOTH"]],
                            value: "LEFT",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }, {type: "Block", accept: "string"}],
                        params: [null, "BOTH"]
                    }]
                }
            },
            roboid_turtle_follow_line: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_black, "10"], [Lang.Blocks.ROBOID_color_red, "11"], [Lang.Blocks.ROBOID_color_green, "13"], [Lang.Blocks.ROBOID_color_blue, "15"], [Lang.Blocks.ROBOID_color_any, "17"]],
                    value: "10",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_turtle_follow_line"},
                paramsKeyMap: {INDEX: 0, COLOR: 1},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    o.leftWheel = 0, o.rightWheel = 0, r.setPulse(0), r.setMotion(0, 0, 0, 0, 0);
                    var a = Number(e.getField("COLOR"));
                    return r.setLineTracerMode(a), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_follow_line(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_black, "10"], [Lang.Blocks.ROBOID_color_red, "11"], [Lang.Blocks.ROBOID_color_green, "13"], [Lang.Blocks.ROBOID_color_blue, "15"], [Lang.Blocks.ROBOID_color_any, "17"]],
                            value: "10",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.line_colors"
                        }]
                    }]
                }
            },
            roboid_turtle_follow_line_until: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "61"], [Lang.Blocks.ROBOID_color_yellow, "62"], [Lang.Blocks.ROBOID_color_green, "63"], [Lang.Blocks.ROBOID_color_sky_blue, "64"], [Lang.Blocks.ROBOID_color_blue, "65"], [Lang.Blocks.ROBOID_color_purple, "66"], [Lang.Blocks.ROBOID_color_any, "67"]],
                    value: "61",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_turtle_follow_line_until"},
                paramsKeyMap: {INDEX: 0, COLOR: 1},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "lineTracerStateId"];
                        return s != o.lineTracerStateId && (o.lineTracerStateId = s, 2 == n["turtle" + r + "lineTracerState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(0), e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setMotion(0, 0, 0, 0, 0);
                    var i = Number(e.getField("COLOR"));
                    return o.setLineTracerMode(i), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_follow_black_line_until(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "61"], [Lang.Blocks.ROBOID_color_yellow, "62"], [Lang.Blocks.ROBOID_color_green, "63"], [Lang.Blocks.ROBOID_color_sky_blue, "64"], [Lang.Blocks.ROBOID_color_blue, "65"], [Lang.Blocks.ROBOID_color_purple, "66"], [Lang.Blocks.ROBOID_color_any, "67"]],
                            value: "61",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.target_colors"
                        }]
                    }]
                }
            },
            roboid_turtle_follow_line_until_black: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "71"], [Lang.Blocks.ROBOID_color_green, "73"], [Lang.Blocks.ROBOID_color_blue, "75"], [Lang.Blocks.ROBOID_color_any, "77"]],
                    value: "71",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, null],
                    type: "roboid_turtle_follow_line_until_black"
                },
                paramsKeyMap: {INDEX: 0, COLOR: 1},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "lineTracerStateId"];
                        return s != o.lineTracerStateId && (o.lineTracerStateId = s, 2 == n["turtle" + r + "lineTracerState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(0), e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setMotion(0, 0, 0, 0, 0);
                    var i = Number(e.getField("COLOR"));
                    return o.setLineTracerMode(i), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_follow_line_until_black(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "71"], [Lang.Blocks.ROBOID_color_green, "73"], [Lang.Blocks.ROBOID_color_blue, "75"], [Lang.Blocks.ROBOID_color_any, "77"]],
                            value: "71",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.color_lines"
                        }]
                    }]
                }
            },
            roboid_turtle_cross_intersection: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_cross_intersection"},
                paramsKeyMap: {INDEX: 0},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "lineTracerStateId"];
                        return s != o.lineTracerStateId && (o.lineTracerStateId = s, 2 == n["turtle" + r + "lineTracerState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(0), e.callReturn()) : e
                    }
                    return e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setMotion(0, 0, 0, 0, 0), o.setLineTracerMode(40), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_intersection_forward(%1)",
                        textParams: [{type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_turn_at_intersection: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                    value: "20",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_turtle_turn_at_intersection"},
                paramsKeyMap: {INDEX: 0, DIRECTION: 1},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "lineTracerStateId"];
                        return s != o.lineTracerStateId && (o.lineTracerStateId = s, 2 == n["turtle" + r + "lineTracerState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, o.setLineTracerMode(0), e.callReturn()) : e
                    }
                    e.isStart = !0, a.leftWheel = 0, a.rightWheel = 0, o.setPulse(0), o.setMotion(0, 0, 0, 0, 0);
                    var i = Number(e.getField("DIRECTION"));
                    return o.setLineTracerMode(i), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_intersection_left(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "20"]
                    }, {
                        syntax: "Roboid.turtle_intersection_right(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "30"]
                    }, {
                        syntax: "Roboid.turtle_intersection_uturn(%1)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_left, "20"], [Lang.Blocks.ROBOID_right, "30"], [Lang.Blocks.ROBOID_back, "50"]],
                            value: "20",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        params: [null, "50"]
                    }]
                }
            },
            roboid_turtle_set_following_speed_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, "5", null], type: "roboid_turtle_set_following_speed_to"},
                paramsKeyMap: {INDEX: 0, SPEED: 1},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n).packet,
                        o = Number(e.getField("SPEED"));
                    return r.lineTracerSpeed = o, r.lineTracerGain = o, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_line_tracer_speed(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            roboid_turtle_stop: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_stop"},
                paramsKeyMap: {INDEX: 0},
                class: "turtle_wheel",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    return o.leftWheel = 0, o.rightWheel = 0, r.setPulse(0), r.setLineTracerMode(0), r.setMotion(0, 0, 0, 0, 0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Roboid.turtle_stop(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            roboid_turtle_set_head_led_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_color_red, "RED"], [Lang.Blocks.ROBOID_color_orange, "ORANGE"], [Lang.Blocks.ROBOID_color_yellow, "YELLOW"], [Lang.Blocks.ROBOID_color_green, "GREEN"], [Lang.Blocks.ROBOID_color_sky_blue, "CYAN"], [Lang.Blocks.ROBOID_color_blue, "BLUE"], [Lang.Blocks.ROBOID_color_violet, "VIOLET"], [Lang.Blocks.ROBOID_color_purple, "MAGENTA"], [Lang.Blocks.ROBOID_color_white, "WHITE"]],
                    value: "RED",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, null], type: "roboid_turtle_set_head_led_to"},
                paramsKeyMap: {INDEX: 0, COLOR: 1},
                class: "turtle_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n),
                        o = (r.packet, e.getField("COLOR"));
                    return r.setLedColor(o), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_led_color(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_color_red, "RED"], [Lang.Blocks.ROBOID_color_orange, "ORANGE"], [Lang.Blocks.ROBOID_color_yellow, "YELLOW"], [Lang.Blocks.ROBOID_color_green, "GREEN"], [Lang.Blocks.ROBOID_color_sky_blue, "CYAN"], [Lang.Blocks.ROBOID_color_blue, "BLUE"], [Lang.Blocks.ROBOID_color_violet, "VIOLET"], [Lang.Blocks.ROBOID_color_purple, "MAGENTA"], [Lang.Blocks.ROBOID_color_white, "WHITE"]],
                            value: "RED",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.led_colors"
                        }]
                    }]
                }
            },
            roboid_turtle_change_head_led_by_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["10"]}, {
                        type: "text",
                        params: ["0"]
                    }, {type: "text", params: ["0"]}, null], type: "roboid_turtle_change_head_led_by_rgb"
                },
                paramsKeyMap: {INDEX: 0, RED: 1, GREEN: 2, BLUE: 3},
                class: "turtle_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n).packet,
                        o = e.getNumberValue("RED"), a = e.getNumberValue("GREEN"), s = e.getNumberValue("BLUE");
                    return r.ledRed = void 0 != r.ledRed ? r.ledRed + o : o, r.ledGreen = void 0 != r.ledGreen ? r.ledGreen + a : a, r.ledBlue = void 0 != r.ledBlue ? r.ledBlue + s : s, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_led_by(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_set_head_led_to_rgb: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["255"]}, {
                        type: "text",
                        params: ["0"]
                    }, {type: "text", params: ["0"]}, null], type: "roboid_turtle_set_head_led_to_rgb"
                },
                paramsKeyMap: {INDEX: 0, RED: 1, GREEN: 2, BLUE: 3},
                class: "turtle_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n).packet;
                    return r.ledRed = e.getNumberValue("RED"), r.ledGreen = e.getNumberValue("GREEN"), r.ledBlue = e.getNumberValue("BLUE"), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_led(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_clear_head_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_clear_head_led"},
                paramsKeyMap: {INDEX: 0},
                class: "turtle_led",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n).packet;
                    return r.ledRed = 0, r.ledGreen = 0, r.ledBlue = 0, e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{syntax: "Roboid.turtle_led_off(%1)", textParams: [{type: "Block", accept: "string"}]}]
                }
            },
            roboid_turtle_play_sound_times: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["1"]}, null],
                    type: "roboid_turtle_play_sound_times"
                },
                paramsKeyMap: {INDEX: 0, SOUND: 1, COUNT: 2},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    o.buzzer = 0, o.note = 0;
                    var a = Number(e.getField("SOUND")), s = e.getNumberValue("COUNT");
                    return s && r.setSound(a, s), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_sound(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.sounds"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_play_sound_times_until_done: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, {type: "text", params: ["1"]}, null],
                    type: "roboid_turtle_play_sound_times_until_done"
                },
                paramsKeyMap: {INDEX: 0, SOUND: 1, COUNT: 2},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = Entry.hw.portData, r = e.getNumberValue("INDEX"), o = Entry.Roboid.getTurtle(r),
                        a = o.packet;
                    if (e.isStart) {
                        var s = n["turtle" + r + "soundStateId"];
                        return s != o.soundStateId && (o.soundStateId = s, 0 == n["turtle" + r + "soundState"]) ? (delete e.isStart, Entry.engine.isContinue = !1, e.callReturn()) : e
                    }
                    e.isStart = !0, a.buzzer = 0, a.note = 0;
                    var i = Number(e.getField("SOUND")), l = e.getNumberValue("COUNT");
                    return l ? (o.setSound(i, l), e) : (o.sound = 0, o.soundRepeat = 1, delete e.isStart, Entry.engine.isContinue = !1, e.callReturn())
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_sound_until_done(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ROBOID_sound_beep, "1"], [Lang.Blocks.ROBOID_sound_random_beep, "2"], [Lang.Blocks.ROBOID_sound_siren, "3"], [Lang.Blocks.ROBOID_sound_engine, "4"], [Lang.Blocks.ROBOID_sound_robot, "5"], [Lang.Blocks.ROBOID_sound_march, "6"], [Lang.Blocks.ROBOID_sound_birthday, "7"], [Lang.Blocks.ROBOID_sound_dibidibidip, "8"], [Lang.Blocks.ROBOID_sound_good_job, "9"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.sounds"
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_change_buzzer_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["10"]}, null],
                    type: "roboid_turtle_change_buzzer_by"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet,
                        a = e.getNumberValue("VALUE");
                    return o.buzzer = void 0 != o.buzzer ? o.buzzer + a : a, o.note = 0, r.setSound(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_buzzer_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_set_buzzer_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["1000"]}, null],
                    type: "roboid_turtle_set_buzzer_to"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    return o.buzzer = e.getNumberValue("VALUE"), o.note = 0, r.setSound(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_buzzer(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_clear_sound: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null], type: "roboid_turtle_clear_sound"},
                paramsKeyMap: {INDEX: 0},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    return o.buzzer = 0, o.note = 0, r.setSound(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_sound_off(%1)",
                        textParams: [{type: "Block", accept: "string"}],
                        params: [null, null]
                    }]
                }
            },
            roboid_turtle_play_note: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["0"]}, null, "4", null], type: "roboid_turtle_play_note"},
                paramsKeyMap: {INDEX: 0, NOTE: 1, OCTAVE: 2},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet,
                        a = e.getNumberField("NOTE", e), s = e.getNumberField("OCTAVE", e);
                    return o.buzzer = 0, a += 12 * (s - 1), o.note = a, r.setSound(0), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_pitch(%1, %2, %3)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.notes"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }]
                    }]
                }
            },
            roboid_turtle_play_note_for_beats: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                    value: "4",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                    value: "1",
                    fontSize: 11
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, null, "4", {type: "text", params: ["0.5"]}, null],
                    type: "roboid_turtle_play_note_for_beats"
                },
                paramsKeyMap: {INDEX: 0, NOTE: 1, OCTAVE: 2, VALUE: 3},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, o.note = 0, e.callReturn());
                    var a = e.getNumberField("NOTE", e), s = e.getNumberField("OCTAVE", e),
                        i = e.getNumberValue("VALUE", e);
                    a += 12 * (s - 1);
                    var l = 60 * i * 1e3 / r.tempo;
                    if (e.isStart = !0, e.timeFlag = 1, o.buzzer = 0, o.note = a, r.setSound(0), l > 100) {
                        var c = setTimeout(function () {
                            o.note = 0, Entry.Roboid.removeTimeout(c)
                        }, l - 100);
                        Entry.Roboid.timeouts.push(c)
                    }
                    var u = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(u)
                    }, l);
                    return Entry.Roboid.timeouts.push(u), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_note(%1, %2, %3, %4)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ALBERT_note_c + "", "4"], [Lang.Blocks.ALBERT_note_c + "#", "5"], [Lang.Blocks.ALBERT_note_d + "", "6"], [Lang.Blocks.ALBERT_note_e + "b", "7"], [Lang.Blocks.ALBERT_note_e + "", "8"], [Lang.Blocks.ALBERT_note_f + "", "9"], [Lang.Blocks.ALBERT_note_f + "#", "10"], [Lang.Blocks.ALBERT_note_g + "", "11"], [Lang.Blocks.ALBERT_note_g + "#", "12"], [Lang.Blocks.ALBERT_note_a + "", "13"], [Lang.Blocks.ALBERT_note_b + "b", "14"], [Lang.Blocks.ALBERT_note_b + "", "15"]],
                            value: "4",
                            fontSize: 11,
                            converter: Entry.block.converters.returnValuePartialUpperCase,
                            codeMap: "Entry.CodeMap.Turtle.notes"
                        }, {
                            type: "Dropdown",
                            options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"]],
                            value: "1",
                            fontSize: 11,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_rest_for_beats: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["0.25"]}, null],
                    type: "roboid_turtle_rest_for_beats"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n), o = r.packet;
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var a = e.getNumberValue("VALUE");
                    a = 60 * a * 1e3 / r.tempo, o.buzzer = 0, o.note = 0, r.setSound(0);
                    var s = setTimeout(function () {
                        e.timeFlag = 0, Entry.Roboid.removeTimeout(s)
                    }, a);
                    return Entry.Roboid.timeouts.push(s), e
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_note_off(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_change_tempo_by: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["20"]}, null],
                    type: "roboid_turtle_change_tempo_by"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n);
                    return r.tempo += e.getNumberValue("VALUE"), r.tempo < 1 && (r.tempo = 1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_tempo_by(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            roboid_turtle_set_tempo_to: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["0"]}, {type: "text", params: ["60"]}, null],
                    type: "roboid_turtle_set_tempo_to"
                },
                paramsKeyMap: {INDEX: 0, VALUE: 1},
                class: "turtle_sound",
                isNotFor: ["roboid"],
                func: function (t, e) {
                    var n = e.getNumberValue("INDEX"), r = Entry.Roboid.getTurtle(n);
                    return r.tempo = e.getNumberValue("VALUE"), r.tempo < 1 && (r.tempo = 1), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Roboid.turtle_tempo(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.ArduinoNano = {
        name: "ArduinoNano",
        url: "http://www.arduino.cc/",
        imageName: "arduinoNano.png",
        title: {ko: "아두이노 Nano", en: "Arduino Nano"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.ArduinoNano.setLanguage = function () {
        return {
            ko: {
                template: {
                    arduino_nano_get_analog_value: "아날로그 %1 번 센서값",
                    arduino_nano_get_analog_value_map: "%1 의 범위를 %2 ~ %3 에서 %4 ~ %5 로 바꾼값",
                    arduino_nano_get_ultrasonic_value: "울트라소닉 Trig %1 Echo %2 센서값",
                    arduino_nano_toggle_led: "디지털 %1 번 핀 %2 %3",
                    arduino_nano_digital_pwm: "디지털 %1 번 핀을 %2 (으)로 정하기 %3",
                    arduino_nano_set_tone: "디지털 %1 번 핀의 버저를 %2 %3 음으로 %4 초 연주하기 %5",
                    arduino_nano_set_servo: "디지털 %1 번 핀의 서보모터를 %2 의 각도로 정하기 %3",
                    arduino_nano_get_digital: "디지털 %1 번 센서값"
                }
            },
            en: {
                template: {
                    arduino_nano_get_analog_value: "Analog %1 Sensor value",
                    arduino_nano_get_analog_value_map: "Map Value %1 %2 ~ %3 to %4 ~ %5",
                    arduino_nano_get_ultrasonic_value: "Read ultrasonic sensor trig pin %1 echo pin %2",
                    arduino_nano_toggle_led: "Digital %1 Pin %2 %3",
                    arduino_nano_digital_pwm: "Digital %1 Pin %2 %3",
                    arduino_nano_set_tone: "Play tone pin %1 on note %2 octave %3 beat %4 %5",
                    arduino_nano_set_servo: "Set servo pin %1 angle as %2 %3",
                    arduino_nano_get_digital: "Digital %1 Sensor value"
                }
            }
        }
    }, Entry.ArduinoNano.getBlocks = function () {
        return {
            arduino_nano_analog_list: {
                parent: "arduino_ext_analog_list",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"], ["A6", "6"], ["A7", "7"]],
                    value: "0",
                    fontSize: 11
                }],
                syntax: void 0
            },
            arduino_nano_get_analog_value: {
                parent: "arduino_ext_get_analog_value",
                template: Lang.template.arduino_ext_get_analog_value,
                def: {params: [{type: "arduino_nano_analog_list"}], type: "arduino_nano_get_analog_value"},
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_get_analog_value_map: {
                parent: "arduino_ext_get_analog_value_map",
                template: Lang.template.arduino_ext_get_analog_value_map,
                def: {
                    params: [{
                        type: "arduino_nano_get_analog_value",
                        params: [{type: "arduino_nano_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "arduino_nano_get_analog_value_map"
                },
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_get_ultrasonic_value: {
                template: Lang.template.arduino_ext_get_ultrasonic_value,
                parent: "arduino_ext_get_ultrasonic_value",
                def: {
                    params: [{type: "arduino_get_port_number", params: ["2"]}, {
                        type: "arduino_get_port_number",
                        params: ["4"]
                    }], type: "arduino_nano_get_ultrasonic_value"
                },
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_get_digital: {
                template: Lang.template.arduino_ext_get_digital,
                parent: "arduino_ext_get_digital",
                def: {params: [{type: "arduino_get_port_number"}], type: "arduino_nano_get_digital"},
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_toggle_led: {
                template: Lang.template.arduino_ext_toggle_led,
                parent: "arduino_ext_toggle_led",
                def: {
                    params: [{type: "arduino_get_port_number"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "arduino_nano_toggle_led"
                },
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_digital_pwm: {
                template: Lang.template.arduino_ext_digital_pwm,
                parent: "arduino_ext_digital_pwm",
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "arduino_nano_digital_pwm"
                },
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_set_tone: {
                template: Lang.template.arduino_ext_set_tone,
                parent: "arduino_ext_set_tone",
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        value: 4
                    }, {type: "arduino_ext_tone_list"}, {type: "arduino_ext_octave_list"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "arduino_nano_set_tone"
                },
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            },
            arduino_nano_set_servo: {
                template: Lang.template.arduino_ext_set_servo,
                parent: "arduino_ext_set_servo",
                def: {params: [{type: "arduino_get_port_number"}, null], type: "arduino_nano_set_servo"},
                isNotFor: ["ArduinoNano"],
                syntax: void 0
            }
        }
    }
}, function (t, e, n) {
    var r = n(19), o = n(12);
    n(39)("keys", function () {
        return function (t) {
            return o(r(t))
        }
    })
}, function (t, e, n) {
    n(352), t.exports = n(1).Object.keys
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(0)) && r.__esModule ? r : {default: r};
    Entry.ardublock = {
        name: "ardublock",
        url: "http://www.jkelec.co.kr/",
        imageName: "ardublock.png",
        title: {ko: "아두블럭", en: "ardublock"},
        setZero: function () {
            Entry.hw.sendQueue.SET ? (0, o.default)(Entry.hw.sendQueue.SET).forEach(function (t) {
                Entry.hw.sendQueue.SET[t].data = 0, Entry.hw.sendQueue.SET[t].time = (new Date).getTime()
            }) : Entry.hw.sendQueue = {GET: {}, SET: {}}, Entry.hw.update()
        },
        sensorTypes: {
            ALIVE: 0,
            DIGITAL: 1,
            ANALOG: 2,
            PWM: 3,
            SERVO_PIN: 4,
            TONE: 5,
            PULSEIN: 6,
            ULTRASONIC: 7,
            TIMER: 8,
            MOTOR_LEFT: 9,
            MOTOR_RIGHT: 10
        },
        toneTable: {0: 0, C: 1, CS: 2, D: 3, DS: 4, E: 5, F: 6, FS: 7, G: 8, GS: 9, A: 10, AS: 11, B: 12},
        toneMap: {
            1: [33, 65, 131, 262, 523, 1046, 2093, 4186],
            2: [35, 69, 139, 277, 554, 1109, 2217, 4435],
            3: [37, 73, 147, 294, 587, 1175, 2349, 4699],
            4: [39, 78, 156, 311, 622, 1245, 2849, 4978],
            5: [41, 82, 165, 330, 659, 1319, 2637, 5274],
            6: [44, 87, 175, 349, 698, 1397, 2794, 5588],
            7: [46, 92, 185, 370, 740, 1480, 2960, 5920],
            8: [49, 98, 196, 392, 784, 1568, 3136, 6272],
            9: [52, 104, 208, 415, 831, 1661, 3322, 6645],
            10: [55, 110, 220, 440, 880, 1760, 3520, 7040],
            11: [58, 117, 233, 466, 932, 1865, 3729, 7459],
            12: [62, 123, 247, 494, 988, 1976, 3951, 7902]
        },
        directionTable: {Forward: 0, Backward: 1},
        highList: ["high", "1", "on"],
        lowList: ["low", "0", "off"],
        BlockState: {}
    }, Entry.ardublock.getBlocks = function () {
        return {
            ardublock_analog_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["A0", "0"], ["A1", "1"], ["A2", "2"], ["A3", "3"], ["A4", "4"], ["A5", "5"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getField("PORT")
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_ext_analog_list"}], type: "ardublock_get_analog_value"},
                paramsKeyMap: {PORT: 0},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_analog_value_map: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "ardublock_get_analog_value",
                        params: [{type: "arduino_ext_analog_list"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "ardublock_get_analog_value_map"
                },
                paramsKeyMap: {PORT: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = (Entry.hw.portData.ANALOG, e.getNumberValue("VALUE2", e)),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e);
                    if (r > o) {
                        var i = r;
                        r = o, o = i
                    }
                    return a > s && (i = a, a = s, s = i), n -= r, n *= (s - a) / (o - r), n += a, n = Math.min(s, n), Math.max(a, n)
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_ultrasonic_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["13"]}, {
                        type: "arduino_get_port_number",
                        params: ["12"]
                    }], type: "ardublock_get_ultrasonic_value"
                },
                paramsKeyMap: {PORT1: 0, PORT2: 1},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT1", e), r = e.getNumberValue("PORT2", e);
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), delete Entry.hw.sendQueue.SET[n], delete Entry.hw.sendQueue.SET[r], Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ardublock.sensorTypes.ULTRASONIC] = {
                        port: [n, r],
                        time: (new Date).getTime()
                    }, Entry.hw.portData.ULTRASONIC || 0
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_digital: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}], type: "ardublock_get_digital"},
                paramsKeyMap: {PORT: 0},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT", e), r = Entry.hw.portData.DIGITAL;
                    return Entry.hw.sendQueue.GET || (Entry.hw.sendQueue.GET = {}), Entry.hw.sendQueue.GET[Entry.ardublock.sensorTypes.DIGITAL] = {
                        port: n,
                        time: (new Date).getTime()
                    }, r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            ardublock_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number"}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "ardublock_toggle_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.ardublock.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.ardublock.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ardublock.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_digital_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "text", params: ["255"]}, null],
                    type: "ardublock_digital_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ardublock.sensorTypes.PWM,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_tone_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.silent, "0"], [Lang.Blocks.do_name, "C"], [Lang.Blocks.do_sharp_name, "CS"], [Lang.Blocks.re_name, "D"], [Lang.Blocks.re_sharp_name, "DS"], [Lang.Blocks.mi_name, "E"], [Lang.Blocks.fa_name, "F"], [Lang.Blocks.fa_sharp_name, "FS"], [Lang.Blocks.sol_name, "G"], [Lang.Blocks.sol_sharp_name, "GS"], [Lang.Blocks.la_name, "A"], [Lang.Blocks.la_sharp_name, "AS"], [Lang.Blocks.si_name, "B"]],
                    value: "C",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getField("NOTE")
                },
                syntax: {js: [], py: []}
            },
            ardublock_tone_value: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "ardublock_tone_list"}], type: "ardublock_tone_value"},
                paramsKeyMap: {NOTE: 0},
                func: function (t, e) {
                    return e.getNumberValue("NOTE")
                },
                syntax: {js: [], py: []}
            },
            ardublock_octave_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"]],
                    value: "3",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {OCTAVE: 0},
                func: function (t, e) {
                    return e.getField("OCTAVE")
                },
                syntax: {js: [], py: []}
            },
            ardublock_set_tone: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_get_port_number",
                        value: 4,
                        params: ["11"]
                    }, {type: "ardublock_tone_list"}, {type: "ardublock_octave_list"}, {
                        type: "text",
                        params: ["1"]
                    }, null], type: "ardublock_set_tone"
                },
                paramsKeyMap: {PORT: 0, NOTE: 1, OCTAVE: 2, DURATION: 3},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e);
                    if (e.isStart) return 1 == e.timeFlag ? e : (delete e.timeFlag, delete e.isStart, n.SET[r] = {
                        type: Entry.ardublock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, Entry.engine.isContinue = !1, e.callReturn());
                    var o = e.getValue("NOTE", e);
                    Entry.Utils.isNumber(o) || (o = Entry.ardublock.toneTable[o]), o < 0 ? o = 0 : o > 12 && (o = 12);
                    var a = e.getNumberValue("DURATION", e);
                    if (a < 0 && (a = 0), n.SET || (n.SET = {}), 0 === a) return n.SET[r] = {
                        type: Entry.ardublock.sensorTypes.TONE,
                        data: 0,
                        time: (new Date).getTime()
                    }, e.callReturn();
                    var s = e.getNumberValue("OCTAVE", e) - 1;
                    s < 0 ? s = 0 : s > 5 && (s = 5);
                    var i = 0;
                    return 0 != o && (i = Entry.ardublock.toneMap[o][s]), a *= 1e3, e.isStart = !0, e.timeFlag = 1, n.SET[r] = {
                        type: Entry.ardublock.sensorTypes.TONE,
                        data: {value: i, duration: a},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, a + 32), e
                },
                syntax: {js: [], py: []}
            },
            ardublock_set_servo: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "arduino_get_port_number", params: ["10"]}, null], type: "ardublock_set_servo"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = Entry.hw.sendQueue, r = e.getNumberValue("PORT", e), o = e.getNumberValue("VALUE", e);
                    return o = Math.min(180, o), o = Math.max(0, o), n.SET || (n.SET = {}), n.SET[r] = {
                        type: Entry.ardublock.sensorTypes.SERVO_PIN,
                        data: o,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_motor_direction_list: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1",
                params: [{
                    type: "Dropdown",
                    options: [[Lang.Blocks.ardublock_motor_forward, "0"], [Lang.Blocks.ardublock_motor_backward, "1"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {MOTOR_DIRECTION: 0},
                func: function (t, e) {
                    return e.getField("MOTOR_DIRECTION")
                },
                syntax: {js: [], py: []}
            },
            ardublock_set_left_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "ardublock_motor_direction_list"}, {type: "text", params: ["100"]}, null],
                    type: "ardublock_set_left_motor"
                },
                paramsKeyMap: {MOTOR_DIRECTION: 0, MOTOR_SPEED: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("MOTOR_DIRECTION", e);
                    Entry.Utils.isNumber(n) || (n = Entry.ardublock.directionTable[n]), n < 0 ? n = 0 : n > 1 && (n = 1);
                    var r = e.getNumberValue("MOTOR_SPEED", e) - 1;
                    return r < 0 ? r = 0 : r > 254 && (r = 254), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[0] = {
                        type: Entry.ardublock.sensorTypes.MOTOR_LEFT,
                        data: {direction: n, speed: r},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, 10), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_set_right_motor: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "ardublock_motor_direction_list"}, {type: "text", params: ["100"]}, null],
                    type: "ardublock_set_right_motor"
                },
                paramsKeyMap: {MOTOR_DIRECTION: 0, MOTOR_SPEED: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("MOTOR_DIRECTION", e);
                    Entry.Utils.isNumber(n) || (n = Entry.ardublock.directionTable[n]), n < 0 ? n = 0 : n > 1 && (n = 1);
                    var r = e.getNumberValue("MOTOR_SPEED", e) - 1;
                    return r < 0 ? r = 0 : r > 254 && (r = 254), Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[1] = {
                        type: Entry.ardublock.sensorTypes.MOTOR_RIGHT,
                        data: {direction: n, speed: r},
                        time: (new Date).getTime()
                    }, setTimeout(function () {
                        e.timeFlag = 0
                    }, 10), e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_left_cds_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_ext_analog_list", params: ["0"]}],
                    type: "ardublock_get_left_cds_analog_value"
                },
                paramsKeyMap: {PORT: 0},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_right_cds_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_ext_analog_list", params: ["1"]}],
                    type: "ardublock_get_right_cds_analog_value"
                },
                paramsKeyMap: {PORT: 0},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            },
            ardublock_toggle_left_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["3"]}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "ardublock_toggle_left_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.ardublock.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.ardublock.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ardublock.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_toggle_right_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_port_number", params: ["9"]}, {
                        type: "arduino_get_digital_toggle",
                        params: ["on"]
                    }, null], type: "ardublock_toggle_right_led"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "ardublock",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getValue("VALUE");
                    if ("string" == typeof r && (r = r.toLowerCase()), Entry.ardublock.highList.indexOf(r) > -1) r = 255; else {
                        if (!(Entry.ardublock.lowList.indexOf(r) > -1)) throw new Error;
                        r = 0
                    }
                    return Entry.hw.sendQueue.SET || (Entry.hw.sendQueue.SET = {}), Entry.hw.sendQueue.SET[n] = {
                        type: Entry.ardublock.sensorTypes.DIGITAL,
                        data: r,
                        time: (new Date).getTime()
                    }, e.callReturn()
                },
                syntax: {js: [], py: []}
            },
            ardublock_get_sound_analog_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{type: "arduino_ext_analog_list", params: ["2"]}],
                    type: "ardublock_get_sound_analog_value"
                },
                paramsKeyMap: {PORT: 0},
                class: "ardublockGet",
                isNotFor: ["ardublock"],
                func: function (t, e) {
                    var n = e.getValue("PORT", e), r = Entry.hw.portData.ANALOG;
                    return "A" === n[0] && (n = n.substring(1)), r && r[n] || 0
                },
                syntax: {js: [], py: []}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.nemoino = {
        name: "nemoino",
        imageName: "nemoino.png",
        title: {ko: "네모이노", en: "NEMOino"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        }
    }, Entry.nemoino.getBlocks = function () {
        return {
            nemoino_get_named_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "%1 센서값",
                params: [{
                    type: "Dropdown",
                    options: [["소리", "0"], ["빛", "1"], ["슬라이더", "2"], ["저항-A", "3"], ["저항-B", "4"], ["저항-C", "5"], ["저항-D", "6"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "nemoino_get_named_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "nemoino",
                isNotFor: ["nemoino"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue(e.getField("PORT", e))
                }
            },
            nemoino_get_sound_status: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "소리센서 %1",
                params: [{
                    type: "Dropdown",
                    options: [["소리큼", "GREAT"], ["소리작음", "SMALL"]],
                    value: "GREAT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "nemoino_get_sound_status"},
                paramsKeyMap: {STATUS: 0},
                class: "nemoino",
                isNotFor: ["nemoino"],
                func: function (t, e) {
                    return "GREAT" == e.getField("STATUS", e) ? Entry.hw.getAnalogPortValue(0) > 600 ? 1 : 0 : Entry.hw.getAnalogPortValue(0) < 600 ? 1 : 0
                }
            },
            nemoino_is_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "보드의 %1",
                params: [{
                    type: "Dropdown",
                    options: [["버튼누름", "4"], ["A연결됨", "17"], ["B연결됨", "18"], ["C연결됨", "19"], ["D연결됨", "20"]],
                    value: "4",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "nemoino_is_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "nemoino",
                isNotFor: ["nemoino"],
                func: function (t, e) {
                    var n = e.getNumberField("PORT", e);
                    return n > 14 ? (n -= 14, !Entry.hw.getAnalogPortValue(n)) : !Entry.hw.getDigitalPortValue(n)
                }
            },
            nemoino_get_accelerometer_direction: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "3축 가속도센서 %1",
                params: [{
                    type: "Dropdown",
                    options: [["왼쪽 기울임", "LEFT"], ["오른쪽 기울임", "RIGHT"], ["위쪽 기울임", "FRONT"], ["아래쪽 기울임", "REAR"], ["뒤집힘", "REVERSE"]],
                    value: "LEFT",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "nemoino_get_accelerometer_direction"},
                paramsKeyMap: {DIRECTION: 0},
                class: "nemoino",
                isNotFor: ["nemoino"],
                func: function (t, e) {
                    var n = e.getField("DIRECTION", e), r = 0;
                    "LEFT" == n || "RIGHT" == n ? r = 3 : "FRONT" == n || "REAR" == n ? r = 4 : "REVERSE" == n && (r = 5);
                    var o = Entry.hw.getAnalogPortValue(r);
                    return o -= 265, o *= 180 / 137, o += -90, o = Math.min(90, o), o = Math.max(-90, o), o = Math.round(o), "LEFT" == n || "REAR" == n ? o < -30 ? 1 : 0 : "RIGHT" == n || "FRONT" == n ? o > 30 ? 1 : 0 : "REVERSE" == n ? o < -50 ? 1 : 0 : void 0
                }
            },
            nemoino_get_accelerometer_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                template: "3축 가속도센서 %1 축의 센서값",
                params: [{type: "Dropdown", options: [["X", "3"], ["Y", "4"], ["Z", "5"]], value: "3", fontSize: 11}],
                events: {},
                def: {params: [null], type: "nemoino_get_accelerometer_value"},
                paramsKeyMap: {PORT: 0},
                class: "nemoino",
                isNotFor: ["nemoino"],
                func: function (t, e) {
                    var n = 265, r = 402, o = -90, a = 90, s = Entry.hw.getAnalogPortValue(e.getField("PORT", e));
                    if (n > r) {
                        var i = n;
                        n = r, r = i
                    }
                    return o > a && (i = o, o = a, a = i), s -= n, s *= (a - o) / (r - n), s += o, s = Math.min(a, s), s = Math.max(o, s), Math.round(s)
                }
            },
            nemoino_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["nemoino"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "nemoino_get_number_sensor_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["Nemoino.sensor_value(%1)"]}
            },
            nemoino_get_digital_value: {
                parent: "arduino_get_digital_value",
                isNotFor: ["nemoino"],
                def: {params: [{type: "arduino_get_port_number"}], type: "nemoino_get_digital_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["Nemoino.digital_value(%1)"]}
            },
            nemoino_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["nemoino"],
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "nemoino_toggle_led"},
                class: "arduino_set",
                syntax: {js: [], py: ["Nemoino.toggle_led(%1)"]}
            },
            nemoino_toggle_pwm: {
                parent: "arduino_toggle_pwm",
                isNotFor: ["nemoino"],
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "nemoino_toggle_pwm"
                },
                class: "arduino_set",
                syntax: {js: [], py: ["Nemoino.toggle_pwm(%1, %2)"]}
            },
            nemoino_convert_scale: {
                parent: "arduino_convert_scale",
                isNotFor: ["nemoino"],
                def: {
                    params: [{
                        type: "arduino_get_number_sensor_value",
                        params: [{type: "arduino_get_sensor_number"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "nemoino_convert_scale"
                },
                class: "arduino",
                syntax: {js: [], py: ["Nemoino.convert_scale(%1, %2, %3, %4, %5)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.dplay = {
        name: "dplay",
        url: "http://dplay.cc",
        imageName: "dplay.png",
        title: {ko: "디플레이", en: "DPLAY"},
        vel_value: 255,
        Left_value: 255,
        Right_value: 255,
        setZero: Entry.Arduino.setZero,
        timeouts: [],
        removeTimeout: function (t) {
            clearTimeout(t);
            var e = this.timeouts, n = e.indexOf(t);
            n >= 0 && e.splice(n, 1)
        },
        removeAllTimeouts: function () {
            var t = this.timeouts;
            for (var e in t) clearTimeout(t[e]);
            this.timeouts = []
        },
        monitorTemplate: {
            imgPath: "hw/dplay.png",
            width: 500,
            height: 600,
            listPorts: {
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 13 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a0: {name: Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a1: {name: Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " A5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.dplay.getBlocks = function () {
        return {
            dplay_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["dplay"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "dplay_get_number_sensor_value"},
                class: "dplay_get",
                syntax: {js: [], py: ["Dplay.sensor_value(%1)"]}
            },
            dplay_get_dust_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                template: "아날로그 %1 번  먼지 센서값",
                isNotFor: ["dplay"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "dplay_get_dust_sensor_value"},
                class: "dplay_get",
                syntax: {js: [], py: ["Dplay.dust_sensor_value(%1)"]}
            },
            dplay_get_CO2_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                template: "아날로그 %1 번  이산화탄소 센서값",
                isNotFor: ["dplay"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "dplay_get_CO2_sensor_value"},
                class: "dplay_get",
                syntax: {js: [], py: ["Dplay.co2_sensor_value(%1)"]}
            },
            dplay_get_gas_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["dplay"],
                template: "아날로그 %1 번 가스 센서값",
                def: {params: [{type: "arduino_get_sensor_number"}], type: "dplay_get_gas_sensor_value", id: "hh5b"},
                paramsKeyMap: {VALUE: 0},
                class: "dplay_get",
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    return Entry.hw.getAnalogPortValue(n[1])
                },
                syntax: {js: [], py: ["Dplay.gas_sensor_value(%1)"]}
            },
            dplay_convert_scale: {
                parent: "arduino_convert_scale",
                isNotFor: ["dplay"],
                def: {
                    params: [{
                        type: "arduino_get_number_sensor_value",
                        params: [{type: "arduino_get_sensor_number", id: "bl5e"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "dplay_convert_scale"
                },
                class: "dplay_get",
                syntax: {js: [], py: ["Dplay.convert_scale(%1, %2, %3, %4, %5)"]}
            },
            dplay_get_value: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic_string_field",
                statements: [],
                template: "아날로그 %1 번  %2 센서값",
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["적외선", "INFR"], ["가변저항", "ADJU"], ["빛센서", "LIGHT"], ["온도센서", "TEMP"], ["조이스틱 X", "JOYSX"], ["조이스틱 Y", "JOYSY"]],
                    value: "INFR",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [{type: "arduino_get_sensor_number"}, null], type: "dplay_get_value", id: "hh5b"},
                paramsKeyMap: {VALUE: 0, OPERATOR: 1},
                class: "dplay_get",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    return Entry.hw.getAnalogPortValue(n[1])
                },
                syntax: {js: [], py: ["Dplay.value(%1, %2)"]}
            },
            dplay_get_digital_value: {
                parent: "arduino_get_digital_value",
                isNotFor: ["dplay"],
                def: {params: [{type: "arduino_get_port_number"}], type: "dplay_get_digital_value"},
                class: "dplay_get",
                syntax: {js: [], py: ["Dplay.digital_value(%1)"]}
            },
            dplay_get_switch_status: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "디지털 %1 번 스위치가 %2  ",
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["4", "4"]],
                    value: "2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["눌림", "ON"], ["열림", "OFF"]],
                    value: "ON",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null, null], type: "dplay_get_switch_status"},
                paramsKeyMap: {PORT: 0, STATUS: 1},
                class: "dplay_get",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = 2;
                    return "2" == n ? r = 2 : "4" == n && (r = 4), "ON" == e.getField("STATUS") ? 1 == Entry.hw.getDigitalPortValue(r) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(r) ? 1 : 0
                },
                syntax: {js: [], py: ["Dplay.switch_status(%1, %2)"]}
            },
            dplay_get_tilt: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic_boolean_field",
                statements: [],
                template: "디지털  %1 번 기울기센서가 %2  ",
                params: [{
                    type: "Dropdown",
                    options: [["2", "2"], ["4", "4"]],
                    value: "2",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["왼쪽", "LEFT"], ["오른쪽", "LIGHT"]],
                    value: "LEFT",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null, null], type: "dplay_get_tilt"},
                paramsKeyMap: {PORT: 0, STATUS: 1},
                class: "dplay_get",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = 2;
                    return "2" == n ? r = 2 : "4" == n && (r = 4), "LIGHT" == e.getField("STATUS") ? 1 == Entry.hw.getDigitalPortValue(r) ? 1 : 0 : 0 == Entry.hw.getDigitalPortValue(r) ? 1 : 0
                },
                syntax: {js: [], py: ["Dplay.tilt(%1, %2)"]}
            },
            dplay_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["dplay"],
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "dplay_toggle_led"},
                class: "dplay_set",
                syntax: {js: [], py: ["Dplay.toggle_led(%1)"]}
            },
            dplay_toggle_pwm: {
                parent: "arduino_toggle_pwm",
                isNotFor: ["dplay"],
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "dplay_toggle_pwm"
                },
                class: "dplay_set",
                syntax: {js: [], py: ["Dplay.toggle_pwm(%1, %2)"]}
            },
            dplay_select_led: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "디지털 %1 LED 상태를 %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["7", "7"], ["8", "8"], ["12", "12"], ["13", "13"]],
                    value: "7",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["켜기", "ON"], ["끄기", "OFF"]],
                    value: "ON",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "dplay_select_led"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "dplay_set",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = 7;
                    "7" == n ? r = 7 : "8" == n ? r = 8 : "12" == n ? r = 12 : "13" == n && (r = 13);
                    var o = "ON" == e.getField("OPERATOR") ? 255 : 0;
                    return Entry.hw.setDigitalPortValue(r, o), e.callReturn()
                },
                syntax: {js: [], py: ["Dplay.select_led(%1, %2)"]}
            },
            dplay_DCmotor: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "%1  DC모터 상태를 %2 %3",
                params: [{
                    type: "Dropdown",
                    options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["정방향", "FRONT"], ["역방향", "REAR"], ["정지", "OFF"]],
                    value: "FRONT",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "dplay_DCmotor"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "dplay_set",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = 0, o = 0, a = 0, s = 0;
                    "1" == n ? (r = 3, o = 5) : "2" == n ? (r = 6, o = 11) : "3" == n && (r = 3, o = 5, a = 11, s = 6);
                    var i = Entry.dplay.vel_value, l = e.getField("OPERATOR"), c = 0, u = 0;
                    return "FRONT" == l ? (c = i, u = 0) : "REAR" == l ? (c = 0, u = i) : "OFF" == l && (c = 0, u = 0), Entry.hw.setDigitalPortValue(r, u), Entry.hw.setDigitalPortValue(o, c), Entry.hw.setDigitalPortValue(a, u), Entry.hw.setDigitalPortValue(s, c), e.callReturn()
                },
                syntax: {js: [], py: ["Dplay.dc_motor(%1, %2)"]}
            },
            dplay_DCmotor_speed: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "%1 DC모터 속도를 %2(으)로 정하기 %3",
                params: [{
                    type: "Dropdown",
                    options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["100"]}, null], type: "dplay_DCmotor_speed"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dplay_set",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = 0, r = 0, o = 0, a = 0, s = 0, i = 0, l = 0, c = e.getField("PORT");
                    "1" == c ? (n = 3, r = 5) : "2" == c ? (n = 11, r = 6) : "3" == c && (n = 3, r = 5, o = 11, a = 6);
                    var u = e.getNumberValue("VALUE", e);
                    if (u = Math.max(u, -100), 0 == (u = Math.min(u, 100)) ? (s = 0, i = 0, Entry.dplay.vel_value = i) : u > 0 ? (l = u + 155, s = 0, i = l = Math.round(l), Entry.dplay.vel_value = i) : u < 0 && (l = u - 155, s = -(l = Math.round(l)), i = 0, Entry.dplay.vel_value = s), !e.isStart) {
                        e.isStart = !0, e.timeFlag = 1;
                        var p = setTimeout(function () {
                            e.timeFlag = 2, Entry.dplay.removeTimeout(p)
                        }, 50);
                        return Entry.dplay.timeouts.push(p), e
                    }
                    return 1 == e.timeFlag ? (Entry.hw.setDigitalPortValue(3, 0), Entry.hw.setDigitalPortValue(5, 0), Entry.hw.setDigitalPortValue(6, 0), Entry.hw.setDigitalPortValue(11, 0), e) : 2 == e.timeFlag ? (Entry.hw.setDigitalPortValue(n, s), Entry.hw.setDigitalPortValue(r, i), Entry.hw.setDigitalPortValue(o, s), Entry.hw.setDigitalPortValue(a, i), delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn()) : void 0
                },
                syntax: {js: [], py: ["Dplay.dc_motor_speed(%1, %2)"]}
            },
            dplay_buzzer: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "디지털 10번 부저를 %1 %2 %3 박자로 연주하기",
                params: [{
                    type: "Dropdown",
                    options: [["도", "1"], ["도#", "2"], ["레", "3"], ["미b", "4"], ["미", "5"], ["파", "6"], ["파#", "7"], ["솔", "8"], ["솔#", "9"], ["라", "10"], ["시b", "11"], ["시", "12"], ["무음", "100"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {
                    type: "Dropdown",
                    options: [["1", "1"], ["2", "2"], ["3", "3"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: ["1", "1", {type: "text", params: ["0.5"]}, null], type: "dplay_buzzer"},
                paramsKeyMap: {NOTE: 0, OCTAVE: 1, VALUE: 2},
                class: "dplay_set",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    if (e.isStart) return 1 == e.timeFlag ? e : (Entry.hw.setDigitalPortValue(10, 100), delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn());
                    var n = e.getNumberField("NOTE", e), r = n + 12 * (e.getNumberField("OCTAVE", e) - 1),
                        o = 60 * e.getNumberValue("VALUE") * 1e3 / 60;
                    if (e.isStart = !0, e.timeFlag = 1, 100 == n ? Entry.hw.setDigitalPortValue(10, 100) : Entry.hw.setDigitalPortValue(10, r), o > 100) {
                        var a = setTimeout(function () {
                            Entry.hw.setDigitalPortValue(10, 100), Entry.dplay.removeTimeout(a)
                        }, o - 100);
                        Entry.dplay.timeouts.push(a)
                    }
                    var s = setTimeout(function () {
                        e.timeFlag = 0, Entry.dplay.removeTimeout(s)
                    }, o);
                    return Entry.dplay.timeouts.push(s), e
                },
                syntax: {js: [], py: ["Dplay.buzzer(%1, %2, %3)"]}
            },
            dplay_servo: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "디지털 9번 서보모터 각도를 %1 (도)로 이동",
                params: [{type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {params: [{type: "text", params: ["180"]}, null], type: "dplay_servo"},
                paramsKeyMap: {VALUE: 0},
                class: "dplay_set",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE");
                    return n = Math.round(n), n = Math.max(n, 1), n = Math.min(n, 179), Entry.hw.setDigitalPortValue(9, n), e.callReturn()
                },
                syntax: {js: [], py: ["Dplay.servo(%1)"]}
            },
            dplay_Robot_run: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "로봇을 %1 하기 %2",
                params: [{
                    type: "Dropdown",
                    options: [["전진", "1"], ["후진", "2"], ["우회전", "3"], ["좌회전", "4"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null], type: "dplay_Robot_run"},
                paramsKeyMap: {PORT: 0},
                class: "dplay_robot",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = e.getField("PORT"), r = 0, o = 0, a = 0, s = 0, i = Entry.dplay.Left_value,
                        l = Entry.dplay.Right_value;
                    return "1" == n ? (r = 0, o = i, a = l, s = 0) : "2" == n ? (r = i, o = 0, a = 0, s = l) : "3" == n ? (r = 0, o = i, a = 0, s = 0) : "4" == n && (r = 0, o = 0, a = l, s = 0), Entry.hw.setDigitalPortValue(3, r), Entry.hw.setDigitalPortValue(5, o), Entry.hw.setDigitalPortValue(6, a), Entry.hw.setDigitalPortValue(11, s), e.callReturn()
                },
                syntax: {js: [], py: ["Dplay.robot_run(%1)"]}
            },
            dplay_Robot_run_sec: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "로봇을 %1 초 동안 %2 하기 %3",
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [["전진", "1"], ["후진", "2"], ["우회전", "3"], ["좌회전", "4"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "text", params: ["1"]}, null, null], type: "dplay_Robot_run_sec"},
                paramsKeyMap: {VALUE: 0, PORT: 1},
                class: "dplay_robot",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = 0, r = 0, o = 0, a = 0, s = Entry.dplay.Left_value, i = Entry.dplay.Right_value,
                        l = e.getField("PORT");
                    if (e.isStart) return 1 == e.timeFlag ? ("1" == l ? (n = 0, r = s, o = i, a = 0) : "2" == l ? (n = s, r = 0, o = 0, a = i) : "3" == l ? (n = 0, r = s, o = 0, a = 0) : "4" == l && (n = 0, r = 0, o = i, a = 0), Entry.hw.setDigitalPortValue(3, n), Entry.hw.setDigitalPortValue(5, r), Entry.hw.setDigitalPortValue(6, o), Entry.hw.setDigitalPortValue(11, a), e) : (delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, n = 0, r = 0, o = 0, a = 0, e.callReturn());
                    e.isStart = !0, e.timeFlag = 1;
                    var c = 1e3 * e.getNumberValue("VALUE"), u = setTimeout(function () {
                        e.timeFlag = 0, Entry.dplay.removeTimeout(u)
                    }, c);
                    return Entry.dplay.timeouts.push(u), e
                },
                syntax: {js: [], py: ["Dplay.robot_run_sec(%1, %2)"]}
            },
            dplay_robot_speed_sel: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "%1 바퀴 속도를 %2(으)로 정하기 %3",
                params: [{
                    type: "Dropdown",
                    options: [["왼쪽", "1"], ["오른쪽", "2"], ["양쪽", "3"]],
                    value: "1",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Block", accept: "string"}, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, {type: "text", params: ["100"]}, null], type: "dplay_robot_speed_sel"},
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "dplay_robot",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = 0, r = 0, o = 0, a = 0, s = 0, i = 0, l = 0, c = 0, u = 0, p = e.getField("PORT"),
                        _ = e.getNumberValue("VALUE", e);
                    if (_ = Math.max(_, -100), _ = Math.min(_, 100), "1" == p && (n = 3, r = 5, _ > 0 ? (u = _ + 155, s = 0, i = u = Math.round(u), Entry.dplay.Left_value = i) : _ < 0 ? (u = _ - 155, s = -(u = Math.round(u)), i = 0, Entry.dplay.Left_value = s) : 0 == _ && (s = 0, i = 0, Entry.dplay.Left_value = 0)), "2" == p && (o = 6, a = 11, _ > 0 ? (u = _ + 155, l = 0, c = u = Math.round(u), Entry.dplay.Right_value = c) : _ < 0 ? (u = _ - 155, l = -(u = Math.round(u)), c = 0, Entry.dplay.Right_value = l) : 0 == _ && (l = 0, c = 0, Entry.dplay.Right_value = l)), "3" == p && (n = 3, r = 5, o = 6, a = 11, _ > 0 ? (u = _ + 155, s = 0, i = u = Math.round(u), l = 0, c = u, Entry.dplay.Left_value = i, Entry.dplay.Right_value = c) : _ < 0 ? (u = _ - 155, s = -(u = Math.round(u)), i = 0, l = -u, c = 0, Entry.dplay.Left_value = s, Entry.dplay.Right_value = l) : 0 == _ && (s = 0, i = 0, l = 0, c = 0, Entry.dplay.Left_value = 0, Entry.dplay.Right_value = 0)), !e.isStart) {
                        e.isStart = !0, e.timeFlag = 1;
                        var d = setTimeout(function () {
                            e.timeFlag = 2, Entry.dplay.removeTimeout(d)
                        }, 50);
                        return Entry.dplay.timeouts.push(d), e
                    }
                    return 1 == e.timeFlag ? (Entry.hw.setDigitalPortValue(3, 0), Entry.hw.setDigitalPortValue(5, 0), Entry.hw.setDigitalPortValue(6, 0), Entry.hw.setDigitalPortValue(11, 0), e) : 2 == e.timeFlag ? (Entry.hw.setDigitalPortValue(n, s), Entry.hw.setDigitalPortValue(r, i), Entry.hw.setDigitalPortValue(o, c), Entry.hw.setDigitalPortValue(a, l), delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn()) : void 0
                }
            },
            dplay_robot_speed_set: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "오른쪽 바퀴 %1 왼쪽 바퀴 %2(으)로 정하기 %3",
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "text", params: ["100"]}, {type: "text", params: ["100"]}, null],
                    type: "dplay_robot_speed_set"
                },
                paramsKeyMap: {R_VALUE: 0, L_VALUE: 1},
                class: "dplay_robot",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    var n = 0, r = 0, o = 0, a = 0, s = 0, i = 0, l = e.getNumberValue("L_VALUE", e);
                    l = Math.max(l, -100), (l = Math.min(l, 100)) > 0 ? (i = l + 155, n = 0, r = i = Math.round(i), Entry.dplay.Left_value = r) : l < 0 ? (i = l - 155, n = -(i = Math.round(i)), r = 0, Entry.dplay.Left_value = n) : 0 == l && (n = 0, r = 0, Entry.dplay.Left_value = 0);
                    var c = e.getNumberValue("R_VALUE", e);
                    if (c = Math.max(c, -100), (c = Math.min(c, 100)) > 0 ? (s = c + 155, o = 0, a = s = Math.round(s), Entry.dplay.Right_value = a) : c < 0 ? (s = c - 155, o = -(s = Math.round(s)), a = 0, Entry.dplay.Right_value = o) : 0 == c && (o = 0, a = 0, Entry.dplay.Right_value = 0), !e.isStart) {
                        e.isStart = !0, e.timeFlag = 1;
                        var u = setTimeout(function () {
                            e.timeFlag = 2, Entry.dplay.removeTimeout(u)
                        }, 50);
                        return Entry.dplay.timeouts.push(u), e
                    }
                    return 1 == e.timeFlag ? (Entry.hw.setDigitalPortValue(3, 0), Entry.hw.setDigitalPortValue(5, 0), Entry.hw.setDigitalPortValue(6, 0), Entry.hw.setDigitalPortValue(11, 0), e) : 2 == e.timeFlag ? (Entry.hw.setDigitalPortValue(3, n), Entry.hw.setDigitalPortValue(5, r), Entry.hw.setDigitalPortValue(6, a), Entry.hw.setDigitalPortValue(11, o), delete e.isStart, delete e.timeFlag, Entry.engine.isContinue = !1, e.callReturn()) : void 0
                },
                syntax: {js: [], py: ["Dplay.robot_speed_sel(%1, %2)"]}
            },
            dplay_robot_stop: {
                color: "#00979D",
                fontColor: "#FFF",
                skeleton: "basic",
                statements: [],
                template: "로봇을 정지하기 %1",
                params: [{type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null], type: "dplay_robot_stop"},
                paramsKeyMap: {},
                class: "dplay_robot",
                isNotFor: ["dplay"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(3, 0), Entry.hw.setDigitalPortValue(5, 0), Entry.hw.setDigitalPortValue(11, 0), Entry.hw.setDigitalPortValue(6, 0), e.callReturn()
                },
                syntax: {js: [], py: ["Dplay.robot_stop()"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.joystick = {
        name: "joystick",
        url: "http://www.kocoafab.cc/",
        imageName: "joystick.png",
        title: {ko: "조이스틱 센서 쉴드", en: "Joystick Sensor Shield"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        }
    }, Entry.joystick.getBlocks = function () {
        return {
            joystick_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["joystick"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "joystick_get_number_sensor_value"},
                class: "arduino_value"
            },
            joystick_get_digital_value: {
                parent: "arduino_get_digital_value",
                isNotFor: ["joystick"],
                def: {params: [{type: "arduino_get_port_number"}], type: "joystick_get_digital_value"},
                class: "arduino_value",
                syntax: {js: [], py: []}
            },
            joystick_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["joystick"],
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "joystick_toggle_led"},
                class: "arduino_set"
            },
            joystick_toggle_pwm: {
                parent: "arduino_toggle_pwm",
                isNotFor: ["joystick"],
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "joystick_toggle_pwm"
                },
                class: "arduino_set"
            },
            joystick_convert_scale: {
                parent: "arduino_convert_scale",
                isNotFor: ["joystick"],
                def: {
                    params: [{
                        type: "arduino_get_number_sensor_value",
                        params: [{type: "arduino_get_sensor_number"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "joystick_convert_scale"
                },
                class: "arduino"
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.SensorBoard = {
        name: "sensorBoard",
        url: "http://www.neweducation.co.kr/",
        imageName: "entrybt.png",
        title: {ko: "E-센서보드", en: "E-Sensorboard"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        }
    }, Entry.SensorBoard.getBlocks = function () {
        return {
            sensorBoard_get_named_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["소리", "0"], ["빛 감지", "1"], ["슬라이더", "2"], ["온도", "3"]],
                    value: "0",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "sensorBoard_get_named_sensor_value"},
                paramsKeyMap: {PORT: 0},
                class: "sensorBoard",
                isNotFor: ["sensorBoard"],
                func: function (t, e) {
                    return Entry.hw.getAnalogPortValue(e.getField("PORT", e))
                },
                syntax: {js: [], py: ["Sensorboard.sensor_value(%1)"]}
            },
            sensorBoard_is_button_pressed: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["빨간", "8"], ["파란", "9"], ["노랑", "10"], ["초록", "11"]],
                    value: "8",
                    fontSize: 11
                }],
                events: {},
                def: {params: [null], type: "sensorBoard_is_button_pressed"},
                paramsKeyMap: {PORT: 0},
                class: "sensorBoard",
                isNotFor: ["sensorBoard"],
                func: function (t, e) {
                    return Entry.hw.getDigitalPortValue(e.getNumberField("PORT", e))
                },
                syntax: {js: [], py: ["Sensorboard.is_button_pressed(%1)"]}
            },
            sensorBoard_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["빨간", "2"], ["초록", "3"], ["파란", "4"], ["노랑", "5"]],
                    value: "2",
                    fontSize: 11
                }, {
                    type: "Dropdown",
                    options: [["켜기", "255"], ["끄기", "0"]],
                    value: "255",
                    fontSize: 11
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [null, null, null], type: "sensorBoard_led"},
                paramsKeyMap: {PORT: 0, OPERATOR: 1},
                class: "sensorBoard",
                isNotFor: ["sensorBoard"],
                func: function (t, e) {
                    return Entry.hw.setDigitalPortValue(e.getField("PORT"), e.getNumberField("OPERATOR")), e.callReturn()
                },
                syntax: {js: [], py: ["Sensorboard.led(%1, %2)"]}
            },
            sensorBoard_get_number_sensor_value: {
                parent: "arduino_get_number_sensor_value",
                isNotFor: ["sensorBoard"],
                def: {params: [{type: "arduino_get_sensor_number"}], type: "sensorBoard_get_number_sensor_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["SensorBoard.get_number_sensor_value(%1)"]}
            },
            sensorBoard_get_digital_value: {
                parent: "arduino_get_digital_value",
                isNotFor: ["sensorBoard"],
                def: {params: [{type: "arduino_get_port_number"}], type: "sensorBoard_get_digital_value"},
                class: "arduino_value",
                syntax: {js: [], py: ["SensorBoard.get_digital_value(%1)"]}
            },
            sensorBoard_toggle_led: {
                parent: "arduino_toggle_led",
                isNotFor: ["sensorBoard"],
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "sensorBoard_toggle_led"},
                class: "arduino_set",
                syntax: {js: [], py: ["SensorBoard.toggle_led(%1)"]}
            },
            sensorBoard_toggle_pwm: {
                parent: "arduino_toggle_pwm",
                isNotFor: ["sensorBoard"],
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "sensorBoard_toggle_pwm"
                },
                class: "arduino_set",
                syntax: {js: [], py: ["SensorBoard.toggle_pwm(%1, %2)"]}
            },
            sensorBoard_convert_scale: {
                parent: "arduino_convert_scale",
                isNotFor: ["sensorBoard"],
                def: {
                    params: [{
                        type: "arduino_get_number_sensor_value",
                        params: [{type: "arduino_get_sensor_number", id: "bl5e"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "sensorBoard_convert_scale"
                },
                class: "arduino",
                syntax: {js: [], py: ["SensorBoard.convert_scale(%1, %2, %3, %4, %5)"]}
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    Entry.Arduino = {
        name: "arduino",
        url: "http://www.arduino.cc/",
        imageName: "arduino.png",
        title: {ko: "아두이노", en: "Arduino"},
        setZero: function () {
            Entry.hw.sendQueue.readablePorts = [];
            for (var t = 0; t < 20; t++) Entry.hw.sendQueue[t] = 0, Entry.hw.sendQueue.readablePorts.push(t);
            Entry.hw.update()
        },
        monitorTemplate: {
            imgPath: "hw/arduino.png",
            width: 605,
            height: 434,
            listPorts: {
                2: {name: Lang.Hw.port_en + " 2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                3: {name: Lang.Hw.port_en + " 3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                4: {name: Lang.Hw.port_en + " 4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                5: {name: Lang.Hw.port_en + " 5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                6: {name: Lang.Hw.port_en + " 6 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                7: {name: Lang.Hw.port_en + " 7 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                8: {name: Lang.Hw.port_en + " 8 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                9: {name: Lang.Hw.port_en + " 9 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                10: {name: Lang.Hw.port_en + " 10 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                11: {name: Lang.Hw.port_en + " 11 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                12: {name: Lang.Hw.port_en + " 12 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                13: {name: Lang.Hw.port_en + " 13 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a0: {name: Lang.Hw.port_en + " A0 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a1: {name: Lang.Hw.port_en + " A1 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a2: {name: Lang.Hw.port_en + " A2 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a3: {name: Lang.Hw.port_en + " A3 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a4: {name: Lang.Hw.port_en + " A4 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}},
                a5: {name: Lang.Hw.port_en + " A5 " + Lang.Hw.port_ko, type: "input", pos: {x: 0, y: 0}}
            },
            mode: "both"
        }
    }, Entry.Arduino.getBlocks = function () {
        return {
            arduino_text: {
                color: "#FFD974",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "TextInput", value: 10}],
                events: {},
                def: {params: []},
                paramsKeyMap: {NAME: 0},
                func: function (t, e) {
                    return e.getStringField("NAME")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "TextInput",
                            value: 10,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }],
                        keyOption: "arduino_text"
                    }]
                }
            },
            arduino_send: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: []},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getValue("VALUE", e), r = new XMLHttpRequest;
                    return r.open("POST", "http://localhost:23518/arduino/", !1), r.send(String(n)), Entry.assert(200 == r.status, "arduino is not connected"), e.callReturn()
                }
            },
            arduino_get_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: []},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getValue("VALUE", e), r = new XMLHttpRequest;
                    r.open("POST", "http://localhost:23518/arduino/", !1), r.send(String(n)), Entry.assert(200 == r.status, "arduino is not connected");
                    var o = r.responseText;
                    return Number(o)
                }
            },
            arduino_get_string: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: []},
                paramsKeyMap: {VALUE: 0},
                func: function (t, e) {
                    var n = e.getValue("VALUE", e), r = new XMLHttpRequest;
                    return r.open("POST", "http://localhost:23518/arduino/", !1), r.send(String(n)), Entry.assert(200 == r.status, "arduino is not connected"), r.responseText
                }
            },
            arduino_get_sensor_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "A0"], ["1", "A1"], ["2", "A2"], ["3", "A3"], ["4", "A4"], ["5", "A5"]],
                    value: "A0",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        blockType: "param",
                        textParams: [{
                            type: "Dropdown",
                            options: [["0", "A0"], ["1", "A1"], ["2", "A2"], ["3", "A3"], ["4", "A4"], ["5", "A5"]],
                            value: "A0",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW,
                            converter: Entry.block.converters.returnStringValue
                        }],
                        keyOption: "arduino_get_sensor_number"
                    }]
                }
            },
            arduino_get_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"]],
                    value: "0",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [["0", "0"], ["1", "1"], ["2", "2"], ["3", "3"], ["4", "4"], ["5", "5"], ["6", "6"], ["7", "7"], ["8", "8"], ["9", "9"], ["10", "10"], ["11", "11"], ["12", "12"], ["13", "13"]],
                            value: "0",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW
                        }],
                        keyOption: "arduino_get_port_number"
                    }]
                }
            },
            arduino_get_pwm_port_number: {
                color: "#00979D",
                skeleton: "basic_string_field",
                statements: [],
                params: [{
                    type: "Dropdown",
                    options: [["3", "3"], ["5", "5"], ["6", "6"], ["9", "9"], ["10", "10"], ["11", "11"]],
                    value: "3",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }],
                events: {},
                def: {params: [null]},
                paramsKeyMap: {PORT: 0},
                func: function (t, e) {
                    return e.getStringField("PORT")
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "%1",
                        textParams: [{
                            type: "Dropdown",
                            options: [["3", "3"], ["5", "5"], ["6", "6"], ["9", "9"], ["10", "10"], ["11", "11"]],
                            value: "3",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW,
                            converter: Entry.block.converters.returnStringOrNumberByValue
                        }],
                        keyOption: "arduino_get_pwm_port_number"
                    }]
                }
            },
            arduino_get_number_sensor_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_sensor_number"}], type: "arduino_get_number_sensor_value"},
                paramsKeyMap: {VALUE: 0},
                class: "arduino_value",
                isNotFor: ["arduino"],
                func: function (t, e) {
                    var n = e.getValue("VALUE", e);
                    return Entry.hw.getAnalogPortValue(n[1])
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.sensor_value(%1)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_get_digital_value: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_boolean_field",
                statements: [],
                params: [{type: "Block", accept: "string"}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}], type: "arduino_get_digital_value"},
                paramsKeyMap: {PORT: 0},
                class: "arduino_value",
                isNotFor: ["arduino"],
                func: function (t, e) {
                    var n = Entry.hw.hwModule;
                    if ("ArduinoExt" === (void 0 === n ? {} : n).name) return Entry.block.arduino_ext_get_digital.func(t, e);
                    var r = e.getNumberValue("PORT", e);
                    return Entry.hw.getDigitalPortValue(r)
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.digitalRead(%1)",
                        blockType: "param",
                        replaceBlockType: "arduino_ext_get_digital",
                        textParams: [{type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_toggle_led: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {
                    type: "Dropdown",
                    options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                    value: "on",
                    fontSize: 11,
                    arrowColor: EntryStatic.ARROW_COLOR_HW
                }, {type: "Indicator", img: "block_icon/hardware_03.png", size: 12}],
                events: {},
                def: {params: [{type: "arduino_get_port_number"}, null, null], type: "arduino_toggle_led"},
                paramsKeyMap: {VALUE: 0, OPERATOR: 1},
                class: "arduino_set",
                isNotFor: ["arduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE"), r = "on" == e.getField("OPERATOR") ? 255 : 0;
                    return Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.pin_digital(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Dropdown",
                            options: [[Lang.Blocks.ARDUINO_on, "on"], [Lang.Blocks.ARDUINO_off, "off"]],
                            value: "on",
                            fontSize: 11,
                            arrowColor: EntryStatic.ARROW_COLOR_HW,
                            converter: Entry.block.converters.returnStringValue
                        }]
                    }]
                }
            },
            arduino_toggle_pwm: {
                color: "#00979D",
                skeleton: "basic",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Indicator",
                    img: "block_icon/hardware_03.png",
                    size: 12
                }],
                events: {},
                def: {
                    params: [{type: "arduino_get_pwm_port_number"}, {type: "arduino_text", params: ["255"]}, null],
                    type: "arduino_toggle_pwm"
                },
                paramsKeyMap: {PORT: 0, VALUE: 1},
                class: "arduino_set",
                isNotFor: ["arduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("PORT"), r = e.getNumberValue("VALUE");
                    return r = Math.round(r), r = Math.max(r, 0), r = Math.min(r, 255), Entry.hw.setDigitalPortValue(n, r), e.callReturn()
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.set_pin_digital(%1, %2)",
                        textParams: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}]
                    }]
                }
            },
            arduino_convert_scale: {
                color: "#00979D",
                fontColor: "#fff",
                skeleton: "basic_string_field",
                statements: [],
                params: [{type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                    type: "Block",
                    accept: "string"
                }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}],
                events: {},
                def: {
                    params: [{
                        type: "arduino_get_number_sensor_value",
                        params: [{type: "arduino_get_sensor_number", id: "bl5e"}]
                    }, {type: "number", params: ["0"]}, {type: "number", params: ["1023"]}, {
                        type: "number",
                        params: ["0"]
                    }, {type: "number", params: ["100"]}], type: "arduino_convert_scale"
                },
                paramsKeyMap: {VALUE1: 0, VALUE2: 1, VALUE3: 2, VALUE4: 3, VALUE5: 4},
                class: "arduino",
                isNotFor: ["arduino"],
                func: function (t, e) {
                    var n = e.getNumberValue("VALUE1", e), r = e.getNumberValue("VALUE2", e),
                        o = e.getNumberValue("VALUE3", e), a = e.getNumberValue("VALUE4", e),
                        s = e.getNumberValue("VALUE5", e), i = e.getValue("VALUE4", e), l = e.getValue("VALUE5", e),
                        c = !1;
                    (Entry.Utils.isNumber(i) && i.indexOf(".") > -1 || Entry.Utils.isNumber(l) && l.indexOf(".") > -1) && (c = !0);
                    var u = n;
                    if (r > o) {
                        var p = r;
                        r = o, o = p
                    }
                    return a > s && (p = a, a = s, s = p), u -= r, u *= (s - a) / (o - r), u += a, u = Math.min(s, u), u = Math.max(a, u), c ? Math.round(100 * u) / 100 : Math.round(u)
                },
                syntax: {
                    js: [],
                    py: [{
                        syntax: "Arduino.convert_scale(%1, %2, %3, %4, %5)",
                        blockType: "param",
                        textParams: [{type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }, {type: "Block", accept: "string"}, {type: "Block", accept: "string"}, {
                            type: "Block",
                            accept: "string"
                        }]
                    }]
                }
            }
        }
    }
}, function (t, e, n) {
    "use strict";
    var r = n(12), o = n(40), a = n(20), s = n(19), i = n(81), l = Object.assign;
    t.exports = !l || n(15)(function () {
        var t = {}, e = {}, n = Symbol(), r = "abcdefghijklmnopqrst";
        return t[n] = 7, r.split("").forEach(function (t) {
            e[t] = t
        }), 7 != l({}, t)[n] || Object.keys(l({}, e)).join("") != r
    }) ? function (t, e) {
        for (var n = s(t), l = arguments.length, c = 1, u = o.f, p = a.f; l > c;) for (var _, d = i(arguments[c++]), y = u ? r(d).concat(u(d)) : r(d), g = y.length, h = 0; g > h;) p.call(d, _ = y[h++]) && (n[_] = d[_]);
        return n
    } : l
}, function (t, e, n) {
    var r = n(6);
    r(r.S + r.F, "Object", {assign: n(360)})
}, function (t, e, n) {
    n(361), t.exports = n(1).Object.assign
}, function (t, e, n) {
    t.exports = {default: n(362), __esModule: !0}
}, function (t, e, n) {
    var r = n(44), o = Math.max, a = Math.min;
    t.exports = function (t, e) {
        return (t = r(t)) < 0 ? o(t + e, 0) : a(t, e)
    }
}, function (t, e, n) {
    var r = n(8), o = n(45), a = n(364);
    t.exports = function (t) {
        return function (e, n, s) {
            var i, l = r(e), c = o(l.length), u = a(s, c);
            if (t && n != n) {
                for (; c > u;) if ((i = l[u++]) != i) return !0
            } else for (; c > u; u++) if ((t || u in l) && l[u] === n) return t || u || 0;
            return !t && -1
        }
    }
}, function (t, e, n) {
    var r = n(12), o = n(8), a = n(20).f;
    t.exports = function (t) {
        return function (e) {
            for (var n, s = o(e), i = r(s), l = i.length, c = 0, u = []; l > c;) a.call(s, n = i[c++]) && u.push(t ? [n, s[n]] : s[n]);
            return u
        }
    }
}, function (t, e, n) {
    var r = n(6), o = n(366)(!1);
    r(r.S, "Object", {
        values: function (t) {
            return o(t)
        }
    })
}, function (t, e, n) {
    n(367), t.exports = n(1).Object.values
}, function (t, e, n) {
    t.exports = {default: n(368), __esModule: !0}
}, function (t, e, n) {
    var r = n(1), o = r.JSON || (r.JSON = {stringify: JSON.stringify});
    t.exports = function (t) {
        return o.stringify.apply(o, arguments)
    }
}, function (t, e, n) {
    "use strict";
    var r, o = (r = n(3)) && r.__esModule ? r : {default: r};
    n(84), Entry.HW = function () {
        this.sessionRoomId = localStorage.getItem("entryhwRoomId"), this.sessionRoomId || (this.sessionRoomId = this.createRandomRoomId(), localStorage.setItem("entryhwRoomId", this.sessionRoomId)), this.connectTrial = 0, this.isFirstConnect = !0, this.requireVerion = "v1.6.1", this.hwPopupCreate(), this.initSocket(), this.connected = !1, this.portData = {}, this.sendQueue = {}, this.outputQueue = {}, this.settingQueue = {}, this.selectedDevice = null, this.hwModule = null, this.socketType = null, Entry.addEventListener("stop", this.setZero), this.hwInfo = Entry.HARDWARE_LIST
    }, Entry.HW.TRIAL_LIMIT = 2;
    var a = Entry.HW.prototype;
    a.createRandomRoomId = function () {
        return "xxxxxxxxyx".replace(/[xy]/g, function (t) {
            var e = 16 * Math.random() | 0;
            return ("x" == t ? e : 3 & e | 8).toString(16)
        })
    }, a.connectWebSocket = function (t, e) {
        var n = this, r = io(t, e);
        return r.io.reconnectionAttempts(Entry.HW.TRIAL_LIMIT), r.io.reconnectionDelayMax(1e3), r.io.timeout(1e3), r.on("connect", function () {
            n.socketType = "WebSocket", n.initHardware(r)
        }), r.on("mode", function (t) {
            0 === r.mode && 1 === t && n.disconnectHardware(), n.socketMode = t, r.mode = t
        }), r.on("message", function (t) {
            var e = t.data, r = t.version;
            if (e) {
                var o = {};
                if ("string" == typeof e) switch (e) {
                    case"disconnectHardware":
                        return void n.disconnectHardware();
                    default:
                        o = JSON.parse(e)
                } else _.isObject(e) && (o = e);
                n.checkDevice(o, r), n.updatePortData(o)
            }
        }), r.on("disconnect", function () {
            n.initSocket()
        }), r
    }, a.initSocket = function () {
        try {
            if (this.connected = !1, this.tlsSocketIo1 && this.tlsSocketIo1.removeAllListeners(), this.tlsSocketIo2 && this.tlsSocketIo2.removeAllListeners(), this.socketIo && this.socketIo.removeAllListeners(), this.isOpenHardware || this.checkOldClient(), location.protocol.indexOf("https") > -1) {
                try {
                    this.tlsSocketIo1 = this.connectWebSocket("https://hardware.playentry.org:23518", {
                        query: {
                            client: !0,
                            roomId: this.sessionRoomId
                        }
                    })
                } catch (t) {
                }
                try {
                    this.tlsSocketIo2 = this.connectWebSocket("https://hardware.play-entry.org:23518", {
                        query: {
                            client: !0,
                            roomId: this.sessionRoomId
                        }
                    })
                } catch (t) {
                }
            } else {
                try {
                    this.socketIo = this.connectWebSocket("http://127.0.0.1:23518", {
                        query: {
                            client: !0,
                            roomId: this.sessionRoomId
                        }
                    })
                } catch (t) {
                }
                try {
                    this.tlsSocketIo1 = this.connectWebSocket("https://hardware.playentry.org:23518", {
                        query: {
                            client: !0,
                            roomId: this.sessionRoomId
                        }
                    })
                } catch (t) {
                }
                try {
                    this.tlsSocketIo2 = this.connectWebSocket("https://hardware.play-entry.org:23518", {
                        query: {
                            client: !0,
                            roomId: this.sessionRoomId
                        }
                    })
                } catch (t) {
                }
            }
            Entry.dispatchEvent("hwChanged")
        } catch (t) {
        }
    }, a.checkOldClient = function () {
        try {
            var t = this, e = new WebSocket("wss://hardware.play-entry.org:23518");
            e.onopen = function () {
                t.popupHelper.show("newVersion", !0), e.close()
            }
        } catch (t) {
        }
    }, a.retryConnect = function () {
        this.isOpenHardware = !1, Entry.HW.TRIAL_LIMIT = 5, this.initSocket()
    }, a.openHardwareProgram = function () {
        var t = this;
        this.isOpenHardware = !0, Entry.HW.TRIAL_LIMIT = 5, this.executeHardware(), this.socket && this.socket.connected || setTimeout(function () {
            t.initSocket()
        }, 1e3)
    }, a.initHardware = function (t) {
        this.socket = t, this.connectTrial = 0, this.connected = !0, Entry.dispatchEvent("hwChanged"), Entry.playground && Entry.playground.object && Entry.playground.setMenu(Entry.playground.object.objectType)
    }, a.disconnectHardware = function () {
        Entry.propertyPanel && Entry.propertyPanel.removeMode("hw"), this.selectedDevice = void 0, this.hwModule = void 0, Entry.dispatchEvent("hwChanged")
    }, a.disconnectedSocket = function () {
        this.tlsSocketIo1 && this.tlsSocketIo1.close(), this.tlsSocketIo2 && this.tlsSocketIo2.close(), this.socketIo && this.socketIo.close(), Entry.propertyPanel && Entry.propertyPanel.removeMode("hw"), this.socket = void 0, this.connectTrial = 0, this.connected = !1, this.selectedDevice = void 0, this.hwModule = void 0, Entry.dispatchEvent("hwChanged"), Entry.toast.alert("하드웨어 프로그램 연결 종료", "하드웨어 프로그램과의 연결이 종료되었습니다.", !1)
    }, a.setDigitalPortValue = function (t, e) {
        this.sendQueue[t] = e, this.removePortReadable(t)
    }, a.getAnalogPortValue = function (t) {
        return this.connected ? this.portData["a" + t] : 0
    }, a.getDigitalPortValue = function (t) {
        return this.connected ? (this.setPortReadable(t), void 0 !== this.portData[t] ? this.portData[t] : 0) : 0
    }, a.setPortReadable = function (t) {
        this.sendQueue.readablePorts || (this.sendQueue.readablePorts = []);
        var e = !1;
        for (var n in this.sendQueue.readablePorts) if (this.sendQueue.readablePorts[n] == t) {
            e = !0;
            break
        }
        e || this.sendQueue.readablePorts.push(t)
    }, a.removePortReadable = function (t) {
        if (this.sendQueue.readablePorts || Array.isArray(this.sendQueue.readablePorts)) {
            var e;
            for (var n in this.sendQueue.readablePorts) if (this.sendQueue.readablePorts[n] == t) {
                e = Number(n);
                break
            }
            void 0 != e && (this.sendQueue.readablePorts = this.sendQueue.readablePorts.slice(0, e).concat(this.sendQueue.readablePorts.slice(e + 1, this.sendQueue.readablePorts.length)))
        }
    }, a.update = function () {
        this.socket && (this.socket.disconnected || (this.hwModule && this.hwModule.sendMessage ? this.hwModule.sendMessage(this) : this.socket.emit("message", {
            data: (0, o.default)(this.sendQueue),
            mode: this.socket.mode,
            type: "utf8"
        })))
    }, a.updatePortData = function (t) {
        this.portData = t, this.hwMonitor && Entry.propertyPanel && "hw" == Entry.propertyPanel.selected && this.hwMonitor.update(), this.hwModule && this.hwModule.afterReceive && this.hwModule.afterReceive(this.portData)
    }, a.closeConnection = function () {
        this.socket && this.socket.close()
    }, a.downloadConnector = function () {
        Entry.dispatchEvent("hwDownload", "hardware")
    }, a.downloadGuide = function () {
        Entry.dispatchEvent("hwDownload", "manual")
    }, a.downloadSource = function () {
        Entry.dispatchEvent("hwDownload", "ino")
    }, a.setZero = function () {
        Entry.hw.hwModule && Entry.hw.hwModule.setZero()
    }, a.checkDevice = function (t, e) {
        if (void 0 !== t.company) {
            var n = [Entry.Utils.convertIntToHex(t.company), ".", Entry.Utils.convertIntToHex(t.model)].join("");
            if (n != this.selectedDevice) {
                if (Entry.Utils.isNewVersion(e, this.requireVerion) && this.popupHelper.show("newVersion", !0), this.selectedDevice = n, this.hwModule = this.hwInfo[n], this.hwModule) {
                    Entry.dispatchEvent("hwChanged");
                    var r = "";
                    if (Entry.propertyPanel && this.hwModule.monitorTemplate) {
                        r = Lang.Msgs.hw_connection_success_desc, this.hwMonitor ? (this.hwMonitor._hwModule = this.hwModule, this.hwMonitor.initView()) : this.hwMonitor = new Entry.HWMonitor(this.hwModule), Entry.propertyPanel.addMode("hw", this.hwMonitor);
                        var o = this.hwModule.monitorTemplate;
                        "both" == o.mode ? (o.mode = "list", this.hwMonitor.generateListView(), o.mode = "general", this.hwMonitor.generateView(), o.mode = "both") : "list" == o.mode ? this.hwMonitor.generateListView() : this.hwMonitor.generateView()
                    } else r = Lang.Msgs.hw_connection_success_desc2;
                    Entry.toast.success(Lang.Msgs.hw_connection_success, r)
                }
            } else this.hwModule && this.hwModule.dataHandler && this.hwModule.dataHandler(t)
        }
    }, a.banHW = function () {
        for (var t in this.hwInfo) {
            var e = this.hwInfo[t];
            e && Entry.playground.mainWorkspace.blockMenu.banClass(e.name, !0)
        }
    }, a.executeHardware = function () {
        var t = this, e = {
            _bNotInstalled: !1, init: function (t, n) {
                var r = window.screenLeft, o = "width=220, height=225,  top=" + window.screenTop + ", left=" + r;
                this._w = window.open("/views/hwLoading.html", "entry_hw_launcher", o);
                var a = null;
                a = setTimeout(function () {
                    e.runViewer(t, n), clearInterval(a)
                }, 1e3)
            }, runViewer: function (t, e) {
                this._w.document.write("<iframe src='" + t + "' onload='opener.Entry.hw.ieLauncher.set()' style='display:none;width:0;height:0'></iframe>");
                var n = 0, r = null;
                r = setInterval(function () {
                    try {
                        this._w.location.href
                    } catch (t) {
                        this._bNotInstalled = !0
                    }
                    if (n > 10) {
                        clearInterval(r);
                        var t = 0, o = null;
                        o = setInterval(function () {
                            t++, this._w.closed || t > 2 ? clearInterval(o) : this._w.close(), this._bNotInstalled = !1, n = 0
                        }.bind(this), 5e3), e(!this._bNotInstalled)
                    }
                    n++
                }.bind(this), 100)
            }, set: function () {
                this._bNotInstalled = !0
            }
        };
        t.ieLauncher = e;
        var n, r = "entryhw://-roomId:" + this.sessionRoomId;
        navigator.userAgent.indexOf("MSIE") > 0 || navigator.userAgent.indexOf("Trident") > 0 ? void 0 != navigator.msLaunchUri ? (n = r, navigator.msLaunchUri(n, function () {
        }, function () {
            t.popupHelper.show("hwDownload", !0)
        })) : (document.documentMode > 0 ? document.documentMode : navigator.userAgent.match(/(?:MSIE) ([0-9.]+)/)[1]) < 9 ? alert(Lang.msgs.not_support_browser) : e.init(r, function (e) {
            0 == e && t.popupHelper.show("hwDownload", !0)
        }) : navigator.userAgent.indexOf("Firefox") > 0 ? function (e) {
            var n = document.createElement("iframe");
            n.src = "about:blank", n.style = "display:none", document.getElementsByTagName("body")[0].appendChild(n);
            var r = null;
            r = setTimeout(function () {
                var o = !1;
                try {
                    n.contentWindow.location.href = e, o = !0
                } catch (t) {
                    "NS_ERROR_UNKNOWN_PROTOCOL" == t.name && (o = !1)
                }
                o || t.popupHelper.show("hwDownload", !0), document.getElementsByTagName("body")[0].removeChild(n), clearTimeout(r)
            }, 500)
        }(r) : navigator.userAgent.indexOf("Chrome") > 0 || navigator.userAgent.indexOf("Safari") > 0 ? function (e) {
            var n = !1;
            window.focus(), $(window).one("blur", function () {
                n = !0
            }), Entry.dispatchEvent("workspaceUnbindUnload", !0), location.assign(encodeURI(e)), setTimeout(function () {
                Entry.dispatchEvent("workspaceBindUnload", !0)
            }, 100), setTimeout(function () {
                0 == n && t.popupHelper.show("hwDownload", !0), window.onblur = null
            }, 3e3)
        }(r) : alert(Lang.msgs.not_support_browser)
    }, a.hwPopupCreate = function () {
        var t = this;
        this.popupHelper || (window.popupHelper ? this.popupHelper = window.popupHelper : this.popupHelper = new Entry.popupHelper(!0)), this.popupHelper.addPopup("newVersion", {
            type: "confirm",
            title: Lang.Msgs.new_version_title,
            setPopupLayout: function (e) {
                var n = Entry.Dom("div", {class: "contentArea"}), r = Entry.Dom("div", {class: "textArea", parent: n}),
                    o = Entry.Dom("div", {class: "text1", parent: r}),
                    a = Entry.Dom("div", {class: "text2", parent: r}),
                    s = Entry.Dom("div", {class: "text3", parent: r}),
                    i = Entry.Dom("div", {class: "text4", parent: r}),
                    l = Entry.Dom("div", {classes: ["popupCancelBtn", "popupDefaultBtn"], parent: n}),
                    c = Entry.Dom("div", {classes: ["popupOkBtn", "popupDefaultBtn"], parent: n});
                o.text(Lang.Msgs.new_version_text1), a.html(Lang.Msgs.new_version_text2), s.text(Lang.Msgs.new_version_text3), i.text(Lang.Msgs.new_version_text4), l.text(Lang.Buttons.cancel), c.html(Lang.Msgs.new_version_download), n.bindOnClick(".popupDefaultBtn", function (e) {
                    $(this).hasClass("popupOkBtn") && t.downloadConnector(), t.popupHelper.hide("newVersion")
                }), e.append(n)
            }
        }), this.popupHelper.addPopup("hwDownload", {
            type: "confirm",
            title: Lang.Msgs.not_install_title,
            setPopupLayout: function (e) {
                var n = Entry.Dom("div", {class: "contentArea"}), r = Entry.Dom("div", {class: "textArea", parent: n}),
                    o = Entry.Dom("div", {class: "text1", parent: r}),
                    a = Entry.Dom("div", {class: "text2", parent: r}),
                    s = Entry.Dom("div", {class: "text3", parent: r}),
                    i = Entry.Dom("div", {class: "text4", parent: r}),
                    l = Entry.Dom("div", {classes: ["popupCancelBtn", "popupDefaultBtn"], parent: n}),
                    c = Entry.Dom("div", {classes: ["popupOkBtn", "popupDefaultBtn"], parent: n});
                o.text(Lang.Msgs.hw_download_text1), a.html(Lang.Msgs.hw_download_text2), s.text(Lang.Msgs.hw_download_text3), i.text(Lang.Msgs.hw_download_text4), l.text(Lang.Buttons.cancel), c.html(Lang.Msgs.hw_download_btn), n.bindOnClick(".popupDefaultBtn", function (e) {
                    $(this).hasClass("popupOkBtn") && t.downloadConnector(), t.popupHelper.hide("hwDownload")
                }), e.append(n)
            }
        })
    }
}, function (t, e, n) {
    "use strict";
    Entry.Helper = function () {
        this.visible = !1, Entry.addEventListener("workspaceChangeMode", function () {
            this._blockView && this.renderBlock(this._blockView.type)
        }.bind(this)), this.resize = Entry.Utils.debounce(this.resize, 300)
    };
    var r = Entry.Helper.prototype;
    r.generateView = function (t, e) {
        if (!this.parentView_) {
            this.parentView_ = t, this.blockHelpData = EntryStatic.blockInfo;
            var n = Entry.createElement("div", "entryBlockHelperWorkspace");
            this.view = n, Entry.isForLecture && n.addClass("lecture"), this.parentView_.appendChild(n);
            var r = Entry.createElement("div", "entryBlockHelperContentWorkspace");
            this._contentView = r;
            var o = Entry.createElement("div");
            o.addClass("entryBlockHelperTitle textModeElem"), o.innerHTML = "명령어", r.appendChild(o), r.addClass("entryBlockHelperIntro"), Entry.isForLecture && r.addClass("lecture"), n.appendChild(r), this.blockHelperContent_ = r, this.blockHelperView_ = n;
            var a = Entry.createElement("div", "entryBlockHelperBlockWorkspace");
            this.blockHelperContent_.appendChild(a);
            var s = Entry.createElement("div");
            s.addClass("entryBlockHelperTitle textModeElem"), s.innerHTML = "설명", r.appendChild(s);
            var i = Entry.createElement("div", "entryBlockHelperDescriptionWorkspace");
            i.addClass("entryBlockHelperContent selectAble"), this.blockHelperContent_.appendChild(i), i.innerHTML = Lang.Helper.Block_click_msg, this.blockHelperDescription_ = i;
            var l = Entry.createElement("div");
            if (l.addClass("entryBlockHelperTitle textModeElem"), l.innerHTML = "요소", r.appendChild(l), this._elementsTitle = l, this._elementsContainer = Entry.createElement("div", "entryBlockHelperElementsContainer"), this._elementsContainer.addClass("entryBlockHelperContent textModeElem selectAble"), r.appendChild(this._elementsContainer), "undefined" != typeof CodeMirror) {
                var c = Entry.createElement("div");
                c.addClass("entryBlockHelperTitle textModeElem"), c.innerHTML = "예시 코드", r.appendChild(c);
                var u = Entry.createElement("div", "entryBlockHelperCodeMirrorContainer");
                u.addClass("textModeElem"), r.appendChild(u), this.codeMirror = CodeMirror(u, {
                    lineNumbers: !0,
                    value: "",
                    mode: {name: "python"},
                    indentUnit: 4,
                    theme: "default",
                    viewportMargin: 10,
                    styleActiveLine: !1,
                    readOnly: !0
                }), this._doc = this.codeMirror.getDoc(), this._codeMirror = this.codeMirror;
                var p = Entry.createElement("div");
                p.addClass("entryBlockHelperTitle textModeElem"), p.innerHTML = "예시 설명", r.appendChild(p), this._codeMirrorDesc = Entry.createElement("div"), this._codeMirrorDesc.addClass("entryBlockHelperContent textModeElem selectAble"), r.appendChild(this._codeMirrorDesc)
            }
            this._renderView = new Entry.RenderView($(a), "LEFT_MOST"), this.code = new Entry.Code([]), this.code.isFor = "blockHelper", this._renderView.changeCode(this.code), this.first = !0
        }
    }, r.bindWorkspace = function (t) {
        t && (this._blockViewObserver && this._blockViewObserver.destroy(), this.workspace = t, this._renderView && (this._renderView.workspace = t), this._blockViewObserver = t.observe(this, "_updateSelectedBlock", ["selectedBlockView"]))
    }, r._updateSelectedBlock = function () {
        var t = this.workspace.selectedBlockView;
        if (t && this.visible && t != this._blockView) {
            var e = t.block.type;
            this._blockView = t, this.renderBlock(e)
        }
    }, r.renderBlock = function (t) {
        var e = Lang.Helper[t];
        if (t && this.visible && e && !Entry.block[t].isPrimitive) {
            this.first && (this.blockHelperContent_.removeClass("entryBlockHelperIntro"), this.first = !1);
            var n = this.code;
            n.clear();
            var r = Entry.block[t].def || {type: t};
            if (this.workspace.getMode() === Entry.Workspace.MODE_VIMBOARD) {
                this._contentView.addClass("textMode"), this.blockHelperDescription_.innerHTML = Lang.PythonHelper[t + "_desc"];
                var o = Lang.PythonHelper[t + "_elements"];
                if (this._elementsContainer.innerHTML = "", o) for (this._elementsTitle.removeClass("entryRemove"), o = o.split("%next"); o.length;) (function (t) {
                    var e = t.split("-- "), n = Entry.createElement("div");
                    n.addClass("entryBlockHelperElementsContainer");
                    var r = Entry.createElement("div");
                    r.innerHTML = e[0], r.addClass("elementLeft");
                    var o = Entry.createElement("div");
                    o.addClass("elementRight"), o.innerHTML = e[1], n.appendChild(r), n.appendChild(o), this._elementsContainer.appendChild(n)
                }).bind(this)(o.shift()); else this._elementsTitle.addClass("entryRemove");
                this._codeMirrorDesc.innerHTML = Lang.PythonHelper[t + "_exampleDesc"];
                var a = Lang.PythonHelper[t + "_exampleCode"];
                this._codeMirror.setValue(a), this.codeMirror.refresh(), r = Entry.block[t].pyHelpDef || r
            } else this._contentView.removeClass("textMode"), this.blockHelperDescription_.innerHTML = e;
            n.createThread([r]), n.board.align(), n.board.resize(), this._renderView.align(), this._renderView.setDomSize()
        }
    }, r.getView = function () {
        return this.view
    }, r.resize = function () {
        this.codeMirror && this.codeMirror.refresh()
    }
}, function (t, e, n) {
    "use strict";
    Entry.Func = function (t) {
        var e;
        if (this.id = t ? t.id : Entry.generateHash(), t && t.content && t.content.length > 4 && (e = t.content), this.content = e ? new Entry.Code(e) : new Entry.Code([[{
                type: "function_create",
                copyable: !1,
                deletable: !1,
                x: 40,
                y: 40
            }]]), this.block = null, this.blockMenuBlock = null, this._backupContent = null, this.hashMap = {}, this.paramMap = {}, Entry.generateFunctionSchema(this.id), t && t.content) {
            var n = this.content._blockMap;
            for (var r in n) Entry.Func.registerParamBlock(n[r].type);
            Entry.Func.generateWsBlock(this)
        }
        Entry.Func.registerFunction(this), Entry.Func.updateMenu()
    }, Entry.Func.threads = {}, Entry.Func.registerFunction = function (t) {
        if (Entry.playground) {
            var e = Entry.playground.mainWorkspace;
            if (e) {
                var n = e.getBlockMenu().code;
                this._targetFuncBlock = n.createThread([{
                    type: "func_" + t.id,
                    category: "func",
                    x: -9999
                }]), t.blockMenuBlock = this._targetFuncBlock
            }
        }
    }, Entry.Func.executeFunction = function (t) {
        var e = this.threads[t];
        return (e = Entry.Engine.computeThread(e.entity, e)) ? (this.threads[t] = e, !0) : (delete this.threads[t], !1)
    }, Entry.Func.clearThreads = function () {
        this.threads = {}
    }, Entry.Func.prototype.init = function (t) {
        this.id = t.id, this.content = Blockly.Xml.textToDom(t.content);
        var e = "<xml>" + t.block + "</xml>";
        this.block = Blockly.Xml.textToDom(e).childNodes[0]
    }, Entry.Func.prototype.destroy = function () {
        this.blockMenuBlock && this.blockMenuBlock.destroy()
    }, Entry.Func.edit = function (t) {
        t && ("string" == typeof t && (t = Entry.variableContainer.getFunction(/(func_)?(.*)/.exec(t)[2])), this.unbindFuncChangeEvent(), this.unbindWorkspaceStateChangeEvent(), this.cancelEdit(), this.targetFunc = t, !1 !== this.initEditView(t.content) && (Entry.Func.isEdit = !0, this.bindFuncChangeEvent(t), this.updateMenu(), setTimeout(function () {
            var e = Entry.block["func_" + t.id];
            e && e.paramsBackupEvent && e.paramsBackupEvent.notify(), this._backupContent = t.content.stringify()
        }.bind(this), 0)))
    }, Entry.Func.initEditView = function (t) {
        this.menuCode || this.setupMenuCode();
        var e = Entry.getMainWS();
        if (!1 === e.setMode(Entry.Workspace.MODE_OVERLAYBOARD)) return this.endEdit("cancelEdit"), !1;
        e.changeOverlayBoardCode(t), this._workspaceStateEvent = e.changeEvent.attach(this, function (t) {
            this.endEdit(t || "cancelEdit"), e.getMode() === Entry.Workspace.MODE_VIMBOARD && e.blockMenu.banClass("functionInit")
        }), t.board.alignThreads()
    }, Entry.Func.endEdit = function (t) {
        this.unbindFuncChangeEvent(), this.unbindWorkspaceStateChangeEvent();
        var e = this.targetFunc.id;
        switch (this.targetFunc && this.targetFunc.content && this.targetFunc.content.destroyView(), t) {
            case"save":
                this.save();
                break;
            case"cancelEdit":
                this.cancelEdit()
        }
        this._backupContent = null, delete this.targetFunc;
        var n = Entry.block["func_" + e];
        n && n.destroyParamsBackupEvent && n.destroyParamsBackupEvent.notify(), this.updateMenu(), Entry.Func.isEdit = !1
    }, Entry.Func.save = function () {
        this.targetFunc.generateBlock(!0), Entry.variableContainer.saveFunction(this.targetFunc);
        var t = Entry.getMainWS();
        if (t && t.overlayModefrom == Entry.Workspace.MODE_VIMBOARD) {
            var e = {};
            e.boardType = Entry.Workspace.MODE_VIMBOARD, e.textType = Entry.Vim.TEXT_TYPE_PY, e.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(e), Entry.variableContainer.functionAddButton_.addClass("disable")
        }
    }, Entry.Func.syncFuncName = function (t) {
        var e, n = 0;
        e = t.split(" ");
        var r, o = "";
        r = Blockly.mainWorkspace.getAllBlocks();
        for (var a = 0; a < r.length; a++) {
            var s = r[a];
            if ("function_general" === s.type) {
                var i = [];
                i = s.inputList;
                for (var l = 0; l < i.length; l++) (u = i[l]).fieldRow.length > 0 && u.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != u.fieldRow[0].text_ && (o += u.fieldRow[0].text_, o += " ");
                if ((o = o.trim()) === this.srcFName && this.srcFName.split(" ").length == e.length) for (var c = 0; c < i.length; c++) {
                    var u;
                    if ((u = i[c]).fieldRow.length > 0 && u.fieldRow[0] instanceof Blockly.FieldLabel && void 0 != u.fieldRow[0].text_) {
                        if (void 0 === e[n]) {
                            i.splice(c, 1);
                            break
                        }
                        u.fieldRow[0].text_ = e[n], n++
                    }
                }
                o = "", n = 0
            }
        }
        var p = Blockly.Xml.workspaceToDom(Blockly.mainWorkspace);
        Blockly.mainWorkspace.clear(), Blockly.Xml.domToWorkspace(Blockly.mainWorkspace, p)
    }, Entry.Func.cancelEdit = function () {
        if (this.targetFunc) {
            this.targetFunc.block ? this._backupContent && (this.targetFunc.content.load(this._backupContent), Entry.generateFunctionSchema(this.targetFunc.id), Entry.Func.generateWsBlock(this.targetFunc, !0)) : (this._targetFuncBlock.destroy(), delete Entry.variableContainer.functions_[this.targetFunc.id], delete Entry.variableContainer.selected), Entry.variableContainer.updateList();
            var t = Entry.getMainWS();
            if (t && t.overlayModefrom == Entry.Workspace.MODE_VIMBOARD) {
                var e = {};
                e.boardType = Entry.Workspace.MODE_VIMBOARD, e.textType = Entry.Vim.TEXT_TYPE_PY, e.runType = Entry.Vim.WORKSPACE_MODE, Entry.getMainWS().setMode(e), Entry.variableContainer.functionAddButton_.addClass("disable")
            }
        }
    }, Entry.Func.getMenuXml = function () {
        var t = [];
        if (this.targetFunc || (t = t.concat(this.createBtn)), this.targetFunc) {
            var e = this.FIELD_BLOCK;
            e = (e = e.replace("#1", Entry.generateHash())).replace("#2", Entry.generateHash());
            var n = Blockly.Xml.textToDom(e).childNodes;
            t = t.concat(Entry.nodeListToArray(n))
        }
        for (var r in Entry.variableContainer.functions_) {
            var o = Entry.variableContainer.functions_[r];
            if (o === this.targetFunc) {
                var a = Entry.Func.generateBlock(this.targetFunc, Blockly.Xml.workspaceToDom(Entry.Func.workspace), o.id).block;
                t.push(a)
            } else t.push(o.block)
        }
        return t
    }, Entry.Func.syncFunc = function () {
        var t = Entry.Func;
        if (t.targetFunc) {
            var e = t.workspace.topBlocks_[0].toString(), n = t.workspace.topBlocks_.length;
            (t.fieldText != e || t.workspaceLength != n) && Blockly.Block.dragMode_ < 1 && (t.updateMenu(), t.fieldText = e, t.workspaceLength = n)
        }
    }, Entry.Func.setupMenuCode = function () {
        var t = Entry.playground.mainWorkspace;
        if (t) {
            var e = t.getBlockMenu(), n = e.code;
            this._fieldLabel = n.createThread([{
                type: "function_field_label",
                copyable: !1,
                category: "func",
                x: -9999
            }]).getFirstBlock(), this._fieldString = n.createThread([{
                type: "function_field_string",
                category: "func",
                x: -9999,
                copyable: !1,
                params: [{type: this.requestParamBlock("string")}]
            }]).getFirstBlock(), this._fieldBoolean = n.createThread([{
                type: "function_field_boolean",
                copyable: !1,
                category: "func",
                x: -9999,
                params: [{type: this.requestParamBlock("boolean")}]
            }]).getFirstBlock(), this.menuCode = n, e.align()
        }
    }, Entry.Func.refreshMenuCode = function () {
        Entry.playground.mainWorkspace && (this.menuCode || this.setupMenuCode(), this._fieldString.params[0].changeType(this.requestParamBlock("string")), this._fieldBoolean.params[0].changeType(this.requestParamBlock("boolean")))
    }, Entry.Func.requestParamBlock = function (t) {
        var e;
        switch (t) {
            case"string":
                e = Entry.block.function_param_string;
                break;
            case"boolean":
                e = Entry.block.function_param_boolean;
                break;
            default:
                return null
        }
        var n = t + "Param_" + Entry.generateHash();
        return Entry.block[n] = Entry.Func.createParamBlock(n, e, t), n
    }, Entry.Func.registerParamBlock = function (t) {
        var e;
        t && (t.indexOf("stringParam") > -1 ? e = Entry.block.function_param_string : t.indexOf("booleanParam") > -1 && (e = Entry.block.function_param_boolean), e && Entry.Func.createParamBlock(t, e, t))
    }, Entry.Func.createParamBlock = function (t, e, n) {
        n = /string/gi.test(n) ? "function_param_string" : "function_param_boolean";
        var r = function () {
        };
        return r.prototype = e, (r = new r).changeEvent = new Entry.Event, r.template = Lang.template[n], Entry.block[t] = r, r
    }, Entry.Func.updateMenu = function () {
        var t = Entry.getMainWS();
        if (t) {
            var e = t.getBlockMenu();
            this.targetFunc ? (!this.menuCode && this.setupMenuCode(), e.banClass("functionInit", !0), e.unbanClass("functionEdit", !0)) : (!t.isVimMode() && e.unbanClass("functionInit", !0), e.banClass("functionEdit", !0)), "func" === e.lastSelector && e.align()
        }
    }, Entry.Func.prototype.edit = function () {
        Entry.Func.isEdit || (Entry.Func.isEdit = !0, Entry.Func.svg ? this.parentView.appendChild(this.svg) : Entry.Func.initEditView())
    }, Entry.Func.generateBlock = function (t) {
        var e = Entry.block["func_" + t.id], n = {template: e.template, params: e.params}, r = /(%\d)/im,
            o = e.template.split(r), a = "", s = 0, i = 0;
        for (var l in o) {
            var c = o[l];
            if (r.test(c)) {
                var u = Number(c.split("%")[1]) - 1, p = e.params[u];
                "Indicator" === p.type || ("boolean" === p.accept ? (a += Lang.template.function_param_boolean + (s || ""), s++) : (a += Lang.template.function_param_string + (i || ""), i++))
            } else a += c
        }
        return {block: n, description: a}
    }, Entry.Func.prototype.generateBlock = function (t) {
        var e = Entry.Func.generateBlock(this);
        this.block = e.block, this.description = e.description
    }, Entry.Func.generateWsBlock = function (t, e) {
        this.unbindFuncChangeEvent();
        var n = (t = t || this.targetFunc).content.getEventMap("funcDef")[0];
        if (n) {
            for (var r = n.params[0], o = 0, a = 0, s = [], i = "", l = t.hashMap, c = t.paramMap, u = []; r;) {
                var p = r.params[0], _ = p.type;
                switch (r.type) {
                    case"function_field_label":
                        i = i + " " + p;
                        break;
                    case"function_field_boolean":
                        Entry.Mutator.mutate(_, {template: Lang.Blocks.FUNCTION_logical_variable + " " + (o + 1)}), l[_] = !1, c[_] = o + a, o++, s.push({
                            type: "Block",
                            accept: "boolean"
                        }), i += " %" + (o + a), u.push(r.id);
                        break;
                    case"function_field_string":
                        Entry.Mutator.mutate(_, {template: Lang.Blocks.FUNCTION_character_variable + " " + (a + 1)}), l[_] = !1, c[_] = o + a, i += " %" + (o + ++a), s.push({
                            type: "Block",
                            accept: "string"
                        }), u.push(r.id)
                }
                r = r.getOutputBlock()
            }
            i += " %" + (o + a + 1), s.push({type: "Indicator", img: "block_icon/function_03.png", size: 12});
            var d = "func_" + t.id, y = Entry.block[d], g = y.params.slice(0, y.params.length - 1),
                h = s.slice(0, s.length - 1), m = g.length, b = h.length, f = {};
            if (b > m) {
                var E = t.outputBlockIds;
                if (E) {
                    for (var v = 0; E[v] === u[v];) v++;
                    for (var k = 0; E[E.length - k - 1] === u[u.length - k - 1];) k++;
                    f = {type: "insert", startPos: v, endPos: k = u.length - k - 1}
                }
            } else f = b < m ? {type: "cut", pos: b} : {type: "noChange"};
            for (var T in f.isRestore = e, t.outputBlockIds = u, Entry.Mutator.mutate(d, {
                params: s,
                template: i
            }, f), l) if (l[T]) {
                var w = /string/.test(T) ? Lang.Blocks.FUNCTION_character_variable : Lang.Blocks.FUNCTION_logical_variable;
                Entry.Mutator.mutate(T, {template: w})
            } else l[T] = !0;
            this.bindFuncChangeEvent(t)
        }
    }, Entry.Func.bindFuncChangeEvent = function (t) {
        t = t || this.targetFunc, !this._funcChangeEvent && t.content.getEventMap("funcDef")[0].view && (this._funcChangeEvent = t.content.getEventMap("funcDef")[0].view._contents[1].changeEvent.attach(this, this.generateWsBlock))
    }, Entry.Func.unbindFuncChangeEvent = function () {
        this._funcChangeEvent && (this._funcChangeEvent.destroy(), delete this._funcChangeEvent)
    }, Entry.Func.unbindWorkspaceStateChangeEvent = function () {
        var t = this._workspaceStateEvent;
        t && (t.destroy(), delete this._workspaceStateEvent)
    }
}, function (t, e, n) {
    "use strict";
    Entry.EntityObject = function (t) {
        this.parent = t, this.type = t.objectType, this.flip = !1, this.collision = Entry.Utils.COLLISION.NONE, this.id = Entry.generateHash(), this.removed = !1, this.stamps = [], this.shapes = [], "sprite" == this.type ? (this.object = new createjs.Bitmap, this.setInitialEffectValue()) : "textBox" == this.type && (this.object = new createjs.Container, this.textObject = new createjs.Text, this.textObject.font = "20px Nanum Gothic", this.textObject.textBaseline = "middle", this.textObject.textAlign = "center", this.bgObject = new createjs.Shape, this.bgObject.graphics.setStrokeStyle(1).beginStroke("#f00").drawRect(0, 0, 100, 100), this.object.addChild(this.bgObject), this.object.addChild(this.textObject), this.fontType = "Nanum Gothic", this.fontSize = 20, this.fontBold = !1, this.fontItalic = !1, this.underLine = !1, this.strike = !1), this.object.entity = this, this.object.cursor = "pointer", this.object.on("mousedown", function (t) {
            var e = this.entity.parent.id;
            Entry.dispatchEvent("entityClick", this.entity), Entry.stage.isObjectClick = !0, "minimize" != Entry.type && Entry.stage.isEntitySelectable() && (this.offset = {
                x: -this.parent.x + this.entity.getX() - (.75 * t.stageX - 240),
                y: -this.parent.y - this.entity.getY() - (.75 * t.stageY - 135)
            }, this.cursor = "move", this.entity.initCommand(), Entry.container.selectObject(e))
        }), this.object.on("pressup", function (t) {
            Entry.dispatchEvent("entityClickCanceled", this.entity), this.cursor = "pointer", this.entity.checkCommand()
        }), this.object.on("pressmove", function (t) {
            if ("minimize" != Entry.type && Entry.stage.isEntitySelectable()) {
                if (this.entity.parent.getLock()) return;
                this.entity.doCommand(), this.entity.setX(.75 * t.stageX - 240 + this.offset.x), this.entity.setY(-(.75 * t.stageY - 135) - this.offset.y), Entry.stage.updateObject()
            }
        })
    }, Entry.EntityObject.prototype.injectModel = function (t, e) {
        if ("sprite" == this.type) this.setImage(t); else if ("textBox" == this.type) {
            var n = this.parent;
            e.text = e.text || n.text || n.name, this.setFont(e.font), this.setBGColour(e.bgColor), this.setColour(e.colour), this.setUnderLine(e.underLine), this.setStrike(e.strike), this.setText(e.text)
        }
        e && this.syncModel_(e)
    }, Entry.EntityObject.prototype.syncModel_ = function (t) {
        this.setX(t.x), this.setY(t.y), this.setRegX(t.regX), this.setRegY(t.regY), this.setScaleX(t.scaleX), this.setScaleY(t.scaleY), this.setRotation(t.rotation), this.setDirection(t.direction, !0), this.setLineBreak(t.lineBreak), this.setWidth(t.width), this.setHeight(t.height), this.setText(t.text), this.setTextAlign(t.textAlign), this.setFontSize(t.fontSize || this.getFontSize()), this.setVisible(t.visible)
    }, Entry.EntityObject.prototype.initCommand = function () {
        Entry.engine.isState("stop") && (this.isCommandValid = !1, Entry.stateManager && Entry.stateManager.addCommand("edit entity", this, this.restoreEntity, this.toJSON()))
    }, Entry.EntityObject.prototype.doCommand = function () {
        this.isCommandValid = !0
    }, Entry.EntityObject.prototype.checkCommand = function () {
        Entry.engine.isState("stop") && !this.isCommandValid && Entry.dispatchEvent("cancelLastCommand")
    }, Entry.EntityObject.prototype.restoreEntity = function (t) {
        var e = this.toJSON();
        this.syncModel_(t), Entry.dispatchEvent("updateObject"), Entry.stateManager && Entry.stateManager.addCommand("restore object", this, this.restoreEntity, e)
    }, Entry.EntityObject.prototype.setX = function (t) {
        "number" == typeof t && (this.x = t, this.object.x = this.x, !this.isClone && this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0)
    }, Entry.EntityObject.prototype.getX = function (t) {
        return t ? Entry.Utils.toFixed(this.x, t) : this.x
    }, Entry.EntityObject.prototype.setY = function (t) {
        "number" == typeof t && (this.y = t, this.object.y = -this.y, !this.isClone && this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0)
    }, Entry.EntityObject.prototype.getY = function (t) {
        return t ? Entry.Utils.toFixed(this.y, t) : this.y
    }, Entry.EntityObject.prototype.getDirection = function (t) {
        return t ? Entry.Utils.toFixed(this.direction, t) : this.direction
    }, Entry.EntityObject.prototype.setDirection = function (t, e) {
        t || (t = 0), t %= 360, "vertical" != this.parent.getRotateMethod() || e || (this.direction >= 0 && this.direction < 180) != (t >= 0 && t < 180) && (this.setScaleX(-this.getScaleX()), Entry.stage.updateObject(), this.flip = !this.flip), this.direction = t.mod(360), this.object.direction = this.direction, !this.isClone && this.parent.updateRotationView(), Entry.dispatchEvent("updateObject"), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.setRotation = function (t) {
        "free" !== this.parent.getRotateMethod() && (t = 0), this.rotation = t.mod(360), this.object.rotation = this.rotation, this.updateDialog(), !this.isClone && this.parent.updateRotationView(), Entry.dispatchEvent("updateObject"), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getRotation = function (t) {
        return t ? Entry.Utils.toFixed(this.rotation, t) : this.rotation
    }, Entry.EntityObject.prototype.setRegX = function (t) {
        "textBox" == this.type && (t = 0), this.regX = t, this.object.regX = this.regX, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getRegX = function () {
        return this.regX
    }, Entry.EntityObject.prototype.setRegY = function (t) {
        "textBox" == this.type && (t = 0), this.regY = t, this.object.regY = this.regY, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getRegY = function () {
        return this.regY
    }, Entry.EntityObject.prototype.setScaleX = function (t) {
        this.scaleX = t, this.object.scaleX = this.scaleX, this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getScaleX = function () {
        return this.scaleX
    }, Entry.EntityObject.prototype.setScaleY = function (t) {
        this.scaleY = t, this.object.scaleY = this.scaleY, this.parent.updateCoordinateView(), this.updateDialog(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getScaleY = function () {
        return this.scaleY
    }, Entry.EntityObject.prototype.setSize = function (t) {
        t < 1 && (t = 1);
        var e = t / this.getSize();
        this.setScaleX(this.getScaleX() * e), this.setScaleY(this.getScaleY() * e), !this.isClone && this.parent.updateCoordinateView(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getSize = function (t) {
        var e = (this.getWidth() * Math.abs(this.getScaleX()) + this.getHeight() * Math.abs(this.getScaleY())) / 2;
        return t ? Entry.Utils.toFixed(e, t) : e
    }, Entry.EntityObject.prototype.setWidth = function (t) {
        this.width = t, this.object.width = this.width, this.textObject && this.getLineBreak() && (this.textObject.lineWidth = this.width), this.updateDialog(), this.updateBG(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getWidth = function () {
        return this.width
    }, Entry.EntityObject.prototype.setHeight = function (t) {
        this.height = t, this.textObject && (this.object.height = this.height, this.alignTextBox()), this.updateDialog(), this.updateBG(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getHeight = function () {
        return this.height
    }, Entry.EntityObject.prototype.setColour = function (t) {
        this.colour = t || "#000000", this.textObject && (this.textObject.color = this.colour), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getColour = function () {
        return this.colour
    }, Entry.EntityObject.prototype.setBGColour = function (t) {
        this.bgColor = t || "transparent", this.updateBG(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getBGColour = function () {
        return this.bgColor
    }, Entry.EntityObject.prototype.setUnderLine = function (t) {
        void 0 === t && (t = !1), this.underLine = t, this.textObject.underLine = t, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getUnderLine = function () {
        return this.underLine
    }, Entry.EntityObject.prototype.setStrike = function (t) {
        void 0 === t && (t = !1), this.strike = t, this.textObject.strike = t, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getStrike = function () {
        return this.strike
    }, Entry.EntityObject.prototype.getFont = function () {
        var t = [];
        return this.fontBold && t.push("bold"), this.fontItalic && t.push("italic"), t.push(this.getFontSize() + "px"), t.push(this.fontType), t.join(" ")
    }, Entry.EntityObject.prototype.setFont = function (t) {
        if ("textBox" == this.parent.objectType && this.textObject.font !== t) {
            t || (t = "20px Nanum Gothic");
            var e = t.split(" "), n = 0;
            (n = e.indexOf("bold") > -1) && (e.splice(n - 1, 1), this.setFontBold(!0)), (n = e.indexOf("italic") > -1) && (e.splice(n - 1, 1), this.setFontItalic(!0));
            var r = parseInt(e.shift());
            this.setFontSize(r), this.setFontType(e.join(" ")), this.textObject.font = this.getFont(), Entry.stage.update(), this.setWidth(this.textObject.getMeasuredWidth()), this.updateBG(), Entry.stage.updateObject()
        }
    }, Entry.EntityObject.prototype.setLineHeight = function () {
        switch (this.getFontType()) {
            case"Nanum Gothic Coding":
                this.textObject.lineHeight = this.fontSize;
                break;
            default:
                this.textObject.lineHeight = 0
        }
    }, Entry.EntityObject.prototype.syncFont = function () {
        if (this.textObject.font = this.getFont(), this.setLineHeight(), Entry.stage.update(), this.getLineBreak()) {
            if ("Nanum Gothic Coding" == this.fontType) {
                var t = this.textObject.getMeasuredLineHeight();
                this.textObject.y = t / 2 - this.getHeight() / 2 + 10
            }
        } else this.setWidth(this.textObject.getMeasuredWidth()), this.setHeight(this.textObject.getMeasuredHeight());
        Entry.stage.updateObject(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getFontType = function () {
        return this.fontType
    }, Entry.EntityObject.prototype.setFontType = function (t) {
        "textBox" == this.parent.objectType && (t = t || "Nanum Gothic", this.fontType = t, this.syncFont())
    }, Entry.EntityObject.prototype.getFontSize = function (t) {
        return this.fontSize
    }, Entry.EntityObject.prototype.setFontSize = function (t) {
        "textBox" == this.parent.objectType && this.fontSize != t && (this.fontSize = t || 20, this.syncFont(), this.alignTextBox())
    }, Entry.EntityObject.prototype.setFontBold = function (t) {
        this.fontBold = t, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.toggleFontBold = function () {
        return this.fontBold = !this.fontBold, this.syncFont(), this.fontBold
    }, Entry.EntityObject.prototype.setFontItalic = function (t) {
        this.fontItalic = t, Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.toggleFontItalic = function () {
        return this.fontItalic = !this.fontItalic, this.syncFont(), this.fontItalic
    }, Entry.EntityObject.prototype.setFontName = function (t) {
        for (var e = this.textObject.font.split(" "), n = [], r = 0, o = e.length; r < o; r++) ("bold" === e[r] || "italic" === e[r] || e[r].indexOf("px") > -1) && n.push(e[r]);
        this.setFont(n.join(" ") + " " + t)
    }, Entry.EntityObject.prototype.getFontName = function () {
        if ("textBox" == this.type) {
            if (!this.textObject.font) return "";
            for (var t = this.textObject.font.split(" "), e = [], n = 0, r = t.length; n < r; n++) "bold" !== t[n] && "italic" !== t[n] && -1 === t[n].indexOf("px") && e.push(t[n]);
            return e.join(" ").trim()
        }
    }, Entry.EntityObject.prototype.setText = function (t) {
        "textBox" == this.parent.objectType && (void 0 === t && (t = ""), this.text = t, this.textObject.text = this.text, this.lineBreak || (this.setWidth(this.textObject.getMeasuredWidth()), this.parent.updateCoordinateView()), this.updateBG(), Entry.stage.updateObject())
    }, Entry.EntityObject.prototype.getText = function () {
        return this.text
    }, Entry.EntityObject.prototype.setTextAlign = function (t) {
        "textBox" == this.parent.objectType && (void 0 === t && (t = Entry.TEXT_ALIGN_CENTER), this.textAlign = t, this.textObject.textAlign = Entry.TEXT_ALIGNS[this.textAlign], this.alignTextBox(), this.updateBG(), Entry.stage.updateObject())
    }, Entry.EntityObject.prototype.getTextAlign = function () {
        return this.textAlign
    }, Entry.EntityObject.prototype.setLineBreak = function (t) {
        if ("textBox" == this.parent.objectType) {
            void 0 === t && (t = !1);
            var e = this.lineBreak;
            if (this.lineBreak = t, e && !this.lineBreak) this.textObject.lineWidth = null, this.setHeight(this.textObject.getMeasuredLineHeight()), this.setText(this.getText().replace(/\n/g, "")); else if (!e && this.lineBreak && (this.setFontSize(this.getFontSize() * this.getScaleX()), this.setHeight(3 * this.textObject.getMeasuredLineHeight()), this.setWidth(this.getWidth() * this.getScaleX()), this.setScaleX(1), this.setScaleY(1), this.textObject.lineWidth = this.getWidth(), this.alignTextBox(), "Nanum Gothic Coding" == this.fontType)) {
                var n = this.textObject.getMeasuredLineHeight();
                this.textObject.y = n / 2 - this.getHeight() / 2 + 10
            }
            Entry.stage.updateObject()
        }
    }, Entry.EntityObject.prototype.getLineBreak = function () {
        return this.lineBreak
    }, Entry.EntityObject.prototype.setVisible = function (t) {
        return void 0 === t && (t = !0), this.visible = t, this.object.visible = this.visible, this.dialog && this.syncDialogVisible(), Entry.requestUpdate = !0, this.visible
    }, Entry.EntityObject.prototype.getVisible = function () {
        return this.visible
    }, Entry.EntityObject.prototype.setImage = function (t) {
        var e = this;
        delete t._id, Entry.assert("sprite" == this.type, "Set image is only for sprite object"), t.id || (t.id = Entry.generateHash()), this.picture = t;
        var n = this.picture.dimension, r = this.getWidth(), o = this.getHeight(), a = this.getRegX() - r / 2,
            s = this.getRegY() - o / 2;
        this.setWidth(n.width), this.setHeight(n.height), n.scaleX || (n.scaleX = this.getScaleX(), n.scaleY = this.getScaleY()), this.setScaleX(this.scaleX), this.setScaleY(this.scaleY), this.setRegX(this.width / 2 + a), this.setRegY(this.height / 2 + s);
        var i = this.isClone ? t.id : t.id + this.id, l = Entry.container.getCachedPicture(i);
        if (l) p(l); else {
            (l = new Image).onload = function (t) {
                e.removed || Entry.container.cachePicture(i, this), this.onload = null, p(this)
            };
            var c = t.fileurl;
            if (c) l.src = c; else {
                var u = t.filename;
                l.src = Entry.defaultPath + "/uploads/" + u.substring(0, 2) + "/" + u.substring(2, 4) + "/image/" + u + ".png"
            }
            e.object.image = l, e.object.filters && e.object.filters.length ? e.cache() : e.object.uncache()
        }

        function p(t) {
            Entry.image = t, e.object.image = t, e.object.filters && e.object.filters.length ? e.cache() : e.object.uncache(), Entry.requestUpdate = !0
        }

        Entry.dispatchEvent("updateObject")
    }, Entry.EntityObject.prototype.applyFilter = function (t, e) {
        var n = this.effect, r = this.object, o = function (t, e) {
            var n = [];
            for (var r in t) t[r] !== e[r] && n.push(r);
            return n
        }(n, this.getInitialEffectValue());
        (t || 0 !== o.length) && (Array.isArray(e) && (o = o.concat(e)), function (t, e) {
            var n = [], r = Entry.adjustValueWithMaxMin;
            if (o.indexOf("brightness") > -1) {
                t.brightness = t.brightness;
                var a = new createjs.ColorMatrix;
                a.adjustColor(r(t.brightness, -100, 100), 0, 0, 0);
                var s = new createjs.ColorMatrixFilter(a);
                n.push(s)
            }
            if (o.indexOf("hue") > -1) {
                t.hue = t.hue.mod(360);
                var i = new createjs.ColorMatrix;
                i.adjustColor(0, 0, 0, t.hue);
                var l = new createjs.ColorMatrixFilter(i);
                n.push(l)
            }
            if (o.indexOf("hsv") > -1) {
                var c = [1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1],
                    u = 3.6 * t.hsv * 3 * Math.PI / 180, p = Math.cos(u), _ = Math.sin(u), d = Math.abs(t.hsv / 100);
                d > 1 && (d -= Math.floor(d)), d > 0 && d <= .33 ? c = [1, 0, 0, 0, 0, 0, p, _, 0, 0, 0, -1 * _, p, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : d <= .66 ? c = [p, 0, _, 0, 0, 0, 1, 0, 0, 0, _, 0, p, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1] : d <= .99 && (c = [p, _, 0, 0, 0, -1 * _, p, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1]);
                var y = (new createjs.ColorMatrix).concat(c), g = new createjs.ColorMatrixFilter(y);
                n.push(g)
            }
            o.indexOf("alpha") > -1 && (e.alpha = t.alpha = r(t.alpha, 0, 1)), e.filters = n
        }(n, r), this.cache())
    }, Entry.EntityObject.prototype.resetFilter = function () {
        if ("sprite" === this.parent.objectType) {
            var t = this.object;
            t.filters = [], this.setInitialEffectValue(), t.alpha = this.effect.alpha, t.uncache()
        }
    }, Entry.EntityObject.prototype.updateDialog = function () {
        this.dialog && this.dialog.update(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.takeSnapshot = function () {
        this.snapshot_ = this.toJSON(), this.collision = Entry.Utils.COLLISION.NONE
    }, Entry.EntityObject.prototype.loadSnapshot = function () {
        this.snapshot_ && this.syncModel_(this.snapshot_), "sprite" === this.parent.objectType && this.setImage(this.parent.getPicture()), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.removeClone = function (t) {
        if (this.isClone) {
            var e = this.parent.clonedEntities;
            if (!0 !== t) {
                var n = e.indexOf(this);
                n > -1 && e.splice(n, 1)
            } else e.pop();
            Entry.Utils.isFunction(this.clearExecutor) && this.clearExecutor(), this.destroy(!0)
        }
    }, Entry.EntityObject.prototype.clearExecutor = function () {
        this.parent.script.clearExecutorsByEntity(this)
    }, Entry.EntityObject.prototype.toJSON = function () {
        var t = {};
        return t.x = Entry.cutDecimal(this.getX()), t.y = Entry.cutDecimal(this.getY()), t.regX = Entry.cutDecimal(this.getRegX()), t.regY = Entry.cutDecimal(this.getRegY()), t.scaleX = this.getScaleX(), t.scaleY = this.getScaleY(), t.rotation = Entry.cutDecimal(this.getRotation()), t.direction = Entry.cutDecimal(this.getDirection()), t.width = Entry.cutDecimal(this.getWidth()), t.height = Entry.cutDecimal(this.getHeight()), t.font = this.getFont(), t.visible = this.getVisible(), "textBox" == this.parent.objectType && (t.colour = this.getColour(), t.text = this.getText(), t.textAlign = this.getTextAlign(), t.lineBreak = this.getLineBreak(), t.bgColor = this.getBGColour(), t.underLine = this.getUnderLine(), t.strike = this.getStrike(), t.fontSize = this.getFontSize()), t
    }, Entry.EntityObject.prototype.setInitialEffectValue = function () {
        this.effect = this.getInitialEffectValue(), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.getInitialEffectValue = function () {
        return {blur: 0, hue: 0, hsv: 0, brightness: 0, contrast: 0, saturation: 0, alpha: 1}
    }, Entry.EntityObject.prototype.removeBrush = function () {
        this.shapes.map(Entry.stage.selectedObjectContainer.removeChild, Entry.stage.selectedObjectContainer), this.brush = null, this.shapes = []
    }, Entry.EntityObject.prototype.eraseBrush = function () {
        this.shapes.map(Entry.stage.selectedObjectContainer.removeChild, Entry.stage.selectedObjectContainer), this.shapes = [], Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.updateBG = function () {
        if (this.bgObject) {
            this.bgObject.graphics.clear();
            var t = this.getWidth(), e = this.getHeight();
            if (this.bgObject.graphics.setStrokeStyle(1).beginStroke().beginFill(this.getBGColour()).drawRect(-t / 2, -e / 2, t, e), this.getLineBreak()) this.bgObject.x = 0; else switch (this.getTextAlign()) {
                case Entry.TEXT_ALIGN_LEFT:
                    this.bgObject.x = t / 2;
                    break;
                case Entry.TEXT_ALIGN_CENTER:
                    this.bgObject.x = 0;
                    break;
                case Entry.TEXT_ALIGN_RIGHT:
                    this.bgObject.x = -t / 2
            }
        }
    }, Entry.EntityObject.prototype.alignTextBox = function () {
        if ("textBox" == this.type) {
            var t = this.textObject;
            if (this.lineBreak) {
                var e = t.getMeasuredLineHeight();
                switch (t.y = e / 2 - this.getHeight() / 2, "Nanum Gothic Coding" == this.fontType && (t.y = e / 2 - this.getHeight() / 2 + 10), this.textAlign) {
                    case Entry.TEXT_ALIGN_CENTER:
                        t.x = 0;
                        break;
                    case Entry.TEXT_ALIGN_LEFT:
                        t.x = -this.getWidth() / 2;
                        break;
                    case Entry.TEXT_ALIGN_RIGHT:
                        t.x = this.getWidth() / 2
                }
                t.maxHeight = this.getHeight()
            } else t.x = 0, t.y = 0
        }
    }, Entry.EntityObject.prototype.syncDialogVisible = function () {
        this.dialog && (this.dialog.object.visible = this.visible)
    }, Entry.EntityObject.prototype.addStamp = function () {
        var t = new Entry.StampEntity(this.parent, this), e = Entry.stage,
            n = Entry.stage.selectedObjectContainer.getChildIndex(this.object);
        e.loadEntity(t, n), this.stamps.push(t), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.removeStamps = function () {
        this.stamps.map(function (t) {
            t.destroy()
        }), this.stamps = [], Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.destroy = function (t) {
        if (!this.removed) {
            this.removed = !0;
            var e = this.object;
            e && (e.uncache(), e.removeAllEventListeners(), delete e.image, delete e.entity), this.stamps && this.removeStamps(), this.dialog && this.dialog.remove(), this.brush && this.removeBrush(), Entry.stage.unloadEntity(this);
            var n = Entry.container;
            n && n.unCachePictures(this, this.parent.pictures, t)
        }
    }, Entry.EntityObject.prototype.cache = function () {
        this.object && this.object.cache(0, 0, this.getWidth(), this.getHeight()), Entry.requestUpdate = !0
    }, Entry.EntityObject.prototype.reset = function () {
        this.loadSnapshot(), this.resetFilter(), this.dialog && this.dialog.remove(), this.shapes.length && this.removeBrush()
    }
}, function (t, e, n) {
    "use strict";
    var r;
    Entry.Engine = function () {
        function t(t) {
            var e = t.keyCode || t.which, n = Entry.stage.inputField;
            32 == e && n && n.hasFocus() || [37, 38, 39, 40, 32].indexOf(e) > -1 && t.preventDefault()
        }

        this.state = "stop", this.popup = null, this.isUpdating = !0, this.speeds = [1, 15, 30, 45, 60], this._mouseMoved = !1, this.attachKeyboardCapture(), Entry.addEventListener("canvasClick", function (t) {
            Entry.engine.fireEvent("mouse_clicked")
        }), Entry.addEventListener("canvasClickCanceled", function (t) {
            Entry.engine.fireEvent("mouse_click_cancled")
        }), Entry.addEventListener("entityClick", function (t) {
            Entry.engine.fireEventOnEntity("when_object_click", t)
        }), Entry.addEventListener("entityClickCanceled", function (t) {
            Entry.engine.fireEventOnEntity("when_object_click_canceled", t)
        }), "phone" != Entry.type && (Entry.addEventListener("stageMouseMove", function (t) {
            this._mouseMoved = !0
        }.bind(this)), Entry.addEventListener("stageMouseOut", function (t) {
            Entry.engine.hideMouseView()
        })), Entry.addEventListener("run", function () {
            $(window).bind("keydown", t)
        }), Entry.addEventListener("stop", function () {
            $(window).unbind("keydown", t)
        }), setInterval(function () {
            this._mouseMoved && (this.updateMouseView(), this._mouseMoved = !1)
        }.bind(this), 100), Entry.message = new Entry.Event(window)
    }, (r = Entry.Engine.prototype).generateView = function (t, e) {
        if (e && "workspace" != e) "minimize" == e ? (this.view_ = t, this.view_.addClass("entryEngine"), this.view_.addClass("entryEngineMinimize"), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonMinimize"), this.maximizeButton.addClass("entryMaximizeButtonMinimize"), this.view_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function (t) {
            Entry.engine.toggleFullScreen()
        }), this.coordinateButton = Entry.createElement("button"), this.coordinateButton.addClass("entryEngineButtonMinimize"), this.coordinateButton.addClass("entryCoordinateButtonMinimize"), this.view_.appendChild(this.coordinateButton), this.coordinateButton.bindOnClick(function (t) {
            this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn"), Entry.stage.toggleCoordinator()
        }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonMinimize"), this.stopButton.addClass("entryStopButtonMinimize"), this.stopButton.addClass("entryRemove"), this.stopButton.innerHTML = Lang.Workspace.stop, this.view_.appendChild(this.stopButton), this.stopButton.bindOnClick(function (t) {
            this.blur(), Entry.engine.toggleStop()
        }), this.pauseButton = Entry.createElement("button"), this.pauseButton.innerHTML = Lang.Workspace.pause, this.pauseButton.addClass("entryEngineButtonMinimize"), this.pauseButton.addClass("entryPauseButtonMinimize"), this.pauseButton.addClass("entryRemove"), this.view_.appendChild(this.pauseButton), this.pauseButton.bindOnClick(function (t) {
            this.blur(), Entry.engine.togglePause()
        }), this.mouseView = Entry.createElement("div"), this.mouseView.addClass("entryMouseViewMinimize"), this.mouseView.addClass("entryRemove"), this.view_.appendChild(this.mouseView), Entry.addEventListener("loadComplete", function () {
            this.runButton = Entry.Dom("div", {
                class: "entryRunButtonBigMinimize",
                parent: $("#entryCanvasWrapper")
            }), this.runButton.bindOnClick(function (t) {
                Entry.engine.toggleRun()
            })
        }.bind(this))) : "phone" == e && (this.view_ = t, this.view_.addClass("entryEngine", "entryEnginePhone"), this.headerView_ = Entry.createElement("div", "entryEngineHeader"), this.headerView_.addClass("entryEngineHeaderPhone"), this.view_.appendChild(this.headerView_), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonPhone", "entryMaximizeButtonPhone"), this.headerView_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function (t) {
            Entry.engine.footerView_.addClass("entryRemove"), Entry.engine.headerView_.addClass("entryRemove"), Entry.launchFullScreen(Entry.engine.view_)
        }), document.addEventListener("fullscreenchange", function (t) {
            Entry.engine.exitFullScreen()
        }), document.addEventListener("webkitfullscreenchange", function (t) {
            Entry.engine.exitFullScreen()
        }), document.addEventListener("mozfullscreenchange", function (t) {
            Entry.engine.exitFullScreen()
        }), this.footerView_ = Entry.createElement("div", "entryEngineFooter"), this.footerView_.addClass("entryEngineFooterPhone"), this.view_.appendChild(this.footerView_), this.runButton = Entry.createElement("button"), this.runButton.addClass("entryEngineButtonPhone", "entryRunButtonPhone"), Entry.objectAddable && this.runButton.addClass("small"), this.runButton.innerHTML = Lang.Workspace.run, this.footerView_.appendChild(this.runButton), this.runButton.bindOnClick(function (t) {
            Entry.engine.toggleRun()
        }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonPhone", "entryStopButtonPhone", "entryRemove"), Entry.objectAddable && this.stopButton.addClass("small"), this.stopButton.innerHTML = Lang.Workspace.stop, this.footerView_.appendChild(this.stopButton), this.stopButton.bindOnClick(function (t) {
            Entry.engine.toggleStop()
        })); else {
            this.view_ = t, this.view_.addClass("entryEngine_w"), this.view_.addClass("entryEngineWorkspace_w");
            var n = Entry.createElement("button");
            this.speedButton = n, this.speedButton.addClass("entrySpeedButtonWorkspace", "entryEngineTopWorkspace", "entryEngineButtonWorkspace_w"), this.view_.appendChild(this.speedButton), this.speedButton.bindOnClick(function (t) {
                Entry.engine.toggleSpeedPanel(), n.blur()
            }), this.maximizeButton = Entry.createElement("button"), this.maximizeButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryMaximizeButtonWorkspace_w"), this.view_.appendChild(this.maximizeButton), this.maximizeButton.bindOnClick(function (t) {
                Entry.engine.toggleFullScreen(), this.blur()
            });
            var r = Entry.createElement("button");
            this.coordinateButton = r, this.coordinateButton.addClass("entryEngineButtonWorkspace_w", "entryEngineTopWorkspace", "entryCoordinateButtonWorkspace_w"), this.view_.appendChild(this.coordinateButton), this.coordinateButton.bindOnClick(function (t) {
                this.hasClass("toggleOn") ? this.removeClass("toggleOn") : this.addClass("toggleOn"), r.blur(), this.blur(), Entry.stage.toggleCoordinator()
            }), this.addButton = Entry.createElement("button"), this.addButton.addClass("entryEngineButtonWorkspace_w"), this.addButton.addClass("entryAddButtonWorkspace_w"), this.addButton.innerHTML = Lang.Workspace.add_object, this.addButton.bindOnClick(function (t) {
                Entry.dispatchEvent("openSpriteManager"), this.blur()
            }), Entry.objectAddable || this.addButton.addClass("entryRemove"), this.view_.appendChild(this.addButton), this.runButton = Entry.createElement("button"), this.runButton.addClass("entryEngineButtonWorkspace_w"), this.runButton.addClass("entryRunButtonWorkspace_w"), this.runButton.innerHTML = Lang.Workspace.run, this.view_.appendChild(this.runButton), this.runButton.bindOnClick(function (t) {
                Entry.do("toggleRun", "runButton")
            }), this.runButton2 = Entry.createElement("button"), this.runButton2.addClass("entryEngineButtonWorkspace_w"), this.runButton2.addClass("entryRunButtonWorkspace_w2"), this.view_.appendChild(this.runButton2), this.runButton2.bindOnClick(function (t) {
                Entry.engine.toggleRun()
            }), this.stopButton = Entry.createElement("button"), this.stopButton.addClass("entryEngineButtonWorkspace_w"), this.stopButton.addClass("entryStopButtonWorkspace_w"), this.stopButton.addClass("entryRemove"), this.stopButton.innerHTML = Lang.Workspace.stop, this.view_.appendChild(this.stopButton), this.stopButton.bindOnClick(function (t) {
                Entry.do("toggleStop", "stopButton")
            }), this.stopButton2 = Entry.createElement("button"), this.stopButton2.addClass("entryEngineButtonWorkspace_w"), this.stopButton2.addClass("entryStopButtonWorkspace_w2"), this.stopButton2.addClass("entryRemove"), this.stopButton2.innerHTML = Lang.Workspace.stop, this.view_.appendChild(this.stopButton2), this.stopButton2.bindOnClick(function (t) {
                this.blur(), Entry.engine.toggleStop()
            }), this.pauseButton = Entry.createElement("button"), this.pauseButton.addClass("entryEngineButtonWorkspace_w"), this.pauseButton.addClass("entryPauseButtonWorkspace_w"), this.pauseButton.addClass("entryRemove"), this.view_.appendChild(this.pauseButton), this.pauseButton.bindOnClick(function (t) {
                this.blur(), Entry.engine.togglePause()
            }), this.pauseButtonFull = Entry.createElement("button"), this.pauseButtonFull.addClass("entryEngineButtonWorkspace_w"), this.pauseButtonFull.addClass("entryPauseButtonWorkspace_full"), this.pauseButtonFull.addClass("entryRemove"), this.view_.appendChild(this.pauseButtonFull), this.pauseButtonFull.bindOnClick(function (t) {
                this.blur(), Entry.engine.togglePause()
            }), this.mouseView = Entry.createElement("div"), this.mouseView.addClass("entryMouseViewWorkspace_w"), this.mouseView.addClass("entryRemove"), this.view_.appendChild(this.mouseView)
        }
    }, r.toggleSpeedPanel = function () {
        if (this.speedPanelOn) this.speedPanelOn = !1, $(Entry.stage.canvas.canvas).animate({top: "24px"}), this.coordinateButton.removeClass("entryRemove"), this.maximizeButton.removeClass("entryRemove"), this.mouseView.removeClass("entryRemoveElement"), $(this.speedLabel_).remove(), delete this.speedLabel_, $(this.speedProgress_).fadeOut(null, function (t) {
            $(this).remove(), delete this.speedProgress_
        }), $(this.speedHandle_).remove(), delete this.speedHandle_; else {
            this.speedPanelOn = !0, $(Entry.stage.canvas.canvas).animate({top: "41px"}), this.coordinateButton.addClass("entryRemove"), this.maximizeButton.addClass("entryRemove"), this.mouseView.addClass("entryRemoveElement"), this.speedLabel_ = Entry.createElement("div", "entrySpeedLabelWorkspace"), this.speedLabel_.innerHTML = Lang.Workspace.speed, this.view_.insertBefore(this.speedLabel_, this.maximizeButton), this.speedProgress_ = Entry.createElement("table", "entrySpeedProgressWorkspace");
            for (var t = Entry.createElement("tr"), e = this.speeds, n = 0; n < 5; n++) !function (n) {
                var r = Entry.createElement("td", "progressCell" + n);
                r.bindOnClick(function () {
                    Entry.engine.setSpeedMeter(e[n])
                }), t.appendChild(r)
            }(n);
            this.view_.insertBefore(this.speedProgress_, this.maximizeButton), this.speedProgress_.appendChild(t), this.speedHandle_ = Entry.createElement("div", "entrySpeedHandleWorkspace");
            var r = (Entry.interfaceState.canvasWidth - 84) / 5;
            $(this.speedHandle_).bind("mousedown.speedPanel touchstart.speedPanel", function (t) {
                if (t.stopPropagation && t.stopPropagation(), t.preventDefault && t.preventDefault(), 0 === t.button || t.originalEvent && t.originalEvent.touches) {
                    Entry.Utils.convertMouseEvent(t);
                    var e = $(document);
                    e.bind("mousemove.speedPanel touchmove.speedPanel", function (t) {
                        t.stopPropagation();
                        var e = Entry.Utils.convertMouseEvent(t), n = Math.floor((e.clientX - 80) / (5 * r) * 5);
                        n < 0 || n > 4 || Entry.engine.setSpeedMeter(Entry.engine.speeds[n])
                    }), e.bind("mouseup.speedPanel touchend.speedPanel", function (t) {
                        $(document).unbind(".speedPanel")
                    })
                }
            }), this.view_.insertBefore(this.speedHandle_, this.maximizeButton), this.setSpeedMeter(Entry.FPS)
        }
    }, r.setSpeedMeter = function (t) {
        var e = this.speeds.indexOf(t);
        if (!(e < 0)) {
            if (e = Math.min(4, e), e = Math.max(0, e), this.speedPanelOn) {
                var n = Entry.interfaceState.canvasWidth;
                this.speedHandle_.style.left = (n - 80) / 10 * (2 * e + 1) + 80 - 9 + "px"
            }
            Entry.FPS != t && (clearInterval(this.ticker), this.ticker = setInterval(this.update, Math.floor(1e3 / t)), Entry.FPS = t)
        }
    }, r.start = function (t) {
        createjs.Ticker.setFPS(Entry.FPS), this.ticker || (this.ticker = setInterval(this.update, Math.floor(1e3 / Entry.FPS)))
    }, r.stop = function () {
        createjs.Ticker.reset(), clearInterval(this.ticker), this.ticker = null
    }, r.update = function () {
        Entry.engine.isState("run") && (Entry.engine.computeObjects(), Entry.hw.update())
    }, r.computeObjects = function () {
        Entry.container.mapObjectOnScene(this.computeFunction)
    }, r.computeFunction = function (t) {
        t.script.tick()
    }, Entry.Engine.computeThread = function (t, e) {
        Entry.engine.isContinue = !0;
        for (var n = !1; e && Entry.engine.isContinue && !n;) {
            Entry.engine.isContinue = !e.isRepeat;
            var r = e.run();
            n = r && r === e, e = r
        }
        return e
    }, r.isState = function (t) {
        return this.state.indexOf(t) > -1
    }, r.run = function () {
        this.isState("run") ? this.toggleStop() : (this.isState("stop") || this.isState("pause")) && this.toggleRun()
    }, r.toggleRun = function (t) {
        var e = Entry.variableContainer, n = Entry.container, r = Entry.getMainWS();
        if ("pause" === this.state) return this.togglePause();
        Entry.Utils.blur(), r && r.syncCode(), Entry.addActivity("run"), "stop" == this.state && (n.mapEntity(function (t) {
            t.takeSnapshot()
        }), e.mapVariable(function (t) {
            t.takeSnapshot()
        }), e.mapList(function (t) {
            t.takeSnapshot()
        }), this.projectTimer.takeSnapshot(), n.inputValue.takeSnapshot(), n.takeSequenceSnapshot(), Entry.scene.takeStartSceneSnapshot(), this.state = "run", this.fireEvent("start"), this.achieveEnabled = !(!1 === t)), this.state = "run", "mobile" == Entry.type && this.view_.addClass("entryEngineBlueWorkspace"), this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.pause), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.pause), this.runButton.addClass("run"), this.runButton.addClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.addButton && (this.addButton.addClass("entryRemove"), Entry.objectAddable && this.pauseButton.removeClass("entryRemove")), this.pauseButton && ("minimize" === Entry.type || Entry.objectAddable) && this.pauseButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.addClass("entryRemove"), this.stopButton2 && this.stopButton2.removeClass("entryRemove"), this.pauseButtonFull && this.pauseButtonFull.removeClass("entryRemove")), this.isUpdating || (this.update(), this.isUpdating = !0), Entry.stage.selectObject(), Entry.dispatchEvent("run")
    }, r.toggleStop = function () {
        var t, e = Entry.container, n = Entry.variableContainer;
        Entry.Utils.blur(), Entry.addActivity("stop"), e.mapEntity(function (t) {
            t.loadSnapshot(), t.object.filters = [], t.resetFilter(), t.dialog && t.dialog.remove(), t.brush && t.removeBrush()
        }), n.mapVariable(function (t) {
            t.loadSnapshot()
        }), n.mapList(function (t) {
            t.loadSnapshot()
        }), this.stopProjectTimer(), e.clearRunningState(), e.loadSequenceSnapshot(), this.projectTimer.loadSnapshot(), e.inputValue.loadSnapshot(), Entry.scene.loadStartSceneSnapshot(), Entry.Func.clearThreads(), createjs.Sound.setVolume(1), createjs.Sound.stop(), Entry.soundInstances = [], this.view_.removeClass("entryEngineBlueWorkspace"), this.runButton && (this.runButton.removeClass("entryRemove"), this.stopButton.addClass("entryRemove"), this.pauseButton && this.pauseButton.addClass("entryRemove"), this.pauseButtonFull && this.pauseButtonFull.addClass("entryRemove"), this.addButton && Entry.objectAddable && this.addButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove"), this.stopButton2 && this.stopButton2.addClass("entryRemove")), this.state = "stop", Entry.dispatchEvent("stop"), Entry.stage.hideInputField(), (t = Entry.getMainWS()) && t.getMode() === Entry.Workspace.MODE_VIMBOARD && t.codeToText()
    }, r.togglePause = function () {
        var t = Entry.engine.projectTimer;
        "pause" == this.state ? (t.pausedTime += (new Date).getTime() - t.pauseStart, t.isPaused ? t.pauseStart = (new Date).getTime() : delete t.pauseStart, this.state = "run", Entry.Utils.recoverSoundInstances(), this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.pause), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.pause), this.runButton.addClass("entryRemove"), this.runButton2 && this.runButton2.addClass("entryRemove"))) : (this.state = "pause", t.isPaused ? (t.pausedTime += (new Date).getTime() - t.pauseStart, t.pauseStart = (new Date).getTime()) : t.pauseStart = (new Date).getTime(), Entry.Utils.pauseSoundInstances(), this.runButton && (this.pauseButton && (this.pauseButton.innerHTML = Lang.Workspace.restart), this.pauseButtonFull && (this.pauseButtonFull.innerHTML = Lang.Workspace.restart), this.runButton.removeClass("entryRemove"), this.stopButton.removeClass("entryRemove"), this.runButton2 && this.runButton2.removeClass("entryRemove")))
    }, r.fireEvent = function (t) {
        "run" === this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEvent, t)
    }, r.raiseEvent = function (t, e) {
        t.parent.script.raiseEvent(e, t)
    }, r.fireEventOnEntity = function (t, e) {
        "run" == this.state && Entry.container.mapEntityIncludeCloneOnScene(this.raiseEventOnEntity, [e, t])
    }, r.raiseEventOnEntity = function (t, e) {
        if (t === e[0]) {
            var n = e[1];
            t.parent.script.raiseEvent(n, t)
        }
    }, r.captureKeyEvent = function (t, e) {
        var n = t.keyCode, r = "workspace" === Entry.type;
        Entry.Utils.isInInput(t) && !e || (17 !== n && t.ctrlKey && r ? 83 == n ? (t.preventDefault(), Entry.dispatchEvent(t.shiftKey ? "saveAsWorkspace" : "saveWorkspace")) : 82 == n ? (t.preventDefault(), Entry.engine.run()) : 90 == n && (t.preventDefault(), Entry.dispatchEvent(t.shiftKey ? "redo" : "undo")) : Entry.engine.isState("run") && (t.preventDefault && t.preventDefault(), Entry.container.mapEntityIncludeCloneOnScene(Entry.engine.raiseKeyEvent, ["keyPress", n])), Entry.engine.isState("stop") && r && n >= 37 && n <= 40 && Entry.stage.moveSprite(t))
    }, r.raiseKeyEvent = function (t, e) {
        var n = e[0], r = String(e[1]);
        return t.parent.script.raiseEvent(n, t, r)
    }, r.updateMouseView = function () {
        var t = Entry.stage.mouseCoordinate;
        this.mouseView.textContent = "X : " + t.x + ", Y : " + t.y, this.mouseView.removeClass("entryRemove")
    }, r.hideMouseView = function () {
        this.mouseView.addClass("entryRemove")
    }, r.toggleFullScreen = function (t) {
        if (this.popup) this.popup.remove(), this.popup = null; else {
            if (this.popup = new Entry.Popup(t), "workspace" != Entry.type) {
                var e = $(document);
                $(this.popup.body_).css("top", e.scrollTop()), $("body").css("overflow", "hidden"), popup.window_.appendChild(Entry.stage.canvas.canvas), popup.window_.appendChild(Entry.engine.runButton[0])
            }
            popup.window_.appendChild(Entry.engine.view_), "workspace" === Entry.type && Entry.targetChecker && popup.window_.appendChild(Entry.targetChecker.getStatusView()[0])
        }
        Entry.windowResized.notify()
    }, r.closeFullScreen = function () {
        this.popup && (this.popup.remove(), this.popup = null), Entry.windowResized.notify()
    }, r.exitFullScreen = function () {
        document.webkitIsFullScreen || document.mozIsFullScreen || document.isFullScreen || (Entry.engine.footerView_.removeClass("entryRemove"), Entry.engine.headerView_.removeClass("entryRemove")), Entry.windowResized.notify()
    }, r.showProjectTimer = function () {
        Entry.engine.projectTimer && this.projectTimer.setVisible(!0)
    }, r.hideProjectTimer = function (t, e) {
        var n = this.projectTimer;
        if (n && n.isVisible() && !this.isState("run")) {
            for (var r = Entry.container.getAllObjects(), o = ["get_project_timer_value", "reset_project_timer", "set_visible_project_timer", "choose_project_timer_action"], a = 0, s = r.length; a < s; a++) for (var i = r[a].script, l = 0; l < o.length; l++) {
                var c = i.getBlockList(!1, o[l]);
                if (e) {
                    var u = c.indexOf(t);
                    u > -1 && c.splice(u, 1)
                }
                if (c.length > 0) return
            }
            n.setVisible(!1)
        }
    }, r.clearTimer = function () {
        clearInterval(this.ticker), clearInterval(this.projectTimer.tick)
    }, r.startProjectTimer = function () {
        var t = this.projectTimer;
        t && (t.start = (new Date).getTime(), t.isInit = !0, t.isPaused = !1, t.pausedTime = 0, t.tick = setInterval(function (t) {
            Entry.engine.updateProjectTimer()
        }, 1e3 / 60))
    }, r.stopProjectTimer = function () {
        var t = this.projectTimer;
        t && (this.updateProjectTimer(0), t.isPaused = !1, t.isInit = !1, t.pausedTime = 0, clearInterval(t.tick))
    }, r.resetTimer = function () {
        var t = this.projectTimer;
        if (t.isInit) {
            var e = t.isPaused;
            delete t.pauseStart, this.updateProjectTimer(0), t.pausedTime = 0, t.isPaused = e, e && (clearInterval(t.tick), t.isInit = !1, delete t.start)
        }
    }, r.updateProjectTimer = function (t) {
        var e = Entry.engine, n = e.projectTimer;
        if (n) {
            var r = (new Date).getTime();
            void 0 === t ? n.isPaused || e.isState("pause") || n.setValue(Math.max((r - (n.start || r) - n.pausedTime) / 1e3, 0)) : (n.setValue(t), n.pausedTime = 0, n.start = r)
        }
    }, r.raiseMessage = function (t) {
        return Entry.message.notify(Entry.variableContainer.getMessage(t)), Entry.container.mapEntityIncludeCloneOnScene(this.raiseKeyEvent, ["when_message_cast", t])
    }, r.getDom = function (t) {
        if (t.length >= 1) switch (t.shift()) {
            case"runButton":
                return this.runButton;
            case"stopButton":
                return this.stopButton
        }
    }, r.attachKeyboardCapture = function () {
        Entry.keyPressed && (this._keyboardEvent && this.detachKeyboardCapture(), this._keyboardEvent = Entry.keyPressed.attach(this, this.captureKeyEvent))
    }, r.detachKeyboardCapture = function () {
        Entry.keyPressed && this._keyboardEvent && (this._keyboardEvent.destroy(), delete this._keyboardEvent)
    }, r.applyOption = function () {
        Entry.objectAddable ? (this.runButton.addClass("small"), this.stopButton.addClass("small"), this.addButton.removeClass("entryRemove")) : (this.runButton.removeClass("small"), this.stopButton.removeClass("small"), this.addButton.addClass("entryRemove"))
    }
}, function (t, e, n) {
    "use strict";
    n(85), Entry.DoneProject = function (t) {
        this.generateView(t)
    };
    var r = Entry.DoneProject.prototype;
    r.init = function (t) {
        this.projectId = t
    }, r.generateView = function (t) {
        var e = Entry.createElement("div");
        e.addClass("entryContainerDoneWorkspace"), this.doneContainer = e, this.doneContainer;
        var n = Entry.createElement("iframe");
        n.setAttribute("id", "doneProjectframe"), n.setAttribute("frameborder", 0), n.setAttribute("src", "/api/iframe/project/" + t), this.doneProjectFrame = n, this.doneContainer.appendChild(n), e.addClass("entryRemove")
    }, r.getView = function () {
        return this.doneContainer
    }, r.resize = function () {
        document.getElementById("entryContainerWorkspaceId");
        var t = document.getElementById("doneProjectframe"), e = this.doneContainer.offsetWidth;
        t.width = e + "px", t.height = 9 * e / 16 + "px"
    }
}, function (t, e, n) {
    "use strict";
    Entry.Dialog = function (t, e, n, r) {
        t.dialog && t.dialog.remove(), t.dialog = this, this.parent = t, this.padding = 10, this.border = 2, "number" == typeof e && (e = String(e)), Entry.console && Entry.console.print(e, n), e = e.match(/.{1,15}/g).join("\n"), this.message_ = e, this.mode_ = n, "speak" !== n && "ask" !== n || this.generateSpeak(), r || Entry.stage.loadDialog(this)
    }, Entry.Dialog.prototype.generateSpeak = function () {
        this.object = new createjs.Container;
        var t = new createjs.Text;
        t.font = "15px NanumGothic", t.textBaseline = "top", t.textAlign = "left", t.text = this.message_;
        var e = t.getTransformedBounds(), n = e.height, r = e.width >= 10 ? e.width : 17, o = new createjs.Shape;
        o.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").rr(-this.padding, -this.padding, r + 2 * this.padding, n + 2 * this.padding, this.padding), this.object.addChild(o), this.object.regX = r / 2, this.object.regY = n / 2, this.width = r, this.height = n, this.notch = this.createSpeakNotch("ne"), this.update(), this.object.addChild(this.notch), this.object.addChild(t), Entry.requestUpdate = !0
    }, Entry.Dialog.prototype.update = function () {
        var t = this.parent.object.getTransformedBounds();
        if (!t && "textBox" === this.parent.type) {
            if (this._isNoContentTried) return void delete this._isNoContentTried;
            this.parent.setText(" "), t = this.parent.object.getTransformedBounds(), this._isNoContentTried = !0
        }
        var e = "";
        t.y - 20 - this.border > -135 ? (this.object.y = Math.max(t.y - this.height / 2 - 20 - this.padding, this.height / 2 - 135 + this.padding), e += "n") : (this.object.y = Math.min(t.y + t.height + this.height / 2 + 20 + this.padding, 135 - this.height / 2 - this.padding), e += "s"), t.x + t.width / 2 < 0 ? (this.object.x = Math.min(t.x + t.width + this.width / 2, 240 - this.width / 2 - this.padding), e += "e") : (this.object.x = Math.max(t.x - this.width / 2, this.width / 2 - 240 + this.padding), e += "w"), this.notch.type != e && (this.object.removeChild(this.notch), this.notch = this.createSpeakNotch(e), this.object.addChild(this.notch)), this._isNoContentTried && this.parent.setText(""), Entry.requestUpdate = !0
    }, Entry.Dialog.prototype.createSpeakNotch = function (t) {
        var e = new createjs.Shape;
        return e.type = t, "ne" == t ? e.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, this.height + this.padding - 1.5).lt(-10, this.height + this.padding + 20).lt(20, this.height + this.padding - 1.5) : "nw" == t ? e.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, this.height + this.padding - 1.5).lt(this.width + 10, this.height + this.padding + 20).lt(this.width - 20, this.height + this.padding - 1.5) : "se" == t ? e.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(0, 1.5 - this.padding).lt(-10, -this.padding - 20).lt(20, 1.5 - this.padding) : "sw" == t && e.graphics.f("#f5f5f5").ss(2, "round").s("#6FC0DD").mt(this.width, 1.5 - this.padding).lt(this.width + 10, -this.padding - 20).lt(this.width - 20, 1.5 - this.padding), e
    }, Entry.Dialog.prototype.remove = function () {
        Entry.stage.unloadDialog(this), this.parent.dialog = null, Entry.requestUpdate = !0
    }
}, function (t, e, n) {
    "use strict";
    Entry.Container = function () {
        this.objects_ = [], this.cachedPicture = {}, this.inputValue = {}, this.copiedObject = null, this.currentObjects_ = null, this._extensionObjects = [], Entry.addEventListener("workspaceChangeMode", function () {
            var t = Entry.getMainWS();
            t && t.getMode() === Entry.Workspace.MODE_VIMBOARD && this.objects_.forEach(function (t) {
                t.script && t.script.destroyView()
            })
        }.bind(this)), Entry.addEventListener("run", this.disableSort.bind(this)), Entry.addEventListener("stop", this.enableSort.bind(this))
    }, Entry.Container.prototype.generateView = function (t, e) {
        var n = this;
        this._view = t, this._view.addClass("entryContainer"), this._view.addClass("entryContainerWorkspace"), this._view.setAttribute("id", "entryContainerWorkspaceId");
        var r = Entry.createElement("div");
        r.addClass("entryAddObjectWorkspace"), r.innerHTML = Lang.Workspace.add_object, r.bindOnClick(function (t) {
            Entry.dispatchEvent("openSpriteManager")
        });
        var o = Entry.createElement("div"), a = "entryContainerListWorkspaceWrapper";
        Entry.isForLecture && (a += " lecture"), o.addClass(a), Entry.Utils.disableContextmenu(o), $(o).bind("mousedown touchstart", function (t) {
            var e = null, r = $(document), o = t.type, a = !1;
            if (Entry.Utils.isRightButton(t)) return n._rightClick(t), void(a = !0);
            var s = {x: t.clientX, y: t.clientY};
            "touchstart" !== o || a || (t.stopPropagation(), t = Entry.Utils.convertMouseEvent(t), e = setTimeout(function () {
                e && (e = null, n._rightClick(t))
            }, 1e3), r.bind("mousemove.container touchmove.container", function (t) {
                s && Math.sqrt(Math.pow(t.pageX - s.x, 2) + Math.pow(t.pageY - s.y, 2)) > 5 && e && (clearTimeout(e), e = null)
            }), r.bind("mouseup.container touchend.container", function (t) {
                t.stopPropagation(), r.unbind(".container"), e && (clearTimeout(e), e = null)
            }))
        }), this._view.appendChild(o);
        var s = Entry.createElement("ul");
        o.appendChild(s), this._extensionListView = Entry.Dom(s, {class: "entryContainerExtensions"});
        var i = Entry.createElement("ul");
        i.addClass("entryContainerListWorkspace"), o.appendChild(i), this.listView_ = i, this.enableSort()
    }, Entry.Container.prototype.enableSort = function () {
        var t = this.listView_;
        $(t).sortable({
            start: function (t, e) {
                e.item.data("start_pos", e.item.index())
            }, stop: function (t, e) {
                Entry.container.moveElement(e.item.data("start_pos"), e.item.index())
            }, axis: "y", cancel: "input.selectedEditingObject"
        })
    }, Entry.Container.prototype.disableSort = function () {
        var t = this.listView_;
        $(t).sortable("destroy")
    }, Entry.Container.prototype.updateListView = function () {
        if (this.listView_) {
            for (var t = this.listView_; t.hasChildNodes();) t.removeChild(t.lastChild);
            var e = document.createDocumentFragment(), n = this.getCurrentObjects().slice();
            return n.filter(function (t) {
                return void 0 !== t.index
            }).length === n.length && (n = n.sort(function (t, e) {
                return t.index - e.index
            })), n.forEach(function (t) {
                !t.view_ && t.generateView(), e.appendChild(t.view_)
            }), t.appendChild(e), Entry.stage.sortZorder(), !0
        }
    }, Entry.Container.prototype.setObjects = function (t) {
        for (var e in t) {
            var n = new Entry.EntryObject(t[e]);
            this.objects_.push(n)
        }
        this.updateObjectsOrder(), this.updateListView(), Entry.variableContainer.updateViews();
        var r = Entry.type;
        if ("workspace" == r || "phone" == r) {
            var o = this.getCurrentObjects()[0];
            o && this.selectObject(o.id)
        }
    }, Entry.Container.prototype.getPictureElement = function (t, e) {
        var n = this.getObject(e).getPicture(t);
        if (n) return n.view;
        throw new Error("No picture found")
    }, Entry.Container.prototype.setPicture = function (t) {
        var e = this.getObject(t.objectId);
        for (var n in e.pictures) if (t.id === e.pictures[n].id) {
            var r = {};
            return r.dimension = t.dimension, r.id = t.id, r.filename = t.filename, r.fileurl = t.fileurl, r.name = t.name, r.view = e.pictures[n].view, void(e.pictures[n] = r)
        }
        throw new Error("No picture found")
    }, Entry.Container.prototype.selectPicture = function (t, e) {
        var n = this.getObject(e), r = n.getPicture(t);
        if (r) return n.selectedPicture = r, n.entity.setImage(r), n.updateThumbnailView(), n.id;
        throw new Error("No picture found")
    }, Entry.Container.prototype.addObject = function (t, e, n) {
        var r = new Entry.EntryObject(t);
        r.name = Entry.getOrderedName(r.name, this.objects_), Entry.stateManager && Entry.stateManager.addCommand("add object", this, this.removeObject, r), r.scene = r.scene || Entry.scene.selectedScene;
        var o = t.sprite.category;
        return o = o && "background" == o.main, "number" == typeof e ? o ? (r.setLock(!0), this.objects_.push(r)) : this.objects_.splice(e, 0, r) : o ? this.objects_.push(r) : this.objects_.unshift(r), n || (r.generateView(), this.setCurrentObjects(), this.selectObject(r.id), this.updateObjectsOrder(), this.updateListView(), Entry.variableContainer.updateViews()), new Entry.State(this, this.removeObject, r)
    }, Entry.Container.prototype.renderObject = function (t) {
        t.generateView(), this.setCurrentObjects(), this.selectObject(t.id)
    }, Entry.Container.prototype.addExtension = function (t) {
        return this._extensionObjects.push(t), this._extensionListView && this._extensionListView.append(t.renderView()), t
    }, Entry.Container.prototype.removeExtension = function (t) {
        if (t) {
            var e = this._extensionObjects, n = e.indexOf(t);
            n > -1 && e.splice(n, 1), t.destroy && t.destroy()
        }
    }, Entry.Container.prototype.addCloneObject = function (t, e, n) {
        var r = t.toJSON(!0);
        return r.script = o("sounds", t, r), r.script = o("pictures", t, r), Entry.variableContainer.addCloneLocalVariables({
            objectId: t.id,
            newObjectId: r.id,
            json: r
        }), r.scene = e || Entry.scene.selectedScene, this.addObject(r, null, n), this.getObject(r.id);

        function o(t, e, n) {
            var r = n.sprite[t], o = n.script;
            return (e[t] || []).forEach(function (t, e) {
                o = o.replace(new RegExp(t.id, "g"), r[e].id)
            }), o
        }
    }, Entry.Container.prototype.removeObject = function (t, e) {
        var n = this.objects_, r = n.indexOf(t), o = t.toJSON();
        Entry.stateManager && Entry.stateManager.addCommand("remove object", this, this.addObject, o, r);
        var a = new Entry.State(this.addObject, o, r);
        if (t.destroy(), n.splice(r, 1), Entry.variableContainer.removeLocalVariables(t.id), e) return a;
        this.setCurrentObjects(), Entry.stage.sortZorder();
        var s = this.getCurrentObjects();
        return s.length ? this.selectObject(s[0].id) : (this.selectObject(), Entry.playground.flushPlayground()), Entry.toast.success(Lang.Workspace.remove_object, t.name + " " + Lang.Workspace.remove_object_msg), Entry.playground.reloadPlayground(), a
    }, Entry.Container.prototype.selectObject = function (t, e) {
        var n = this.getObject(t), r = Entry.getMainWS();
        if (e && n && Entry.scene.selectScene(n.scene), this.mapObjectOnScene(function (t) {
                !t.view_ && t.generateView && t.generateView();
                var e = t === n, r = t.view_;
                e ? r && r.addClass("selectedObject") : r && r.removeClass("selectedObject"), t.isSelected_ = e
            }), n) {
            if (r && r.vimBoard && Entry.isTextMode) {
                var o = r.vimBoard._currentObject, a = r.vimBoard._parser;
                if (o && !this.getObject(o.id)) ; else if (a && a._onError) {
                    if (o && n.id != o.id) {
                        if (Entry.scene.isSceneCloning) return void Entry.container.selectObject(o.id);
                        try {
                            r._syncTextCode()
                        } catch (t) {
                        }
                        return a && !a._onError ? void Entry.container.selectObject(n.id, !0) : void Entry.container.selectObject(o.id, !0)
                    }
                } else if (o && n.id != o.id) {
                    if (Entry.scene.isSceneCloning) return void Entry.container.selectObject(o.id);
                    try {
                        r._syncTextCode()
                    } catch (t) {
                    }
                    if (a && a._onError) return void Entry.container.selectObject(o.id, !0)
                }
            }
        } else r && r.vimBoard && r.vimBoard.clearText();
        Entry.playground && Entry.playground.injectObject(n), "minimize" != Entry.type && Entry.engine.isState("stop") && Entry.stage.selectObject(n)
    }, Entry.Container.prototype.getAllObjects = function () {
        return this.objects_
    }, Entry.Container.prototype.getObject = function (t) {
        !t && Entry.playground && Entry.playground.object && (t = Entry.playground.object.id);
        for (var e = this.objects_.length, n = 0; n < e; n++) {
            var r = this.objects_[n];
            if (r.id == t) return r
        }
    }, Entry.Container.prototype.getEntity = function (t) {
        var e = this.getObject(t);
        if (e) return e.entity;
        Entry.toast.alert(Lang.Msgs.runtime_error, Lang.Workspace.object_not_found, !0)
    }, Entry.Container.prototype.getVariable = function (t) {
        for (var e = 0; e < this.variables_.length; e++) {
            var n = this.variables_[e];
            if (n.getId() == t) return n;
            if (n.getName() == t) return n
        }
    }, Entry.Container.prototype.moveElement = function (t, e, n) {
        var r, o, a;
        return a = this.getCurrentObjects(), r = this.getAllObjects().indexOf(a[t]), o = this.getAllObjects().indexOf(a[e]), !n && Entry.stateManager && Entry.stateManager.addCommand("reorder object", Entry.container, Entry.container.moveElement, o, r, !0), this.objects_.splice(o, 0, this.objects_.splice(r, 1)[0]), this.setCurrentObjects(), Entry.container.updateListView(), Entry.requestUpdate = !0, new Entry.State(Entry.container, Entry.container.moveElement, o, r, !0)
    }, Entry.Container.prototype.getDropdownList = function (t, e) {
        var n = [];
        switch (t) {
            case"sprites":
                for (var r = (a = this.getCurrentObjects()).length, o = 0; o < r; o++) e = a[o], n.push([e.name, e.id]);
                break;
            case"spritesWithMouse":
                for (r = (a = this.getCurrentObjects()).length, o = 0; o < r; o++) e = a[o], n.push([e.name, e.id]);
                n.push([Lang.Blocks.mouse_pointer, "mouse"]);
                break;
            case"spritesWithSelf":
                for (r = (a = this.getCurrentObjects()).length, o = 0; o < r; o++) e = a[o], n.push([e.name, e.id]);
                n.push([Lang.Blocks.self, "self"]);
                break;
            case"textBoxWithSelf":
                this.getCurrentObjects().forEach(function (t) {
                    "textBox" === t.objectType && n.push([t.name, t.id])
                }), n.push([Lang.Blocks.self, "self"]);
                break;
            case"collision":
                var a;
                for (n.push([Lang.Blocks.mouse_pointer, "mouse"]), r = (a = this.getCurrentObjects()).length, o = 0; o < r; o++) e = a[o], n.push([e.name, e.id]);
                n.push([Lang.Blocks.wall, "wall"]), n.push([Lang.Blocks.wall_up, "wall_up"]), n.push([Lang.Blocks.wall_down, "wall_down"]), n.push([Lang.Blocks.wall_right, "wall_right"]), n.push([Lang.Blocks.wall_left, "wall_left"]);
                break;
            case"pictures":
                if (!(e = Entry.playground.object || e)) break;
                var s = e.pictures || [];
                for (o = 0; o < s.length; o++) {
                    var i = s[o];
                    n.push([i.name, i.id])
                }
                break;
            case"messages":
                var l = Entry.variableContainer.messages_;
                for (o = 0; o < l.length; o++) {
                    var c = l[o];
                    n.push([c.name, c.id])
                }
                break;
            case"variables":
                var u = Entry.variableContainer.variables_;
                for (o = 0; o < u.length; o++) {
                    var p = u[o];
                    p.object_ && Entry.playground.object && p.object_ != Entry.playground.object.id || n.push([p.getName(), p.getId()])
                }
                n && 0 !== n.length || n.push([Lang.Blocks.VARIABLE_variable, "null"]);
                break;
            case"lists":
                e = Entry.playground.object || e;
                var _ = Entry.variableContainer.lists_;
                for (o = 0; o < _.length; o++) {
                    var d = _[o];
                    d.object_ && e && d.object_ != e.id || n.push([d.getName(), d.getId()])
                }
                n && 0 !== n.length || n.push([Lang.Blocks.VARIABLE_list, "null"]);
                break;
            case"scenes":
                var y = Entry.scene.scenes_;
                for (o = 0; o < y.length; o++) {
                    var g = y[o];
                    n.push([g.name, g.id])
                }
                break;
            case"sounds":
                if (!(e = Entry.playground.object || e)) break;
                var h = e.sounds || [];
                for (o = 0; o < h.length; o++) {
                    var m = h[o];
                    n.push([m.name, m.id])
                }
                break;
            case"clone":
                n.push([Lang.Blocks.oneself, "self"]), this.getCurrentObjects().forEach(function (t) {
                    n.push([t.name, t.id])
                });
                break;
            case"objectSequence":
                for (r = this.getCurrentObjects().length, o = 0; o < r; o++) n.push([(o + 1).toString(), o.toString()])
        }
        return n.length || (n = [[Lang.Blocks.no_target, "null"]]), n
    }, Entry.Container.prototype.clearRunningState = function () {
        this.mapObject(function (t) {
            t.clearExecutor()
        })
    }, Entry.Container.prototype.clearRunningStateOnScene = function () {
        this.mapObjectOnScene(function (t) {
            t.clearExecutor()
        })
    }, Entry.Container.prototype.mapObject = function (t, e) {
        for (var n = this.objects_.length, r = [], o = 0; o < this._extensionObjects.length; o++) {
            var a = this._extensionObjects[o];
            r.push(t(a, e))
        }
        for (o = 0; o < n; o++) a = this.objects_[o], r.push(t(a, e));
        return r
    }, Entry.Container.prototype.mapObjectOnScene = function (t, e) {
        for (var n = this.getCurrentObjects(), r = n.length, o = [], a = 0; a < this._extensionObjects.length; a++) {
            var s = this._extensionObjects[a];
            o.push(t(s, e))
        }
        for (a = 0; a < r; a++) s = n[a], o.push(t(s, e));
        return o
    }, Entry.Container.prototype.mapEntity = function (t, e) {
        for (var n = this.objects_.length, r = [], o = 0; o < n; o++) {
            var a = this.objects_[o].entity;
            r.push(t(a, e))
        }
        return r
    }, Entry.Container.prototype.mapEntityOnScene = function (t, e) {
        for (var n = this.getCurrentObjects(), r = n.length, o = [], a = 0; a < r; a++) {
            var s = n[a].entity;
            o.push(t(s, e))
        }
        return o
    }, Entry.Container.prototype.mapEntityIncludeClone = function (t, e) {
        for (var n = this.objects_, r = n.length, o = [], a = 0; a < r; a++) {
            var s = n[a], i = s.clonedEntities.length;
            o.push(t(s.entity, e));
            for (var l = 0; l < i; l++) {
                var c = s.clonedEntities[l];
                c && !c.isStamp && o.push(t(c, e))
            }
        }
        return o
    }, Entry.Container.prototype.mapEntityIncludeCloneOnScene = function (t, e) {
        for (var n = this.getCurrentObjects(), r = n.length, o = [], a = 0; a < this._extensionObjects.length; a++) {
            var s = this._extensionObjects[a];
            o.push(t(s.entity, e))
        }
        for (a = 0; a < r; a++) s = n[a], o.push(t(s.entity, e)), s.getClonedEntities().forEach(function (n) {
            o.push(t(n, e))
        });
        return o
    }, Entry.Container.prototype.getCachedPicture = function (t) {
        return Entry.assert("string" == typeof t, "pictureId must be string"), this.cachedPicture[t]
    }, Entry.Container.prototype.cachePicture = function (t, e) {
        this.cachedPicture[t] = e
    }, Entry.Container.prototype.unCachePictures = function (t, e, n) {
        var r;
        t && e && (e.constructor !== Array && (e = [e]), r = t.constructor === Entry.EntityObject ? t.id : t, e.forEach(function (t) {
            var e = t.id + (n ? "" : r);
            delete this.cachedPicture[e]
        }.bind(this)))
    }, Entry.Container.prototype.toJSON = function () {
        for (var t = [], e = this.objects_.length, n = 0; n < e; n++) {
            var r = this.objects_[n];
            t.push(r.toJSON())
        }
        return t
    }, Entry.Container.prototype.takeSequenceSnapshot = function () {
        for (var t = this.objects_.length, e = this.objects_, n = 0; n < t; n++) e[n].index = n
    }, Entry.Container.prototype.loadSequenceSnapshot = function () {
        for (var t = this.objects_.length, e = new Array(t), n = 0; n < t; n++) {
            var r = this.objects_[n];
            e[void 0 !== r.index ? r.index : n] = r, delete r.index
        }
        this.objects_ = e, this.setCurrentObjects(), Entry.stage.sortZorder(), this.updateListView()
    }, Entry.Container.prototype.getInputValue = function () {
        return this.inputValue.getValue()
    }, Entry.Container.prototype.setInputValue = function (t) {
        this.inputValue.complete || (t ? this.inputValue.setValue(t) : this.inputValue.setValue(0), Entry.stage.hideInputField(), Entry.dispatchEvent("answerSubmitted"), Entry.console && Entry.console.stopInput(t), this.inputValue.complete = !0)
    }, Entry.Container.prototype.resetSceneDuringRun = function () {
        Entry.engine.isState("run") && (this.mapEntityOnScene(function (t) {
            t.reset()
        }), this.clearRunningStateOnScene(), Entry.stage.hideInputField())
    }, Entry.Container.prototype.setCopiedObject = function (t) {
        this.copiedObject = t
    }, Entry.Container.prototype.updateObjectsOrder = function () {
        for (var t = Entry.scene.getScenes(), e = [], n = 0; n < t.length; n++) for (var r = this.getSceneObjects(t[n]), o = 0; o < r.length; o++) e.push(r[o]);
        this.objects_ = e
    }, Entry.Container.prototype.getSceneObjects = function (t) {
        t = t || Entry.scene.selectedScene;
        for (var e = [], n = this.getAllObjects(), r = 0; r < n.length; r++) t.id == n[r].scene.id && e.push(n[r]);
        return e
    }, Entry.Container.prototype.setCurrentObjects = function () {
        this.currentObjects_ = this.getSceneObjects()
    }, Entry.Container.prototype.getCurrentObjects = function () {
        var t = this.currentObjects_;
        return t && 0 !== t.length || this.setCurrentObjects(), this.currentObjects_ || []
    }, Entry.Container.prototype.getProjectWithJSON = function (t) {
        return t.objects = Entry.container.toJSON(), t.variables = Entry.variableContainer.getVariableJSON(), t.messages = Entry.variableContainer.getMessageJSON(), t.scenes = Entry.scene.toJSON(), t
    }, Entry.Container.prototype.blurAllInputs = function () {
        this.getSceneObjects().map(function (t) {
            for (var e = t.view_.getElementsByTagName("input"), n = 0, r = e.length; n < r; n++) e[n].blur()
        })
    }, Entry.Container.prototype.showProjectAnswer = function () {
        var t = this.inputValue;
        t && t.setVisible(!0)
    }, Entry.Container.prototype.hideProjectAnswer = function (t, e) {
        var n = this.inputValue;
        if (n && n.isVisible() && !Entry.engine.isState("run")) {
            for (var r = Entry.container.getAllObjects(), o = ["ask_and_wait", "get_canvas_input_value", "set_visible_answer"], a = 0, s = r.length; a < s; a++) for (var i = r[a].script, l = 0; l < o.length; l++) {
                var c = i.getBlockList(!1, o[l]);
                if (e) {
                    var u = c.indexOf(t);
                    u > -1 && c.splice(u, 1)
                }
                if (c.length > 0) return
            }
            n.setVisible(!1)
        }
    }, Entry.Container.prototype.getView = function () {
        return this._view
    }, Entry.Container.prototype.resize = function () {
    }, Entry.Container.prototype._rightClick = function (t) {
        t.stopPropagation && t.stopPropagation();
        var e = [{
            text: Lang.Blocks.Paste_blocks,
            enable: !Entry.engine.isState("run") && !!Entry.container.copiedObject,
            callback: function () {
                Entry.container.copiedObject ? Entry.container.addCloneObject(Entry.container.copiedObject) : Entry.toast.alert(Lang.Workspace.add_object_alert, Lang.Workspace.object_not_found_for_paste)
            }
        }];
        Entry.ContextMenu.show(e, "workspace-contextmenu", {x: t.clientX, y: t.clientY})
    }, Entry.Container.prototype.removeFuncBlocks = function (t) {
        this.objects_.forEach(function (e) {
            e.script.removeBlocksByType(t)
        })
    }, Entry.Container.prototype.clear = function () {
        this.objects_.map(function (t) {
            t.destroy()
        }), this.objects_ = [], this._extensionObjects.map(function (t) {
            t.destroy()
        }), this._extensionObjects = [], Entry.playground.flushPlayground()
    }, Entry.Container.prototype.selectNeighborObject = function (t) {
        var e = this.getCurrentObjects();
        if (e && 0 !== e.length) {
            var n = e.indexOf(Entry.playground.object), r = e.length;
            switch (t) {
                case"prev":
                    --n < 0 && (n = e.length - 1);
                    break;
                case"next":
                    n = ++n % r
            }
            var o = e[n];
            o && Entry.container.selectObject(o.id)
        }
    }, Entry.Container.prototype.getObjectIndex = function (t) {
        return this.objects_.indexOf(this.getObject(t))
    }, Entry.Container.prototype.getDom = function (t) {
        if (t.length >= 1) switch (t.shift()) {
            case"objectIndex":
                return this.objects_[t.shift()].getDom(t)
        }
    }, Entry.Container.prototype.isSceneObjectsExist = function () {
        var t = this.getSceneObjects();
        return !(!t || !t.length)
    }, Entry.Container.prototype.adjustClonedValues = function (t, e) {
        if (t && e) {
            var n = this;
            e.forEach(function (r) {
                n.getObject(r).script.getBlockList().forEach(function (n) {
                    if (n && n.params) {
                        var r = !1, o = n.params.map(function (n) {
                            if ("string" != typeof n) return n;
                            var o = t.indexOf(n);
                            return o < 0 ? n : (r = !0, e[o])
                        });
                        r && n.set({params: o})
                    }
                })
            })
        }
    }, Entry.Container.prototype.getBlockList = function () {
        var t = [];
        return this.objects_.forEach(function (e) {
            t = t.concat(e.script.getBlockList())
        }), t
    }, Entry.Container.prototype.scrollToObject = function (t) {
        var e = this.getObject(t);
        e.view_ && e.view_.scrollIntoView(), document.body.scrollIntoView()
    }
}, , , , , function (t, e) {
}]);